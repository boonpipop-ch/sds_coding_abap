FUNCTION Z_SDSFI_GEN_FILENAME.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IM_MODULE) TYPE  CHAR2
*"     REFERENCE(IM_EXTENSION) TYPE  TEXT10
*"     REFERENCE(IM_OBJECT_KEY) TYPE  CHAR50
*"     REFERENCE(IM_TRANS_NO) TYPE  ZSDSDE_TRANS_NO
*"     REFERENCE(IM_YYYYMMDD) TYPE  DATUM
*"     REFERENCE(IM_HHMMSS) TYPE  UZEIT
*"     REFERENCE(IM_COMPANYCODE)
*"     REFERENCE(IM_OUTPUTTYPE)
*"     REFERENCE(IM_EFF_DATE) TYPE  SY-DATUM
*"  EXPORTING
*"     REFERENCE(EX_FILENAME) TYPE  TEXT255
*"     REFERENCE(EX_TRANS_NO) TYPE  ZSDSDE_TRANS_NO
*"     REFERENCE(EX_WA_RET2) TYPE  BAPIRET2
*"  EXCEPTIONS
*"      ERROR
*"----------------------------------------------------------------------
  DATA: LWA_RET2     TYPE BAPIRET2.

  DATA: LV_MODULE    TYPE STRING,
        LV_EXTENSION TYPE STRING,
        LV_TRANS_NO  TYPE ZSDSDE_TRANS_NO,
        LV_FILENAME  TYPE STRING,
        LV_YYMMDD    TYPE C LENGTH 6,
        LV_HHMMSS    TYPE T.

  CLEAR: EX_FILENAME,
         EX_TRANS_NO,
         EX_WA_RET2.

  DEFINE M_REPLACE.
    IF &3 IS NOT INITIAL.
      REPLACE &1 IN &2 WITH &3.
    ENDIF.
  END-OF-DEFINITION.

  IF IM_EFF_DATE IS NOT INITIAL.
    CALL FUNCTION 'ZETX_EFFECTIVE_DATE'
      EXPORTING
        IM_DATE = IM_EFF_DATE
      IMPORTING
        EX_RET2 = LWA_RET2.
  ENDIF.

  CHECK LWA_RET2-TYPE EQ 'S' OR
        LWA_RET2-TYPE IS INITIAL.

  LV_MODULE     = IM_MODULE.
  LV_TRANS_NO   = IM_TRANS_NO.
  LV_EXTENSION  = IM_EXTENSION.

  TRANSLATE LV_MODULE    TO UPPER CASE.
  TRANSLATE LV_EXTENSION TO UPPER CASE.

* Validate module
  IF LV_MODULE EQ 'FI' OR
     LV_MODULE EQ 'SD'.
  ELSE.
    EX_WA_RET2-TYPE    = GC_ERROR.
    EX_WA_RET2-MESSAGE = 'Filename, module $1 is invalid'.
    REPLACE '$1' IN EX_WA_RET2-MESSAGE WITH LV_MODULE.
    EXIT.
  ENDIF.

* Validate file extension
  IF LV_EXTENSION EQ 'PDF' OR
     LV_EXTENSION EQ 'TXT'.
  ELSE.
    EX_WA_RET2-TYPE    = GC_ERROR.
    EX_WA_RET2-MESSAGE = 'Filename, file extension $1 is invalid'.
    REPLACE '$1' IN EX_WA_RET2-MESSAGE WITH LV_EXTENSION.
    EXIT.
  ENDIF.

* Set file extension
  CASE LV_EXTENSION.
    WHEN 'PDF'.
      CASE LV_MODULE.
        WHEN 'FI'.
          LV_FILENAME = GC_FI_FLNAM_PDF.
        WHEN 'SD'.
          LV_FILENAME = GC_SD_FLNAM_PDF.
      ENDCASE.
    WHEN 'TXT'.
      LV_FILENAME = GC_FLNAM_TXT.
  ENDCASE.

* Set date & time
  IF IM_YYYYMMDD IS NOT INITIAL AND
     IM_HHMMSS   IS NOT INITIAL.
    LV_YYMMDD   = IM_YYYYMMDD+2.
    LV_HHMMSS   = IM_HHMMSS.
  ELSE.
    GET TIME.
    LV_YYMMDD   = SY-DATUM+2.
    LV_HHMMSS   = SY-UZEIT.
  ENDIF.

* Start to replace
  M_REPLACE '$YYMMDD'       LV_FILENAME  LV_YYMMDD.
  M_REPLACE '$HHMMSS'       LV_FILENAME  LV_HHMMSS.
  M_REPLACE '$SAPOBJECTID'  LV_FILENAME  IM_OBJECT_KEY.
  M_REPLACE '$COMP'         LV_FILENAME  IM_COMPANYCODE.
  M_REPLACE '$OUTPUTTYPE'   LV_FILENAME  IM_OUTPUTTYPE.

* Get transaction No. for text file
  IF LV_EXTENSION EQ 'TXT'.
    IF LV_TRANS_NO IS INITIAL.
      PERFORM GEN_TRANSACTION_NO CHANGING LV_TRANS_NO.
      IF LV_TRANS_NO IS INITIAL.
        EX_WA_RET2-TYPE    = GC_ERROR.
        EX_WA_RET2-MESSAGE = 'Filename, Unable to generate Transaction No.'.
        REPLACE '$1' IN EX_WA_RET2-MESSAGE WITH LV_EXTENSION.
      ENDIF.
    ENDIF.

    IF LV_TRANS_NO IS NOT INITIAL.
      REPLACE '$TRANSNO' IN LV_FILENAME WITH LV_TRANS_NO.
    ENDIF.
  ENDIF.

  CONDENSE LV_FILENAME NO-GAPS.

* Error if any format is not replaced yet
  IF LWA_RET2-TYPE NE GC_ERROR.
    IF LV_FILENAME CP '*$*'.
      LWA_RET2-TYPE    = GC_ERROR.
      LWA_RET2-MESSAGE = 'Filename, Internal error $1'.
      REPLACE '$1' IN LWA_RET2-MESSAGE WITH LV_FILENAME.
    ENDIF.
  ENDIF.

* Success
  IF LWA_RET2-TYPE NE GC_ERROR.
    LWA_RET2-TYPE    = GC_SUCCESS.
    LWA_RET2-MESSAGE = 'OK'.
  ENDIF.

* Return value
  EX_WA_RET2  = LWA_RET2.

  IF EX_WA_RET2-TYPE EQ GC_SUCCESS.
    EX_FILENAME = LV_FILENAME.
    EX_TRANS_NO = LV_TRANS_NO.
  ENDIF.

* Raise if any error occurs
  IF EX_WA_RET2-TYPE EQ GC_ERROR.
    RAISE ERROR.
  ENDIF.




ENDFUNCTION.
