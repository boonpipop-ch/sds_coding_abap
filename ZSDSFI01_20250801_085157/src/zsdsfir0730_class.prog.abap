*&---------------------------------------------------------------------*
*& Include          ZSDSFIR0730_CLASS
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER  DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      HANDLE_DATA_CHANGED
        FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED,

      HANDLE_TOOLBAR
        FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,

      HANDLE_USER_COMMAND
        FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM.
ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER IMPLEMENTATION.
  METHOD HANDLE_DATA_CHANGED.
    " Just trigger PAI followed by PBO
    CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
      EXPORTING
        NEW_CODE = 'REFRESH'
*        IMPORTING
*       rc       =
      .
  ENDMETHOD.                    "handle_data_changed
  METHOD HANDLE_TOOLBAR.
*      DATA: LS_TOOLBAR  TYPE STB_BUTTON.
*
*      CLEAR LS_TOOLBAR.
*      MOVE 3 TO LS_TOOLBAR-BUTN_TYPE.
*      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*      IF GS_HEADER-FIRCO IS INITIAL.
*        CLEAR LS_TOOLBAR.
*        MOVE GC_POST TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_POST_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_POST_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        LS_TOOLBAR-BUTN_TYPE = '3'.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        MOVE GC_SKIP TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_SKIP_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_SKIP_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        LS_TOOLBAR-BUTN_TYPE = '3'.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        MOVE GC_UNSKIP TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_UNSKIP_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_UNSKIP_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*      ENDIF.
  ENDMETHOD.
  METHOD HANDLE_USER_COMMAND.
*    CASE E_UCOMM.
*      WHEN GC_POST.
*        POST( ).
*      WHEN GC_SKIP.
*        SKIP( ).
*      WHEN GC_UNSKIP.
*        UNSKIP( ).
*    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS LCL_UTIL DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY.

ENDCLASS.
CLASS LCL_UTIL IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_IN.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_outPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
ENDCLASS.
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR,
      START_PROCESS,
      START_PROCESS2.
    CLASS-METHODS :
      GET_DATA,
      GET_ADDTIONAL_DATA,
      SHOW_REPORT,
      SET_LAYOUT_OUTPUT,
      BUILD_FCAT,
      SET_SORT,
      SET_ALV_GRID,
      HTML_TOP_OF_PAGE,
      CREATE_OBJECT_ALV,
      EXCLUDING_TOOLBAR,
      ADD_EVENT,
      GUI_STATUS,
      SET_LAYOUT_OO,
      SET_FCAT_OO,
      CALL_ALV,
      CREATE_OBJECT_ALV2,
      EXCLUDING_TOOLBAR2,
      ADD_EVENT2,
      GUI_STATUS2,
      SET_LAYOUT2_OO,
      SET_FCAT2_OO,
      CALL_ALV2.

    CLASS-DATA :
      LO TYPE REF TO LCL_DATA.
ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD GET_DATA.
    IF LO IS INITIAL.
      CREATE OBJECT LO.
    ENDIF.

    LO->START_PROCESS( ).
*    LO->START_PROCESS2( ).
  ENDMETHOD.
  METHOD START_PROCESS.

    CALL FUNCTION 'Z_SDSFI_PROJECT_DETAIL'
      EXPORTING
        IT_WBS             = s_WBSE[]
      IMPORTING
        ET_WBS_DETAIL      = GT_result
        ET_WBS_COST_DETAIL = GT_result2.


*    SELECT VBAP~VBELN,
*           VBAP~POSNR,
*           VBAP~MATNR,
*           VBAP~NETWR,
*           VBAK~KUNNR,
*      VBAP~PS_PSP_PNR
*
*
*     FROM VBAP
*      INNER JOIN VBAK ON VBAP~VBELN EQ VBAK~VBELN
*      WHERE VBAP~PS_PSP_PNR IN @s_WBSE
*
*      INTO TABLE @GT_RESULT.

  ENDMETHOD.

  METHOD START_PROCESS2.
*    SELECT EBAN~BANFN,
*           EBAN~MATNR,
*           EBAN~TXZ01,
*           EBAN~PREIS,
*           EKKO~EBELN,
*           MSEG~MBLNR,
*           EBKN~PS_PSP_PNR
*
*      FROM EBAN
*
*      INNER JOIN EBKN ON  EBAN~BANFN EQ EBKN~BANFN
*                      AND EBAN~BNFPO EQ EBKN~BNFPO
*                      AND EBKN~BNFPO EQ '01'
*      LEFT JOIN EKPO   ON EBAN~BANFN EQ EKPO~BANFN
*                      AND EBAN~BNFPO EQ EKPO~BNFPO
*      LEFT JOIN EKKO   ON EKPO~EBELN EQ EKKO~EBELN
*      LEFT JOIN MSEG   ON EKPO~EBELN EQ MSEG~EBELN
*                      AND EKPO~EBELP EQ MSEG~EBELP
*
*      WHERE  EBKN~PS_PSP_PNR IN @s_WBSE
*
*      INTO TABLE @GT_RESULT2.
*
*    SELECT  EKKO~EBELN,
*            EKPO~EBELP,
*            EKPO~MATNR,
*            EKPO~TXZ01,
*            EKPO~NETPR,
*            MSEG~MBLNR,
*            MSEG~MJAHR,
*            MSEG~ZEILE
*
*
*      FROM EKPO
*      INNER JOIN EKKO ON EKPO~EBELN EQ EKKO~EBELN
*      INNER JOIN EKKN ON EKPO~EBELN EQ EKKN~EBELN
*                     AND EKPO~BANFN =  @SPACE
*      LEFT JOIN MSEG  ON EKPO~EBELN EQ MSEG~EBELN
*                     AND EKPO~EBELP EQ MSEG~EBELP
*
*
*
*      WHERE  EKKN~PS_PSP_PNR IN @s_WBSE
*
*      INTO TABLE @DATA(LT_TMP_PO).
*
*    SELECT MSEG~MBLNR,
*           MSEG~MJAHR,
*           MSEG~ZEILE,
*           MSEG~MATNR,
*           MSEG~SGTXT,
*           MSEG~DMBTR
*
*
*       FROM MSEG
*
*       WHERE   MSEG~EBELN = @SPACE
*       AND     MSEG~PS_PSP_PNR IN @s_WBSE
*
*       INTO TABLE @DATA(LT_TMP_MIKO).
*
*    DATA LV_TABIX    TYPE SY-TABIX.
*    DATA LS_TMP_PO   LIKE LINE OF LT_TMP_PO.
*    DATA LS_TMP_MIKO LIKE LINE OF LT_TMP_MIKO.
*
*    LOOP AT LT_TMP_PO INTO LS_TMP_PO.
**      GS_RESULT2-BANFN = ''.
*      GS_RESULT2-MATNR = LS_TMP_PO-MATNR.
*      GS_RESULT2-TXZ01 = LS_TMP_PO-TXZ01.
*      GS_RESULT2-PREIS = LS_TMP_PO-NETPR.
*      GS_RESULT2-EBELN = LS_TMP_PO-EBELN.
*      GS_RESULT2-MBLNR = LS_TMP_PO-MBLNR.
*      APPEND GS_RESULT2 TO GT_RESULT2.
*
*    ENDLOOP.
*
*
*        LOOP AT LT_TMP_MIKO INTO LS_TMP_MIKO.
**         GS_RESULT2-BANFN = ''.
*          GS_RESULT2-MATNR = LS_TMP_MIKO-MATNR.
*          GS_RESULT2-TXZ01 = LS_TMP_MIKO-SGTXT.
*          GS_RESULT2-PREIS = LS_TMP_MIKO-DMBTR.
**         GS_RESULT2-EBELN = ''.
*          GS_RESULT2-MBLNR = LS_TMP_MIKO-MBLNR.
*
*      APPEND GS_RESULT2 TO GT_RESULT2.


*    ENDLOOP.

  ENDMETHOD.
  METHOD GET_ADDTIONAL_DATA.
*    FIELD-SYMBOLS <LFS_RESULT> LIKE LINE OF GT_RESULT.
*    LOOP AT GT_RESULT ASSIGNING <LFS_RESULT>.
*
*    ENDLOOP.
  ENDMETHOD.
  METHOD SHOW_REPORT.
    CALL SCREEN 101.
*    SET_LAYOUT_OUTPUT( ).
*    BUILD_FCAT( ).
*    SET_SORT( ).
*    SET_ALV_GRID( ).
  ENDMETHOD.
  METHOD SET_LAYOUT_OUTPUT.
*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                END OF LC_CON.
    GS_LAYOUT-ZEBRA             = GC_X.
    GS_LAYOUT-COLWIDTH_OPTIMIZE = GC_X.
*    GS_LAYOUT-BOX_FIELDNAME     = LC_CON-CHK_FILED.
  ENDMETHOD.
  METHOD BUILD_FCAT.
    DATA:
       LS_FCAT TYPE SLIS_FIELDCAT_ALV.

*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                  CHK_NAME  TYPE C LENGTH 3 VALUE 'CHK',
*                END OF LC_CON.
*
*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME   = LC_CON-CHK_FILED.
*    LS_FCAT-SELTEXT_S   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_M   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_L   = LC_CON-CHK_FILED.
*    LS_FCAT-CHECKBOX    = ABAP_TRUE.
*    LS_FCAT-INPUT       = ABAP_TRUE.
*    LS_FCAT-EDIT        = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F TYPE C VALUE 'F',
                LC_T TYPE C VALUE 'T',
                LC_d TYPE C VALUE 'D'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.
*Field
    CLEAR : LS_FCAT.
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                                  IMPORTING E_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABNAME = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-SELTEXT_S = <LFS>.
        LS_FCAT-SELTEXT_M = <LFS>.
        LS_FCAT-SELTEXT_L = <LFS>.
      ENDIF.
      APPEND LS_FCAT TO GT_FCAT.
      CLEAR LS_FCAT.
    ENDDO.

  ENDMETHOD.
  METHOD SET_SORT.
**  CLEAR gs_sort.
**  gs_sort-fieldname = 'LIFNR'.
**  gs_sort-spos = '1'.
**  gs_sort-up = 'X'.
***  gs_sort-subtot = 'X'.
**  APPEND gs_sort TO gt_sort.
  ENDMETHOD.
  METHOD SET_ALV_GRID.
*SAPLKKBL
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        I_CALLBACK_PROGRAM = SY-REPID
        "I_CALLBACK_PF_STATUS_SET = 'PF_STATUS_1'
        "I_callback_user_command  = 'USER_COMMAND'
*       I_CALLBACK_TOP_OF_PAGE            = ' '
*       i_html_height_top  = 12
*       I_CALLBACK_HTML_TOP_OF_PAGE       = 'HTML_TOP_OF_PAGE'
*       I_CALLBACK_HTML_END_OF_LIST       = ' '
*       I_STRUCTURE_NAME   =
*       I_BACKGROUND_ID    = ' '
*       I_GRID_TITLE       =
*       I_GRID_SETTINGS    =
        IS_LAYOUT          = GS_LAYOUT
        IT_FIELDCAT        = GT_FCAT
*       IT_EXCLUDING       =
*       IT_SPECIAL_GROUPS  =
        IT_SORT            = GT_SORT
*       IT_FILTER          =
*       IS_SEL_HIDE        =
        I_DEFAULT          = GC_X
        I_SAVE             = GC_A
*       IS_VARIANT         =
*       IT_EVENTS          =
*       IT_EVENT_EXIT      =
*       IS_PRINT           =
*       IS_REPREP_ID       =
*       I_SCREEN_START_COLUMN             = 0
*       I_SCREEN_START_LINE               = 0
*       I_SCREEN_END_COLUMN               = 0
*       I_SCREEN_END_LINE  = 0
*       I_HTML_HEIGHT_TOP  = 0
*       I_HTML_HEIGHT_END  = 0
*       IT_ALV_GRAPHICS    =
*       IT_HYPERLINK       =
*       IT_ADD_FIELDCAT    =
*       IT_EXCEPT_QINFO    =
*       IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*       E_EXIT_CAUSED_BY_CALLER           =
*       ES_EXIT_CAUSED_BY_USER            =
      TABLES
        T_OUTTAB           = GT_RESULT
      EXCEPTIONS
        PROGRAM_ERROR      = 1
        OTHERS             = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD HTML_TOP_OF_PAGE.
*  DATA: text TYPE sdydo_text_element.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 100.
*  text =  'Company Code Data'.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'HEADING'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*
*  text = 'User Name : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uname.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*
*  text = 'Date : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-datum.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*  text = 'Time : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uzeit.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
  ENDMETHOD.
  METHOD CREATE_OBJECT_ALV.
    CREATE OBJECT GCL_CONT
      EXPORTING
        CONTAINER_NAME = GC_CON_NAME.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CREATE OBJECT GCL_ALV
      EXPORTING
        I_PARENT = GCL_CONT.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD EXCLUDING_TOOLBAR.
    DATA LS_EXCLUDE TYPE UI_FUNC.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
  ENDMETHOD.
  METHOD ADD_EVENT.
    CALL METHOD GCL_ALV->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_DATA_CHANGED FOR GCL_ALV.

  ENDMETHOD.
  METHOD GUI_STATUS.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_USER_COMMAND FOR GCL_ALV.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_TOOLBAR FOR GCL_ALV.
  ENDMETHOD.
  METHOD SET_LAYOUT_OO.
* CONSTANTS LC_STYLE TYPE C LENGTH 5 VALUE 'ALVED'.
*
*    GS_LAYOUT_OO-STYLEFNAME = LC_STYLE.
*
*    CALL METHOD GCL_ALV->SET_FRONTEND_LAYOUT
*      EXPORTING
*        IS_LAYOUT = GS_LAYOUT_OO.

  ENDMETHOD.
  METHOD SET_FCAT_OO.
    DATA:
          LS_FCAT TYPE LVC_S_FCAT.

    CONSTANTS : LC_CHECK   TYPE C LENGTH 5  VALUE 'CHECK',
                LC_CHECK_T TYPE C LENGTH 5  VALUE 'Check'.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F_OO TYPE C VALUE 'X',
                LC_T_OO TYPE C VALUE 'Y',
                LC_D_OO TYPE C VALUE 'Z'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.

*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME = LC_CHECK.
*    LS_FCAT-COLTEXT   = LC_CHECK_T.
*    LS_FCAT-CHECKBOX  = ABAP_TRUE.
*    LS_FCAT-EDIT      = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT_OO.
*    CLEAR : LS_FCAT.

*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABLE = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-COLTEXT = <LFS>.
      ENDIF.

      APPEND LS_FCAT TO GT_FCAT_OO.
    ENDDO.

  ENDMETHOD.
  METHOD CALL_ALV.
    CALL METHOD GCL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT_OO
        IT_TOOLBAR_EXCLUDING = GT_TOOLBAR_EXCLUDING
      CHANGING
        IT_OUTTAB            = GT_RESULT[]
        IT_FIELDCATALOG      = GT_FCAT_OO.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.

  METHOD CREATE_OBJECT_ALV2.
    CREATE OBJECT GCL_CONT2
      EXPORTING
        CONTAINER_NAME = GC_CON_NAME2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CREATE OBJECT GCL_ALV2
      EXPORTING
        I_PARENT = GCL_CONT2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD EXCLUDING_TOOLBAR2.
    DATA LS_EXCLUDE TYPE UI_FUNC.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
  ENDMETHOD.
  METHOD ADD_EVENT2.
    CALL METHOD GCL_ALV2->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_DATA_CHANGED FOR GCL_ALV2.

  ENDMETHOD.
  METHOD GUI_STATUS2.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_USER_COMMAND FOR GCL_ALV2.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_TOOLBAR FOR GCL_ALV2.
  ENDMETHOD.
  METHOD SET_LAYOUT2_OO.
* CONSTANTS LC_STYLE TYPE C LENGTH 5 VALUE 'ALVED'.
*
*    GS_LAYOUT_OO-STYLEFNAME = LC_STYLE.
*
*    CALL METHOD GCL_ALV->SET_FRONTEND_LAYOUT
*      EXPORTING
*        IS_LAYOUT = GS_LAYOUT_OO.

  ENDMETHOD.
  METHOD SET_FCAT2_OO.
    DATA:
          LS_FCAT TYPE LVC_S_FCAT.

    CONSTANTS : LC_CHECK   TYPE C LENGTH 5  VALUE 'CHECK',
                LC_CHECK_T TYPE C LENGTH 5  VALUE 'Check'.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F_OO TYPE C VALUE 'Q',
                LC_T_OO TYPE C VALUE 'W',
                LC_D_OO TYPE C VALUE 'E'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.

*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME = LC_CHECK.
*    LS_FCAT-COLTEXT   = LC_CHECK_T.
*    LS_FCAT-CHECKBOX  = ABAP_TRUE.
*    LS_FCAT-EDIT      = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT_OO.
*    CLEAR : LS_FCAT.

*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABLE = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-COLTEXT = <LFS>.
      ENDIF.

      APPEND LS_FCAT TO GT_FCAT2_OO.
    ENDDO.

  ENDMETHOD.
  METHOD CALL_ALV2.
    CALL METHOD GCL_ALV2->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT2_OO
        IT_TOOLBAR_EXCLUDING = GT_TOOLBAR_EXCLUDING2
      CHANGING
        IT_OUTTAB            = GT_RESULT2[]
        IT_FIELDCATALOG      = GT_FCAT2_OO.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.

ENDCLASS.



*----------------------------------------------------------------------*
* CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS DEFINITION.
*Handling double click
  PUBLIC SECTION.
    METHODS:
    HANDLE_DOUBLE_CLICK
    FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS. "lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.

  ENDMETHOD. "handle_double_click
ENDCLASS. "lcl_event_receiver IMPLEMENTATION
