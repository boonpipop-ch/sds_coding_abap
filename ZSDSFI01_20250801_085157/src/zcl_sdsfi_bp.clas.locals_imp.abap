*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS:
      UPDATE_BP IMPORTING IT_BP     TYPE CVIS_EI_EXTERN_T
                          I_TEST    TYPE BOOLE_D OPTIONAL
                EXPORTING E_MESSAGE TYPE CHAR255
                RETURNING VALUE(R)  TYPE FLAG,
      CHECK_UPDATE_BP IMPORTING IS_BP     TYPE CVIS_EI_EXTERN
                      EXPORTING E_MESSAGE TYPE CHAR255
                      RETURNING VALUE(R)  TYPE FLAG,
      FILTER_ERROR_OUT CHANGING CT_DATA TYPE MDG_BS_BP_MSGMAP_T,
      COMMIT,
      GET_PARTNER_GUID IMPORTING I_DATA   TYPE BU_PARTNER
                       RETURNING VALUE(R) TYPE BU_PARTNER_GUID,
      GET_ROLE_FOR_CREDIT_LIM RETURNING VALUE(R) TYPE BUS_EI_BUPA_ROLES_T,
      GET_NEX_SEQ IMPORTING I_DATA   TYPE ZSDSFIS119
                  RETURNING VALUE(R) TYPE ZSDSDE_SEQ_NO,
      CREATE_PA0000 IMPORTING I_DATA   TYPE P0000
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CREATE_PA0001 IMPORTING I_DATA   TYPE P0001
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CREATE_PA0002 IMPORTING I_DATA   TYPE P0002
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CREATE_PA0006 IMPORTING I_DATA   TYPE P0006
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CREATE_PA0007 IMPORTING I_DATA   TYPE P0007
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CREATE_PA0008 IMPORTING I_DATA   TYPE P0008
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CREATE_PA0009 IMPORTING I_DATA   TYPE P0009
                    RETURNING VALUE(R) TYPE PES_PPROP,
      CALL_CREATE_PA30 IMPORTING I_EMPLOYEE TYPE PERSNO
                                 I_MASSN    TYPE PA0000-MASSN OPTIONAL
                                 I_WERKS    TYPE PSPAR-WERKS OPTIONAL
                                 I_PERSG    TYPE PSPAR-PERSG OPTIONAL
                                 I_PERSK    TYPE PSPAR-PERSK OPTIONAL
                                 I_PLANS    TYPE PSPAR-PLANS OPTIONAL
                                 I_BEGDA    TYPE PA0000-BEGDA OPTIONAL
                                 I_ENDDA    TYPE PA0000-ENDDA OPTIONAL
                                 IT_PPROP   TYPE PES_PPROP
                       RETURNING VALUE(R)   TYPE BAPIRETURN.

    CONSTANTS : BEGIN OF LC_CON,
                  E           TYPE C LENGTH 1  VALUE 'E',
                  A           TYPE C LENGTH 1  VALUE 'A',
                  S           TYPE C LENGTH 1  VALUE 'S',
                  R11         TYPE C LENGTH 3  VALUE 'R11',
                  T35         TYPE C LENGTH 3  VALUE '335',
                  BUT_PART    TYPE C LENGTH 18 VALUE 'BUP_MEMORY_PARTNER',
                  CUSTOMER    TYPE BU_ROLE VALUE 'FLCU01',
                  CUSTOMER_FI TYPE BU_ROLE VALUE 'FLCU00',
                  VENDOR      TYPE BU_ROLE VALUE 'FLVN01',
                  VENDOR_FI   TYPE BU_ROLE VALUE 'FLVN00',
                  CREDIT      TYPE BU_ROLE VALUE 'UKM000',
                  CONTACT_P   TYPE BU_ROLE VALUE 'CHM003',
                END OF LC_CON.
ENDCLASS.

CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD UPDATE_BP.
    DATA : LV_BU_PARTNER TYPE BU_PARTNER.

    CL_MD_BP_MAINTAIN=>MAINTAIN(
    EXPORTING
      I_DATA     = IT_BP
      I_TEST_RUN = I_TEST
    IMPORTING
      E_RETURN   = DATA(LT_RETURN)
  ).

    READ TABLE LT_RETURN INTO DATA(LS_RETURN2) INDEX 1.

    LOOP AT LS_RETURN2-OBJECT_MSG INTO DATA(LS_OBJ_MSG).
      IF LS_OBJ_MSG-TYPE = LC_CON-E OR LS_OBJ_MSG-TYPE = LC_CON-A.
        R         = LC_CON-E.
        E_MESSAGE = LS_OBJ_MSG-MESSAGE.
        EXIT.
      ENDIF.
    ENDLOOP.

    IF R IS INITIAL.
      R = LC_CON-S.
      IF I_TEST EQ ABAP_TRUE.
        E_MESSAGE = TEXT-S01.
      ELSE.
        IMPORT LV_PARTNER TO LV_BU_PARTNER FROM MEMORY ID LC_CON-BUT_PART.
        E_MESSAGE = LV_BU_PARTNER.
        COMMIT( ).
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD CHECK_UPDATE_BP.
    CL_MD_BP_MAINTAIN=>VALIDATE_SINGLE(
    EXPORTING
      I_DATA        = IS_BP
    IMPORTING
      ET_RETURN_MAP = DATA(LT_RETURN_MAP)
  ).

    FILTER_ERROR_OUT( CHANGING CT_DATA = LT_RETURN_MAP ).

    IF LINE_EXISTS( LT_RETURN_MAP[ TYPE = LC_CON-E ] ) OR
       LINE_EXISTS( LT_RETURN_MAP[ TYPE = LC_CON-A ] ).
      R = LC_CON-E.
      LOOP AT LT_RETURN_MAP INTO DATA(LS_RETURN_MAP)
                            WHERE TYPE = LC_CON-E
                               OR TYPE = LC_CON-A.
        E_MESSAGE = LS_RETURN_MAP-MESSAGE.
      ENDLOOP.
    ELSE.
      R = LC_CON-S.
    ENDIF.
  ENDMETHOD.
  METHOD FILTER_ERROR_OUT.
    DELETE CT_DATA WHERE TYPE   = LC_CON-A
                     AND ID     = LC_CON-R11
                     AND NUMBER = LC_CON-T35.
  ENDMETHOD.
  METHOD COMMIT.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = ABAP_TRUE.
  ENDMETHOD.
  METHOD GET_PARTNER_GUID.
    CALL FUNCTION 'BUPA_NUMBERS_GET'
      EXPORTING
        IV_PARTNER      = I_DATA
      IMPORTING
        EV_PARTNER_GUID = R.
  ENDMETHOD.
  METHOD GET_ROLE_FOR_CREDIT_LIM.
    DATA : LS_DATA LIKE LINE OF R.
    LS_DATA-DATA_KEY = LC_CON-CUSTOMER_FI.
    APPEND LS_DATA TO R.
    LS_DATA-DATA_KEY = LC_CON-CREDIT.
    APPEND LS_DATA TO R.
  ENDMETHOD.
  METHOD GET_NEX_SEQ.

    SELECT MAX( SEQ )
         FROM ZSDSFIT036
        WHERE ZSDSFIT036~KUNNR     EQ @I_DATA-KUNNR
          AND ZSDSFIT036~PSPHI     EQ @I_DATA-WBS
          AND ZSDSFIT036~STARTDATE EQ @I_DATA-STARTDATE
          AND ZSDSFIT036~ENDDATE   EQ @I_DATA-ENDDATE
        INTO @DATA(TEST).

    ADD 1 TO R.
  ENDMETHOD.
  METHOD CREATE_PA0000.

    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0000'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

    R = LT_PROP.

*    LV_MASSN = I_DATA-MASSN.
*    LV_BEGDA = I_DATA-BEGDA.
*    LV_ENDDA = I_DATA-ENDDA.
*
*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  I_MASSN    = LV_MASSN
*                                  I_BEGDA    = LV_BEGDA
*                                  I_ENDDA    = LV_ENDDA
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.

  ENDMETHOD.
  METHOD CREATE_PA0001.
    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0001'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
*          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

    R = LT_PROP.

*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.
  ENDMETHOD.
  METHOD CREATE_PA0002.
    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0002'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
*          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

*    LS_PROP-FNAME = 'Q0002-ANREX'.
*    LS_PROP-FVAL  = '1'.
*    LS_PROP-SEQNR = LV_SEQ.
*    APPEND LS_PROP TO LT_PROP.

    R = LT_PROP.

*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.
  ENDMETHOD.
  METHOD CREATE_PA0006.
    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0006'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
*          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

    R = LT_PROP.
*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.

  ENDMETHOD.
  METHOD CREATE_PA0007.
    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0007'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
*          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

    R = LT_PROP.
*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.

  ENDMETHOD.
  METHOD CREATE_PA0008.
    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0008'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
*          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

    R = LT_PROP.
*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.

  ENDMETHOD.
  METHOD CREATE_PA0009.
    DATA : LT_PROP TYPE TABLE OF PPROP,
           LS_PROP TYPE PPROP.

    DATA : LV_SEQ TYPE I.

    CONSTANTS : LC_INFO TYPE C LENGTH 4 VALUE '0009'.

    FIELD-SYMBOLS : <LFS_DATA>  TYPE ANY,
                    <LFS_FIELD> TYPE ANY.

    DATA LO_STRU_DESCR            TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA(LO_TYPE_DESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( I_DATA ).
    LO_STRU_DESCR      ?= LO_TYPE_DESCR.
    DATA(LT_COMP_NAME)  = LO_STRU_DESCR->GET_DDIC_FIELD_LIST( ).

    DO.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE I_DATA TO <LFS_DATA>.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        IF <LFS_DATA> IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE LT_COMP_NAME INTO DATA(LS_COMP) INDEX SY-INDEX.
        IF SY-SUBRC EQ 0.
*          ADD 1 TO LV_SEQ.
*          LV_SEQ = 0.
          LS_PROP-INFTY = LC_INFO.
          CONCATENATE LS_COMP-TABNAME '-' LS_COMP-FIELDNAME INTO LS_PROP-FNAME.
*          LS_PROP-FNAME = LS_COMP-FIELDNAME.
          LS_PROP-FVAL  = <LFS_DATA>.
          LS_PROP-SEQNR = LV_SEQ.
          APPEND LS_PROP TO LT_PROP.
        ENDIF.
      ENDIF.
    ENDDO.

    R = LT_PROP.

*    LS_RETURN = CALL_CREATE_PA30( I_EMPLOYEE = I_DATA-PERNR
*                                  IT_PPROP   = LT_PROP ).
*
*    LS_MESSAGE-EMPLOYEE     = I_DATA-PERNR.
*    LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
*    LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
*
*    APPEND LS_MESSAGE TO R.
  ENDMETHOD.
  METHOD CALL_CREATE_PA30.

    DATA : LS_RETURN1   TYPE BAPIRETURN1,
           LS_HR_RETURN TYPE HRHRMM_MSG.

    DATA: PROPOSED_VALUES LIKE IT_PPROP.

    DATA : LT_TMP LIKE IT_PPROP.

    CALL FUNCTION 'BAPI_EMPLOYEE_ENQUEUE'
      EXPORTING
        NUMBER = I_EMPLOYEE
      IMPORTING
        RETURN = LS_RETURN1.
    IF LS_RETURN1-TYPE EQ LC_CON-S OR
       LS_RETURN1-TYPE EQ SPACE.

      PROPOSED_VALUES[] = IT_PPROP.

      CALL FUNCTION 'HR_MAINTAIN_MASTERDATA'
        EXPORTING
          PERNR              = I_EMPLOYEE
          MASSN              = I_MASSN
          ACTIO              = 'INS'
*         TCLAS              = 'A'
          BEGDA              = I_BEGDA
          ENDDA              = I_ENDDA
*         OBJPS              =
*         SEQNR              =
*         SPRPS              =
*         SUBTY              =
          WERKS              = I_WERKS
          PERSG              = I_PERSG
          PERSK              = I_PERSK
          PLANS              = I_PLANS
          DIALOG_MODE        = '0'
*         LUW_MODE           = '1'
          NO_EXISTENCE_CHECK = ABAP_TRUE
          NO_ENQUEUE         = ABAP_TRUE
        IMPORTING
          RETURN             = R
          RETURN1            = LS_RETURN1
          HR_RETURN          = LS_HR_RETURN
        TABLES
          PROPOSED_VALUES    = PROPOSED_VALUES
*         MODIFIED_KEYS      =
        EXCEPTIONS
          ERROR_MESSAGE      = 4.

      CALL FUNCTION 'BAPI_EMPLOYEE_DEQUEUE'
        EXPORTING
          NUMBER = I_EMPLOYEE.

    ENDIF.

  ENDMETHOD.
ENDCLASS.
