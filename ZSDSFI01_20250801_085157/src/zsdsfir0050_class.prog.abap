*&---------------------------------------------------------------------*
*& Include          ZSDSFII0050_CLASS
*&---------------------------------------------------------------------*
CLASS LCL_UTIL DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS :
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      GET_FISC_PERIOD IMPORTING I_DATA   TYPE SY-DATUM
                      RETURNING VALUE(R) TYPE BKPF-MONAT,
      GET_FISC_YEAR IMPORTING I_DATA   TYPE SY-DATUM
                    RETURNING VALUE(R) TYPE BKPF-GJAHR,
      UPDATE_ZSDSFIT022 IMPORTING I_DOC_NO   TYPE ANY OPTIONAL
                                  I_COM_CODE TYPE ANY OPTIONAL
                                  I_YEAR     TYPE ANY OPTIONAL
                                  I_TYPE     TYPE ANY
                                  I_MONIT    TYPE ANY OPTIONAL,
      SHOW_MESSAGE_ERROR IMPORTING I_MESSAGE TYPE ANY
                         RETURNING VALUE(R)  TYPE CHAR1,
      COMMIT.
ENDCLASS.
CLASS LCL_UTIL IMPLEMENTATION.
  METHOD CONVERT_ALPHA_IN.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.
  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_outPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.
  ENDMETHOD.
  METHOD COMMIT.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = ABAP_TRUE.
*     IMPORTING
*       RETURN        =

  ENDMETHOD.
  METHOD GET_FISC_PERIOD.
    CALL FUNCTION 'GET_CURRENT_YEAR'
      EXPORTING
        BUKRS = GC_COM_CODE
        DATE  = I_DATA
      IMPORTING
        CURRM = R.
  ENDMETHOD.
  METHOD GET_FISC_YEAR.
    CALL FUNCTION 'GET_CURRENT_YEAR'
      EXPORTING
        BUKRS = GC_COM_CODE
        DATE  = I_DATA
      IMPORTING
        CURRY = R.
  ENDMETHOD.
  METHOD UPDATE_ZSDSFIT022.

    DATA : LS_ZSDSFIT022 TYPE ZSDSFIT022.

    SELECT COUNT( * )
      FROM ZSDSFIT022
      WHERE CONTN EQ GS_HEADER-CONTN
        AND LIFNR EQ GS_HEADER-LIFNR
        AND TYPES EQ I_TYPE.
    IF SY-SUBRC NE 0.
      LS_ZSDSFIT022-RUNMP = 1.
    ELSE.
*      UPDATE ZSDSFIT022 SET DFLAG = ABAP_TRUE
*                      WHERE CONTN EQ GS_HEADER-CONTN
*                        AND LIFNR EQ GS_HEADER-LIFNR
*                        AND TYPES EQ GC_START.
*      LCL_UTIL=>COMMIT( ).

      SELECT CONTN,
             LIFNR,
             RUNMP
        FROM ZSDSFIT022
        INTO TABLE @DATA(LT_DATA)
        WHERE CONTN EQ @GS_HEADER-CONTN
          AND LIFNR EQ @GS_HEADER-LIFNR
          AND TYPES EQ @I_TYPE.

      SORT LT_DATA BY RUNMP DESCENDING.
      DATA : LS_DATA LIKE LINE OF LT_DATA.

      READ TABLE LT_DATA INTO LS_DATA INDEX 1.
      IF SY-SUBRC EQ 0.
        LS_ZSDSFIT022-RUNMP = LS_DATA-RUNMP + 1.
      ENDIF.
    ENDIF.

    LS_ZSDSFIT022-MONIT = I_MONIT.
    LS_ZSDSFIT022-CONTN = GS_HEADER-CONTN.
    LS_ZSDSFIT022-LIFNR = GS_HEADER-LIFNR.
    LS_ZSDSFIT022-RUNNG = GS_HEADER-RUNNG.
    LS_ZSDSFIT022-TYPES = I_TYPE.
    LS_ZSDSFIT022-BUKRS = I_COM_CODE.
    LS_ZSDSFIT022-BELNR = I_DOC_NO.
    LS_ZSDSFIT022-GJAHR = I_YEAR.
    LS_ZSDSFIT022-ERNAM = SY-UNAME.
    LS_ZSDSFIT022-ERDAT = SY-DATUM.
    LS_ZSDSFIT022-ERZET = SY-UZEIT.
    LS_ZSDSFIT022-AENAM = SY-UNAME.
    LS_ZSDSFIT022-AEDAT = SY-DATUM.
    LS_ZSDSFIT022-AEZET = SY-UZEIT.

    MODIFY ZSDSFIT022 FROM LS_ZSDSFIT022.

    LCL_UTIL=>COMMIT( ).

  ENDMETHOD.
  METHOD SHOW_MESSAGE_ERROR.
    MESSAGE S998 WITH I_MESSAGE DISPLAY LIKE GC_E.
    R = ABAP_TRUE.
  ENDMETHOD.
ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER  DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      HANDLE_DATA_CHANGED
        FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED,

      HANDLE_TOOLBAR
        FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,

      HANDLE_USER_COMMAND
        FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      HANDLE_TOOLBAR_AMT
        FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,

      HANDLE_USER_COMMAND_AMT
        FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      POST,
      DELETE_ROW,
      POST_MONTLY IMPORTING I_DATA   TYPE GY_RESULT
                  RETURNING VALUE(R) TYPE GY_RESULT,
      POST_MONTLY_Z1 IMPORTING I_DATA   TYPE GY_RESULT
                     RETURNING VALUE(R) TYPE GY_RESULT,
      POST_MONTLY_Z2 IMPORTING I_DATA   TYPE GY_RESULT
                     RETURNING VALUE(R) TYPE GY_RESULT,
      POST_MONTLY_Z1_EXP IMPORTING I_DATA   TYPE GY_RESULT
                         RETURNING VALUE(R) TYPE GY_RESULT,
      CHECK_POST_START RETURNING VALUE(R) TYPE FLAG,
      SKIP,
      UNSKIP.

ENDCLASS.                    "lcl_eventhandler DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER IMPLEMENTATION.
  METHOD HANDLE_DATA_CHANGED.
    " Just trigger PAI followed by PBO
    CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
      EXPORTING
        NEW_CODE = 'REFRESH'
*        IMPORTING
*       rc       =
      .
  ENDMETHOD.                    "handle_data_changed
  METHOD HANDLE_TOOLBAR.

    DATA: LS_TOOLBAR  TYPE STB_BUTTON.

    CLEAR LS_TOOLBAR.
    MOVE 3 TO LS_TOOLBAR-BUTN_TYPE.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    IF GS_HEADER-FIRCO IS INITIAL.
      CLEAR LS_TOOLBAR.
      MOVE GC_POST TO LS_TOOLBAR-FUNCTION.
*      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
      MOVE GC_POST_T TO LS_TOOLBAR-QUICKINFO.
      MOVE GC_POST_T TO LS_TOOLBAR-TEXT.
      MOVE SPACE TO LS_TOOLBAR-DISABLED.
      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

      CLEAR LS_TOOLBAR.
      LS_TOOLBAR-BUTN_TYPE = '3'.
      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

      CLEAR LS_TOOLBAR.
      MOVE GC_SKIP TO LS_TOOLBAR-FUNCTION.
*      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
      MOVE GC_SKIP_T TO LS_TOOLBAR-QUICKINFO.
      MOVE GC_SKIP_T TO LS_TOOLBAR-TEXT.
      MOVE SPACE TO LS_TOOLBAR-DISABLED.
      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

      CLEAR LS_TOOLBAR.
      LS_TOOLBAR-BUTN_TYPE = '3'.
      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

      CLEAR LS_TOOLBAR.
      MOVE GC_UNSKIP TO LS_TOOLBAR-FUNCTION.
*      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
      MOVE GC_UNSKIP_T TO LS_TOOLBAR-QUICKINFO.
      MOVE GC_UNSKIP_T TO LS_TOOLBAR-TEXT.
      MOVE SPACE TO LS_TOOLBAR-DISABLED.
      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    ENDIF.
  ENDMETHOD.
  METHOD HANDLE_USER_COMMAND.
    CASE E_UCOMM.
      WHEN GC_POST.
        POST( ).
      WHEN GC_SKIP.
        SKIP( ).
      WHEN GC_UNSKIP.
        UNSKIP( ).
    ENDCASE.
  ENDMETHOD.
  METHOD SKIP.
    LOOP AT GT_RESULT ASSIGNING FIELD-SYMBOL(<LFS_RESULT>) WHERE CHECK EQ ABAP_TRUE.
      LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = 'SKIP'
                                   I_COM_CODE = '1000'
                                   I_YEAR     = SY-DATUM+0(4)
                                   I_TYPE     = GC_ITEM
                                   I_MONIT    = <LFS_RESULT>-MONIT ).
      <LFS_RESULT>-FIDOC = 'SKIP'.
      <LFS_RESULT>-FIDZ1 = 'SKIP'.
      <LFS_RESULT>-FIDZ2 = 'SKIP'.
    ENDLOOP.
    IF SY-SUBRC EQ 0.
      MESSAGE S000 WITH TEXT-S01.
    ENDIF.
    CALL METHOD GCL_ALV->REFRESH_TABLE_DISPLAY.
  ENDMETHOD.
  METHOD UNSKIP.
    LOOP AT GT_RESULT ASSIGNING FIELD-SYMBOL(<LFS_RESULT>) WHERE CHECK EQ ABAP_TRUE AND
                                                                 FIDOC EQ 'SKIP'.
      DELETE FROM ZSDSFIT022 WHERE CONTN EQ GS_HEADER-CONTN
                               AND LIFNR EQ GS_HEADER-LIFNR
                               AND RUNNG EQ GS_HEADER-RUNNG
                               AND MONIT EQ <LFS_RESULT>-MONIT
                               AND TYPES EQ GC_ITEM.
      <LFS_RESULT>-FIDOC = SPACE.
      <LFS_RESULT>-FIDZ1 = SPACE.
      <LFS_RESULT>-FIDZ2 = SPACE.
    ENDLOOP.
    IF SY-SUBRC EQ 0.
      MESSAGE S000 WITH TEXT-S01.
    ENDIF.
    CALL METHOD GCL_ALV->REFRESH_TABLE_DISPLAY.
  ENDMETHOD.
  METHOD POST.
    FIELD-SYMBOLS <LFS_DATA> TYPE GY_RESULT.
    DATA : LV_CHECK TYPE FLAG.
    LV_CHECK = CHECK_POST_START( ).
    IF LV_CHECK NE ABAP_TRUE.
      LOOP AT GT_RESULT ASSIGNING <LFS_DATA> WHERE CHECK EQ ABAP_TRUE." AND
        IF <LFS_DATA>-FIDOC IS INITIAL.
          <LFS_DATA> = POST_MONTLY( <LFS_DATA> ).
        ENDIF.
*        IF GS_HEADER-FLAGP EQ ABAP_TRUE.

        IF <LFS_DATA>-FIDOC IS NOT INITIAL.
          IF <LFS_DATA>-FIDZ1 IS INITIAL.
            <LFS_DATA> = POST_MONTLY_Z1( <LFS_DATA> ).
          ENDIF.

          IF <LFS_DATA>-FIDZ2 IS INITIAL.
            <LFS_DATA> = POST_MONTLY_Z2( <LFS_DATA> ).
          ENDIF.
        ENDIF.
*        ELSE.
*          <LFS_DATA> = POST_MONTLY_Z1_EXP( <LFS_DATA> ).
*        ENDIF.
      ENDLOOP.
      CALL METHOD GCL_ALV->REFRESH_TABLE_DISPLAY.
    ENDIF.
  ENDMETHOD.
  METHOD POST_MONTLY.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.

*    CONSTANTS : BEGIN OF LC_TYPE,
*                  Amortization       TYPE C LENGTH 2 VALUE '01',
*                  Interest           TYPE C LENGTH 2 VALUE '02',
*                  Monthly_Payment    TYPE C LENGTH 2 VALUE '03',
*                  Depreciation       TYPE C LENGTH 2 VALUE '04',
*                  Accum_Depreciation TYPE C LENGTH 2 VALUE '05',
*                END OF LC_TYPE.
*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( I_DATA-POSTD ).
    LV_DOCUMENTHEADER-DOC_DATE        = I_DATA-POSTD.
    LV_DOCUMENTHEADER-PSTNG_DATE      = I_DATA-POSTD.
    LV_DOCUMENTHEADER-TRANS_DATE      = I_DATA-ENDDT.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( LV_DOCUMENTHEADER-PSTNG_DATE ).
    LV_DOCUMENTHEADER-DOC_TYPE        = 'SA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = 'TEST555'.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-LEDGER_GROUP    = '0L'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item
*--------------------------------------------------------------------*
    DO 6 TIMES.

      ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
      LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
      LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-SGTXT.
*
*      IF LV_GL_LINE EQ 1.
*        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESLI.
*        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
*        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
*                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
*        LS_GL-BSCHL = GC_DEBIT.
*        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*
*        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-AMOZT.
*        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*      ELSEIF LV_GL_LINE EQ 2.
*        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-INTER.
*        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
*        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
*                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
*        LS_GL-BSCHL = GC_DEBIT.
*        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*
*        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-INTER.
*        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*      ELSEIF LV_GL_LINE EQ 3.
*        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESCL.
*        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
*        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
*                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
*        LS_GL-BSCHL = GC_CREDIT.
*        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*
*        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-AMOZT * -1.
*        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*      ELSEIF LV_GL_LINE EQ 4.
*        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESLI.
*        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
*        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
*                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
*        LS_GL-BSCHL = GC_CREDIT.
*        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*
*        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-INTER * -1.
*        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*      ENDIF.

      IF LV_GL_LINE EQ 1.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-INTER.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
        CLEAR : LS_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-INTER.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        CLEAR LS_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 2.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-DEFER.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
        CLEAR : LS_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-INTER * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        CLEAR LS_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 3.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESLI.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
        CLEAR : LS_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        CLEAR LS_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 4.
        LS_ACCOUNTGL-GL_ACCOUNT = GC_GL_PREPAID."GS_HEADER-GLREN.
*        IF GS_HEADER-FLAGP EQ ABAP_FALSE.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
*        ENDIF.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
        CLEAR : LS_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        CLEAR LS_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 5.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_HEADER-GLREN.
*        IF GS_HEADER-FLAGP EQ ABAP_FALSE.
        LS_ACCOUNTGL-COSTCENTER  = GV_COST_CENTER.
        LS_ACCOUNTGL-ORDERID     = GS_HEADER-BUDGT.
*        ENDIF.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
        CLEAR : LS_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        CLEAR LS_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 6.
        LS_ACCOUNTGL-GL_ACCOUNT = GC_GL_ADJ_ROU.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
        LS_ACCOUNTGL-FUNC_AREA = GV_FUNC_AREA.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
        CLEAR : LS_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        CLEAR LS_CURRENCYAMOUNT.
      ENDIF.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                  IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTPAYABLE-ITEMNO_ACC
                  LS_GL-BSCHL
                  ''"GC_CON-BRNCH
                  ''"GC_CON-BUPLA
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

    ENDDO.

    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E .
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
*        MESSAGE s998 WITH LS_RETURN-MESSAGE_V2 DISPLAY LIKE GC_E.
        MOVE-CORRESPONDING I_DATA TO R.
        R-STATU = GC_SUCESS.
        R-MESSG = LS_RETURN-MESSAGE_V2.
        R-FIDOC = LS_RETURN-MESSAGE_V2+0(10).
        R-FIYER = LS_RETURN-MESSAGE_V2+14(4).
        LCL_UTIL=>COMMIT( ).
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_ITEM
                                     I_MONIT    = I_DATA-MONIT ).
      ENDIF.
    ELSE.
*      MESSAGE s998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
      MOVE-CORRESPONDING I_DATA TO R.
      R-STATU = GC_ERROR.
      R-MESSG = LS_RETURN-MESSAGE.
    ENDIF.
  ENDMETHOD.
  METHOD POST_MONTLY_Z1.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.

    DATA : LV_VALUE_A TYPE P DECIMALS 2,
           LV_VALUE_U TYPE P DECIMALS 2.

    DATA : LV_CHECK TYPE C.

*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( I_DATA-POSTD ).
    LV_DOCUMENTHEADER-DOC_DATE        = I_DATA-POSTD.
    LV_DOCUMENTHEADER-PSTNG_DATE      = I_DATA-POSTD.
    LV_DOCUMENTHEADER-TRANS_DATE      = I_DATA-ENDDT.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( LV_DOCUMENTHEADER-PSTNG_DATE ).
    LV_DOCUMENTHEADER-DOC_TYPE        = 'SA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = 'TEST555'.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-LEDGER_GROUP    = 'Z1'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item
*--------------------------------------------------------------------*
    IF GS_HEADER-ACPVL IS INITIAL.
      LV_VALUE_A = I_DATA-REGMT.
    ELSE.
      LV_VALUE_U = GS_HEADER-ACPVL - I_DATA-REGMT.

      IF LV_VALUE_U LT 0.
        LV_CHECK   = ABAP_TRUE.
        LV_VALUE_U = ABS( LV_VALUE_U ).
        LV_VALUE_A = I_DATA-REGMT - LV_VALUE_U.
      ELSE.
        CLEAR : LV_CHECK.
        LV_VALUE_A = I_DATA-REGMT.
      ENDIF.
    ENDIF.

    DO 3 TIMES.
      ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
      LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
      LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-SGTXT.

      IF LV_GL_LINE EQ 1.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-RENEP.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        LS_ACCOUNTGL-ORDERID     = GS_HEADER-BUDGT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_VALUE_A.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 2.
        LS_ACCOUNTGL-GL_ACCOUNT = GC_GL_PREPAID."GS_HEADER-GLREN.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
*        IF GS_HEADER-FLAGP EQ ABAP_FALSE.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
*        ENDIF.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 3.
        IF LV_CHECK EQ ABAP_TRUE.
          LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-UNACP.
          LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
          LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
          LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                      IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
          LS_GL-BSCHL = GC_DEBIT.
          APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_VALUE_U.
          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        ELSE.
          EXIT.
        ENDIF.
      ENDIF.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                  IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTPAYABLE-ITEMNO_ACC
                  LS_GL-BSCHL
                  ''"GC_CON-BRNCH
                  ''"GC_CON-BUPLA
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

    ENDDO.

    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E .
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
*        MESSAGE s998 WITH LS_RETURN-MESSAGE_V2 DISPLAY LIKE GC_E.
        MOVE-CORRESPONDING I_DATA TO R.
        R-STATU = GC_SUCESS.
        R-MESSG = LS_RETURN-MESSAGE_V2.
        R-FIDZ1 = LS_RETURN-MESSAGE_V2+0(10).
        R-FIYER = LS_RETURN-MESSAGE_V2+14(4).
        LCL_UTIL=>COMMIT( ).
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_ITEMT
                                     I_MONIT    = I_DATA-MONIT ).
      ENDIF.
    ELSE.
*      MESSAGE s998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
      MOVE-CORRESPONDING I_DATA TO R.
      R-STATU = GC_ERROR.
      R-MESSG = LS_RETURN-MESSAGE.
    ENDIF.

  ENDMETHOD.
  METHOD POST_MONTLY_Z2.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.
*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( I_DATA-POSTD ).
    LV_DOCUMENTHEADER-DOC_DATE        = I_DATA-POSTD.
    LV_DOCUMENTHEADER-PSTNG_DATE      = I_DATA-POSTD.
    LV_DOCUMENTHEADER-TRANS_DATE      = I_DATA-ENDDT.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( LV_DOCUMENTHEADER-PSTNG_DATE ).
    LV_DOCUMENTHEADER-DOC_TYPE        = 'SA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = 'TEST555'.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-LEDGER_GROUP    = 'Z2'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item
*--------------------------------------------------------------------*
    DO 2 TIMES.

      ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
      LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
      LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-SGTXT.

      IF LV_GL_LINE EQ 1.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-RENEP.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        LS_ACCOUNTGL-ORDERID     = GS_HEADER-BUDGT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 2.
        LS_ACCOUNTGL-GL_ACCOUNT = GC_GL_PREPAID.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
*        IF GS_HEADER-FLAGP EQ ABAP_FALSE.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
*        ENDIF.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = I_DATA-REGMT * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

      ENDIF.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                  IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTPAYABLE-ITEMNO_ACC
                  LS_GL-BSCHL
                  ''"GC_CON-BRNCH
                  ''"GC_CON-BUPLA
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

    ENDDO.

    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E .
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
*        MESSAGE s998 WITH LS_RETURN-MESSAGE_V2 DISPLAY LIKE GC_E.
        MOVE-CORRESPONDING I_DATA TO R.
        R-STATU = GC_SUCESS.
        R-MESSG = LS_RETURN-MESSAGE_V2.
        R-FIDZ2 = LS_RETURN-MESSAGE_V2+0(10).
        R-FIYER = LS_RETURN-MESSAGE_V2+14(4).
        LCL_UTIL=>COMMIT( ).
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_ITEML
                                     I_MONIT    = I_DATA-MONIT ).
      ENDIF.
    ELSE.
*      MESSAGE s998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
      MOVE-CORRESPONDING I_DATA TO R.
      R-STATU = GC_ERROR.
      R-MESSG = LS_RETURN-MESSAGE.
    ENDIF.
  ENDMETHOD.
  METHOD POST_MONTLY_Z1_EXP.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.

    DATA : LV_VALUE_A TYPE P DECIMALS 2,
           LV_VALUE_U TYPE P DECIMALS 2.

*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( SY-DATUM ).
    LV_DOCUMENTHEADER-DOC_DATE        = I_DATA-POSTD.
    LV_DOCUMENTHEADER-PSTNG_DATE      = I_DATA-POSTD.
    LV_DOCUMENTHEADER-TRANS_DATE      = I_DATA-ENDDT.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( LV_DOCUMENTHEADER-PSTNG_DATE ).
    LV_DOCUMENTHEADER-DOC_TYPE        = 'SA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = 'TEST555'.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-LEDGER_GROUP    = 'Z1'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item
*--------------------------------------------------------------------*
    IF GS_HEADER-ACPVL IS INITIAL.
      LV_VALUE_A = I_DATA-REGMT.
    ELSE.
      LV_VALUE_U = GS_HEADER-ACPVL - I_DATA-REGMT.

      IF LV_VALUE_U LT 0.
        LV_VALUE_U = ABS( LV_VALUE_U ).
        LV_VALUE_A = I_DATA-REGMT - LV_VALUE_U.
      ELSE.
        LV_VALUE_A = I_DATA-REGMT.
      ENDIF.
    ENDIF.

    DO 2 TIMES.
      ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
      LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.

      IF LV_GL_LINE EQ 1.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_HEADER-GLREN.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        IF GS_HEADER-FLAGP EQ ABAP_FALSE.
          LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
        ENDIF.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_VALUE_U * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 2.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-UNACP.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LS_ACCOUNTGL-COSTCENTER = GV_COST_CENTER.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_VALUE_U.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ENDIF.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                  IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTPAYABLE-ITEMNO_ACC
                  LS_GL-BSCHL
                  ''"GC_CON-BRNCH
                  ''"GC_CON-BUPLA
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

    ENDDO.

    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E .
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
*        MESSAGE s998 WITH LS_RETURN-MESSAGE_V2 DISPLAY LIKE GC_E.
        MOVE-CORRESPONDING I_DATA TO R.
        R-STATU = GC_SUCESS.
        R-MESSG = LS_RETURN-MESSAGE_V2.
        R-FIDZ1 = LS_RETURN-MESSAGE_V2+0(10).
        R-FIYER = LS_RETURN-MESSAGE_V2+14(4).
        LCL_UTIL=>COMMIT( ).
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_ITEMT
                                     I_MONIT    = I_DATA-MONIT ).
      ENDIF.
    ELSE.
*      MESSAGE s998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
      MOVE-CORRESPONDING I_DATA TO R.
      R-STATU = GC_ERROR.
      R-MESSG = LS_RETURN-MESSAGE.
    ENDIF.
  ENDMETHOD.
  METHOD HANDLE_TOOLBAR_AMT.

    DATA: LS_TOOLBAR  TYPE STB_BUTTON.

    CLEAR LS_TOOLBAR.
    MOVE 3 TO LS_TOOLBAR-BUTN_TYPE.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    CLEAR LS_TOOLBAR.
    MOVE GC_DEL TO LS_TOOLBAR-FUNCTION.
    MOVE ICON_DELETE TO LS_TOOLBAR-ICON.
    MOVE GC_DELETE TO LS_TOOLBAR-QUICKINFO.
    MOVE SPACE TO LS_TOOLBAR-DISABLED.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

  ENDMETHOD.
  METHOD HANDLE_USER_COMMAND_AMT.
    CASE E_UCOMM.
      WHEN GC_DEL.
        DELETE_ROW( ).
    ENDCASE.
  ENDMETHOD.
  METHOD DELETE_ROW.
    REFRESH GT_AMT.
    CALL METHOD GCL_ALV_AMT->REFRESH_TABLE_DISPLAY.
  ENDMETHOD.
  METHOD CHECK_POST_START.
    SELECT COUNT( * )
      FROM ZSDSFIT022
      WHERE CONTN EQ GS_HEADER-CONTN
        AND LIFNR EQ GS_HEADER-LIFNR
        AND TYPES EQ GC_START
        AND DFLAG EQ SPACE.
    IF SY-SUBRC NE 0.
      R = ABAP_TRUE.
      LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E16 ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.                    "lcl_eventhandler IMPLEMENTATION
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR,
      SELECT_MODE.
    CLASS-METHODS :
*      INIT_DATA,
      START_PROCESS,
      GET_DATA,
      GET_DATA_REPORT,
      GET_ADDTIONAL_DATA,
      SHOW_REPORT,
      SET_LAYOUT_OUTPUT,
      BUILD_FCAT,
      SET_SORT,
      SET_ALV_GRID,
      HTML_TOP_OF_PAGE,
      SET_HEADER_STATUS_SCREEN,
      CREATE_OBJECT_ALV,
      CREATE_OBJECT_ALV_AMT,
      EXCLUDING_TOOLBAR,
      EXCLUDING_TOOLBAR_AMT,
      ADD_EVENT,
      GUI_STATUS,
      GUI_STATUS_AMT,
      SET_LAYOUT_OO,
      SET_LAYOUT_OO_AMT,
      SET_FCAT_OO,
      SET_FCAT_OO_AMT,
      CALL_ALV,
      CALL_ALV_AMT,
      TRANSFER_DATA_TO_ALV,
      GEN_ALV_1_AMT,
      GEN_ALV_MULTI_AMT,
      GET_END_DATE IMPORTING I_START_DATE      TYPE SY-DATUM
                             I_MONTH           TYPE T5A4A-DLYMO
                             I_END             TYPE I
                   RETURNING VALUE(R_END_DATE) TYPE SY-DATUM,
      SET_SCREEN,
      ATTACH_FILE,
      SAVE RETURNING VALUE(R) TYPE CHAR1,
      CHECK_SAVE RETURNING VALUE(R) TYPE CHAR1,
      SAVE_VALIDATION RETURNING VALUE(R_ERROR) TYPE CHAR255,
      CHECK_CONTRACT_CREATE RETURNING VALUE(R) TYPE CHAR255,
      GET_NEXT_MONTH IMPORTING I_START_DATE        TYPE SY-DATUM
                               I_MONTH             TYPE T5A4A-DLYMO
                     RETURNING VALUE(R_NEXT_MONTH) TYPE SY-DATUM,
      GET_MONTH_FROM_2_DATE IMPORTING I_DATE_START   TYPE SY-DATUM
                                      I_DATE_END     TYPE SY-DATUM
                            RETURNING VALUE(R_MONTH) TYPE I,
      GET_DAYS_FROM_2_DATE IMPORTING I_DATE_START  TYPE SY-DATUM
                                     I_DATE_END    TYPE SY-DATUM
                           RETURNING VALUE(R_DAYS) TYPE I,
      GET_TOTAL_DAY IMPORTING I_DATE_START  TYPE SY-DATUM
                    RETURNING VALUE(R_DAYS) TYPE I,
      SET_FIELD_SUM IMPORTING I_FIELD       TYPE SLIS_FIELDNAME
                    RETURNING VALUE(R_FLAG) TYPE FLAG,
      ADJ_DEPRE IMPORTING I_SUM_DEP    LIKE GS_RESULT-DEPRC
                          I_SUM_AMT    LIKE GS_RESULT-AMOZT
                          I_DEP_MON    LIKE GS_RESULT-DEPRC
                RETURNING VALUE(R_DEP) LIKE GS_RESULT-DEPRC,
      CREATE_OBJECT_REMARK,
      SET_REMARK IMPORTING I_INPUT LIKE GS_HEADER-REMAK,
      GET_REMARK RETURNING VALUE(R_REMARK) LIKE GS_HEADER-REMAK,
      SET_DISABLE_FILED IMPORTING I_FIELD  TYPE ANY
                        RETURNING VALUE(R) TYPE LVC_T_STYL,
      SET_ENABLE_FILED  IMPORTING I_FIELD  TYPE ANY
                        RETURNING VALUE(R) TYPE LVC_T_STYL,
      UPDATE_ZSDSFIT002, "IMPORTING I_HEADER TYPE GY_HEADER,
      UPDATE_ZSDSFIT012,
      UPDATE_ZSDSFIT003, "IMPORTING I_DETAIL LIKE Gt_result,
      UPDATE_ZSDSFIT004, "IMPORTING I_GL     TYPE GY_GL,
      UPDATE_ZSDSFIT005, "IMPORTING I_ATTACH LIKE GT_ATTACH_FILE.
      CHECK_DEL_DETAIL,
      GET_DATA_FOR_UPDATE,
      GET_ZSDSFIT002,
      GET_ZSDSFIT003,
      GET_ZSDSFIT004,
      GET_ZSDSFIT005,
      EXCLUDE_TOOL_101,
      DELETE_FILE,
      END_CONTRACT,
      GET_VENDOR_NAME,
      ADD_AMT,
      CLEAR_ALL,
      SET_RADIO,
      PV,
      NPV,
      POST_START,
      POST_END,
      SAMPLE,
      MIGRATION,
      GET_ZSDSFIT012,
      GET_ZSDSFIT022,
      UPDATE_RESULT,
      POPUP_CONFIRM IMPORTING I_DATA   TYPE ANY
                    RETURNING VALUE(R) TYPE CHAR1,
      POST_ST,
      POST_ST_ASSET RETURNING VALUE(R) TYPE CHAR255,
      POST_ST_NO_ASSET,
      POST_ASSET_ACQUISITION RETURNING VALUE(R) TYPE CHAR255,
      CHECK_PARAMETER RETURNING VALUE(R) TYPE FLAG,
      GET_GL_ASSET_CLEARING RETURNING VALUE(R) LIKE GS_FI-DEBIT,
      RETIREMENT_ASSET IMPORTING I_DATA   TYPE SY-DATUM
                                 I_LEDGER TYPE BF_TARGET_LDGRP
                                 I_TYPE   TYPE CHAR5
                       RETURNING VALUE(R) TYPE CHAR255,
      POST_END_INTEREST IMPORTING I_DATA TYPE SY-DATUM,
      GET_POSTING_DATE RETURNING VALUE(R) TYPE SY-DATUM,
      GET_COST_CENTER.
*      GET_FISC_YEAR IMPORTING I_DATA   TYPE SY-DATUM
*                    RETURNING VALUE(R) TYPE BKPF-GJAHR,
*      GET_FISC_PERIOD IMPORTING I_DATA   TYPE SY-DATUM
*                      RETURNING VALUE(R) TYPE BKPF-MONAT,
*      UPDATE_ZSDSFIT022 IMPORTING I_DOC_NO   TYPE ANY
*                                  I_COM_CODE TYPE ANY
*                                  I_YEAR     TYPE ANY
*                                  I_TYPE     TYPE ANY.

    CLASS-DATA :
      LO TYPE REF TO LCL_DATA.
ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
*  METHOD INIT_DATA.
*
*  ENDMETHOD.
  METHOD CONSTRUCTOR.
    GS_HEADER-WAERS               = TEXT-101.
    GS_HEADER-TEXT_FOR_RATE       = TEXT-102.
    GS_HEADER-TEXT_FOR_RATE_EIR   = TEXT-102.
    GS_HEADER-TEXT_LEASE_TERM     = TEXT-103.
    GS_HEADER-TEXT_PAYMENT_PERIOD = TEXT-104.
    GS_HEADER-TEXT_TIMES          = TEXT-105.
    GS_HEADER-TEXT_CUR_COST       = GS_HEADER-WAERS.
    GS_HEADER-TEXT_CUR_REST       = GS_HEADER-WAERS.
    GS_HEADER-TEXT_CUR_RENT       = GS_HEADER-WAERS.
    GS_HEADER-TEXT_CUR_DEPO       = GS_HEADER-WAERS.
    GS_HEADER-TEXT_CUR_VAT        = GS_HEADER-WAERS.
    GS_GL-INTER                   = GC_GL_INTEREST.
    GS_GL-DEFER                   = GC_GL_DEFER_INS.
    GS_GL-RENEP                   = GC_GL_RENT_EXP.
    GS_GL-UNACP                   = GC_GL_UNACCEPT_VAL.
  ENDMETHOD.
  METHOD GET_DATA.
    IF LO IS INITIAL.
      CREATE OBJECT LO.
    ENDIF.
    LO->SELECT_MODE( ).
*    LO->START_PROCESS( ).
  ENDMETHOD.
  METHOD SELECT_MODE.
    DATA : LV_CHECK TYPE FLAG.
    LV_CHECK = CHECK_PARAMETER( ).
    IF LV_CHECK EQ ABAP_FALSE.
      CALL SCREEN 103.
    ENDIF.
  ENDMETHOD.
  METHOD START_PROCESS.
    IF     GV_MODE EQ GC_MODE-UPDATE.
      SET_REMARK( GS_HEADER-REMAK ).
      CALL SCREEN 102.
    ELSEIF GV_MODE EQ GC_MODE-CREATE.
      IF LO IS BOUND.
        CREATE OBJECT LO.
      ENDIF.
      CALL SCREEN 101.
    ELSEIF GV_MODE EQ GC_MODE-DELETE.
      CALL SCREEN 102.
    ELSEIF GV_MODE EQ GC_MODE-REPORT.
      GET_DATA_REPORT( ).
    ENDIF.
  ENDMETHOD.
  METHOD GET_ADDTIONAL_DATA.
    FIELD-SYMBOLS <LFS_RESULT> LIKE LINE OF GT_RESULT.
    LOOP AT GT_RESULT ASSIGNING <LFS_RESULT>.

    ENDLOOP.
  ENDMETHOD.
  METHOD SHOW_REPORT.
    SET_LAYOUT_OUTPUT( ).
    BUILD_FCAT( ).
    SET_SORT( ).
    SET_ALV_GRID( ).
  ENDMETHOD.
  METHOD SET_LAYOUT_OUTPUT.
    GS_LAYOUT-ZEBRA             = GC_X.
    GS_LAYOUT-COLWIDTH_OPTIMIZE = GC_X.
  ENDMETHOD.
  METHOD BUILD_FCAT.
    DATA:
       LS_FCAT TYPE SLIS_FIELDCAT_ALV.

    CLEAR LS_FCAT.
*  ls_fcat-ref_tabname = 'GT_RESULT'.
*    LS_FCAT-FIELDNAME   = 'CHECK'.
*    LS_FCAT-SELTEXT_S   = 'Check'.
*    LS_FCAT-SELTEXT_M   = 'Check'.
*    LS_FCAT-SELTEXT_L   = 'Check'.
*    LS_FCAT-CHECKBOX    = 'X'.
*    LS_FCAT-INPUT       = 'X'.
*    LS_FCAT-EDIT        = 'X'.
*    APPEND LS_FCAT TO GT_FCAT.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F TYPE C VALUE 'F',
                LC_T TYPE C VALUE 'T',
                LC_d TYPE C VALUE 'D'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.
*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABNAME = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-SELTEXT_S = <LFS>.
        LS_FCAT-SELTEXT_M = <LFS>.
        LS_FCAT-SELTEXT_L = <LFS>.
      ENDIF.

      APPEND LS_FCAT TO GT_FCAT.
    ENDDO.

  ENDMETHOD.
  METHOD SET_SORT.
**  CLEAR gs_sort.
**  gs_sort-fieldname = 'LIFNR'.
**  gs_sort-spos = '1'.
**  gs_sort-up = 'X'.
***  gs_sort-subtot = 'X'.
**  APPEND gs_sort TO gt_sort.
  ENDMETHOD.
  METHOD SET_ALV_GRID.
*SAPLKKBL
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        I_CALLBACK_PROGRAM      = SY-REPID
        "I_CALLBACK_PF_STATUS_SET = 'PF_STATUS_1'
        I_callback_user_command = 'USER_COMMAND'
*       I_CALLBACK_TOP_OF_PAGE  = ' '
*       i_html_height_top       = 12
*       I_CALLBACK_HTML_TOP_OF_PAGE       = 'HTML_TOP_OF_PAGE'
*       I_CALLBACK_HTML_END_OF_LIST       = ' '
*       I_STRUCTURE_NAME        =
*       I_BACKGROUND_ID         = ' '
*       I_GRID_TITLE            =
*       I_GRID_SETTINGS         =
        IS_LAYOUT               = GS_LAYOUT
        IT_FIELDCAT             = GT_FCAT
*       IT_EXCLUDING            =
*       IT_SPECIAL_GROUPS       =
        IT_SORT                 = GT_SORT
*       IT_FILTER               =
*       IS_SEL_HIDE             =
        I_DEFAULT               = GC_X
        I_SAVE                  = GC_A
*       IS_VARIANT              =
*       IT_EVENTS               =
*       IT_EVENT_EXIT           =
*       IS_PRINT                =
*       IS_REPREP_ID            =
*       I_SCREEN_START_COLUMN   = 0
*       I_SCREEN_START_LINE     = 0
*       I_SCREEN_END_COLUMN     = 0
*       I_SCREEN_END_LINE       = 0
*       I_HTML_HEIGHT_TOP       = 0
*       I_HTML_HEIGHT_END       = 0
*       IT_ALV_GRAPHICS         =
*       IT_HYPERLINK            =
*       IT_ADD_FIELDCAT         =
*       IT_EXCEPT_QINFO         =
*       IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*       E_EXIT_CAUSED_BY_CALLER =
*       ES_EXIT_CAUSED_BY_USER  =
      TABLES
        T_OUTTAB                = GT_REPORT
      EXCEPTIONS
        PROGRAM_ERROR           = 1
        OTHERS                  = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMETHOD.
  METHOD HTML_TOP_OF_PAGE.
*  DATA: text TYPE sdydo_text_element.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 100.
*  text =  'Company Code Data'.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'HEADING'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*
*  text = 'User Name : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uname.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*
*  text = 'Date : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-datum.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*  text = 'Time : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uzeit.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
  ENDMETHOD.
  METHOD SET_HEADER_STATUS_SCREEN.
    EXCLUDE_TOOL_101( ).
    SET PF-STATUS 'ZPF_STATUS_101' EXCLUDING GT_EC_TOOL_101.
    SET TITLEBAR 'Z01'.
  ENDMETHOD.
  METHOD CREATE_OBJECT_ALV.
    CREATE OBJECT GCL_CONT
      EXPORTING
        CONTAINER_NAME = GC_CON_NAME.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CREATE OBJECT GCL_ALV
      EXPORTING
        I_PARENT = GCL_CONT.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD CREATE_OBJECT_ALV_AMT.
    CREATE OBJECT GCL_CONT_AMT
      EXPORTING
        CONTAINER_NAME = GC_CON_NAME_AMT.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CREATE OBJECT GCL_ALV_AMT
      EXPORTING
        I_PARENT = GCL_CONT_AMT.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD ADD_EVENT.
    CALL METHOD GCL_ALV->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_DATA_CHANGED FOR GCL_ALV.

  ENDMETHOD.
  METHOD GUI_STATUS.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_USER_COMMAND FOR GCL_ALV.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_TOOLBAR FOR GCL_ALV.
  ENDMETHOD.
  METHOD GUI_STATUS_AMT.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_USER_COMMAND_AMT FOR GCL_ALV_AMT.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_TOOLBAR_AMT FOR GCL_ALV_AMT.
  ENDMETHOD.
  METHOD SET_LAYOUT_OO.
    CONSTANTS LC_STYLE TYPE C LENGTH 5 VALUE 'ALVED'.

    GS_LAYOUT_OO-STYLEFNAME = LC_STYLE.

    CALL METHOD GCL_ALV->SET_FRONTEND_LAYOUT
      EXPORTING
        IS_LAYOUT = GS_LAYOUT_OO.
  ENDMETHOD.
  METHOD SET_LAYOUT_OO_AMT.
    CONSTANTS LC_STYLE TYPE C LENGTH 5 VALUE 'ALVED'.

    GS_LAYOUT_OO-STYLEFNAME = LC_STYLE.

    CALL METHOD GCL_ALV_AMT->SET_FRONTEND_LAYOUT
      EXPORTING
        IS_LAYOUT = GS_LAYOUT_OO.
  ENDMETHOD.
  METHOD SET_FCAT_OO.

    DATA:
       LS_FCAT TYPE LVC_S_FCAT.

    CONSTANTS : LC_CHECK        TYPE C LENGTH 5  VALUE 'CHECK',
                LC_CHECK_T      TYPE C LENGTH 5  VALUE 'Check',
                LC_POSTD        TYPE C LENGTH 5  VALUE 'POSTD',
                LC_POSTD_T      TYPE C LENGTH 12 VALUE 'Posting Date',
                LC_REF_DATE     TYPE C LENGTH 5  VALUE 'DATUM',
                LC_REF_DATE_TEB TYPE C LENGTH 4  VALUE 'SYST'.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F_OO TYPE C VALUE 'X',
                LC_T_OO TYPE C VALUE 'Y',
                LC_D_OO TYPE C VALUE 'Z'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.

    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = LC_CHECK.
    LS_FCAT-COLTEXT   = LC_CHECK_T.
    LS_FCAT-CHECKBOX  = ABAP_TRUE.
    LS_FCAT-EDIT      = ABAP_TRUE.
    APPEND LS_FCAT TO GT_FCAT_OO.
    CLEAR : LS_FCAT.

    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = LC_POSTD.
    LS_FCAT-REF_FIELD = LC_REF_DATE.
    LS_FCAT-REF_TABLE = LC_REF_DATE_TEB.
    LS_FCAT-COLTEXT   = LC_POSTD_T.
    LS_FCAT-EDIT      = ABAP_TRUE.
    APPEND LS_FCAT TO GT_FCAT_OO.
    CLEAR : LS_FCAT.

*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABLE = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-COLTEXT = <LFS>.
      ENDIF.

      LS_FCAT-DO_SUM = LCL_DATA=>SET_FIELD_SUM( LS_FCAT-FIELDNAME ).
      APPEND LS_FCAT TO GT_FCAT_OO.
    ENDDO.

  ENDMETHOD.
  METHOD SET_FCAT_OO_AMT.

    DATA:
       LS_FCAT TYPE LVC_S_FCAT.

    CONSTANTS : LC_CHECK   TYPE C LENGTH 5 VALUE 'CHECK',
                LC_CHECK_T TYPE C LENGTH 5 VALUE 'Check'.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F_OO TYPE C VALUE 'U',
                LC_T_OO TYPE C VALUE 'V',
                LC_D_OO TYPE C VALUE 'W'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.

*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME = LC_CHECK.
*    LS_FCAT-COLTEXT   = LC_CHECK_T.
*    LS_FCAT-CHECKBOX  = ABAP_TRUE.
*    LS_FCAT-EDIT      = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT_OO_AMT.
*    CLEAR : LS_FCAT.

*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABLE = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-COLTEXT = <LFS>.
      ENDIF.

*      LS_FCAT-DO_SUM = LCL_DATA=>SET_FIELD_SUM( LS_FCAT-FIELDNAME ).
      APPEND LS_FCAT TO GT_FCAT_OO_AMT.
    ENDDO.

  ENDMETHOD.
  METHOD CALL_ALV.
    CALL METHOD GCL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT_OO
        IT_TOOLBAR_EXCLUDING = GT_TOOLBAR_EXCLUDING
      CHANGING
        IT_OUTTAB            = GT_RESULT[]
        IT_FIELDCATALOG      = GT_FCAT_OO.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD CALL_ALV_AMT.
    CALL METHOD GCL_ALV_AMT->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        I_DEFAULT            = SPACE
        IS_LAYOUT            = GS_LAYOUT_OO_AMT
        IT_TOOLBAR_EXCLUDING = GT_TOOLBAR_EXCLUDING_AMT
      CHANGING
        IT_OUTTAB            = GT_AMT[]
        IT_FIELDCATALOG      = GT_FCAT_OO_AMT.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD TRANSFER_DATA_TO_ALV.

    IF GT_AMT IS NOT INITIAL.
      LCL_DATA=>GEN_ALV_MULTI_AMT( ).
    ELSE.
      LCL_DATA=>GEN_ALV_1_AMT( ).
    ENDIF.
    CALL METHOD GCL_ALV->REFRESH_TABLE_DISPLAY.
  ENDMETHOD.
  METHOD GEN_ALV_1_AMT.
    DATA : LV_INTERREST TYPE P DECIMALS 10.

    DATA : LV_SUM     TYPE P DECIMALS 2,
           LV_SUM_DEP TYPE P DECIMALS 2.

    DATA : LV_PERIOD TYPE I.

    IF GS_HEADER-TIMES NE 0.
      IF GS_HEADER-INTEE NE 0.
        LV_INTERREST = ( GS_HEADER-INTEE / 100 ) / 12.
      ELSE.
        LV_INTERREST = ( GS_HEADER-INTER / 100 ) / 12.
      ENDIF.
    ENDIF.

    DATA : LV_END_DAY  TYPE I,
           LV_MONTH    TYPE T5A4A-DLYMO,
           LV_START_DT TYPE SY-DATUM.

    DATA : LV_INDEX TYPE SY-INDEX.

    LV_END_DAY = GS_HEADER-PAYDT+6(2).
    LV_MONTH   = GS_HEADER-PAYMP.


    CLEAR: GT_RESULT[],GV_SUM_INTER.
    LV_PERIOD = GS_HEADER-TIMES.
    DO GS_HEADER-TIMES TIMES.
      LV_INDEX = SY-INDEX.
      GS_RESULT-RUNNG = LV_INDEX.
      IF LV_INDEX EQ 1.
        GS_RESULT-STDDT = GS_HEADER-STADT.
        LV_START_DT     = GS_RESULT-STDDT.
        GS_RESULT-INTER = GS_HEADER-COSEV * LV_INTERREST.
      ELSE.
        GS_RESULT-STDDT = GS_RESULT-ENDDT + 1.
        LV_START_DT     = GET_NEXT_MONTH( EXPORTING I_START_DATE = LV_START_DT
                                                    I_MONTH      = LV_MONTH ).
      ENDIF.

      GS_RESULT-ENDDT  = GET_END_DATE( EXPORTING I_START_DATE = LV_START_DT
                                                 I_MONTH      = LV_MONTH
                                                 I_END        = LV_END_DAY ).

*      IF LV_INDEX EQ GS_HEADER-TIMES.
*        GS_RESULT-ENDDT = GS_HEADER-ENDDT.
*      ENDIF.

      GS_RESULT-TOTAD = GET_TOTAL_DAY( EXPORTING I_DATE_START = GS_RESULT-STDDT ).

      GS_RESULT-USDAY = ( GS_RESULT-ENDDT - GS_RESULT-STDDT ) + 1.
      GS_RESULT-REGMT = GS_HEADER-RENEV.
      GS_RESULT-VATMT = GS_HEADER-VATMT / GS_HEADER-TIMES.

      IF LV_INDEX EQ 1.
*        GS_RESULT-INTER = ( ( GS_HEADER-COSEV * LV_INTERREST ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
*        GS_RESULT-INTER = ( ( GS_RESULT-REGMT * LV_PERIOD ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
        GS_RESULT-AMOZT = GS_RESULT-REGMT - GS_RESULT-INTER.
        GS_RESULT-OUTSC = GS_HEADER-TOTAR - GS_RESULT-REGMT. "GS_HEADER-COSEV - GS_RESULT-AMOZT.
*        GS_RESULT-DEPRC = ( GS_RESULT-USDAY * GS_HEADER-COSEV ) / GS_HEADER-TODAY.
      ELSE.
*        GS_RESULT-DEPRC = ( GS_RESULT-USDAY * GS_RESULT-OUTSC ) / GS_HEADER-TODAY.
*        GS_RESULT-INTER = ( ( GS_RESULT-OUTSC * LV_INTERREST ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
*        GS_RESULT-INTER = ( ( GS_RESULT-REGMT * LV_PERIOD ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
*        GS_RESULT-AMOZT = GS_RESULT-REGMT - GS_RESULT-INTER.
        GS_RESULT-AMOZT =  GS_RESULT-REGMT /   ( (  1 +  LV_INTERREST ) ** LV_PERIOD ) .
        GS_RESULT-INTER = GS_RESULT-REGMT - GS_RESULT-AMOZT.
        GS_RESULT-OUTSC = GS_RESULT-OUTSC - GS_RESULT-REGMT."GS_RESULT-OUTSC - GS_RESULT-AMOZT.
      ENDIF.

      GS_RESULT-DEPRC = ( GS_RESULT-USDAY * GS_HEADER-COSEV ) / GS_HEADER-TODAY.

      IF LV_INDEX EQ GS_HEADER-TIMES.
        IF GS_RESULT-OUTSC NE 0.
          GS_RESULT-AMOZT = GS_HEADER-COSEV - LV_SUM.
          GS_RESULT-INTER = GS_RESULT-REGMT - GS_RESULT-AMOZT.
          GS_RESULT-OUTSC = 0.
        ENDIF.
      ENDIF.

      ADD GS_RESULT-DEPRC TO LV_SUM_DEP.
      ADD GS_RESULT-AMOZT TO LV_SUM.

      IF LV_INDEX EQ GS_HEADER-TIMES.
        GS_RESULT-DEPRC = ADJ_DEPRE( EXPORTING I_SUM_DEP = LV_SUM_DEP
                                               I_SUM_AMT = LV_SUM
                                               I_DEP_MON = GS_RESULT-DEPRC ).

*        GS_RESULT-ALVED = SET_DISABLE_FILED( GC_CHECK ).
      ENDIF.

      GS_RESULT-POSTD = GS_RESULT-ENDDT.
      ADD GS_RESULT-INTER TO GV_SUM_INTER.
      APPEND GS_RESULT TO GT_RESULT.
      LV_PERIOD = LV_PERIOD - 1.
    ENDDO.
  ENDMETHOD.
  METHOD GEN_ALV_MULTI_AMT.
    DATA : LV_INTERREST TYPE P DECIMALS 10.

    DATA : LV_SUM     TYPE P DECIMALS 2,
           LV_SUM_DEP TYPE P DECIMALS 2.

    DATA : LV_END_DAY  TYPE I,
           LV_MONTH    TYPE T5A4A-DLYMO,
           LV_START_DT TYPE SY-DATUM.

    DATA : LV_INDEX TYPE SY-INDEX.

    DATA : LV_TABIX TYPE SY-TABIX.

    DATA : LV_MONTH_AMT TYPE I.

    DATA : LV_LINE TYPE I.

    DATA : LV_PERIOD TYPE I.

    DATA : LV_START_1 LIKE GS_AMT-STDDT.

    CLEAR : GV_SUM_INTER.
    DESCRIBE TABLE GT_AMT LINES LV_LINE.
    READ TABLE GT_AMT INTO GS_AMT INDEX 1.
    GS_HEADER-STADT = GS_AMT-STDDT.
    LV_START_1      = GS_AMT-STDDT.
    READ TABLE GT_AMT INTO GS_AMT INDEX LV_LINE.


    GS_HEADER-ENDDT = GS_AMT-ENDDT.

    GS_HEADER-LEAST = LCL_DATA=>GET_MONTH_FROM_2_DATE( EXPORTING I_DATE_START = GS_HEADER-STADT
                                                                 I_DATE_END   = GS_HEADER-ENDDT ).

    GS_HEADER-TODAY = LCL_DATA=>GET_DAYS_FROM_2_DATE( EXPORTING I_DATE_START = GS_HEADER-STADT
                                                                I_DATE_END   = GS_HEADER-ENDDT ).

    IF GS_HEADER-PAYMP NE 0.
      GS_HEADER-TIMES = GS_HEADER-LEAST / GS_HEADER-PAYMP.
    ENDIF.

*    IF GS_HEADER-TIMES NE 0.
*      IF GS_HEADER-INTEE NE 0.
*        LV_INTERREST = ( GS_HEADER-INTEE / 100 ) / GS_HEADER-TIMES.
*      ELSE.
*        LV_INTERREST = ( GS_HEADER-INTER / 100 ) / GS_HEADER-TIMES.
*      ENDIF.
*    ENDIF.

    LV_END_DAY = GS_HEADER-PAYDT+6(2).
    LV_MONTH   = GS_HEADER-PAYMP.

    CLEAR GT_RESULT[].
    LV_TABIX = 1.

    LV_PERIOD = GS_HEADER-TIMES.
    DO GS_HEADER-TIMES TIMES.
      LV_INDEX  = SY-INDEX.
*      LV_MONTH_AMT = LCL_DATA=>GET_MONTH_FROM_2_DATE( EXPORTING I_DATE_START = GS_AMT-STDDT
      LV_MONTH_AMT = LCL_DATA=>GET_MONTH_FROM_2_DATE( EXPORTING I_DATE_START = LV_START_1
                                                                I_DATE_END   = GS_AMT-ENDDT ).

      IF LV_MONTH_AMT NE 0.
        IF GS_HEADER-INTEE NE 0.
          IF LV_MONTH_AMT LT 12.
            LV_INTERREST = ( GS_HEADER-INTEE / 100 ) / LV_MONTH_AMT.
          ELSE.
            LV_INTERREST = ( GS_HEADER-INTEE / 100 ) / 12.
          ENDIF.
        ELSE.
          IF LV_MONTH_AMT LT 12.
            LV_INTERREST = ( GS_HEADER-INTER / 100 ) / LV_MONTH_AMT.
          ELSE.
            LV_INTERREST = ( GS_HEADER-INTER / 100 ) / 12.
          ENDIF.
        ENDIF.
      ENDIF.

      IF LV_INDEX GT LV_MONTH_AMT.
        ADD 1 TO LV_TABIX.
      ENDIF.

      READ TABLE GT_AMT INTO GS_AMT INDEX LV_TABIX.

      GS_RESULT-RUNNG = LV_INDEX.
      IF LV_INDEX EQ 1.
        GS_RESULT-STDDT = GS_AMT-STDDT."GS_HEADER-STADT.
        LV_START_DT     = GS_RESULT-STDDT.
        GS_RESULT-INTER = GS_HEADER-COSEV * LV_INTERREST.
      ELSE.
        GS_RESULT-STDDT = GS_RESULT-ENDDT + 1.
        LV_START_DT     = GET_NEXT_MONTH( EXPORTING I_START_DATE = LV_START_DT
                                                    I_MONTH      = LV_MONTH ).
      ENDIF.

      GS_RESULT-ENDDT  = GET_END_DATE( EXPORTING I_START_DATE = LV_START_DT
                                                 I_MONTH      = LV_MONTH
                                                 I_END        = LV_END_DAY ).

*      IF LV_INDEX EQ GS_HEADER-TIMES.
*        GS_RESULT-ENDDT = GS_HEADER-ENDDT.
*      ENDIF.

      GS_RESULT-TOTAD = GET_TOTAL_DAY( EXPORTING I_DATE_START = GS_RESULT-STDDT ).

      GS_RESULT-USDAY = ( GS_RESULT-ENDDT - GS_RESULT-STDDT ) + 1.
      GS_RESULT-REGMT = GS_AMT-REGMT."GS_HEADER-RENEV.
      GS_RESULT-VATMT = GS_HEADER-VATMT / GS_HEADER-TIMES.

      IF LV_INDEX EQ 1.
*        GS_RESULT-INTER = ( ( GS_HEADER-COSEV * LV_INTERREST ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
*        GS_RESULT-INTER = ( ( GS_RESULT-REGMT * LV_PERIOD ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
        GS_RESULT-AMOZT = GS_RESULT-REGMT - GS_RESULT-INTER.
        GS_RESULT-OUTSC = GS_HEADER-TOTAR - GS_RESULT-REGMT."GS_HEADER-COSEV - GS_RESULT-AMOZT.
*        GS_RESULT-DEPRC = ( GS_RESULT-USDAY * GS_HEADER-COSEV ) / GS_HEADER-TODAY.
      ELSE.
*        GS_RESULT-DEPRC = ( GS_RESULT-USDAY * GS_RESULT-OUTSC ) / GS_HEADER-TODAY.
*        GS_RESULT-INTER = ( ( GS_RESULT-OUTSC * LV_INTERREST ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
*        GS_RESULT-INTER = ( ( GS_RESULT-REGMT * LV_PERIOD ) * GS_RESULT-USDAY ) / GS_RESULT-TOTAD.
*        GS_RESULT-AMOZT = GS_RESULT-REGMT - GS_RESULT-INTER.
        GS_RESULT-AMOZT =  GS_RESULT-REGMT /   ( (  1 +  LV_INTERREST ) ** LV_PERIOD ) .
        GS_RESULT-INTER = GS_RESULT-REGMT - GS_RESULT-AMOZT.
        GS_RESULT-OUTSC = GS_RESULT-OUTSC - GS_RESULT-REGMT."GS_RESULT-OUTSC - GS_RESULT-AMOZT.
      ENDIF.

      GS_RESULT-DEPRC = ( GS_RESULT-USDAY * GS_HEADER-COSEV ) / GS_HEADER-TODAY.

      IF LV_INDEX EQ GS_HEADER-TIMES.
        IF GS_RESULT-OUTSC NE 0.
          GS_RESULT-AMOZT = GS_HEADER-COSEV - LV_SUM.
          GS_RESULT-INTER = GS_RESULT-REGMT - GS_RESULT-AMOZT.
          GS_RESULT-OUTSC = 0.
        ENDIF.
      ENDIF.

      ADD GS_RESULT-DEPRC TO LV_SUM_DEP.
      ADD GS_RESULT-AMOZT TO LV_SUM.

      IF LV_INDEX EQ GS_HEADER-TIMES.
        GS_RESULT-DEPRC = ADJ_DEPRE( EXPORTING I_SUM_DEP = LV_SUM_DEP
                                               I_SUM_AMT = LV_SUM
                                               I_DEP_MON = GS_RESULT-DEPRC ).

*        GS_RESULT-ALVED = SET_DISABLE_FILED( GC_CHECK ).
      ENDIF.

      GS_RESULT-POSTD = GS_RESULT-ENDDT.
      ADD GS_RESULT-INTER TO GV_SUM_INTER.
      APPEND GS_RESULT TO GT_RESULT.
      LV_PERIOD = LV_PERIOD - 1.
    ENDDO.
  ENDMETHOD.
  METHOD GET_END_DATE.

    DATA : LV_TMP_MONTH LIKE I_MONTH,
           lv_TMP_START LIKE I_START_DATE.

    LV_TMP_MONTH = I_MONTH.
    lV_TMP_START = I_START_DATE.
    IF LV_TMP_MONTH GT 1.
      LV_TMP_MONTH = LV_TMP_MONTH - 1.
      lv_TMP_START = GET_NEXT_MONTH( EXPORTING I_START_DATE = lv_TMP_START
                                               I_MONTH      = LV_TMP_MONTH ).
    ENDIF.

    IF GS_HEADER-FLAGE EQ ABAP_TRUE.
      CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
        EXPORTING
          DAY_IN            = lV_TMP_START
        IMPORTING
          LAST_DAY_OF_MONTH = R_END_DATE
        EXCEPTIONS
          DAY_IN_NO_DATE    = 1
          OTHERS            = 2.
    ELSE.
      R_END_DATE      = lV_TMP_START.
      R_END_DATE+6(2) = I_END.
    ENDIF.
  ENDMETHOD.
  METHOD SET_SCREEN.
    LOOP AT SCREEN.
      IF SCREEN-NAME EQ GC_FILED_PAYDT.
        IF GS_HEADER-FLAGE EQ ABAP_TRUE.
          SCREEN-INPUT = 0.
          CLEAR : GS_HEADER-PAYDT.
        ELSE.
          SCREEN-INPUT = 1.
        ENDIF.
        MODIFY SCREEN.
      ENDIF.

*      IF GV_MODE EQ GC_MODE-UPDATE OR
*         GV_MODE EQ GC_MODE-REPOTU.
      IF GS_HEADER-FISCO IS NOT INITIAL.
        IF SCREEN-NAME EQ GC_BOT_BT_GEN OR
           SCREEN-NAME EQ GC_BOT_BT_STA.
          SCREEN-INPUT  = 0.
          SCREEN-ACTIVE = 0.
          MODIFY SCREEN.
        ENDIF.

        IF SCREEN-NAME EQ GC_BOT_BT_GEN OR
           SCREEN-NAME EQ GC_BOT_BT_STA.
          SCREEN-INPUT  = 0.
          SCREEN-ACTIVE = 0.
          MODIFY SCREEN.
        ENDIF.

        IF SCREEN-NAME EQ GC_BOT_ANLN1 OR
           SCREEN-NAME EQ GC_BOT_ANLN2.
          SCREEN-INPUT  = 0.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF GV_DISABLE_END EQ ABAP_TRUE.
        IF SCREEN-NAME EQ GC_BOT_BT_END.
          SCREEN-INPUT  = 0.
          MODIFY SCREEN.
        ENDIF.
      ELSE.
        IF SCREEN-NAME EQ GC_BOT_BT_END.
          SCREEN-INPUT  = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF GS_HEADER-FIRCO IS NOT INITIAL.
        SCREEN-INPUT  = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD ATTACH_FILE.

    DATA : LV_FILE_PATH TYPE IBIPPARMS-PATH.

    DATA : LV_LENGTH TYPE I.

    DATA : LV_DATA_XSTRING TYPE XSTRING.

    DATA : BEGIN OF LS_DATA,
             FIELD(255),
           END OF LS_DATA.
    DATA : LT_DATA LIKE TABLE OF LS_DATA,
           LV_NAME TYPE STRING.

    CONSTANTS : BEGIN OF LC_CON,
                  PATH TYPE DYNPREAD-FIELDNAME VALUE 'PATH',
                  BIN  TYPE CHAR10 VALUE 'BIN',
                END OF LC_CON.

    CALL FUNCTION 'F4_FILENAME'
      EXPORTING
        PROGRAM_NAME  = SY-REPID
        DYNPRO_NUMBER = SY-DYNNR
        FIELD_NAME    = LC_CON-PATH
      IMPORTING
        FILE_NAME     = LV_FILE_PATH.

    IF LV_FILE_PATH IS NOT INITIAL.
      LV_NAME = LV_FILE_PATH.

      CALL FUNCTION 'GUI_UPLOAD'
        EXPORTING
          FILENAME                = LV_NAME
          FILETYPE                = LC_CON-BIN
        IMPORTING
          FILELENGTH              = LV_LENGTH
        TABLES
          DATA_TAB                = LT_DATA
        EXCEPTIONS
          FILE_OPEN_ERROR         = 1
          FILE_READ_ERROR         = 2
          NO_BATCH                = 3
          GUI_REFUSE_FILETRANSFER = 4
          INVALID_TYPE            = 5
          NO_AUTHORITY            = 6
          UNKNOWN_ERROR           = 7
          BAD_DATA_FORMAT         = 8
          HEADER_NOT_ALLOWED      = 9
          SEPARATOR_NOT_ALLOWED   = 10
          HEADER_TOO_LONG         = 11
          UNKNOWN_DP_ERROR        = 12
          ACCESS_DENIED           = 13
          DP_OUT_OF_MEMORY        = 14
          DISK_FULL               = 15
          DP_TIMEOUT              = 16
          OTHERS                  = 17.
      .
      IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
        EXPORTING
          INPUT_LENGTH = LV_LENGTH
        IMPORTING
          BUFFER       = LV_DATA_XSTRING
        TABLES
          BINARY_TAB   = LT_DATA
        EXCEPTIONS
          FAILED       = 1
          OTHERS       = 2.
      IF SY-SUBRC <> 0.
* Implement suitable error handling here
      ENDIF.




    ENDIF.

  ENDMETHOD.
  METHOD CHECK_SAVE.
    DATA : LV_CONFIRM TYPE CHAR1.

    SELECT COUNT( * )
      FROM ZSDSFIT002
      WHERE CONTN EQ GS_HEADER-CONTN
        AND LIFNR EQ GS_HEADER-LIFNR.
    IF SY-SUBRC NE 0.
      LV_CONFIRM = POPUP_CONFIRM( TEXT-110 ).
      IF LV_CONFIRM EQ GC_ONE.
        R = SAVE( ).
      ELSE.
        R = ABAP_TRUE.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD SAVE.
    DATA : LV_ERROR TYPE CHAR255.
    LV_ERROR = SAVE_VALIDATION( ).
    IF LV_ERROR IS INITIAL.
      UPDATE_ZSDSFIT002( ).
      CHECK_DEL_DETAIL( ).
      UPDATE_ZSDSFIT003( ).
      UPDATE_ZSDSFIT005( ).
      UPDATE_ZSDSFIT012( ).
      LCL_UTIL=>COMMIT( ).
      GV_MODE = GC_MODE-UPDATE.
      MESSAGE S998 WITH TEXT-S01.
*    ELSE.
*      R = LV_ERROR.
*      MESSAGE S998 WITH LV_ERROR DISPLAY LIKE GC_E.
    ENDIF.
  ENDMETHOD.
  METHOD SAVE_VALIDATION.
    IF GS_HEADER-CONTN IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E06 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-ANLN1 IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E07 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-WAERS IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E08 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-INTER IS INITIAL AND
       GS_HEADER-INTEE IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E09 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-LIFNR IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E10 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-STADT IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E11 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-ENDDT IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E12 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-RENEV IS INITIAL AND
       GT_AMT[]        IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E13 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-PAYMP IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E14 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-FLAGE EQ ABAP_FALSE AND
       GS_HEADER-PAYDT IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E15 ).
      RETURN.
    ENDIF.
    IF GS_HEADER-GLREN IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E21 ).
      RETURN.
    ENDIF.

    IF GS_HEADER-PRCTR IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E22 ).
      RETURN.
    ENDIF.

    IF GS_HEADER-BUDGT IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E30 ).
      RETURN.
    ENDIF.

    IF GT_RESULT[] IS INITIAL.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E18 ).
      RETURN.
    ENDIF.

    IF GV_ASSET EQ ABAP_TRUE.
      R_ERROR = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E19 ).
      RETURN.
    ENDIF.

    IF GV_MODE EQ GC_MODE-CREATE.
      R_ERROR = CHECK_CONTRACT_CREATE( ).
      RETURN.
    ENDIF.

  ENDMETHOD.
  METHOD CHECK_CONTRACT_CREATE.
    IF GS_HEADER-EXTED EQ ABAP_FALSE.
      SELECT COUNT(*)
      FROM ZSDSFIT002
     WHERE CONTN EQ GS_HEADER-CONTN
       AND LIFNR EQ GS_HEADER-LIFNR.
      IF SY-SUBRC EQ 0.
        R = LCL_UTIL=>SHOW_MESSAGE_ERROR( TEXT-E17 ).
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD GET_NEXT_MONTH.
    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        DATE      = I_START_DATE
        DAYs      = 0
        MONTHS    = I_MONTH
        YEARS     = 0
      IMPORTING
        CALC_DATE = R_NEXT_MONTH.
  ENDMETHOD.
  METHOD GET_MONTH_FROM_2_DATE.
    DATA : E_MONTH TYPE VTBBEWE-ATAGE.

    CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
      EXPORTING
        I_DATE_FROM = I_DATE_START
        I_DATE_TO   = I_DATE_END
      IMPORTING
        E_MONTHS    = E_MONTH.

    R_MONTH = E_MONTH.
  ENDMETHOD.
  METHOD GET_DAYS_FROM_2_DATE.
    DATA : E_DAYS TYPE VTBBEWE-ATAGE.

    CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
      EXPORTING
        I_DATE_FROM = I_DATE_START
        I_DATE_TO   = I_DATE_END
      IMPORTING
        E_DAYS      = E_DAYS.

    R_DAYS = E_DAYS + 1.
  ENDMETHOD.
  METHOD GET_TOTAL_DAY.

    DATA : LV_TMP_START TYPE SY-DATUM,
           LV_LAST_DATY TYPE SY-DATUM.

    DATA : LV_DAYS TYPE VTBBEWE-ATAGE.

    LV_TMP_START      = I_DATE_START.
    LV_TMP_START+6(2) = 01.

    CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
      EXPORTING
        DAY_IN            = lV_TMP_START
      IMPORTING
        LAST_DAY_OF_MONTH = LV_LAST_DATY
      EXCEPTIONS
        DAY_IN_NO_DATE    = 1
        OTHERS            = 2.

    CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
      EXPORTING
        I_DATE_FROM = lV_TMP_START
        I_DATE_TO   = LV_LAST_DATY
      IMPORTING
        E_DAYS      = LV_DAYS.

    R_DAYS = LV_DAYS + 1.

  ENDMETHOD.
  METHOD SET_FIELD_SUM.
    IF I_FIELD EQ TEXT-X04 OR
       I_FIELD EQ TEXT-X05 OR
       I_FIELD EQ TEXT-X06 OR
       I_FIELD EQ TEXT-X07 OR
       I_FIELD EQ TEXT-X08 OR
       I_FIELD EQ TEXT-X10 OR
       I_FIELD EQ TEXT-X11.
      R_FLAG = ABAP_TRUE.
    ELSE.
      CLEAR : R_FLAG.
    ENDIF.

  ENDMETHOD.
  METHOD ADJ_DEPRE.
    DATA : LV_ADJ TYPE P DECIMALS 2.
    IF I_SUM_DEP NE I_SUM_AMT.
      LV_ADJ = I_SUM_DEP - I_SUM_AMT.
      IF LV_ADJ GT 0.
        R_DEP = I_DEP_MON - LV_ADJ.
      ELSEIF  LV_ADJ LT 0.
        R_DEP = I_DEP_MON + LV_ADJ.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD CREATE_OBJECT_REMARK.

    CREATE OBJECT GCL_REMARK
      EXPORTING
        CONTAINER_NAME              = GC_REMARK
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.
    IF SY-SUBRC NE 0.
*      add your handling
    ENDIF.

    CREATE OBJECT GCL_EDITOR
      EXPORTING
        PARENT                     = GCL_REMARK
        WORDWRAP_MODE              = CL_GUI_TEXTEDIT=>WORDWRAP_OFF
        WORDWRAP_POSITION          = 255
        WORDWRAP_TO_LINEBREAK_MODE = CL_GUI_TEXTEDIT=>TRUE.

    GCL_EDITOR->SET_TOOLBAR_MODE( 0 ).
    GCL_EDITOR->SET_STATUSBAR_MODE( 0 ).

  ENDMETHOD.
  METHOD SET_REMARK.

    IF GCL_EDITOR IS INITIAL.
      LCL_DATA=>CREATE_OBJECT_REMARK( ).
    ENDIF.

    GS_REMARK = I_INPUT.
    APPEND GS_REMARK TO GT_REMARK.

    IF GCL_EDITOR IS NOT INITIAL.
      CALL METHOD GCL_EDITOR->SET_TEXT_AS_R3TABLE
        EXPORTING
          TABLE  = GT_REMARK
        EXCEPTIONS
          OTHERS = 1.
    ENDIF.
  ENDMETHOD.
  METHOD GET_REMARK.
    IF GCL_EDITOR IS NOT INITIAL.
*      GCL_EDITOR=>M_WORDWRAP_MODE = 2.
      CALL METHOD GCL_EDITOR->GET_TEXT_AS_R3TABLE
        IMPORTING
          TABLE  = GT_REMARK
        EXCEPTIONS
          OTHERS = 1.

      CALL METHOD CL_GUI_CFW=>FLUSH
        EXCEPTIONS
          OTHERS = 1.
      IF SY-SUBRC NE 0.
*       add your handling
      ENDIF.
    ENDIF.

    LOOP AT GT_REMARK INTO GS_REMARK.
      IF GS_HEADER-REMAK IS INITIAL.
        R_REMARK = GS_REMARK.
      ELSE.
        CONCATENATE R_REMARK GS_REMARK INTO R_REMARK SEPARATED BY SPACE.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD EXCLUDING_TOOLBAR.
    DATA LS_EXCLUDE TYPE UI_FUNC.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
  ENDMETHOD.
  METHOD EXCLUDING_TOOLBAR_AMT.
    DATA LS_EXCLUDE TYPE UI_FUNC.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_DETAIL.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CURRENT_VARIANT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SORT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SORT_ASC.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SORT_DSC.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_EXPORT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_SUBTOT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_SUM.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_PRINT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_PC_FILE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOAD_VARIANT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_VIEWS.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SUBTOT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SUM.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_F4.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_FILTER.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_FIND.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_FIND_MORE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_INFO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING_AMT.
  ENDMETHOD.
  METHOD SET_DISABLE_FILED.
    DATA: LS_EDIT TYPE LVC_S_STYL.

    LS_EDIT-FIELDNAME = I_FIELD.
    LS_EDIT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.

    APPEND LS_EDIT TO R.

  ENDMETHOD.
  METHOD SET_ENABLE_FILED.
    DATA: LS_EDIT TYPE LVC_S_STYL.

    LS_EDIT-FIELDNAME = I_FIELD.
    LS_EDIT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.

    APPEND LS_EDIT TO R.
  ENDMETHOD.
  METHOD UPDATE_ZSDSFIT002.
    DATA : LS_ZSDSFIT002 TYPE ZSDSFIT002.

    SELECT MAX( RUNNG )
      FROM ZSDSFIT002
      INTO @DATA(LV_RUNNG)
     WHERE CONTN EQ @GS_HEADER-CONTN
       AND LIFNR EQ @GS_HEADER-LIFNR.

    GS_HEADER-REMAK = GET_REMARK( ).

    LS_ZSDSFIT002-CONTN = GS_HEADER-CONTN.
    LS_ZSDSFIT002-LIFNR = GS_HEADER-LIFNR.

    IF GS_HEADER-RUNNG IS NOT INITIAL.
      LS_ZSDSFIT002-RUNNG = GS_HEADER-RUNNG.
    ELSE.
      IF GS_HEADER-EXTED EQ ABAP_TRUE.
        LS_ZSDSFIT002-RUNNG = LV_RUNNG + 1.
      ELSE.
        LS_ZSDSFIT002-RUNNG = 1.
      ENDIF.
    ENDIF.
    GS_HEADER-RUNNG     = LS_ZSDSFIT002-RUNNG.
    LS_ZSDSFIT002-BUKRS = GC_COM_CODE.
    LS_ZSDSFIT002-ANLN1 = GS_HEADER-ANLN1.
    LS_ZSDSFIT002-ANLN2 = GS_HEADER-ANLN2.
    LS_ZSDSFIT002-ASSNA = GS_HEADER-ASSNA.
    LS_ZSDSFIT002-WAERS = GS_HEADER-WAERS.
    LS_ZSDSFIT002-INTER = GS_HEADER-INTER.
    LS_ZSDSFIT002-INTEE = GS_HEADER-INTEE.
    LS_ZSDSFIT002-LEASA = GS_HEADER-LEASA.
    LS_ZSDSFIT002-STADT = GS_HEADER-STADT.
    LS_ZSDSFIT002-ENDDT = GS_HEADER-ENDDT.
    LS_ZSDSFIT002-PAYDT = GS_HEADER-PAYDT.
    LS_ZSDSFIT002-COSEV = GS_HEADER-COSEV.
    LS_ZSDSFIT002-VATMT = GS_HEADER-VATMT.
    LS_ZSDSFIT002-RESID = GS_HEADER-RESID.
    LS_ZSDSFIT002-LEAST = GS_HEADER-LEAST.
    LS_ZSDSFIT002-PAYMP = GS_HEADER-PAYMP.
    LS_ZSDSFIT002-TIMES = GS_HEADER-TIMES.
    LS_ZSDSFIT002-RENEV = GS_HEADER-RENEV.
    LS_ZSDSFIT002-DEPOS = GS_HEADER-DEPOS.
    LS_ZSDSFIT002-TODAY = GS_HEADER-TODAY.
    LS_ZSDSFIT002-FLAGE = GS_HEADER-FLAGE.
    LS_ZSDSFIT002-EXTED = GS_HEADER-EXTED.
    LS_ZSDSFIT002-REMAK = GS_HEADER-REMAK.
    LS_ZSDSFIT002-GLREN = GS_HEADER-GLREN.
    LS_ZSDSFIT002-STATU = GC_STATUS-SAVE.
    LS_ZSDSFIT002-FLAGP = ABAP_TRUE.
    LS_ZSDSFIT002-PRCTR = GS_HEADER-PRCTR.
    LS_ZSDSFIT002-ACPVL = GS_HEADER-ACPVL.
    LS_ZSDSFIT002-BUDGT = GS_HEADER-BUDGT.
    LS_ZSDSFIT002-SGTXT = GS_HEADER-SGTXT.
    IF GS_HEADER-ERNAM IS NOT INITIAL.
      LS_ZSDSFIT002-ERNAM = GS_HEADER-ERNAM.
      LS_ZSDSFIT002-ERDAT = GS_HEADER-ERDAT.
      LS_ZSDSFIT002-ERZET = GS_HEADER-ERZET.
    ELSE.
      LS_ZSDSFIT002-ERNAM = SY-UNAME.
      LS_ZSDSFIT002-ERDAT = SY-DATUM.
      LS_ZSDSFIT002-ERZET = SY-UZEIT.
    ENDIF.
    LS_ZSDSFIT002-AENAM = SY-UNAME.
    LS_ZSDSFIT002-AEDAT = SY-DATUM.
    LS_ZSDSFIT002-AEZET = SY-UZEIT.

    IF R_PV EQ ABAP_TRUE.
      LS_ZSDSFIT002-PVFAG = ABAP_TRUE.
      LS_ZSDSFIT002-NPVFG = ABAP_FALSE.
    ELSE.
      LS_ZSDSFIT002-PVFAG = ABAP_FALSE.
      LS_ZSDSFIT002-NPVFG = ABAP_TRUE.
    ENDIF.

    MODIFY ZSDSFIT002 FROM LS_ZSDSFIT002.

  ENDMETHOD.
  METHOD UPDATE_ZSDSFIT012.
    DATA : LS_ZSDSFIT012 TYPE ZSDSFIT012.

    SELECT COUNT( * )
      FROM ZSDSFIT012
      WHERE CONTN EQ GS_HEADER-CONTN
        AND LIFNR EQ GS_HEADER-LIFNR.
    IF SY-SUBRC EQ 0.
      DELETE FROM ZSDSFIT012 WHERE CONTN EQ GS_HEADER-CONTN
                               AND LIFNR EQ GS_HEADER-LIFNR.
    ENDIF.
    LOOP AT GT_AMT INTO GS_AMT.
      ADD 1 TO LS_ZSDSFIT012-RUNNG.
      LS_ZSDSFIT012-CONTN = GS_HEADER-CONTN.
      LS_ZSDSFIT012-LIFNR = GS_HEADER-LIFNR.
      LS_ZSDSFIT012-INTER = GS_AMT-INTER.
      LS_ZSDSFIT012-COSEV = GS_AMT-REGMT.
      LS_ZSDSFIT012-STADT = GS_AMT-STDDT.
      LS_ZSDSFIT012-ENDDT = GS_AMT-ENDDT.
      LS_ZSDSFIT012-ERNAM = SY-UNAME.
      LS_ZSDSFIT012-ERDAT = SY-DATUM.
      LS_ZSDSFIT012-ERZET = SY-UZEIT.
      LS_ZSDSFIT012-AENAM = SY-UNAME.
      LS_ZSDSFIT012-AEDAT = SY-DATUM.
      LS_ZSDSFIT012-AEZET = SY-UZEIT.
      MODIFY ZSDSFIT012 FROM LS_ZSDSFIT012.
    ENDLOOP.
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD UPDATE_ZSDSFIT003.
    DATA : LS_ZSDSFIT003 TYPE ZSDSFIT003,
           LT_ZSDSFIT003 TYPE TABLE OF ZSDSFIT003.

    LOOP AT GT_RESULT ASSIGNING FIELD-SYMBOL(<LFS_DATA>).
      MOVE-CORRESPONDING <LFS_DATA> TO GS_RESULT.
      LS_ZSDSFIT003-CONTN = GS_HEADER-CONTN.
      LS_ZSDSFIT003-LIFNR = GS_HEADER-LIFNR.
      LS_ZSDSFIT003-RUNNG = GS_HEADER-RUNNG.
      IF GS_RESULT-MONIT IS NOT INITIAL.
        LS_ZSDSFIT003-MONIT = GS_RESULT-MONIT.
      ELSE.
        LS_ZSDSFIT003-MONIT = GS_RESULT-RUNNG.
        <LFS_DATA>-MONIT    = GS_RESULT-RUNNG.
      ENDIF.
      LS_ZSDSFIT003-STDDT = GS_RESULT-STDDT.
      LS_ZSDSFIT003-ENDDT = GS_RESULT-ENDDT.
      LS_ZSDSFIT003-INTER = GS_RESULT-INTER.
      LS_ZSDSFIT003-AMOZT = GS_RESULT-AMOZT.
      LS_ZSDSFIT003-VATMT = GS_RESULT-VATMT.
      LS_ZSDSFIT003-OUTSC = GS_RESULT-OUTSC.
      LS_ZSDSFIT003-DEPRC = GS_RESULT-DEPRC.
      LS_ZSDSFIT003-REGMT = GS_RESULT-REGMT.
      IF GS_HEADER-ERNAM IS NOT INITIAL.
        LS_ZSDSFIT003-ERNAM = GS_HEADER-ERNAM.
        LS_ZSDSFIT003-ERDAT = GS_HEADER-ERDAT.
        LS_ZSDSFIT003-ERZET = GS_HEADER-ERZET.
      ELSE.
        LS_ZSDSFIT003-ERNAM = SY-UNAME.
        LS_ZSDSFIT003-ERDAT = SY-DATUM.
        LS_ZSDSFIT003-ERZET = SY-UZEIT.
      ENDIF.
      LS_ZSDSFIT003-AENAM = SY-UNAME.
      LS_ZSDSFIT003-AEDAT = SY-DATUM.
      LS_ZSDSFIT003-AEZET = SY-UZEIT.

      APPEND LS_ZSDSFIT003 TO LT_ZSDSFIT003.
    ENDLOOP.

    IF LT_ZSDSFIT003 IS NOT INITIAL.
      MODIFY ZSDSFIT003 FROM TABLE LT_ZSDSFIT003.
    ENDIF.
  ENDMETHOD.
  METHOD UPDATE_ZSDSFIT004.
    DATA : LS_ZSDSFIT004 TYPE ZSDSFIT004,
           LT_ZSDSFIT004 TYPE TABLE OF ZSDSFIT004.

    CONSTANTS : BEGIN OF LC_TYPE,
                  LEASE_CLEARING  TYPE C LENGTH 2 VALUE '01',
                  LEASE_LIABILITY TYPE C LENGTH 2 VALUE '02',
                END OF LC_TYPE.

*
*    IF GS_HEADER-ERNAM IS NOT INITIAL.
*      LS_ZSDSFIT004-ERNAM = GS_HEADER-ERNAM.
*      LS_ZSDSFIT004-ERDAT = GS_HEADER-ERDAT.
*      LS_ZSDSFIT004-ERZET = GS_HEADER-ERZET.
*    ELSE.
*      LS_ZSDSFIT004-ERNAM = SY-UNAME.
*      LS_ZSDSFIT004-ERDAT = SY-DATUM.
*      LS_ZSDSFIT004-ERZET = SY-UZEIT.
*    ENDIF.
*    LS_ZSDSFIT004-AENAM = SY-UNAME.
*    LS_ZSDSFIT004-AEDAT = SY-DATUM.
*    LS_ZSDSFIT004-AEZET = SY-UZEIT.
*
*    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
*    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
*    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
*    LS_ZSDSFIT004-RUNGL = 1.
*    LS_ZSDSFIT004-SAKNR = GS_GL-AMORT.
*    LS_ZSDSFIT004-TYPEG = LC_TYPE-Amortization.
*    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.
*
*    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
*    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
*    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
*    LS_ZSDSFIT004-RUNGL = 2.
*    LS_ZSDSFIT004-SAKNR = GS_GL-INTER.
*    LS_ZSDSFIT004-TYPEG = LC_TYPE-Interest.
*    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.
*
*    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
*    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
*    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
*    LS_ZSDSFIT004-RUNGL = 3.
*    LS_ZSDSFIT004-SAKNR = GS_GL-MONPY.
*    LS_ZSDSFIT004-TYPEG = LC_TYPE-Monthly_Payment.
*    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.

*    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
*    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
*    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
*    LS_ZSDSFIT004-RUNGL = 4.
*    LS_ZSDSFIT004-SAKNR = GS_GL-DEPRE.
*    LS_ZSDSFIT004-TYPEG = LC_TYPE-Depreciation.
*    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.
*
*    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
*    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
*    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
*    LS_ZSDSFIT004-RUNGL = 5.
*    LS_ZSDSFIT004-SAKNR = GS_GL-ACCDP.
*    LS_ZSDSFIT004-TYPEG = LC_TYPE-Accum_Depreciation.
*    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.


    IF GS_HEADER-ERNAM IS NOT INITIAL.
      LS_ZSDSFIT004-ERNAM = GS_HEADER-ERNAM.
      LS_ZSDSFIT004-ERDAT = GS_HEADER-ERDAT.
      LS_ZSDSFIT004-ERZET = GS_HEADER-ERZET.
    ELSE.
      LS_ZSDSFIT004-ERNAM = SY-UNAME.
      LS_ZSDSFIT004-ERDAT = SY-DATUM.
      LS_ZSDSFIT004-ERZET = SY-UZEIT.
    ENDIF.
    LS_ZSDSFIT004-AENAM = SY-UNAME.
    LS_ZSDSFIT004-AEDAT = SY-DATUM.
    LS_ZSDSFIT004-AEZET = SY-UZEIT.

    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
    LS_ZSDSFIT004-RUNGL = 1.
    LS_ZSDSFIT004-SAKNR = |{ GS_FI-DEBIT ALPHA = IN }|.
    LS_ZSDSFIT004-TYPEG = LC_TYPE-LEASE_CLEARING.
    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.

    LS_ZSDSFIT004-CONTN = GS_HEADER-CONTN.
    LS_ZSDSFIT004-LIFNR = GS_HEADER-LIFNR.
    LS_ZSDSFIT004-RUNNG = GS_HEADER-RUNNG.
    LS_ZSDSFIT004-RUNGL = 2.
    LS_ZSDSFIT004-SAKNR = |{ GS_FI-CREDIT ALPHA = IN }|.
    LS_ZSDSFIT004-TYPEG = LC_TYPE-LEASE_LIABILITY.
    APPEND LS_ZSDSFIT004 TO LT_ZSDSFIT004.

    IF LT_ZSDSFIT004 IS NOT INITIAL.
      MODIFY ZSDSFIT004 FROM TABLE LT_ZSDSFIT004.
    ENDIF.
  ENDMETHOD.
  METHOD UPDATE_ZSDSFIT005.
    DATA : LS_ZSDSFIT005 TYPE ZSDSFIT005,
           LT_ZSDSFIT005 TYPE TABLE OF ZSDSFIT005.

    IF GS_HEADER-ERNAM IS NOT INITIAL.
      LS_ZSDSFIT005-ERNAM = GS_HEADER-ERNAM.
      LS_ZSDSFIT005-ERDAT = GS_HEADER-ERDAT.
      LS_ZSDSFIT005-ERZET = GS_HEADER-ERZET.
    ELSE.
      LS_ZSDSFIT005-ERNAM = SY-UNAME.
      LS_ZSDSFIT005-ERDAT = SY-DATUM.
      LS_ZSDSFIT005-ERZET = SY-UZEIT.
    ENDIF.
    LS_ZSDSFIT005-AENAM = SY-UNAME.
    LS_ZSDSFIT005-AEDAT = SY-DATUM.
    LS_ZSDSFIT005-AEZET = SY-UZEIT.
    LS_ZSDSFIT005-CONTN = GS_HEADER-CONTN.
    LS_ZSDSFIT005-LIFNR = GS_HEADER-LIFNR.
    LS_ZSDSFIT005-RUNNG = GS_HEADER-RUNNG.

    LOOP AT GT_ATTACH_FILE INTO GS_ATTACH_FILE.
      LS_ZSDSFIT005-ATTIT = GS_ATTACH_FILE-ATTIT.
      LS_ZSDSFIT005-FILEN = GS_ATTACH_FILE-FILEN.
      APPEND LS_ZSDSFIT005 TO LT_ZSDSFIT005.
    ENDLOOP.

    IF LT_ZSDSFIT005 IS NOT INITIAL.
      MODIFY ZSDSFIT005 FROM TABLE LT_ZSDSFIT005.
    ENDIF.
  ENDMETHOD.
  METHOD CHECK_DEL_DETAIL.

    SELECT SINGLE COUNT( * )
     FROM ZSDSFIT003
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND RUNNG EQ @GS_HEADER-RUNNG.
    IF SY-SUBRC = 0.
      DELETE FROM ZSDSFIT003 WHERE CONTN EQ GS_HEADER-CONTN AND
                                   LIFNR EQ GS_HEADER-LIFNR AND
                                   RUNNG EQ GS_HEADER-RUNNG.
    ENDIF.

*    SELECT SINGLE COUNT( * )
*     FROM ZSDSFIT004
*      WHERE CONTN EQ @GS_HEADER-CONTN
*        AND LIFNR EQ @GS_HEADER-LIFNR
*        AND RUNNG EQ @GS_HEADER-RUNNG.
*    IF SY-SUBRC = 0.
*      DELETE FROM ZSDSFIT004 WHERE CONTN EQ GS_HEADER-CONTN AND
*                                   LIFNR EQ GS_HEADER-LIFNR AND
*                                   RUNNG EQ GS_HEADER-RUNNG.
*    ENDIF.

    SELECT SINGLE COUNT( * )
     FROM ZSDSFIT005
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND RUNNG EQ @GS_HEADER-RUNNG.
    IF SY-SUBRC = 0.
      DELETE FROM ZSDSFIT005 WHERE CONTN EQ GS_HEADER-CONTN AND
                                   LIFNR EQ GS_HEADER-LIFNR AND
                                   RUNNG EQ GS_HEADER-RUNNG.
    ENDIF.

    LCL_UTIL=>COMMIT( ).
  ENDMETHOD.
  METHOD GET_DATA_FOR_UPDATE.
    GET_ZSDSFIT002( ).
    IF GT_HEADER IS NOT INITIAL.
      GET_ZSDSFIT003( ).
      GET_ZSDSFIT004( ).
      GET_ZSDSFIT005( ).
      GET_ZSDSFIT012( ).
      GET_ZSDSFIT022( ).
      UPDATE_RESULT( ).
      CALL SCREEN 101.
    ELSE.
      MESSAGE S004 DISPLAY LIKE GC_E.
    ENDIF.
  ENDMETHOD.
  METHOD GET_ZSDSFIT002.

    IF GS_HEADER-RUNNG IS INITIAL.
      GS_HEADER-RUNNG = 1.
    ENDIF.

    SELECT SINGLE CONTN, PAYMP,
                  LIFNR, TIMES,
                  RUNNG, RENEV,
                  ASSNA, DEPOS,
                  WAERS, TODAY,
                  INTER, FLAGE,
                  INTEE, EXTED,
                  LEASA, REMAK,
                  STADT, STATU,
                  ENDDT, ERNAM,
                  PAYDT, ERDAT,
                  COSEV, ERZET,
                  VATMT, NPVFG,
                  RESID, PVFAG,
                  LEAST, ANLN1,
                  ANLN2, GLREN,
                  FLAGP, PRCTR,
                  ACPVL, BUDGT,
                  SGTXT
     FROM ZSDSFIT002
     INTO CORRESPONDING FIELDS OF @GS_HEADER
     WHERE CONTN EQ @GS_HEADER-CONTN
       AND LIFNR EQ @GS_HEADER-LIFNR
       AND RUNNG EQ @GS_HEADER-RUNNG.
    IF SY-SUBRC EQ 0.
      R_PV  = GS_HEADER-PVFAG.
      R_NPV = GS_HEADER-NPVFG.
      GS_HEADER-TOTAR = GS_HEADER-RENEV * GS_HEADER-TIMES.
      APPEND GS_HEADER TO GT_HEADER.
      LCL_DATA=>GET_COST_CENTER( ).
    ELSE.
      CLEAR : GT_HEADER.
    ENDIF.

  ENDMETHOD.
  METHOD GET_ZSDSFIT003.
    SELECT CONTN,
           LIFNR,
           RUNNG,
           MONIT,
           STDDT,
           ENDDT,
           INTER,
           AMOZT,
           VATMT,
           OUTSC,
           DEPRC,
           REGMT
      FROM ZSDSFIT003
      INTO CORRESPONDING FIELDS OF TABLE @GT_RESULT
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND RUNNG EQ @GS_HEADER-RUNNG.

    GV_SUM_INTER = REDUCE #( INIT VAL TYPE ZSDSFIT003-INTER
                             FOR WA IN  GT_RESULT NEXT VAL = VAL + WA-INTER ).

  ENDMETHOD.
  METHOD GET_ZSDSFIT004.
    CONSTANTS : BEGIN OF LC_TYPE,
                  LEASE_CLEARING  TYPE C LENGTH 2 VALUE '01',
                  LEASE_LIABILITY TYPE C LENGTH 2 VALUE '02',
                END OF LC_TYPE.

    SELECT SAKNR,
           TYPEG
      FROM ZSDSFIT004
      INTO TABLE @DATA(LT_DATA)
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND RUNNG EQ @GS_HEADER-RUNNG.

    DATA : LS_DATA LIKE LINE OF LT_DATA.

    LOOP AT LT_DATA INTO LS_DATA.
*      CASE LS_DATA-TYPEG.
*        WHEN LC_TYPE-Amortization.
*          GS_GL-AMORT = LS_DATA-SAKNR.
*        WHEN LC_TYPE-Interest.
*          GS_GL-INTER = LS_DATA-SAKNR.
*        WHEN LC_TYPE-Monthly_Payment.
*          GS_GL-MONPY = LS_DATA-SAKNR.
*        WHEN LC_TYPE-Depreciation.
*          GS_GL-DEPRE = LS_DATA-SAKNR.
*        WHEN LC_TYPE-Accum_Depreciation.
*          GS_GL-ACCDP = LS_DATA-SAKNR.
*      ENDCASE.
      CASE LS_DATA-TYPEG.
        WHEN LC_TYPE-LEASE_CLEARING.
          GS_GL-LESCL = LS_DATA-SAKNR.
        WHEN LC_TYPE-LEASE_LIABILITY.
          GS_GL-LESLI = LS_DATA-SAKNR.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.
  METHOD GET_ZSDSFIT005.
    SELECT ATTIT,
           FILEN
     FROM ZSDSFIT005
     INTO TABLE @GT_ATTACH_FILE
     WHERE CONTN EQ @GS_HEADER-CONTN
       AND LIFNR EQ @GS_HEADER-LIFNR
       AND RUNNG EQ @GS_HEADER-RUNNG.
  ENDMETHOD.
  METHOD GET_DATA_REPORT.
    SUBMIT ZSDSFIR0060 USING SELECTION-SCREEN  1000
                       AND RETURN VIA SELECTION-SCREEN.
  ENDMETHOD.
  METHOD EXCLUDE_TOOL_101.
    DATA : LS_EX LIKE LINE OF GT_EC_TOOL_101.

    IF GV_MODE EQ GC_MODE-DELETE.
      DELETE GT_EC_TOOL_101 WHERE FCODE EQ GC_DELETE.
    ELSE.
      READ TABLE GT_EC_TOOL_101
      WITH KEY FCODE = GC_DELETE TRANSPORTING NO FIELDS.
      IF SY-SUBRC NE 0.
        LS_EX-FCODE = GC_DELETE.
        APPEND LS_EX TO GT_EC_TOOL_101.
      ENDIF.
    ENDIF.

    IF GS_HEADER-FIRCO IS NOT INITIAL.
      LS_EX-FCODE = GC_SAVE.
      APPEND LS_EX TO GT_EC_TOOL_101.
    ENDIF.

  ENDMETHOD.
  METHOD DELETE_FILE.
    UPDATE ZSDSFIT002 SET STATU = GC_STATUS-DEL
                          AENAM = SY-UNAME
                          AEDAT = SY-DATUM
                          AEZET = SY-UZEIT
                    WHERE CONTN EQ GS_HEADER-CONTN
                      AND LIFNR EQ GS_HEADER-LIFNR
                      AND RUNNG EQ GS_HEADER-RUNNG.

    MESSAGE S998 WITH TEXT-S01.
    LEAVE TO SCREEN 0.
  ENDMETHOD.
  METHOD END_CONTRACT.
    UPDATE ZSDSFIT002 SET STATU = GC_STATUS-END
                          AENAM = SY-UNAME
                          AEDAT = SY-DATUM
                          AEZET = SY-UZEIT
                    WHERE CONTN EQ GS_HEADER-CONTN
                      AND LIFNR EQ GS_HEADER-LIFNR
                      AND RUNNG EQ GS_HEADER-RUNNG.

*    MESSAGE s998 WITH TEXT-S01.
  ENDMETHOD.
  METHOD ADD_AMT.
    DATA : LV_AMOUNT_PER_MONTH LIKE GS_HEADER-RENEV,
           LV_INTEREST         TYPE P DECIMALS 10,
           LV_N                LIKE GS_HEADER-LEAST.

    DATA : LV_AMT LIKE GS_HEADER-COSEV.

    DATA : LV_TIMES TYPE I.

    DATA : LV_LINE TYPE I.

    CLEAR : GS_AMT.
    CASE GS_HEADER-RENEV.
      WHEN 0.
        MESSAGE S998 WITH TEXT-E03 DISPLAY LIKE GC_E.
      WHEN OTHERS.
        IF GT_AMT IS INITIAL.
          IF     GS_HEADER-ENDDT LE GS_HEADER-STADT.
            MESSAGE S998 WITH TEXT-E02 DISPLAY LIKE GC_E.
          ELSEIF GS_HEADER-INTER EQ 0.
            MESSAGE S998 WITH TEXT-E04 DISPLAY LIKE GC_E.
          ELSE.
            GS_AMT-STDDT = GS_HEADER-STADT.
            GS_AMT-ENDDT = GS_HEADER-ENDDT.
            GS_AMT-REGMT = GS_HEADER-RENEV.
            GS_AMT-INTER = GS_HEADER-INTER.
            APPEND GS_AMT TO GT_AMT.
          ENDIF.
        ELSE.
          DESCRIBE TABLE GT_AMT LINES LV_LINE.
          READ TABLE GT_AMT INTO GS_AMT INDEX LV_LINE.
          IF GS_AMT-ENDDT GE GS_HEADER-STADT.
            MESSAGE S998 WITH TEXT-E01 DISPLAY LIKE GC_E.
          ELSEIF GS_HEADER-ENDDT LE GS_HEADER-STADT.
            MESSAGE S998 WITH TEXT-E02 DISPLAY LIKE GC_E.
          ELSEIF GS_HEADER-INTER EQ 0.
            MESSAGE S998 WITH TEXT-E04 DISPLAY LIKE GC_E.
          ELSE.
            GS_AMT-STDDT = GS_HEADER-STADT.
            GS_AMT-ENDDT = GS_HEADER-ENDDT.
            GS_AMT-REGMT = GS_HEADER-RENEV.
            GS_AMT-INTER = GS_HEADER-INTER.
            APPEND GS_AMT TO GT_AMT.
            READ TABLE GT_AMT INTO GS_AMT INDEX 1.
            IF SY-SUBRC EQ 0.
              GS_HEADER-STADT = GS_AMT-STDDT.
            ENDIF.
          ENDIF.
        ENDIF.
    ENDCASE.

    CLEAR : GS_HEADER-TOTAR.

    IF R_PV EQ ABAP_TRUE.
      LCL_DATA=>PV( ).
    ELSE.
      LCL_DATA=>NPV( ).
    ENDIF.
*    LOOP AT GT_AMT INTO GS_AMT.
*      ADD GS_AMT-REGMT TO GS_HEADER-TOTAR.
*    ENDLOOP.
*    CLEAR : LV_TIMES,GS_HEADER-COSEV,GS_HEADER-TIMES,GS_HEADER-LEAST,GS_HEADER-TOTAR.
*    LOOP AT GT_AMT INTO GS_AMT.
*      LV_TIMES = LCL_DATA=>GET_MONTH_FROM_2_DATE( EXPORTING I_DATE_START = GS_AMT-STDDT
*                                                            I_DATE_END   = GS_AMT-ENDDT ).
*
*      GS_HEADER-TOTAR = GS_HEADER-TOTAR + ( GS_AMT-REGMT * LV_TIMES ).
*
*      IF GS_HEADER-PAYMP IS NOT INITIAL AND
*         LV_TIMES        IS NOT INITIAL.
*
*        LV_AMOUNT_PER_MONTH = GS_HEADER-RENEV.
*        LV_INTEREST         = ( GS_AMT-INTER / 100 ) / LV_TIMES.
*        LV_N                = LV_TIMES * -1.
*
*        LV_AMT = LV_AMOUNT_PER_MONTH * ( ( 1 - ( ( 1 + LV_INTEREST ) ** LV_N ) ) / LV_INTEREST ).
*      ENDIF.
*
*      ADD LV_AMT   TO GS_HEADER-COSEV.
*      ADD LV_TIMES TO GS_HEADER-LEAST.
*    ENDLOOP.
*    GS_HEADER-TODAY = LCL_DATA=>GET_DAYS_FROM_2_DATE( EXPORTING I_DATE_START = GS_HEADER-STADT
*                                                                I_DATE_END   = GS_HEADER-ENDDT ).
*    IF GS_HEADER-PAYMP NE 0.
*      GS_HEADER-TIMES = GS_HEADER-LEAST / GS_HEADER-PAYMP.
*    ENDIF.

    CLEAR : SY-UCOMM.
    CALL METHOD GCL_ALV_AMT->REFRESH_TABLE_DISPLAY.

  ENDMETHOD.
  METHOD GET_VENDOR_NAME.

*    GS_HEADER-LIFNR = GS_HEADER-LASOR.

    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_HEADER-LIFNR
                      IMPORTING E_DATA = GS_HEADER-LIFNR ).

    SELECT SINGLE ( NAME1 && ' ' && NAME2 && ' ' && NAME3 && ' ' && NAME4 ) AS LASOR
      FROM LFA1
      INTO @GS_HEADER-LASOR
      WHERE LIFNR EQ @GS_HEADER-LIFNR.

  ENDMETHOD.
  METHOD CLEAR_ALL.
    CLEAR : GS_RESULT,       GT_FCAT,
            GT_RESULT,       GS_LAYOUT,
            GT_AMT,          GT_SORT,
            GS_AMT,          GS_SORT,
            GT_HEADER,       GT_FCAT_OO,
            GS_HEADER,       GS_LAYOUT_OO,
            GT_REPORT,       GT_SORT_OO,
            GS_REPORT,       GS_SORT_OO,
            GS_GL,           GT_FCAT_OO_AMT,
            GV_CURSOR,       GS_LAYOUT_OO_AMT,
            GS_REMARK,       GT_SORT_OO_AMT,
            GT_REMARK,       GS_SORT_OO_AMT,
            GT_ATTACH_FILE,  GV_MODE,
            GS_ATTACH_FILE,
            GV_MODE,
            GT_EVENTS,
            GS_EVENTS.

    FREE : GCL_ALV,
           GCL_ALV_AMT,
           GCL_CONT,
           GCL_CONT_AMT,
           GCL_REMARK,
           GCL_EDITOR,
           GT_TOOLBAR_EXCLUDING,
           GT_TOOLBAR_EXCLUDING_AMT,
           GT_EC_TOOL_101.

  ENDMETHOD.
  METHOD SET_RADIO.
    CASE R_PV.
      WHEN ABAP_TRUE.
        R_PV  = ABAP_TRUE.
        R_NPV = ABAP_FALSE.
      WHEN OTHERS.
        R_PV  = ABAP_FALSE.
        R_NPV = ABAP_TRUE.
    ENDCASE.
  ENDMETHOD.
  METHOD PV.
    DATA : LV_AMOUNT_PER_MONTH LIKE GS_HEADER-RENEV,
           LV_INTEREST         TYPE P DECIMALS 10,
           LV_N                LIKE GS_HEADER-LEAST.

    DATA : LV_AMT LIKE GS_HEADER-COSEV.

    DATA : LV_TIMES TYPE I.

    IF GT_AMT IS INITIAL.
      IF GS_HEADER-PAYMP IS NOT INITIAL AND
         GS_HEADER-LEAST IS NOT INITIAL.

        LV_AMOUNT_PER_MONTH = GS_HEADER-RENEV.
*        LV_INTEREST         = ( GS_HEADER-INTER / 100 ) / GS_HEADER-TIMES.
        LV_INTEREST         = ( GS_HEADER-INTER / 100 ) / 12.
        LV_N                = GS_HEADER-TIMES * -1.

        GS_HEADER-COSEV = LV_AMOUNT_PER_MONTH * ( ( 1 - ( ( 1 + LV_INTEREST ) ** LV_N ) ) / LV_INTEREST ).
      ENDIF.

      GS_HEADER-TOTAR = GS_HEADER-RENEV * GS_HEADER-TIMES.
    ELSE.
      CLEAR : LV_TIMES,GS_HEADER-COSEV,GS_HEADER-TIMES,GS_HEADER-LEAST,GS_HEADER-TOTAR.
      LOOP AT GT_AMT INTO GS_AMT.
*        ADD GS_AMT-REGMT TO GS_HEADER-TOTAR.

*      IF GS_HEADER-STADT IS INITIAL.
*        GS_HEADER-STADT = GS_AMT-STDDT.
*      ENDIF.

        LV_TIMES = LCL_DATA=>GET_MONTH_FROM_2_DATE( EXPORTING I_DATE_START = GS_AMT-STDDT
                                                              I_DATE_END   = GS_AMT-ENDDT ).

        GS_HEADER-TOTAR = GS_HEADER-TOTAR + ( GS_AMT-REGMT * LV_TIMES ).

        IF GS_HEADER-PAYMP IS NOT INITIAL AND
           LV_TIMES        IS NOT INITIAL.

          LV_AMOUNT_PER_MONTH = GS_AMT-REGMT."GS_HEADER-RENEV.
          LV_INTEREST         = ( GS_AMT-INTER / 100 ) / LV_TIMES.
          LV_N                = LV_TIMES * -1.

          LV_AMT = LV_AMOUNT_PER_MONTH * ( ( 1 - ( ( 1 + LV_INTEREST ) ** LV_N ) ) / LV_INTEREST ).
        ENDIF.


*      GS_HEADER-ENDDT = GS_AMT-ENDDT.
        ADD LV_AMT   TO GS_HEADER-COSEV.
        ADD LV_TIMES TO GS_HEADER-LEAST.
      ENDLOOP.
      GS_HEADER-TODAY = LCL_DATA=>GET_DAYS_FROM_2_DATE( EXPORTING I_DATE_START = GS_HEADER-STADT
                                                                  I_DATE_END   = GS_HEADER-ENDDT ).
      IF GS_HEADER-PAYMP NE 0.
        GS_HEADER-TIMES = GS_HEADER-LEAST / GS_HEADER-PAYMP.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD NPV.
    DATA : LV_AMOUNT   LIKE GS_HEADER-RENEV,
           LV_INTEREST TYPE P DECIMALS 10,
           LV_N        LIKE GS_HEADER-LEAST.

    DATA : LV_AMT LIKE GS_HEADER-COSEV.

    DATA : LV_TIMES TYPE I.

    IF GT_AMT IS INITIAL.
      IF GS_HEADER-PAYMP IS NOT INITIAL AND
         GS_HEADER-LEAST IS NOT INITIAL.

        LV_AMOUNT   = GS_HEADER-RENEV * GS_HEADER-TIMES.
        LV_INTEREST = GS_HEADER-INTER + 1 .
        LV_N        = 1.

        GS_HEADER-COSEV = LV_AMOUNT / ( LV_INTEREST ** LV_N ).
      ENDIF.
      GS_HEADER-TOTAR = GS_HEADER-RENEV * GS_HEADER-TIMES.
    ELSE.
      CLEAR : LV_TIMES,GS_HEADER-COSEV,GS_HEADER-TIMES,GS_HEADER-LEAST,GS_HEADER-TOTAR.
      LOOP AT GT_AMT INTO GS_AMT.
*        ADD GS_AMT-REGMT TO GS_HEADER-TOTAR.


*      IF GS_HEADER-STADT IS INITIAL.
*        GS_HEADER-STADT = GS_AMT-STDDT.
*      ENDIF.
        LV_TIMES = LCL_DATA=>GET_MONTH_FROM_2_DATE( EXPORTING I_DATE_START = GS_AMT-STDDT
                                                              I_DATE_END   = GS_AMT-ENDDT ).

        GS_HEADER-TOTAR = GS_HEADER-TOTAR + ( GS_AMT-REGMT * LV_TIMES ).

        IF GS_HEADER-PAYMP IS NOT INITIAL AND
           LV_TIMES        IS NOT INITIAL.

          LV_AMOUNT   = GS_AMT-REGMT * LV_TIMES.
          LV_INTEREST = ( GS_HEADER-INTER / 100 ) + 1 .
          ADD 1 TO LV_N.

          LV_AMT = LV_AMOUNT / ( LV_INTEREST ** LV_N ).
        ENDIF.

*      GS_HEADER-ENDDT = GS_AMT-ENDDT.
        ADD LV_AMT   TO GS_HEADER-COSEV.
        ADD LV_TIMES TO GS_HEADER-LEAST.
      ENDLOOP.
      GS_HEADER-TODAY = LCL_DATA=>GET_DAYS_FROM_2_DATE( EXPORTING I_DATE_START = GS_HEADER-STADT
                                                                  I_DATE_END   = GS_HEADER-ENDDT ).
      IF GS_HEADER-PAYMP NE 0.
        GS_HEADER-TIMES = GS_HEADER-LEAST / GS_HEADER-PAYMP.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD POST_START.
    CONSTANTS : BEGIN OF LC_CON,
                  ONE TYPE C LENGTH 1 VALUE '1',
                END OF LC_CON.

    DATA : LV_ERROR TYPE CHAR1.

    DATA : LV_CONFIRM TYPE CHAR1.

    CLEAR : LV_ERROR, LV_CONFIRM.
    LV_CONFIRM = POPUP_CONFIRM( TEXT-106 ).
    IF LV_CONFIRM EQ LC_CON-ONE.
      LV_ERROR = CHECK_SAVE( ).
      IF LV_ERROR EQ SPACE.
        GS_FI-DEBIT = LCL_DATA=>GET_GL_ASSET_CLEARING( ).
        CALL SCREEN 104 STARTING AT 10 10.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD POST_END.
    DATA : LV_MESSAGE TYPE CHAR255.

    CONSTANTS : BEGIN OF LC_CON,
                  ONE TYPE C LENGTH 1 VALUE '1',
                  OL  TYPE BF_TARGET_LDGRP VALUE '0L',
                END OF LC_CON.

    DATA : LV_ERROR TYPE CHAR1.

    DATA : LV_CONFIRM TYPE CHAR1.

    DATA : LV_POSTING_DATE TYPE SY-DATUM.

    CLEAR : LV_ERROR, LV_CONFIRM.
    LV_CONFIRM = POPUP_CONFIRM( TEXT-111 ).
    IF LV_CONFIRM EQ LC_CON-ONE.
      LV_POSTING_DATE = GET_POSTING_DATE( ).
      IF LV_POSTING_DATE IS NOT INITIAL AND
         LV_POSTING_DATE NE SPACE.
        LV_MESSAGE = RETIREMENT_ASSET( I_DATA   = LV_POSTING_DATE
                                       I_LEDGER = LC_CON-OL
                                       I_TYPE   = GC_RETIR ).
        IF LV_MESSAGE IS INITIAL.
          END_CONTRACT( ).
          POST_END_INTEREST( LV_POSTING_DATE ). "not sure it will be used
          LCL_UTIL=>COMMIT( ).
          GV_DISABLE_END = ABAP_TRUE.
          MESSAGE S998 WITH TEXT-S01.
        ELSE.
          MESSAGE S998 WITH LV_MESSAGE DISPLAY LIKE GC_E.
        ENDIF.
      ELSE.
        MESSAGE S998 WITH TEXT-E20 DISPLAY LIKE GC_E.
      ENDIF.
    ENDIF.

*    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
*           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
*           LS_ACCOUNTGL      TYPE BAPIACGL09,
*           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
*           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
**         lt_accountreceivable  TYPE TABLE OF bapiacar09,
**         ls_accountreceivable  TYPE bapiacar09,
*           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
*           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
*           LT_RETURN         TYPE TABLE OF BAPIRET2,
*           LS_RETURN         TYPE BAPIRET2,
*           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
*           LS_EXTENSION2     TYPE BAPIPAREX,
*           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
*           LS_ACCOUNTTAX     TYPE BAPIACTX09,
*           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
*           LS_ACCOUNTWT      TYPE BAPIACWT09,
*           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
*           LS_EXTENSION      TYPE BAPIACEXTC.
*
*    DATA : LS_GL TYPE ZSDSFIS002.
*
*    DATA : LV_GL_LINE TYPE I.
*
**--------------------------------------------------------------------*
** Header
**--------------------------------------------------------------------*
*    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
*    "lv_documentheader-header_txt      = p_xblnr.
*    LV_DOCUMENTHEADER-COMP_CODE       = ''.
*    LV_DOCUMENTHEADER-FISC_YEAR       = ''.
*    LV_DOCUMENTHEADER-DOC_DATE        = SY-DATUM.
*    LV_DOCUMENTHEADER-PSTNG_DATE      = SY-DATUM.
*    LV_DOCUMENTHEADER-TRANS_DATE      = SY-DATUM.
*    LV_DOCUMENTHEADER-FIS_PERIOD      = ''.
*    LV_DOCUMENTHEADER-DOC_TYPE        = ''.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = ''.
**    lv_documentheader-ref_doc_no_long = p_xblnr.
**--------------------------------------------------------------------*
** Item Debit
**--------------------------------------------------------------------*
**--------------------------------------------------------------------*
**G/L
**--------------------------------------------------------------------*
*    ADD 1 TO LV_GL_LINE.
**      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
**      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
*    LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
*    LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
*
*
*    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-DEBIT
*                                IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).
*
**      LS_ACCOUNTGL-PROFIT_CTR = GS_DETAIL-PRCTR.
**      LS_ACCOUNTGL-COSTCENTER = GS_DETAIL-PRCTR+1(9).
**      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-COSTCENTER.
**      LS_ACCOUNTGL-ORDERID    = GS_DETAIL-AUFNR.
**      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-ORDERID .
**      LS_ACCOUNTGL-ITEM_TEXT  = GS_DETAIL-SGTXT.
*    APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
**--------------------------------------------------------------------*
** Currency
**--------------------------------------------------------------------*
*    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
**      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-KURSF.
*    LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_HEADER-TOTAR.
*
*    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*
*    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
*    LS_GL-BSCHL = GC_DEBIT.
*    CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
*                LS_GL-BSCHL
*                ''"GC_CON-BRNCH
*                ''"GC_CON-BUPLA
*                SPACE
*           INTO LS_EXTENSION2-VALUEPART1.
*    APPEND LS_EXTENSION2 TO LT_EXTENSION2.
**--------------------------------------------------------------------*
** Item Credit
**--------------------------------------------------------------------*
**--------------------------------------------------------------------*
**G/L
**--------------------------------------------------------------------*
*    ADD 1 TO LV_GL_LINE.
**      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
**      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
*    LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
*    LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
*
*
*    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-CREDIT
*                                IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).
*
**      LS_ACCOUNTGL-PROFIT_CTR = GS_DETAIL-PRCTR.
**      LS_ACCOUNTGL-COSTCENTER = GS_DETAIL-PRCTR+1(9).
**      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-COSTCENTER.
**      LS_ACCOUNTGL-ORDERID    = GS_DETAIL-AUFNR.
**      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-ORDERID .
**      LS_ACCOUNTGL-ITEM_TEXT  = GS_DETAIL-SGTXT.
*    APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
**--------------------------------------------------------------------*
** Currency
**--------------------------------------------------------------------*
*    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
**      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-KURSF.
*    LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_HEADER-TOTAR * -1.
*
*    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*
*    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
*    LS_GL-BSCHL = GC_DEBIT.
*    CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
*                LS_GL-BSCHL
*                ''"GC_CON-BRNCH
*                ''"GC_CON-BUPLA
*                SPACE
*           INTO LS_EXTENSION2-VALUEPART1.
*    APPEND LS_EXTENSION2 TO LT_EXTENSION2.
*
*    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
*      EXPORTING
*        DOCUMENTHEADER = LV_DOCUMENTHEADER
*      TABLES
*        ACCOUNTGL      = LT_ACCOUNTGL
*        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
**       accountreceivable   = lt_accountreceivable
*        ACCOUNTTAX     = LT_ACCOUNTTAX
*        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
*        EXTENSION1     = LT_EXTENSION
*        RETURN         = LT_RETURN
*        EXTENSION2     = LT_EXTENSION2
*        ACCOUNTWT      = LT_ACCOUNTWT.
*    DATA LS_RETURN_TMP LIKE LS_RETURN.
*    READ TABLE LT_RETURN
*    WITH KEY TYPE = GC_E TRANSPORTING NO FIELDS.
*    IF SY-SUBRC NE 0.
*      READ TABLE LT_RETURN INTO LS_RETURN
*      WITH KEY TYPE = GC_S.
*      IF SY-SUBRC EQ 0.
*        MESSAGE s998 WITH LS_RETURN-MESSAGE_V2 DISPLAY LIKE GC_E.
*        LCL_UTIL=>COMMIT( ).
*        END_CONTRACT( ).
*      ENDIF.
*    ELSE.
*      MESSAGE s998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
*    ENDIF.
  ENDMETHOD.
  METHOD POST_END_INTEREST.
    DATA : LV_SUM_INTER TYPE P DECIMALS 2.

    LOOP AT GT_RESULT INTO GS_RESULT WHERE FIDOC IS INITIAL.
      ADD GS_RESULT-INTER TO LV_SUM_INTER.
    ENDLOOP.
    IF SY-SUBRC EQ 0.
      DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
             LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
             LS_ACCOUNTGL      TYPE BAPIACGL09,
             LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
             LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
             LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
             LS_CURRENCYAMOUNT TYPE BAPIACCR09,
             LT_RETURN         TYPE TABLE OF BAPIRET2,
             LS_RETURN         TYPE BAPIRET2,
             LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
             LS_EXTENSION2     TYPE BAPIPAREX,
             LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
             LS_ACCOUNTTAX     TYPE BAPIACTX09,
             LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
             LS_ACCOUNTWT      TYPE BAPIACWT09,
             LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
             LS_EXTENSION      TYPE BAPIACEXTC.

      DATA : LS_GL TYPE ZSDSFIS002.

      DATA : LV_GL_LINE TYPE I.
*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
      LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
      LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
      LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( I_DATA ).
      LV_DOCUMENTHEADER-DOC_DATE        = I_DATA.
      LV_DOCUMENTHEADER-PSTNG_DATE      = I_DATA.
      LV_DOCUMENTHEADER-TRANS_DATE      = I_DATA.
      LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( LV_DOCUMENTHEADER-PSTNG_DATE ).
      LV_DOCUMENTHEADER-DOC_TYPE        = 'SA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = 'TEST555'.
      LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
      LV_DOCUMENTHEADER-LEDGER_GROUP    = '0L'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item
*--------------------------------------------------------------------*
      DO 2 TIMES.

        ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
        LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
        LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
        LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-SGTXT.

        IF LV_GL_LINE EQ 1.
          LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESLI.
          LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
          LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                      IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
          LS_GL-BSCHL = GC_DEBIT.
          APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_SUM_INTER.
          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        ELSEIF LV_GL_LINE EQ 2.
          LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-DEFER.
          LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
          LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                      IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
          LS_GL-BSCHL = GC_CREDIT.
          APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_SUM_INTER * -1.
          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
        ENDIF.

        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                    IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

        LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
        CONCATENATE LS_ACCOUNTPAYABLE-ITEMNO_ACC
                    LS_GL-BSCHL
                    ''"GC_CON-BRNCH
                    ''"GC_CON-BUPLA
                    SPACE
               INTO LS_EXTENSION2-VALUEPART1.
        APPEND LS_EXTENSION2 TO LT_EXTENSION2.

      ENDDO.

      CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
        EXPORTING
          DOCUMENTHEADER = LV_DOCUMENTHEADER
        TABLES
          ACCOUNTGL      = LT_ACCOUNTGL
          ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*         accountreceivable   = lt_accountreceivable
          ACCOUNTTAX     = LT_ACCOUNTTAX
          CURRENCYAMOUNT = LT_CURRENCYAMOUNT
          EXTENSION1     = LT_EXTENSION
          RETURN         = LT_RETURN
          EXTENSION2     = LT_EXTENSION2
          ACCOUNTWT      = LT_ACCOUNTWT.
      DATA LS_RETURN_TMP LIKE LS_RETURN.

      DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                             NUMBER EQ 609.

*    READ TABLE LT_RETURN INTO LS_RETURN
*    WITH KEY TYPE = GC_E .
*    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
        LCL_UTIL=>COMMIT( ).
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_END ).

        GS_HEADER-FIECO = LS_RETURN-MESSAGE_V2+0(10).
      ENDIF.
*    ELSE.
**      MESSAGE s998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
*      MOVE-CORRESPONDING I_DATA TO R.
*      R-STATU = GC_ERROR.
*      R-MESSG = LS_RETURN-MESSAGE.
*  ENDIF.
    ELSE.
      LCL_UTIL=>UPDATE_ZSDSFIT022( I_TYPE = GC_END ).
    ENDIF.

  ENDMETHOD.
  METHOD SAMPLE.
    GS_HEADER-WAERS = 'THB'.
    GS_HEADER-ANLN1 = '005100000001'.
    GS_HEADER-ANLN2 = ''.
    GS_HEADER-ASSNA = 'Test asset create'.
    GS_HEADER-INTER = '7.465'.
    GS_HEADER-INTEE = ''.
    GS_HEADER-LIFNR = '132005'.
    GS_HEADER-LASOR = 'DAIKIN INDUSTRIES (THAILAND) LTD.'.
    GS_HEADER-LEASA = 'Test Lease Asset'.
    GS_HEADER-CONTN = '11002220'.
    GS_HEADER-COSEV = '788489.35'.
    GS_HEADER-VATMT = '63826'.
    GS_HEADER-RESID = ''.
    GS_HEADER-LEAST = '47'.
    GS_HEADER-PAYMP = '1'.
    GS_HEADER-TIMES = '47'.
    GS_HEADER-RENEV = '19400'.
    GS_HEADER-TOTAR = '911800'.
    GS_HEADER-DEPOS = ''.
    GS_HEADER-STADT = '20230901'.
    GS_HEADER-ENDDT = '20270731'.
    GS_HEADER-TODAY = '1430'.
    GS_HEADER-PAYDT = ''.
    GS_HEADER-FLAGE = 'X'.
    GS_HEADER-REMAK = ''.
    GS_HEADER-EXTED = ''.
    GS_HEADER-ERNAM = ''.
    GS_HEADER-ERDAT = ''.
    GS_HEADER-ERZET = ''.
    GS_HEADER-RUNNG = ''.
    GS_HEADER-STATU = ''.
    GS_HEADER-NPVFG = ''.
    GS_HEADER-PVFAG = ''.

  ENDMETHOD.
  METHOD GET_ZSDSFIT012.
    DATA : BEGIN OF LS_ZSDSFIT012,
             STADT TYPE ZSDSFIT012-STADT,
             ENDDT TYPE ZSDSFIT012-ENDDT,
             COSEV TYPE ZSDSFIT012-COSEV,
             INTER TYPE ZSDSFIT012-INTER,
           END OF LS_ZSDSFIT012.
    DATA LT_ZSDSFIT012 LIKE TABLE OF LS_ZSDSFIT012.

    SELECT STADT,
           ENDDT,
           COSEV,
           INTER
      FROM ZSDSFIT012
      INTO TABLE @LT_ZSDSFIT012
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR.

    GT_AMT = VALUE #(
                 FOR LS_TMP IN LT_ZSDSFIT012 INDEX INTO LV_INDEX
                   (
                     STDDT = LS_TMP-STADT
                     ENDDT = LS_TMP-ENDDT
                     REGMT = LS_TMP-COSEV
                     INTER = LS_TMP-INTER
                    )
                  ).
  ENDMETHOD.
  METHOD GET_ZSDSFIT022.
    SELECT ZSDSFIT022~TYPES,
           ZSDSFIT022~MONIT,
           ZSDSFIT022~BELNR,
           ZSDSFIT022~GJAHR
      FROM ZSDSFIT022
      INNER JOIN @GT_RESULT AS A ON ZSDSFIT022~CONTN EQ A~CONTN AND
                                    ZSDSFIT022~LIFNR EQ A~LIFNR AND
                                    ZSDSFIT022~MONIT EQ A~MONIT AND
                                    ( ZSDSFIT022~TYPES EQ @GC_ITEM  OR
                                      ZSDSFIT022~TYPES EQ @GC_ITEMT OR
                                      ZSDSFIT022~TYPES EQ @GC_ITEML ) AND
                                    ZSDSFIT022~DFLAG EQ @SPACE
      INTO TABLE @GT_ZSDSFIT022.

    SELECT SINGLE BELNR
      FROM ZSDSFIT022
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND TYPES EQ @GC_START
        AND DFLAG EQ @SPACE
      INTO @GS_HEADER-FISCO.

    SELECT SINGLE BELNR
      FROM ZSDSFIT022
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND TYPES EQ @GC_END
        AND DFLAG EQ @SPACE
      INTO @GS_HEADER-FIECO.

    SELECT SINGLE BELNR
      FROM ZSDSFIT022
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND TYPES EQ @GC_RETIR
        AND DFLAG EQ @SPACE
      INTO @GS_HEADER-FIRCO.

    SELECT SINGLE BELNR
      FROM ZSDSFIT022
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND TYPES EQ @GC_ASSET_POST
        AND DFLAG EQ @SPACE
      INTO @GS_HEADER-FIACO.

    SELECT COUNT( * )
      FROM ZSDSFIT022
      WHERE CONTN EQ @GS_HEADER-CONTN
        AND LIFNR EQ @GS_HEADER-LIFNR
        AND TYPES EQ @GC_END
        AND DFLAG EQ @SPACE.
    IF SY-SUBRC EQ 0.
      GV_DISABLE_END = ABAP_TRUE.
    ELSE.
      CLEAR : GV_DISABLE_END.
    ENDIF.

  ENDMETHOD.
  METHOD UPDATE_RESULT.
    FIELD-SYMBOLS <LFS_DATA> LIKE LINE OF GT_RESULT.

    DATA : LS_ALVED LIKE GS_RESULT-ALVED.
    CLEAR : GS_HEADER-TOTAR.
    LOOP AT GT_RESULT ASSIGNING <LFS_DATA>.
      READ TABLE GT_ZSDSFIT022 INTO GS_ZSDSFIT022
      WITH KEY MONIT   = <LFS_DATA>-MONIT
               TYPES   = GC_ITEM.
      IF SY-SUBRC EQ 0.
        <LFS_DATA>-FIDOC = GS_ZSDSFIT022-BELNR.
        <LFS_DATA>-FIYER = GS_ZSDSFIT022-GJAHR.
*        LS_ALVED = SET_DISABLE_FILED( GC_CHECK ).
*        APPEND LINES OF LS_ALVED TO <LFS_DATA>-ALVED.
        LS_ALVED = SET_DISABLE_FILED( GC_POST_DATE ).
        APPEND LINES OF LS_ALVED TO <LFS_DATA>-ALVED.
        <LFS_DATA>-POSTD = <LFS_DATA>-ENDDT.
      ELSE.
        IF GS_HEADER-FIRCO IS NOT INITIAL.
*          LS_ALVED = SET_DISABLE_FILED( GC_CHECK ).
*          APPEND LINES OF LS_ALVED TO <LFS_DATA>-ALVED.
          LS_ALVED = SET_DISABLE_FILED( GC_POST_DATE ).
          APPEND LINES OF LS_ALVED TO <LFS_DATA>-ALVED.
        ENDIF.
        <LFS_DATA>-POSTD = <LFS_DATA>-ENDDT.
      ENDIF.

      READ TABLE GT_ZSDSFIT022 INTO GS_ZSDSFIT022
      WITH KEY MONIT   = <LFS_DATA>-MONIT
               TYPES   = GC_ITEMT.
      IF SY-SUBRC EQ 0.
        <LFS_DATA>-FIDZ1 = GS_ZSDSFIT022-BELNR.
        <LFS_DATA>-FIYER = GS_ZSDSFIT022-GJAHR.
      ENDIF.

      READ TABLE GT_ZSDSFIT022 INTO GS_ZSDSFIT022
      WITH KEY MONIT   = <LFS_DATA>-MONIT
               TYPES   = GC_ITEML.
      IF SY-SUBRC EQ 0.
        <LFS_DATA>-FIDZ2 = GS_ZSDSFIT022-BELNR.
        <LFS_DATA>-FIYER = GS_ZSDSFIT022-GJAHR.
      ENDIF.

      <LFS_DATA>-TOTAD = GET_TOTAL_DAY( EXPORTING I_DATE_START = <LFS_DATA>-STDDT ).
      <LFS_DATA>-USDAY = ( <LFS_DATA>-ENDDT - <LFS_DATA>-STDDT ) + 1.
      ADD <LFS_DATA>-REGMT TO GS_HEADER-TOTAR.
    ENDLOOP.
  ENDMETHOD.
  METHOD POPUP_CONFIRM.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR       = TEXT-107
*       DIAGNOSE_OBJECT             = ' '
        TEXT_QUESTION  = I_DATA
        TEXT_BUTTON_1  = GC_YES
*       ICON_BUTTON_1  = ' '
        TEXT_BUTTON_2  = GC_NO
*       ICON_BUTTON_2  = ' '
*       DEFAULT_BUTTON = '1'
*       DISPLAY_CANCEL_BUTTON       = 'X'
*       USERDEFINED_F1_HELP         = ' '
*       START_COLUMN   = 25
*       START_ROW      = 6
*       POPUP_TYPE     =
*       IV_QUICKINFO_BUTTON_1       = ' '
*       IV_QUICKINFO_BUTTON_2       = ' '
      IMPORTING
        ANSWER         = R
*     TABLES
*       PARAMETER      =
      EXCEPTIONS
        TEXT_NOT_FOUND = 1
        OTHERS         = 2.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.
  METHOD POST_ASSET_ACQUISITION.

    DATA: LS_GEN_INFO        TYPE BAPIFAPO_GEN_INFO,
          LS_ACQUISITIONDATA TYPE BAPIFAPO_ACQ,
          LS_FURTHER         TYPE BAPIFAPO_ADD_INFO.

    DATA: LS_ORIGINDOC TYPE  BAPIFAPO_DOC_REF,
          LS_RETURN_AA TYPE  BAPIRET2,
          LT_RETURN_AA TYPE  TY_T_BAPIRET2,
          LF_OBJ_TYPE  TYPE  BAPIACHE09-OBJ_TYPE,
          LF_OBJ_KEY   TYPE  BAPIACHE09-OBJ_KEY,
          LF_OBJ_SYS   TYPE  BAPIACHE09-OBJ_SYS.

    CONSTANTS : BEGIN OF LC_CON,
                  AMBU     TYPE C LENGTH 4 VALUE 'AMBU',
                  AA       TYPE C LENGTH 2 VALUE 'AA',
                  RTR      TYPE C LENGTH 3 VALUE '240',
                  COMC     TYPE C LENGTH 4 VALUE '1000',
                  FAA_POST TYPE C LENGTH 8 VALUE 'FAA_POST',
                  ZNE      TYPE C LENGTH 3 VALUE '092',
                  OL       TYPE C LENGTH 2 VALUE '0L',
                END OF LC_CON.

    CLEAR: LS_ORIGINDOC, LS_RETURN_AA .

    LS_GEN_INFO-USERNAME     = SY-UNAME.
    LS_GEN_INFO-DOC_TYPE     = LC_CON-AA.
    LS_GEN_INFO-DOC_DATE     = GV_POST_DATE_ST.
    LS_GEN_INFO-PSTNG_DATE   = GV_POST_DATE_ST.
    LS_GEN_INFO-TRANS_DATE   = GV_POST_DATE_ST.
    LS_GEN_INFO-COMP_CODE    = LC_CON-COMC.
    LS_GEN_INFO-ASSETMAINO   = GS_HEADER-ANLN1.
    LS_GEN_INFO-ASSETSUBNO   = GS_HEADER-ANLN2.
    LS_GEN_INFO-LEDGER_GROUP = LC_CON-OL.
*    LS_GEN_INFO-ASSETTRTYP = LC_CON-RTR.

    LS_ACQUISITIONDATA-OFFSET_ACCOUNT = |{ GS_FI-CREDIT ALPHA = IN }| .
    LS_ACQUISITIONDATA-AMOUNT         = GS_HEADER-COSEV.
    LS_ACQUISITIONDATA-CURRENCY       = GS_HEADER-WAERS.
    LS_ACQUISITIONDATA-QUANTITY       = 1.

    SELECT SINGLE ANLKL
                  MEINS
      FROM ANLA
      INTO (LS_ACQUISITIONDATA-ASSETCLASS,LS_ACQUISITIONDATA-BASE_UOM)
      WHERE BUKRS EQ GC_COM_CODE
        AND ANLN1 EQ GS_HEADER-ANLN1
        AND ANLN2 EQ GS_HEADER-ANLN2.

    IF LS_ACQUISITIONDATA-BASE_UOM IS INITIAL.
      LS_ACQUISITIONDATA-BASE_UOM = 'EA'.
    ENDIF.

    SELECT SINGLE KOSTL
      FROM ANLZ
      INTO LS_ACQUISITIONDATA-COSTCENTER
      WHERE BUKRS EQ GC_COM_CODE
        AND ANLN1 EQ GS_HEADER-ANLN1
        AND ANLN2 EQ GS_HEADER-ANLN2.

    LS_ACQUISITIONDATA-VALUEDATE = GV_POST_DATE_ST.
    LS_FURTHER-ITEM_TEXT         = GS_HEADER-SGTXT.

    IF LS_GEN_INFO IS NOT INITIAL.
      CALL FUNCTION 'BAPI_ASSET_ACQUISITION_POST'
        EXPORTING
*         ORIGINDOCREFERENCE = LS_ORIGINDOC
          GENERALPOSTINGDATA = LS_GEN_INFO
          ACQUISITIONDATA    = LS_ACQUISITIONDATA
          FURTHERPOSTINGDATA = LS_FURTHER
        IMPORTING
          RETURN             = LS_RETURN_AA
        TABLES
          RETURN_ALL         = LT_RETURN_AA.

      READ TABLE LT_RETURN_AA INTO LS_RETURN_AA
      WITH KEY TYPE = GC_E.
      IF SY-SUBRC EQ 0.
        R = LS_RETURN_AA-MESSAGE.
        RETURN.
      ENDIF.

      READ TABLE LT_RETURN_AA INTO LS_RETURN_AA
      WITH KEY TYPE = GC_A.
      IF SY-SUBRC EQ 0.
        R = LS_RETURN_AA-MESSAGE.
        RETURN.
      ENDIF.

      READ TABLE LT_RETURN_AA INTO DATA(LS_TMP)
      WITH KEY TYPE   = GC_S
               ID     = LC_CON-FAA_POST
               NUMBER = LC_CON-ZNE.

      DATA : LV_BUKRS TYPE BUKRS,
             LV_GJAHR TYPE GJAHR.

      LV_BUKRS = LS_TMP-MESSAGE_V1.

      CALL FUNCTION 'Z_SDSFI_GET_PERIOD_FISCAL_YEAR'
        EXPORTING
          I_BUKRS = LV_BUKRS
          I_DATUM = GV_POST_DATE_ST
        IMPORTING
          E_GJAHR = LV_GJAHR.

      LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_TMP-MESSAGE_V2
                                   I_COM_CODE = LS_TMP-MESSAGE_V1
                                   I_YEAR     = LV_GJAHR
                                   I_TYPE     = GC_ASSET_POST ).

      GS_HEADER-FIACO = LS_TMP-MESSAGE_V2.
*      UPDATE_ZSDSFIT004( ).
      COMMIT WORK AND WAIT.
      CLEAR : R.
    ENDIF.

  ENDMETHOD.
  METHOD POST_ST_NO_ASSET.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.

    DATA : LV_TEXT TYPE STRING.

    CONSTANTS : BEGIN OF LC_CON,
                  OL TYPE BF_TARGET_LDGRP VALUE '0L',
                  SA TYPE C LENGTH 2 VALUE 'SA',
                END OF LC_CON.


*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    "lv_documentheader-header_txt      = p_xblnr.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( GV_POST_DATE_ST ).
    LV_DOCUMENTHEADER-DOC_DATE        = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-PSTNG_DATE      = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-TRANS_DATE      = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( GV_POST_DATE_ST ).
    LV_DOCUMENTHEADER-DOC_TYPE        = LC_CON-SA.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-LEDGER_GROUP    = LC_CON-OL.
*    LV_DOCUMENTHEADER-LEDGER_GROUP    = LC_CON-OL.

    DO 2 TIMES.
      ADD 1 TO LV_GL_LINE.
      LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.
      LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-SGTXT.

      IF LV_GL_LINE EQ 1.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-DEFER.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = GV_SUM_INTER.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 2.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-CREDIT
                                    IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).
        GS_GL-LESLI = LS_ACCOUNTGL-GL_ACCOUNT.

        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESLI.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = GV_SUM_INTER * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ENDIF.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                  IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                  LS_GL-BSCHL
                  ''
                  ''
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

    ENDDO.

*--------------------------------------------------------------------*
*
*--------------------------------------------------------------------*
    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E."TRANSPORTING NO FIELDS.
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
        CONCATENATE TEXT-108
                    LS_RETURN-MESSAGE_V2+0(10)
                    TEXT-109
               INTO LV_TEXT SEPARATED BY SPACE.



*        MESSAGE S998 WITH LS_RETURN-MESSAGE_V2+0(10).
        MESSAGE S998 WITH LS_RETURN-MESSAGE_V2.
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_START ).
        GS_HEADER-FISCO = LS_RETURN-MESSAGE_V2+0(10).
        UPDATE_ZSDSFIT004( ).
*        LS_RETURN-MESSAGE_V2+0(10)" Document No
*        LS_RETURN-MESSAGE_V2+10(4)" Comcode
*        LS_RETURN-MESSAGE_V2+14(4)" Year
        LCL_UTIL=>COMMIT( ).
        LEAVE TO SCREEN 0.
      ENDIF.
    ELSE.
      MESSAGE S998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
    ENDIF.
  ENDMETHOD.
  METHOD POST_ST_ASSET.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.

    DATA : LV_TEXT TYPE STRING.

    CONSTANTS : BEGIN OF LC_CON,
                  ZO TYPE BF_TARGET_LDGRP VALUE 'Z1',
                  ZT TYPE BF_TARGET_LDGRP VALUE 'Z2',
                END OF LC_CON.


*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    "lv_documentheader-header_txt      = p_xblnr.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( SY-DATUM ).
    LV_DOCUMENTHEADER-DOC_DATE        = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-PSTNG_DATE      = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-TRANS_DATE      = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( SY-DATUM ).
    LV_DOCUMENTHEADER-DOC_TYPE        = 'AA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-LEDGER_GROUP    = '0L'.
*    LV_DOCUMENTHEADER-OBJ_TYPE        = 'FKKSU'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item Debit
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*G/L
*--------------------------------------------------------------------*
    ADD 1 TO LV_GL_LINE.
    LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
    LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.


    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-DEBIT
                                IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

    GS_GL-LESCL = LS_ACCOUNTGL-GL_ACCOUNT.

    LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
    LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-ANLN1.
    LS_ACCOUNTGL-ASSET_NO   = GS_HEADER-ANLN1.
    LS_ACCOUNTGL-SUB_NUMBER = GS_HEADER-ANLN2.



    APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*--------------------------------------------------------------------*
* Currency
*--------------------------------------------------------------------*
    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-KURSF.
    LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_HEADER-COSEV." GS_HEADER-TOTAR

    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_ASSET.
    LS_GL-BSCHL = GC_ASSET.
    CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                LS_GL-BSCHL
                GC_100
                ''"GC_CON-BRNCH
                ''"GC_CON-BUPLA
                SPACE
           INTO LS_EXTENSION2-VALUEPART1.
    APPEND LS_EXTENSION2 TO LT_EXTENSION2.
*--------------------------------------------------------------------*
* Item Credit
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*G/L
*--------------------------------------------------------------------*
    ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
    LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
    LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.

    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-CREDIT
                                IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).
    GS_GL-LESLI = LS_ACCOUNTGL-GL_ACCOUNT.

    LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
    LS_ACCOUNTGL-ITEM_TEXT = GS_HEADER-ANLN1.
*      LS_ACCOUNTGL-COSTCENTER = GS_DETAIL-PRCTR+1(9).
*      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-COSTCENTER.
*      LS_ACCOUNTGL-ORDERID    = GS_DETAIL-AUFNR.
*      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-ORDERID .
*      LS_ACCOUNTGL-ITEM_TEXT  = GS_DETAIL-SGTXT.
    APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*--------------------------------------------------------------------*
* Currency
*--------------------------------------------------------------------*
    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-KURSF.
    LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_HEADER-COSEV * -1. "GS_HEADER-TOTAR

    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
    LS_GL-BSCHL = GC_CREDIT.
    CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                LS_GL-BSCHL
                ''"GC_CON-BRNCH
                ''"GC_CON-BUPLA
                SPACE
           INTO LS_EXTENSION2-VALUEPART1.
    APPEND LS_EXTENSION2 TO LT_EXTENSION2.

*--------------------------------------------------------------------*
*
*--------------------------------------------------------------------*
    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E."TRANSPORTING NO FIELDS.
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
        CONCATENATE TEXT-108
                    LS_RETURN-MESSAGE_V2+0(10)
                    TEXT-109
               INTO LV_TEXT SEPARATED BY SPACE.

*        RETIREMENT_ASSET( I_DATA   = GV_POST_DATE_ST
*                          I_LEDGER = LC_CON-ZO
*                          I_TYPE   = GC_RETIR_Z1 ).
*        LCL_UTIL=>COMMIT( ).
*        RETIREMENT_ASSET( I_DATA   = GV_POST_DATE_ST
*                          I_LEDGER = LC_CON-ZT
*                          I_TYPE   = GC_RETIR_Z2 ).
        LCL_UTIL=>COMMIT( ).

*        MESSAGE S998 WITH LS_RETURN-MESSAGE_V2+0(10).
        MESSAGE S998 WITH LS_RETURN-MESSAGE_V2.
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_ASSET_POST ).
        GS_HEADER-FIACO = LS_RETURN-MESSAGE_V2+0(10).
        UPDATE_ZSDSFIT004( ).
*        LS_RETURN-MESSAGE_V2+0(10)" Document No
*        LS_RETURN-MESSAGE_V2+10(4)" Comcode
*        LS_RETURN-MESSAGE_V2+14(4)" Year
        LCL_UTIL=>COMMIT( ).
      ENDIF.
    ELSE.
      R = LS_RETURN-MESSAGE.
      MESSAGE S998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
    ENDIF.

  ENDMETHOD.
  METHOD POST_ST.
    DATA : LV_DOCUMENTHEADER TYPE BAPIACHE09,
           LT_ACCOUNTGL      TYPE TABLE OF BAPIACGL09,
           LS_ACCOUNTGL      TYPE BAPIACGL09,
           LT_ACCOUNTPAYABLE TYPE TABLE OF BAPIACAP09,
           LS_ACCOUNTPAYABLE TYPE BAPIACAP09,
*         lt_accountreceivable  TYPE TABLE OF bapiacar09,
*         ls_accountreceivable  TYPE bapiacar09,
           LT_CURRENCYAMOUNT TYPE TABLE OF BAPIACCR09,
           LS_CURRENCYAMOUNT TYPE BAPIACCR09,
           LT_RETURN         TYPE TABLE OF BAPIRET2,
           LS_RETURN         TYPE BAPIRET2,
           LT_EXTENSION2     TYPE TABLE OF BAPIPAREX,
           LS_EXTENSION2     TYPE BAPIPAREX,
           LT_ACCOUNTTAX     TYPE TABLE OF BAPIACTX09,
           LS_ACCOUNTTAX     TYPE BAPIACTX09,
           LT_ACCOUNTWT      TYPE TABLE OF  BAPIACWT09,
           LS_ACCOUNTWT      TYPE BAPIACWT09,
           LT_EXTENSION      TYPE TABLE OF BAPIACEXTC,
           LS_EXTENSION      TYPE BAPIACEXTC.

    DATA : LS_GL TYPE ZSDSFIS002.

    DATA : LV_GL_LINE TYPE I.

    DATA : LV_TEXT TYPE STRING.

    CONSTANTS : BEGIN OF LC_CON,
                  ZO TYPE BF_TARGET_LDGRP VALUE 'Z1',
                  ZT TYPE BF_TARGET_LDGRP VALUE 'Z2',
                END OF LC_CON.


*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    LV_DOCUMENTHEADER-USERNAME        = SY-UNAME.
    "lv_documentheader-header_txt      = p_xblnr.
    LV_DOCUMENTHEADER-COMP_CODE       = GC_COM_CODE.
    LV_DOCUMENTHEADER-FISC_YEAR       = LCL_UTIL=>GET_FISC_YEAR( SY-DATUM ).
    LV_DOCUMENTHEADER-DOC_DATE        = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-PSTNG_DATE      = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-TRANS_DATE      = GV_POST_DATE_ST.
    LV_DOCUMENTHEADER-FIS_PERIOD      = LCL_UTIL=>GET_FISC_PERIOD( SY-DATUM ).
    LV_DOCUMENTHEADER-DOC_TYPE        = 'AA'.
*    LV_DOCUMENTHEADER-REF_DOC_NO      = GS_HEADER-CONTN.
    LV_DOCUMENTHEADER-HEADER_TXT      = GS_HEADER-CONTN.
*    LV_DOCUMENTHEADER-LEDGER_GROUP    = '0L'.
*    LV_DOCUMENTHEADER-OBJ_TYPE        = 'FKKSU'.
*    lv_documentheader-ref_doc_no_long = p_xblnr.
*--------------------------------------------------------------------*
* Item Debit
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*G/L
*--------------------------------------------------------------------*
    ADD 1 TO LV_GL_LINE.
    LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
    LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.


    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-DEBIT
                                IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

    GS_GL-LESCL = LS_ACCOUNTGL-GL_ACCOUNT.

    LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
    LS_ACCOUNTGL-ITEM_TEXT  = GS_HEADER-ANLN1.
    LS_ACCOUNTGL-ASSET_NO   = GS_HEADER-ANLN1.
    LS_ACCOUNTGL-SUB_NUMBER = GS_HEADER-ANLN2.



    APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*--------------------------------------------------------------------*
* Currency
*--------------------------------------------------------------------*
    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-KURSF.
    LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_HEADER-COSEV." GS_HEADER-TOTAR

    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_ASSET.
    LS_GL-BSCHL = GC_ASSET.
    CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                LS_GL-BSCHL
                GC_100
                ''"GC_CON-BRNCH
                ''"GC_CON-BUPLA
                SPACE
           INTO LS_EXTENSION2-VALUEPART1.
    APPEND LS_EXTENSION2 TO LT_EXTENSION2.
*--------------------------------------------------------------------*
* Item Credit
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*G/L
*--------------------------------------------------------------------*
    ADD 1 TO LV_GL_LINE.
*      LS_ACCOUNTGL-ALLOC_NMBR = GS_DETAIL-ZUONR.
*      LS_ACCOUNTGL-ACCT_KEY   = 'EGK'.
    LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
    LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.

    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = GS_FI-CREDIT
                                IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).
    GS_GL-LESLI = LS_ACCOUNTGL-GL_ACCOUNT.

    LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
    LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
    LS_ACCOUNTGL-ITEM_TEXT = GS_HEADER-ANLN1.
*      LS_ACCOUNTGL-COSTCENTER = GS_DETAIL-PRCTR+1(9).
*      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-COSTCENTER.
*      LS_ACCOUNTGL-ORDERID    = GS_DETAIL-AUFNR.
*      PERFORM F_APHA_INPUT USING LS_ACCOUNTGL-ORDERID .
*      LS_ACCOUNTGL-ITEM_TEXT  = GS_DETAIL-SGTXT.
    APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.
*--------------------------------------------------------------------*
* Currency
*--------------------------------------------------------------------*
    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
*      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-KURSF.
    LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_HEADER-COSEV * -1. "GS_HEADER-TOTAR

    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
    LS_GL-BSCHL = GC_CREDIT.
    CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                LS_GL-BSCHL
                ''"GC_CON-BRNCH
                ''"GC_CON-BUPLA
                SPACE
           INTO LS_EXTENSION2-VALUEPART1.
    APPEND LS_EXTENSION2 TO LT_EXTENSION2.


    DO 2 TIMES.

      ADD 1 TO LV_GL_LINE.
      LS_ACCOUNTGL-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTGL-COMP_CODE  = GC_COM_CODE.

      IF LV_GL_LINE EQ 1.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-DEFER.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_DEBIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = GV_SUM_INTER.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ELSEIF LV_GL_LINE EQ 2.
        LS_ACCOUNTGL-GL_ACCOUNT = GS_GL-LESLI.
        LS_ACCOUNTGL-PROFIT_CTR = GS_HEADER-PRCTR.
        LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-PROFIT_CTR
                                    IMPORTING E_DATA = LS_ACCOUNTGL-PROFIT_CTR ).
        LS_GL-BSCHL = GC_CREDIT.
        APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

        LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
        LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-WAERS.
        LS_CURRENCYAMOUNT-AMT_DOCCUR  = GV_SUM_INTER * -1.
        APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
      ENDIF.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACCOUNTGL-GL_ACCOUNT
                                  IMPORTING E_DATA = LS_ACCOUNTGL-GL_ACCOUNT ).

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                  LS_GL-BSCHL
                  ''
                  ''
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

    ENDDO.

*--------------------------------------------------------------------*
*
*--------------------------------------------------------------------*
    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = LV_DOCUMENTHEADER
      TABLES
        ACCOUNTGL      = LT_ACCOUNTGL
        ACCOUNTPAYABLE = LT_ACCOUNTPAYABLE
*       accountreceivable   = lt_accountreceivable
        ACCOUNTTAX     = LT_ACCOUNTTAX
        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
        EXTENSION1     = LT_EXTENSION
        RETURN         = LT_RETURN
        EXTENSION2     = LT_EXTENSION2
        ACCOUNTWT      = LT_ACCOUNTWT.
    DATA LS_RETURN_TMP LIKE LS_RETURN.

    DELETE LT_RETURN WHERE ID     EQ 'RW' AND
                           NUMBER EQ 609.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_E."TRANSPORTING NO FIELDS.
    IF SY-SUBRC NE 0.
      READ TABLE LT_RETURN INTO LS_RETURN
      WITH KEY TYPE = GC_S.
      IF SY-SUBRC EQ 0.
        CONCATENATE TEXT-108
                    LS_RETURN-MESSAGE_V2+0(10)
                    TEXT-109
               INTO LV_TEXT SEPARATED BY SPACE.

        RETIREMENT_ASSET( I_DATA   = GV_POST_DATE_ST
                          I_LEDGER = LC_CON-ZO
                          I_TYPE   = GC_RETIR_Z1 ).
        LCL_UTIL=>COMMIT( ).
        RETIREMENT_ASSET( I_DATA   = GV_POST_DATE_ST
                          I_LEDGER = LC_CON-ZT
                          I_TYPE   = GC_RETIR_Z2 ).
        LCL_UTIL=>COMMIT( ).

*        MESSAGE S998 WITH LS_RETURN-MESSAGE_V2+0(10).
        MESSAGE S998 WITH LS_RETURN-MESSAGE_V2.
        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_RETURN-MESSAGE_V2+0(10)
                                     I_COM_CODE = LS_RETURN-MESSAGE_V2+10(4)
                                     I_YEAR     = LS_RETURN-MESSAGE_V2+14(4)
                                     I_TYPE     = GC_START ).
        GS_HEADER-FISCO = LS_RETURN-MESSAGE_V2+0(10).
        UPDATE_ZSDSFIT004( ).
*        LS_RETURN-MESSAGE_V2+0(10)" Document No
*        LS_RETURN-MESSAGE_V2+10(4)" Comcode
*        LS_RETURN-MESSAGE_V2+14(4)" Year
        LCL_UTIL=>COMMIT( ).
        LEAVE TO SCREEN 0.
      ENDIF.
    ELSE.
      MESSAGE S998 WITH LS_RETURN-MESSAGE DISPLAY LIKE GC_E.
    ENDIF.
  ENDMETHOD.
  METHOD CHECK_PARAMETER.
    GET PARAMETER ID GC_PARAID-CONTN FIELD GS_HEADER-CONTN.
    GET PARAMETER ID GC_PARAID-LIFNR FIELD GS_HEADER-LIFNR.
    GET PARAMETER ID GC_PARAID-RUNNG FIELD GS_HEADER-RUNNG.
    IF GS_HEADER-CONTN IS NOT INITIAL.
      SET PARAMETER ID GC_PARAID-CONTN FIELD SPACE.
      SET PARAMETER ID GC_PARAID-LIFNR FIELD SPACE.
      SET PARAMETER ID GC_PARAID-RUNNG FIELD SPACE.
      GV_MODE = GC_MODE-REPOTU.
      LCL_DATA=>GET_DATA_FOR_UPDATE( ).
    ENDIF.
  ENDMETHOD.
  METHOD GET_GL_ASSET_CLEARING.

    DATA : LV_DEBIT LIKE GS_FI-DEBIT.

    SELECT SINGLE SAKNR
      FROM T095_ACI
      INTO LV_DEBIT
      WHERE KTOPL EQ GC_CHART_ACC.

    IF GS_FI-DEBIT IS NOT INITIAL.
      SELECT SINGLE TXT20
        FROM SKAT
        INTO GS_FI-DEBIT_DESC
        WHERE SPRAS EQ SY-LANGU
          AND KTOPL EQ GC_CHART_ACC
          AND SAKNR EQ LV_DEBIT.
    ENDIF.

    R = LV_DEBIT.

  ENDMETHOD.
  METHOD RETIREMENT_ASSET.
    DATA: LS_GEN_INFO   TYPE BAPIFAPO_GEN_INFO,
          LS_RETIREMENT TYPE BAPIFAPO_RET,
          LS_FURTHER    TYPE BAPIFAPO_ADD_INFO.

    DATA: LS_ORIGINDOC TYPE  BAPIFAPO_DOC_REF,
          LS_RETURN_AA TYPE  BAPIRET2,
          LT_RETURN_AA TYPE  TY_T_BAPIRET2,
          LF_OBJ_TYPE  TYPE  BAPIACHE09-OBJ_TYPE,
          LF_OBJ_KEY   TYPE  BAPIACHE09-OBJ_KEY,
          LF_OBJ_SYS   TYPE  BAPIACHE09-OBJ_SYS.

    CONSTANTS : BEGIN OF LC_CON,
                  AMBU     TYPE C LENGTH 4 VALUE 'AMBU',
                  AA       TYPE C LENGTH 2 VALUE 'AA',
                  RTR      TYPE C LENGTH 3 VALUE '240',
                  COMC     TYPE C LENGTH 4 VALUE '1000',
                  FAA_POST TYPE C LENGTH 8 VALUE 'FAA_POST',
                  ZNE      TYPE C LENGTH 3 VALUE '092',
                END OF LC_CON.

    CLEAR: LS_ORIGINDOC, LS_RETURN_AA .

    LS_GEN_INFO-USERNAME     = SY-UNAME .
    LS_GEN_INFO-DOC_TYPE     = LC_CON-AA .
    LS_GEN_INFO-DOC_DATE     = I_DATA.
    LS_GEN_INFO-PSTNG_DATE   = I_DATA.
    LS_GEN_INFO-TRANS_DATE   = I_DATA.
    LS_GEN_INFO-COMP_CODE    = LC_CON-COMC.
    LS_GEN_INFO-ASSETMAINO   = GS_HEADER-ANLN1.
    LS_GEN_INFO-ASSETSUBNO   = GS_HEADER-ANLN2.
    LS_GEN_INFO-LEDGER_GROUP = I_LEDGER.
*    LS_GEN_INFO-ASSETTRTYP = LC_CON-RTR.

    LS_RETIREMENT-COMPL_RET  = ABAP_TRUE .
    LS_RETIREMENT-VALUEDATE  = I_DATA.

    LS_FURTHER-ITEM_TEXT     = GS_HEADER-SGTXT.

*    SELECT SINGLE AKTIV
*      FROM ANLA
*      INTO @LS_RETIREMENT-VALUEDATE
*      WHERE BUKRS EQ @LC_CON-COMC
*        AND ANLN1 EQ @GS_HEADER-ANLN1
*        AND ANLN2 EQ @GS_HEADER-ANLN2.
*    IF SY-SUBRC NE 0.
*
*    ENDIF.

    IF LS_GEN_INFO IS NOT INITIAL.
      COMMIT WORK AND WAIT.
      CALL FUNCTION 'BAPI_ASSET_RETIREMENT_POST'
        EXPORTING
*         ORIGINDOCREFERENCE = LS_ORIGINDOC
          GENERALPOSTINGDATA = LS_GEN_INFO
          RETIREMENTDATA     = LS_RETIREMENT
          FURTHERPOSTINGDATA = LS_FURTHER
        IMPORTING
          RETURN             = LS_RETURN_AA
        TABLES
          RETURN_ALL         = LT_RETURN_AA.

      IF LS_RETURN_AA-TYPE = GC_E OR  LS_RETURN_AA-TYPE = GC_A .
        R = LS_RETURN_AA-MESSAGE.
      ELSE.
        READ TABLE LT_RETURN_AA INTO DATA(LS_TMP)
        WITH KEY TYPE   = GC_S
                 ID     = LC_CON-FAA_POST
                 NUMBER = LC_CON-ZNE.

        DATA : LV_BUKRS TYPE BUKRS,
               LV_GJAHR TYPE GJAHR.

        LV_BUKRS = LS_TMP-MESSAGE_V1.

        CALL FUNCTION 'Z_SDSFI_GET_PERIOD_FISCAL_YEAR'
          EXPORTING
            I_BUKRS = LV_BUKRS
            I_DATUM = I_DATA
          IMPORTING
            E_GJAHR = LV_GJAHR.

        LCL_UTIL=>UPDATE_ZSDSFIT022( I_DOC_NO   = LS_TMP-MESSAGE_V2
                                     I_COM_CODE = LS_TMP-MESSAGE_V1
                                     I_YEAR     = LV_GJAHR
                                     I_TYPE     = I_TYPE ).
        GS_HEADER-FIRCO = LS_TMP-MESSAGE_V2.
        COMMIT WORK AND WAIT.
        CLEAR : R.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD GET_POSTING_DATE.
    DATA : LT_FIELDS TYPE TABLE OF SVAL,
           LS_FIELDS TYPE SVAL.

    DATA : RETURNCODE.

    LS_FIELDS-TABNAME   = 'BKPF'.
    LS_FIELDS-FIELDNAME = 'BUDAT'.
    LS_FIELDS-FIELDTEXT = 'Posting Date'.
    APPEND LS_FIELDS TO LT_FIELDS.

    CALL FUNCTION 'POPUP_GET_VALUES'
      EXPORTING
        POPUP_TITLE     = TEXT-112
      IMPORTING
        RETURNCODE      = RETURNCODE
      TABLES
        FIELDS          = LT_FIELDS
      EXCEPTIONS
        ERROR_IN_FIELDS = 1
        OTHERS          = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    LOOP AT LT_FIELDS INTO LS_FIELDS.
      R = LS_FIELDS-VALUE.
    ENDLOOP.

  ENDMETHOD.
  METHOD GET_COST_CENTER.
    SELECT SINGLE KOSTL
      FROM ANLZ
      INTO GV_COST_CENTER
      WHERE BUKRS EQ GC_COM_CODE
        AND ANLN1 EQ GS_HEADER-ANLN1
        AND ANLN2 EQ GS_HEADER-ANLN2
        AND BDATU GE SY-DATUM.

    SELECT SINGLE FUNC_AREA
      FROM CSKS
      INTO GV_FUNC_AREA
      WHERE KOSTL EQ GV_COST_CENTER
        AND KOKRS EQ GC_COM_CODE.
  ENDMETHOD.
  METHOD MIGRATION.
    CONSTANTS : BEGIN OF LC_CON,
                  ONE TYPE C LENGTH 1 VALUE '1',
                END OF LC_CON.

    DATA : LV_ERROR TYPE CHAR1.

    DATA : LV_CONFIRM TYPE CHAR1.

    CLEAR : LV_ERROR, LV_CONFIRM.
    LV_CONFIRM = POPUP_CONFIRM( TEXT-106 ).
    IF LV_CONFIRM EQ LC_CON-ONE.
      LV_ERROR = CHECK_SAVE( ).
      IF LV_ERROR EQ SPACE.
        GS_FI-DEBIT = LCL_DATA=>GET_GL_ASSET_CLEARING( ).
        CALL SCREEN 105 STARTING AT 10 10.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS DEFINITION.
*Handling double click
  PUBLIC SECTION.
    METHODS:
    HANDLE_DOUBLE_CLICK
    FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS. "lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.

  ENDMETHOD. "handle_double_click
ENDCLASS. "lcl_event_receiver IMPLEMENTATION
