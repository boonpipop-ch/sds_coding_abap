CLASS ZCL_SDSFI_CUSTOMER_CREDIT DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  05.06.2025  420000624   ThanapongC. 1. Change amount in Doc.Curr to
*                                         amount in LC
*                                      2. Add logic to assign sign of
*                                         amount
*                                      3. Add Special GL for Adv.Receive
*                                      4. Bug-Fixed mismatch WBS
*-----------------------------------------------------------------------
*  23.06.2025  420000667   ThanapongC. 1. Change logic to get WBS Credit
*                                         limit and get the last sequeue
*                                      2. Add logic to support for WBS
*                                         Credit limit (Not Valid)
*-----------------------------------------------------------------------
    INTERFACES ZIF_SDSFI_CUSTOMER_CREDIT_TYPE .

    ALIASES TS_BILL_CYCLE
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_BILL_CYCLE .
    ALIASES TS_CMS_SGM
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_CMS_SGM .
    ALIASES TS_CRDT_MGMT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_CRDT_MGMT .
    ALIASES TS_DOC
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_DOC .
    ALIASES TS_GENC
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_GENC .
    ALIASES TS_KNB1
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_KNB1 .
    ALIASES TS_PA0002
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PA0002 .
    ALIASES TS_PARTNER_CUST
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PARTNER_CUST .
    ALIASES TS_PARTNER_KEY
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PARTNER_KEY .
    ALIASES TS_PARTNER_NAME
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PARTNER_NAME .
    ALIASES TS_PARTNER_WBS
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PARTNER_WBS .
    ALIASES TS_PERNR
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PERNR .
    ALIASES TS_PSPNR
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_PSPNR .
    ALIASES TS_RISK_CLST
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_RISK_CLST .
    ALIASES TS_SPART
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_SPART .
    ALIASES TS_T001S
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_T001S .
    ALIASES TS_TSPAT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_TSPAT .
    ALIASES TS_TVGRT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_TVGRT .
    ALIASES TS_TVKBT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_TVKBT .
    ALIASES TS_TVKOT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_TVKOT .
    ALIASES TS_TVTWT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_TVTWT .
    ALIASES TS_VBELN_KEY
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_VBELN_KEY .
    ALIASES TS_VBKD
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_VBKD .
    ALIASES TS_VKBUR
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_VKBUR .
    ALIASES TS_VKGRP
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_VKGRP .
    ALIASES TS_VKORG
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_VKORG .
    ALIASES TS_VTWEG
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_VTWEG .
    ALIASES TS_WBS_CRDT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TS_WBS_CRDT .
    ALIASES TT_BILL_CYCLE
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_BILL_CYCLE .
    ALIASES TT_BUSAB_RANGE
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_BUSAB_RANGE .
    ALIASES TT_CMS_SGM
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_CMS_SGM .
    ALIASES TT_CRDT_MGMT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_CRDT_MGMT .
    ALIASES TT_CREDIT_LIMIT_RANGE
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_CREDIT_LIMIT_RANGE .
    ALIASES TT_DOC
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_DOC .
    ALIASES TT_KNB1
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_KNB1 .
    ALIASES TT_PA0002
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PA0002 .
    ALIASES TT_PARTNER_CUST
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PARTNER_CUST .
    ALIASES TT_PARTNER_KEY
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PARTNER_KEY .
    ALIASES TT_PARTNER_NAME
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PARTNER_NAME .
    ALIASES TT_PARTNER_WBS
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PARTNER_WBS .
    ALIASES TT_PERNR
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PERNR .
    ALIASES TT_PSPNR
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_PSPNR .
    ALIASES TT_RESULT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_RESULT .
    ALIASES TT_RISK_CLST
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_RISK_CLST .
    ALIASES TT_SPART
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_SPART .
    ALIASES TT_T001S
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_T001S .
    ALIASES TT_TSPAT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_TSPAT .
    ALIASES TT_TVGRT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_TVGRT .
    ALIASES TT_TVKBT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_TVKBT .
    ALIASES TT_TVKOT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_TVKOT .
    ALIASES TT_TVTWT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_TVTWT .
    ALIASES TT_VBELN
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VBELN .
    ALIASES TT_VBELN_KEY
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VBELN_KEY .
    ALIASES TT_VBKD
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VBKD .
    ALIASES TT_VBPA
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VBPA .
    ALIASES TT_VKBUR
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VKBUR .
    ALIASES TT_VKGRP
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VKGRP .
    ALIASES TT_VKORG
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VKORG .
    ALIASES TT_VTWEG
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_VTWEG .
    ALIASES TT_WBS_CRDT
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TT_WBS_CRDT .
    ALIASES TY_VBELN
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TY_VBELN .
    ALIASES TY_VBPA
      FOR ZIF_SDSFI_CUSTOMER_CREDIT_TYPE~TY_VBPA .

    CONSTANTS:
      BEGIN OF GC_SEL_CREDIT,
        ALL      TYPE CHAR01 VALUE '*',
        PROJECT  TYPE CHAR01 VALUE 'P',
        CUSTOMER TYPE CHAR01 VALUE 'C',
      END OF GC_SEL_CREDIT .
    CONSTANTS GC_PERCENT_MAX TYPE UKM_CREDLIMIT_USED VALUE '99999999.9' ##NO_TEXT.
    CONSTANTS GC_REPID TYPE REPID VALUE 'ZCL_SDSFI_CUSTOMER_CREDIT' ##NO_TEXT.
    CONSTANTS GC_SHKZG_CREDIT TYPE SHKZG VALUE 'H' ##NO_TEXT.
    CONSTANTS GC_VKORG_SDS TYPE TVKO-VKORG VALUE '1000' ##NO_TEXT.
    CONSTANTS GC_BUKRS_SDS TYPE T001-BUKRS VALUE '1000' ##NO_TEXT.
    CONSTANTS GC_VBTYP_BILL TYPE VBFA-VBTYP_N VALUE 'M' ##NO_TEXT.
    CONSTANTS GC_PARVW_SALE TYPE VBPA-PARVW VALUE 'VE' ##NO_TEXT.
    CONSTANTS GC_LANGU_EN TYPE SY-LANGU VALUE 'E' ##NO_TEXT.
    CONSTANTS:
      BEGIN OF GC_DOC_TYPE,
        SALEORDER        TYPE TS_DOC-DOC_TYPE VALUE '00_SO',
        BILL             TYPE TS_DOC-DOC_TYPE VALUE '01_BILL',
        AR_INVOICE       TYPE TS_DOC-DOC_TYPE VALUE '02_AR_INVOICE',
        DOWN_PATMENT     TYPE TS_DOC-DOC_TYPE VALUE '03_DOWN_PATMENT',
        ADV_RECEIVE      TYPE TS_DOC-DOC_TYPE VALUE '04_ADV_RECEIVE',
        POST_DATE_CHEQUE TYPE TS_DOC-DOC_TYPE VALUE '05A_POST_DATE_CHEQUE',
        CHQ_RETURN       TYPE TS_DOC-DOC_TYPE VALUE '05B_CHQ_RETURN',
        RETENTION        TYPE TS_DOC-DOC_TYPE VALUE '05C_RETENTION',
        AVAL             TYPE TS_DOC-DOC_TYPE VALUE '06_AVAL',
        DLC              TYPE TS_DOC-DOC_TYPE VALUE '07_DLC',
        BANK_GUARANTEE   TYPE TS_DOC-DOC_TYPE VALUE '08_BANK_GUARANTEE',
        CREDIT_INSURANCE TYPE TS_DOC-DOC_TYPE VALUE '09_CREDIT_INSURANCE',
        SALEORDER_PROJ   TYPE TS_DOC-DOC_TYPE VALUE '00_SO_PROJ',
        BILL_PROJ        TYPE TS_DOC-DOC_TYPE VALUE '01_BILL_PROJ',
        AR_INVOICE_PROJ  TYPE TS_DOC-DOC_TYPE VALUE '02_AR_INVOICE_PROJ', "+420000238
      END OF GC_DOC_TYPE .
    CONSTANTS GC_RUNNING TYPE VBAK-ZZRUNNING VALUE '1' ##NO_TEXT.
    CONSTANTS GC_STATUS_CLOSE TYPE ZSDSDE_WBS_CRDT_STATUS VALUE 01 ##NO_TEXT.
    CONSTANTS GC_STATUS_OPEN TYPE ZSDSDE_WBS_CRDT_STATUS VALUE 00 ##NO_TEXT.

    CLASS-METHODS COLLECT_RESULT
      IMPORTING
        !IT_CMS_SGM      TYPE TT_CMS_SGM
        !IT_RISK_CLST    TYPE TT_RISK_CLST
        !IT_PARTNER_NAME TYPE TT_PARTNER_NAME
        !IT_SO_DOC       TYPE TT_DOC
        !IT_FI_DOC       TYPE TT_DOC
        !IT_BILL_DOC     TYPE TT_DOC OPTIONAL
        !IT_WBS_CRDT     TYPE TT_WBS_CRDT
        !IT_BILL_CYCLE   TYPE TT_BILL_CYCLE
        !IT_TVKOT        TYPE TT_TVKOT
        !IT_TVTWT        TYPE TT_TVTWT
        !IT_TSPAT        TYPE TT_TSPAT
        !IT_TVGRT        TYPE TT_TVGRT
        !IT_TVKBT        TYPE TT_TVKBT
        !IT_VBPA_SALE    TYPE TT_VBPA
        !IS_GENC         TYPE TS_GENC
      EXPORTING
        !ET_RESULT       TYPE TT_RESULT .
    CLASS-METHODS GET_DATA
      IMPORTING
        !IT_PARTNER      TYPE BUP_PARTNER_RANGE_T
        !IT_WBS          TYPE MPET_RNG_PSPNR OPTIONAL
        !IF_CREDIT_SGMNT TYPE UKM_CREDIT_SGMNT
        !IT_CREDIT_GROUP TYPE CRMS4T_CRED_GROUP_RNG OPTIONAL
        !IT_RISK_CLASS   TYPE FKK_RISK_CLASS_RNG_T OPTIONAL
        !IT_CREDIT_LIMIT TYPE TT_CREDIT_LIMIT_RANGE OPTIONAL
        !IT_BUSAB        TYPE TT_BUSAB_RANGE OPTIONAL
        !IT_WBSSTAT      TYPE ZIF_SDSFI_CUSTOMER_CREDIT_TYPE=>TT_WBSSTAT_RANGE OPTIONAL
        !IF_BUKRS        TYPE BUKRS DEFAULT GC_BUKRS_SDS
        !IF_ALL_CUSTOMER TYPE FLAG DEFAULT 'X'
        !IF_SEL_CREDIT   TYPE CHAR1 DEFAULT '*'
        !IF_LANGU        TYPE SY-LANGU DEFAULT '2'
      EXPORTING
        !ET_CMS_SGM      TYPE TT_CMS_SGM
        !ET_RISK_CLST    TYPE TT_RISK_CLST
        !ET_PARTNER_NAME TYPE TT_PARTNER_NAME
        !ET_SO_DOC       TYPE TT_DOC
        !ET_FI_DOC       TYPE TT_DOC
        !ET_WBS_CRDT     TYPE TT_WBS_CRDT
        !ET_BILL_CYCLE   TYPE TT_BILL_CYCLE
        !ET_TVKOT        TYPE TT_TVKOT
        !ET_TVTWT        TYPE TT_TVTWT
        !ET_TSPAT        TYPE TT_TSPAT
        !ET_TVGRT        TYPE TT_TVGRT
        !ET_TVKBT        TYPE TT_TVKBT
        !ET_VBPA_SALE    TYPE TT_VBPA
        !ES_GENC         TYPE TS_GENC
        !ET_RESULT       TYPE TT_RESULT .
    CLASS-METHODS VALIDATE_PROJECT
      IMPORTING
        !IF_PSPNR   TYPE PS_INTNR OPTIONAL
      EXPORTING
        !EF_INVALID TYPE FLAG
        !EF_MSGTX   TYPE STRING .
    CLASS-METHODS VALIDATE_PARTNER
      IMPORTING
        !IF_PARTNER TYPE BU_PARTNER
      EXPORTING
        !EF_INVALID TYPE FLAG
        !EF_MSGTX   TYPE STRING .
    CLASS-METHODS GET_GENC
      EXPORTING
        !ES_GENC TYPE TS_GENC .
    CLASS-METHODS GET_FI_DOCUMENT
      IMPORTING
        !IF_SEL_CREDIT   TYPE CHAR1 DEFAULT '*'
        !IT_PARTNER_CUST TYPE TT_PARTNER_CUST
        !IT_PARTNER_WBS  TYPE TT_PARTNER_WBS OPTIONAL
        !IT_WBS          TYPE MPET_RNG_PSPNR OPTIONAL
        !IS_GENC         TYPE TS_GENC
      EXPORTING
        !ET_FI_DOC       TYPE TT_DOC
        !ET_BILL_DOC     TYPE TT_DOC .
    CLASS-METHODS GET_SO_DOCUMENT
      IMPORTING
        !IT_PARTNER_CUST TYPE TT_PARTNER_CUST
        !IT_PARTNER_WBS  TYPE TT_PARTNER_WBS OPTIONAL
        !IT_WBS          TYPE MPET_RNG_PSPNR OPTIONAL
        !IF_SEL_CREDIT   TYPE CHAR1 DEFAULT '*'
        !IS_GENC         TYPE TS_GENC
      EXPORTING
        !ET_SO_DOC       TYPE TT_DOC .
    CLASS-METHODS CALC_PERCENT
      IMPORTING
        !IF_CRDT_EXPOSURE TYPE WERTV12
        !IF_CRDT_LIMIT    TYPE UKM_CREDIT_LIMIT
      RETURNING
        VALUE(RF_PERCENT) TYPE UKM_CREDLIMIT_USED .
    CLASS-METHODS GET_SO_BUSSINESS_DATA
      IMPORTING
        !IT_VBELN TYPE TT_VBELN_KEY
      EXPORTING
        !ET_VBKD  TYPE TT_VBKD .
    CLASS-METHODS GET_CREDIT_MANAGEMENT
      IMPORTING
        !IT_PARTNER      TYPE BUP_PARTNER_RANGE_T
        !IT_CREDIT_SGMNT TYPE UKM_T_CREDIT_SGMNT_RANGES
        !IT_CREDIT_GROUP TYPE CRMS4T_CRED_GROUP_RNG
        !IT_RISK_CLASS   TYPE FKK_RISK_CLASS_RNG_T
        !IT_CREDIT_LIMIT TYPE TT_CREDIT_LIMIT_RANGE
        !IT_WBS          TYPE MPET_RNG_PSPNR
        !IT_BUSAB        TYPE TT_BUSAB_RANGE OPTIONAL
        !IT_WBSSTAT      TYPE ZIF_SDSFI_CUSTOMER_CREDIT_TYPE=>TT_WBSSTAT_RANGE OPTIONAL
        !IF_BUKRS        TYPE BUKRS DEFAULT GC_BUKRS_SDS
        !IF_ALL_CUSTOMER TYPE FLAG DEFAULT 'X'
        !IF_SEL_CREDIT   TYPE CHAR1 DEFAULT '*'
        !IF_LANGU        TYPE SY-LANGU DEFAULT '2'
        !IF_KEYDATE      TYPE SY-DATUM DEFAULT SY-DATUM
        !IF_VKORG        TYPE TVKO-VKORG DEFAULT GC_VKORG_SDS
      EXPORTING
        !ET_CMS_SGM      TYPE TT_CMS_SGM
        !ET_RISK_CLST    TYPE TT_RISK_CLST
        !ET_PARTNER_NAME TYPE TT_PARTNER_NAME
        !ET_WBS_CRDT     TYPE TT_WBS_CRDT
        !ET_BILL_CYCLE   TYPE TT_BILL_CYCLE .
    CLASS-METHODS GET_SALE_DETAIL
      IMPORTING
        !IF_LANGU     TYPE SY-LANGU DEFAULT GC_LANGU_EN
        !IT_DOC       TYPE TT_DOC
      EXPORTING
        !ET_TVKOT     TYPE TT_TVKOT
        !ET_TVTWT     TYPE TT_TVTWT
        !ET_TSPAT     TYPE TT_TSPAT
        !ET_TVGRT     TYPE TT_TVGRT
        !ET_TVKBT     TYPE TT_TVKBT
        !ET_VBPA_SALE TYPE TT_VBPA .
    CLASS-METHODS SET_DOC_TYPE_TEXT
      IMPORTING
        !IF_DOC_TYPE          TYPE CHAR20
        !IF_SUMMARY_TEXT_X    TYPE FLAG OPTIONAL
      RETURNING
        VALUE(RF_DOC_TYPE_TX) TYPE STRING .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-DATA GT_PSPNR TYPE TT_PSPNR .
    CLASS-DATA GT_BP_CMS TYPE TT_PARTNER_KEY .

    CLASS-METHODS REPLACE_MESSAGE
      IMPORTING
        !IF_MSGTX       TYPE CLIKE
        !IF_MSG1        TYPE CLIKE OPTIONAL
        !IF_MSG2        TYPE CLIKE OPTIONAL
        !IF_MSG3        TYPE CLIKE OPTIONAL
        !IF_MSG4        TYPE CLIKE OPTIONAL
      RETURNING
        VALUE(RF_MSGTX) TYPE STRING .
ENDCLASS.



CLASS ZCL_SDSFI_CUSTOMER_CREDIT IMPLEMENTATION.


  METHOD CALC_PERCENT.

    CLEAR: RF_PERCENT.

    IF IF_CRDT_LIMIT IS NOT INITIAL.

      TRY.
          RF_PERCENT = ( IF_CRDT_EXPOSURE / IF_CRDT_LIMIT ) * 100.
        CATCH CX_SY_ARITHMETIC_OVERFLOW.
          RF_PERCENT = GC_PERCENT_MAX.
      ENDTRY.

    ENDIF.

  ENDMETHOD.


  METHOD COLLECT_RESULT.

    DATA:
      LF_AMOUNT         TYPE TS_DOC-AMOUNT,
      LF_TABIX          TYPE SY-TABIX,
      LF_PSPID_OUT      TYPE PS_PSPID,
      LF_PSPID          TYPE PS_PSPID,
      LF_VBELN          TYPE VBRK-VBELN,
      LF_BILL_CYCLE_DAY TYPE TS_BILL_CYCLE-ZDAYS,
      LF_DOC_TYPE       TYPE TS_DOC-DOC_TYPE,
      LR_DOC_TYPE_SD    TYPE RANGE OF TS_DOC-DOC_TYPE,
      LT_CRDT_MGMT      TYPE TT_CRDT_MGMT,
      LT_DOC            TYPE TT_DOC.

    CLEAR ET_RESULT.

    LR_DOC_TYPE_SD = VALUE #( SIGN = 'I' OPTION = 'EQ'
                              ( LOW = GC_DOC_TYPE-SALEORDER )
                              ( LOW = GC_DOC_TYPE-SALEORDER_PROJ )
                              ( LOW = GC_DOC_TYPE-BILL )
                              ( LOW = GC_DOC_TYPE-BILL_PROJ ) ).

    DATA(LT_CMS_SGM)  = IT_CMS_SGM.
    DATA(LT_WBS_CRDT) = IT_WBS_CRDT.

    LT_DOC = CORRESPONDING #( IT_SO_DOC ).
    LT_DOC = CORRESPONDING #( BASE ( LT_DOC ) IT_FI_DOC ).
    LT_DOC = CORRESPONDING #( BASE ( LT_DOC ) IT_BILL_DOC ).

    SORT LT_DOC BY KUNNR
                   PSPID
                   DOC_TYPE
                   DOC_DATE DESCENDING
                   DOC_NO   DESCENDING.

    SORT LT_CMS_SGM  BY PARTNER.

    LT_CRDT_MGMT = CORRESPONDING #(  LT_WBS_CRDT ).
    LT_CRDT_MGMT = CORRESPONDING #(  BASE ( LT_CRDT_MGMT ) LT_CMS_SGM
                                     MAPPING KUNNR = PARTNER ).

*    SORT LT_CRDT_MGMT BY KUNNR PSPHI.                      "-420000174
    SORT LT_CRDT_MGMT BY KUNNR PSPID.                       "+420000174

    LOOP AT LT_CRDT_MGMT ASSIGNING FIELD-SYMBOL(<L_CRDT_MGMT_GRP>)
    GROUP BY <L_CRDT_MGMT_GRP>-KUNNR.

      CLEAR LF_BILL_CYCLE_DAY.

      READ TABLE IT_BILL_CYCLE ASSIGNING FIELD-SYMBOL(<L_BILL_CYCLE>)
      WITH KEY KUNNR =  <L_CRDT_MGMT_GRP>-KUNNR.
      IF SY-SUBRC IS INITIAL.
        LF_BILL_CYCLE_DAY = <L_BILL_CYCLE>-ZDAYS.
      ENDIF.

      APPEND INITIAL LINE TO ET_RESULT ASSIGNING FIELD-SYMBOL(<L_RESULT>).
      <L_RESULT>-PARTNER       = <L_CRDT_MGMT_GRP>-KUNNR.
      <L_RESULT>-PARTNER_NAME  = VALUE #( IT_PARTNER_NAME[ PARTNER = <L_RESULT>-PARTNER ]-PARTNER_TX OPTIONAL ).
      <L_RESULT>-ACCT_CLERK    = <L_CRDT_MGMT_GRP>-BUSAB.
      <L_RESULT>-ACCT_CLERK_TX = <L_CRDT_MGMT_GRP>-BUSAB_TX.

      LOOP AT GROUP <L_CRDT_MGMT_GRP> ASSIGNING FIELD-SYMBOL(<L_CRDT_MGMT>) .

        CLEAR: LF_PSPID_OUT.

        IF <L_CRDT_MGMT>-PSPHI IS NOT INITIAL.
          LF_PSPID = <L_CRDT_MGMT>-PSPHI.
        ELSE.
          CLEAR LF_PSPID.
        ENDIF.

        READ TABLE LT_DOC
         TRANSPORTING NO FIELDS
         WITH KEY KUNNR = <L_CRDT_MGMT>-KUNNR
                  PSPID = LF_PSPID
         BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.

          LF_TABIX = SY-TABIX.

          APPEND INITIAL LINE TO <L_RESULT>-SUMMARY_PROJ ASSIGNING FIELD-SYMBOL(<L_SUMMARY_PROJ>).
          <L_SUMMARY_PROJ>-PSPNR                = LF_PSPID.
          <L_SUMMARY_PROJ>-CREDIT_LIMIT         = <L_CRDT_MGMT>-CREDIT_LIMIT.
          <L_SUMMARY_PROJ>-ZTERM                = <L_CRDT_MGMT>-ZTERM.
          <L_SUMMARY_PROJ>-REMAIN_CREDIT_LIMIT  = <L_CRDT_MGMT>-CREDIT_LIMIT.

          "Summary of Credit Limit by Customer
          <L_RESULT>-CREDIT_LIMIT               = <L_RESULT>-CREDIT_LIMIT + <L_CRDT_MGMT>-CREDIT_LIMIT.

          IF LF_PSPID IS INITIAL.
* Text-001: Customer Permanent Credit
            <L_SUMMARY_PROJ>-DESCRIPTION    = TEXT-001.

* Text-014: Permanent
            <L_SUMMARY_PROJ>-PROJECT_TX     = TEXT-014.
            <L_SUMMARY_PROJ>-CREDIT_SGMNT   = <L_CRDT_MGMT>-CREDIT_SGMNT.
            <L_SUMMARY_PROJ>-XBLOCKED       = <L_CRDT_MGMT>-XBLOCKED.
            <L_SUMMARY_PROJ>-RISK_CLASS_TXT = VALUE #( IT_RISK_CLST[ RISK_CLASS = <L_CRDT_MGMT>-RISK_CLASS ]-RISK_CLASS_TX OPTIONAL ).

            <L_RESULT>-CREDIT_SGMNT   =  <L_SUMMARY_PROJ>-CREDIT_SGMNT.
            <L_RESULT>-XBLOCKED       =  <L_SUMMARY_PROJ>-XBLOCKED.
            <L_RESULT>-RISK_CLASS_TXT =  <L_SUMMARY_PROJ>-RISK_CLASS_TXT.

          ELSE.
            CALL FUNCTION 'CONVERSION_EXIT_KONPD_OUTPUT'
              EXPORTING
                INPUT  = LF_PSPID
              IMPORTING
                OUTPUT = LF_PSPID_OUT.

            <L_SUMMARY_PROJ>-PSPID          = LF_PSPID_OUT.
* Text-002: Project (WBS) Credit
            <L_SUMMARY_PROJ>-DESCRIPTION    = |{ TEXT-002 }: { LF_PSPID_OUT }|.
            <L_SUMMARY_PROJ>-PROJECT_TX     = <L_CRDT_MGMT>-PSPHI_TX.
*<-- Start of Insertion 21.01.2025 (Assign New fields)
            <L_SUMMARY_PROJ>-STARTDATE      = <L_CRDT_MGMT>-STARTDATE.
            <L_SUMMARY_PROJ>-ENDDATE        = <L_CRDT_MGMT>-ENDDATE.
            <L_SUMMARY_PROJ>-STATUS         = <L_CRDT_MGMT>-STATUS.
            CASE <L_SUMMARY_PROJ>-STATUS.
              WHEN GC_STATUS_OPEN.
*               Text-a01: Open
                <L_SUMMARY_PROJ>-STATUS_TXT = TEXT-A01.
              WHEN GC_STATUS_CLOSE.
*               Text-a02: Close
                <L_SUMMARY_PROJ>-STATUS_TXT = TEXT-A02.
            ENDCASE.
*--> End of Insertion 21.01.2025
          ENDIF.

          LF_DOC_TYPE = 'DUMMY'.

          LOOP AT LT_DOC ASSIGNING FIELD-SYMBOL(<L_DOC>) FROM LF_TABIX.

            CLEAR: LF_VBELN.

            IF <L_DOC>-KUNNR <> <L_CRDT_MGMT>-KUNNR OR
               <L_DOC>-PSPID <> LF_PSPID.
              EXIT.
            ENDIF.

            IF <L_DOC>-SHKZG = GC_SHKZG_CREDIT.
              LF_AMOUNT = <L_DOC>-AMOUNT * -1.
            ELSE.
              LF_AMOUNT = <L_DOC>-AMOUNT.
            ENDIF.

            <L_SUMMARY_PROJ>-CREDIT_EXPOSURE     = <L_SUMMARY_PROJ>-CREDIT_EXPOSURE + LF_AMOUNT.
            <L_SUMMARY_PROJ>-AMOUNT              = <L_SUMMARY_PROJ>-AMOUNT + LF_AMOUNT.
            <L_SUMMARY_PROJ>-REMAIN_CREDIT_LIMIT = <L_SUMMARY_PROJ>-REMAIN_CREDIT_LIMIT - LF_AMOUNT.

            "Summary of Credit Exposure by Customer
            <L_RESULT>-CREDIT_EXPOSURE = <L_RESULT>-CREDIT_EXPOSURE + LF_AMOUNT.

            " Document Type Summary
            IF LF_DOC_TYPE <> <L_DOC>-DOC_TYPE.

              LF_DOC_TYPE = <L_DOC>-DOC_TYPE.

              APPEND INITIAL LINE TO <L_RESULT>-SUMMARY_DOC_TYPE ASSIGNING FIELD-SYMBOL(<L_SUMMARY_DOC_TYPE>).
              <L_SUMMARY_DOC_TYPE>-PSPID       = LF_PSPID_OUT.
              <L_SUMMARY_DOC_TYPE>-PSPNR       = <L_DOC>-PSPID.
              <L_SUMMARY_DOC_TYPE>-DOC_TYPE    = <L_DOC>-DOC_TYPE.
              <L_SUMMARY_DOC_TYPE>-DESCRIPTION = SET_DOC_TYPE_TEXT( IF_DOC_TYPE       = <L_DOC>-DOC_TYPE
                                                                    IF_SUMMARY_TEXT_X = ABAP_TRUE ).

            ENDIF.

            IF <L_SUMMARY_DOC_TYPE> IS ASSIGNED.
              <L_SUMMARY_DOC_TYPE>-AMOUNT = <L_SUMMARY_DOC_TYPE>-AMOUNT + LF_AMOUNT.
            ENDIF.

            APPEND INITIAL LINE TO <L_RESULT>-DOC_DETAIL ASSIGNING FIELD-SYMBOL(<L_DOC_DETAIL>).
            <L_DOC_DETAIL>-PSPID        = LF_PSPID_OUT.
            <L_DOC_DETAIL>-PSPNR        = <L_DOC>-PSPID.
            <L_DOC_DETAIL>-DOC_TYPE     = <L_DOC>-DOC_TYPE.
            <L_DOC_DETAIL>-DOC_NO       = <L_DOC>-DOC_NO.
            <L_DOC_DETAIL>-DOC_DATE     = <L_DOC>-DOC_DATE.
            <L_DOC_DETAIL>-REF_DOC      = <L_DOC>-REF_DOC.
            <L_DOC_DETAIL>-PAYMENT_DATE = <L_DOC>-ZFBDT.
            <L_DOC_DETAIL>-ZTERM        = <L_DOC>-ZTERM.
            <L_DOC_DETAIL>-DAY1         = LF_BILL_CYCLE_DAY.
            <L_DOC_DETAIL>-AMOUNT       = LF_AMOUNT.
            <L_DOC_DETAIL>-BUKRS        = <L_DOC>-BUKRS.
            <L_DOC_DETAIL>-GJAHR        = <L_DOC>-GJAHR.
            <L_DOC_DETAIL>-REBZG        = <L_DOC>-REBZG.    "+420000174
            <L_DOC_DETAIL>-REBZJ        = <L_DOC>-REBZJ.    "+420000174

            " Populate Sale Detail
            DO 1 TIMES.

              " Check Document type for SO and Billing
              IF NOT ( <L_DOC>-DOC_TYPE IN LR_DOC_TYPE_SD ).
                EXIT.
              ENDIF.

              " Sales Org.
              READ TABLE IT_TVKOT
              ASSIGNING FIELD-SYMBOL(<L_TVKOT>)
              WITH KEY VKORG = <L_DOC>-VKORG.
              IF SY-SUBRC IS INITIAL.
                <L_DOC_DETAIL>-VKORG_TX = <L_TVKOT>-VTEXT.
              ENDIF.

              " Distr. Channel
              READ TABLE IT_TVTWT
              ASSIGNING FIELD-SYMBOL(<L_TVTWT>)
              WITH KEY VTWEG = <L_DOC>-VTWEG.
              IF SY-SUBRC IS INITIAL.
                <L_DOC_DETAIL>-VTWEG_TX = <L_TVTWT>-VTEXT.
              ENDIF.

              " Division
              READ TABLE IT_TSPAT
              ASSIGNING FIELD-SYMBOL(<L_TSPAT>)
              WITH KEY SPART = <L_DOC>-SPART.
              IF SY-SUBRC IS INITIAL.
                <L_DOC_DETAIL>-SPART_TX = <L_TSPAT>-VTEXT.
              ENDIF.

              " Sales Group
              READ TABLE IT_TVGRT
              ASSIGNING FIELD-SYMBOL(<L_TVGRT>)
              WITH KEY VKGRP = <L_DOC>-VKGRP.
              IF SY-SUBRC IS INITIAL.
                <L_DOC_DETAIL>-VKGRP_TX = <L_TVGRT>-BEZEI.
              ENDIF.

              " Sales Office
              READ TABLE IT_TVKBT
              ASSIGNING FIELD-SYMBOL(<L_TVKBT>)
              WITH KEY VKBUR = <L_DOC>-VKBUR.
              IF SY-SUBRC IS INITIAL.
                <L_DOC_DETAIL>-VKBUR_TX = <L_TVKBT>-BEZEI.
              ENDIF.

              CASE <L_DOC>-DOC_TYPE.
                WHEN GC_DOC_TYPE-BILL OR
                     GC_DOC_TYPE-BILL_PROJ.

                  LF_VBELN = <L_DOC>-REF_DOC.

                WHEN GC_DOC_TYPE-SALEORDER OR
                     GC_DOC_TYPE-SALEORDER_PROJ.

                  LF_VBELN = <L_DOC>-DOC_NO.

              ENDCASE.

              " Salesman
              READ TABLE IT_VBPA_SALE
              ASSIGNING FIELD-SYMBOL(<L_VBPA>)
              WITH KEY VBELN = LF_VBELN.
              IF SY-SUBRC IS INITIAL.
                <L_DOC_DETAIL>-SALES_PERSNO = <L_VBPA>-PERNR.
                <L_DOC_DETAIL>-SALES_NAME   = <L_VBPA>-VORNA.
              ENDIF.

            ENDDO.

            " Check document from FI document and calculate Net Due Date
            IF <L_DOC>-BLART IN IS_GENC-RT_BLART.

              <L_DOC_DETAIL>-NET_DUEDATE = <L_DOC>-ZFBDT + ( <L_DOC>-ZBD1T + LF_BILL_CYCLE_DAY ).

            ENDIF.

          ENDLOOP.

          IF <L_SUMMARY_PROJ> IS ASSIGNED.
            <L_SUMMARY_PROJ>-UTILIZATION_PERCENT = CALC_PERCENT( IF_CRDT_EXPOSURE = <L_SUMMARY_PROJ>-CREDIT_EXPOSURE
                                                                 IF_CRDT_LIMIT    = <L_SUMMARY_PROJ>-CREDIT_LIMIT ).
          ENDIF.

        ELSE. "Collect Customer & WBS (Project) Credit for Unused credit limit.

*<--BOI 420000667
          "Verify if the status is closed and there are no open items
          IF <L_CRDT_MGMT>-STATUS = GC_STATUS_CLOSE.
            CONTINUE.
          ENDIF.
*-->EOI 420000667

          APPEND INITIAL LINE TO <L_RESULT>-SUMMARY_PROJ ASSIGNING <L_SUMMARY_PROJ>.
          <L_SUMMARY_PROJ>-PSPNR               = LF_PSPID.
          <L_SUMMARY_PROJ>-ZTERM               = <L_CRDT_MGMT>-ZTERM.
          <L_SUMMARY_PROJ>-CREDIT_SGMNT        = <L_CRDT_MGMT>-CREDIT_SGMNT.
          <L_SUMMARY_PROJ>-CREDIT_LIMIT        = <L_CRDT_MGMT>-CREDIT_LIMIT.
          <L_SUMMARY_PROJ>-REMAIN_CREDIT_LIMIT = <L_CRDT_MGMT>-CREDIT_LIMIT.
          <L_SUMMARY_PROJ>-XBLOCKED            = <L_CRDT_MGMT>-XBLOCKED.

          <L_RESULT>-CREDIT_LIMIT              = <L_RESULT>-CREDIT_LIMIT + <L_CRDT_MGMT>-CREDIT_LIMIT.

          IF LF_PSPID IS INITIAL.
* Text-001: Customer Permanent Credit
            <L_SUMMARY_PROJ>-DESCRIPTION    = TEXT-001.
            <L_SUMMARY_PROJ>-RISK_CLASS_TXT = VALUE #( IT_RISK_CLST[ RISK_CLASS = <L_CRDT_MGMT>-RISK_CLASS ]-RISK_CLASS_TX OPTIONAL ).
          ELSE.
            CALL FUNCTION 'CONVERSION_EXIT_KONPD_OUTPUT'
              EXPORTING
                INPUT  = LF_PSPID
              IMPORTING
                OUTPUT = LF_PSPID_OUT.

            <L_SUMMARY_PROJ>-PSPID               = LF_PSPID_OUT.
* Text-002: Project (WBS) Credit
            <L_SUMMARY_PROJ>-DESCRIPTION    = |{ TEXT-002 }: { LF_PSPID_OUT }|.
            <L_SUMMARY_PROJ>-PROJECT_TX     = <L_CRDT_MGMT>-PSPHI_TX.
*<-- Start of Insertion 21.01.2025 (Assign New fields)
            <L_SUMMARY_PROJ>-STARTDATE      = <L_CRDT_MGMT>-STARTDATE.
            <L_SUMMARY_PROJ>-ENDDATE        = <L_CRDT_MGMT>-ENDDATE.
            <L_SUMMARY_PROJ>-STATUS         = <L_CRDT_MGMT>-STATUS.
            CASE <L_SUMMARY_PROJ>-STATUS.
              WHEN GC_STATUS_OPEN.
*               Text-a01: Open
                <L_SUMMARY_PROJ>-STATUS_TXT = TEXT-A01.
              WHEN GC_STATUS_CLOSE.
*               Text-a02: Close
                <L_SUMMARY_PROJ>-STATUS_TXT = TEXT-A02.
            ENDCASE.
*--> End of Insertion 21.01.2025
          ENDIF.

        ENDIF.

      ENDLOOP.

      <L_RESULT>-REMAIN_CREDIT_LIMIT = <L_RESULT>-CREDIT_LIMIT - <L_RESULT>-CREDIT_EXPOSURE.
      <L_RESULT>-UTILIZATION_PERCENT = CALC_PERCENT( IF_CRDT_EXPOSURE = <L_RESULT>-CREDIT_EXPOSURE
                                                     IF_CRDT_LIMIT    = <L_RESULT>-CREDIT_LIMIT ).

    ENDLOOP.

    DELETE ET_RESULT WHERE SUMMARY_PROJ IS INITIAL.         "+420000667

  ENDMETHOD.


  METHOD GET_CREDIT_MANAGEMENT.

    DATA:
      LS_CMS_SGM       TYPE TS_CMS_SGM,
      LS_WBS_CRDT      TYPE TS_WBS_CRDT,
      LT_KNB1          TYPE TT_KNB1,
      LT_T001S         TYPE TT_T001S,
      LT_RISK_CLST_KEY TYPE TT_RISK_CLST,
      LT_PARTNER_KEY   TYPE TT_PARTNER_KEY,
      LRT_XBLOCKED     TYPE RANGE OF UKM_XBLOCKED.

    FIELD-SYMBOLS:
      <L_T001S> TYPE TS_T001S.

    CLEAR: ET_CMS_SGM,
           ET_RISK_CLST,
           ET_PARTNER_NAME,
           ET_BILL_CYCLE,
           ET_WBS_CRDT.

    IF IF_ALL_CUSTOMER IS INITIAL.
      LRT_XBLOCKED = VALUE #( ( SIGN = 'I' OPTION = 'EQ' LOW = SPACE ) ).
    ENDIF.

    "Customer Master (Company Code)
    SELECT FROM KNB1
    FIELDS KUNNR,
           BUKRS,
           BUSAB
     WHERE KUNNR IN @IT_PARTNER AND
           BUKRS EQ @IF_BUKRS   AND
           BUSAB IN @IT_BUSAB
      INTO TABLE @LT_KNB1.

    IF LT_KNB1 IS NOT INITIAL.
      "Accounting Clerks
      SELECT FROM T001S
          FIELDS BUKRS,
                 BUSAB,
                 SNAME
         FOR ALL ENTRIES IN @LT_KNB1
           WHERE BUKRS = @LT_KNB1-BUKRS AND
                 BUSAB = @LT_KNB1-BUSAB
        ORDER BY PRIMARY KEY
            INTO TABLE @LT_T001S.
    ENDIF.

    IF IF_SEL_CREDIT = GC_SEL_CREDIT-CUSTOMER
    OR IF_SEL_CREDIT = GC_SEL_CREDIT-ALL.

      SELECT CMS_SGM~PARTNER,
             CMS_SGM~CREDIT_SGMNT,
             CMS_SGM~CREDIT_LIMIT,
             CMS_SGM~XBLOCKED,
             CMS~RISK_CLASS,
             KNB1~BUKRS,
             KNB1~BUSAB
        FROM UKMBP_CMS_SGM AS CMS_SGM
        INNER JOIN UKMBP_CMS AS CMS
                ON CMS~PARTNER = CMS_SGM~PARTNER
        INNER JOIN @LT_KNB1 AS KNB1
                ON CMS_SGM~PARTNER = KNB1~KUNNR
        WHERE CMS_SGM~CREDIT_SGMNT IN @IT_CREDIT_SGMNT  AND
              CMS_SGM~CREDIT_LIMIT IN @IT_CREDIT_LIMIT  AND
              CMS~CREDIT_GROUP     IN @IT_CREDIT_GROUP  AND
              CMS_SGM~XBLOCKED     IN @LRT_XBLOCKED     AND
              CMS~RISK_CLASS       IN @IT_RISK_CLASS
        INTO TABLE @DATA(LT_CMS_SGM).

      "Get Payment term for Customer
      SELECT FROM KNVV
      INNER JOIN @LT_CMS_SGM AS KEY
              ON KNVV~KUNNR = KEY~PARTNER
      FIELDS KUNNR,
             ZTERM
      WHERE KNVV~VKORG  = @IF_VKORG
        INTO TABLE @DATA(LT_KNVV).
      IF SY-SUBRC IS INITIAL.
        SORT LT_KNVV BY KUNNR.
      ENDIF.

      "Collect Credit Management
      LOOP AT LT_CMS_SGM ASSIGNING FIELD-SYMBOL(<L_CMS_SGM>).

        CLEAR: LS_CMS_SGM.

        LS_CMS_SGM        = CORRESPONDING #( <L_CMS_SGM> ).

        READ TABLE LT_KNVV ASSIGNING FIELD-SYMBOL(<L_KNVV>)
        WITH KEY KUNNR = <L_CMS_SGM>-PARTNER
                 BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LS_CMS_SGM-ZTERM = <L_KNVV>-ZTERM.
        ENDIF.

        READ TABLE LT_T001S ASSIGNING <L_T001S>
        WITH KEY BUKRS = <L_CMS_SGM>-BUKRS
                 BUSAB = <L_CMS_SGM>-BUSAB.
        IF SY-SUBRC IS INITIAL.
          LS_CMS_SGM-BUSAB_TX = <L_T001S>-SNAME.
        ENDIF.

        APPEND LS_CMS_SGM TO ET_CMS_SGM.

        "Collect Partner key
        INSERT VALUE #( PARTNER = <L_CMS_SGM>-PARTNER )
          INTO TABLE LT_PARTNER_KEY.

      ENDLOOP.

      " Get risk class text
      LT_RISK_CLST_KEY = CORRESPONDING #( ET_CMS_SGM DISCARDING DUPLICATES ).

      IF LT_RISK_CLST_KEY IS NOT INITIAL.
        SELECT RISK_CLASS,
               RISK_CLASS_TXT
        FROM UKM_RISK_CL0T AS RISK_CL0T
        FOR ALL ENTRIES IN @LT_RISK_CLST_KEY
          WHERE LANGU = @IF_LANGU
            AND RISK_CLASS = @LT_RISK_CLST_KEY-RISK_CLASS
          INTO TABLE @ET_RISK_CLST.
      ENDIF.

    ENDIF.

    IF IF_SEL_CREDIT = GC_SEL_CREDIT-PROJECT
    OR IF_SEL_CREDIT = GC_SEL_CREDIT-ALL.

      "Credit Limit and payment term by project (WBS)
      SELECT WBS_CRDT~KUNNR,
             PSPHI,
             CREDIT_LIMIT,
             ZTERM,
             STARTDATE,
             ENDDATE,
             SEQ,
             PROJ~POST1 AS PSPHI_TX,
             KNB1~BUKRS,
             KNB1~BUSAB
        FROM ZSDSFIT036 AS WBS_CRDT
        INNER JOIN PROJ
                ON WBS_CRDT~PSPHI = PROJ~PSPNR
        INNER JOIN @LT_KNB1 AS KNB1
                ON WBS_CRDT~KUNNR = KNB1~KUNNR
        WHERE PSPHI          IN @IT_WBS
          AND PSPHI          IS NOT INITIAL
          AND ZDEL_FLG        = @SPACE
*          AND ( WBS_CRDT~STARTDATE <= @IF_KEYDATE OR        "-420000174
*                WBS_CRDT~ENDDATE   >= @IF_KEYDATE )         "-420000174
*<-- Start of Insertion 420000174 21.01.2025 (New Select Condition)
          AND WBS_CRDT~KUNNR IN @IT_PARTNER
          AND (
              ( WBS_CRDT~STARTDATE LE @IF_KEYDATE AND
                WBS_CRDT~ENDDATE   GE @IF_KEYDATE ) OR

                WBS_CRDT~ENDDATE EQ ( SELECT MAX( ENDDATE )
                                        FROM ZSDSFIT036 AS X
                                       WHERE X~KUNNR = WBS_CRDT~KUNNR
                                         AND X~PSPHI = WBS_CRDT~PSPHI
                                         AND X~ZDEL_FLG = @SPACE "+420000667
                                         AND X~ENDDATE LT @IF_KEYDATE )
               )
*--> End of Insertion 420000174 21.01.2025
        INTO TABLE @DATA(LT_WBS_CRDT).
      IF SY-SUBRC IS INITIAL.
        SORT LT_WBS_CRDT BY KUNNR
                            PSPHI
                            SEQ DESCENDING.                 "+420000667
*                            SEQ DESCENDING.                 "-420000174
*<--BOD 420000667
*                            ENDDATE DESCENDING.             "+420000174
*-->EOD 420000667

        DELETE ADJACENT DUPLICATES FROM LT_WBS_CRDT COMPARING KUNNR PSPHI.

        LOOP AT LT_WBS_CRDT ASSIGNING FIELD-SYMBOL(<L_WBS_CRDT>).

          CLEAR: LS_WBS_CRDT.

          LS_WBS_CRDT = CORRESPONDING #( <L_WBS_CRDT> ).

          READ TABLE LT_T001S ASSIGNING <L_T001S>
          WITH KEY BUKRS = <L_WBS_CRDT>-BUKRS
                   BUSAB = <L_WBS_CRDT>-BUSAB.
          IF SY-SUBRC IS INITIAL.
            LS_WBS_CRDT-BUSAB_TX = <L_T001S>-SNAME.
          ENDIF.

*<-- Start of Insertion 420000174 21.01.2025 (Determine Status)
          IF <L_WBS_CRDT>-ENDDATE LT IF_KEYDATE.
            LS_WBS_CRDT-STATUS = GC_STATUS_CLOSE.
          ELSE.
            LS_WBS_CRDT-STATUS = GC_STATUS_OPEN.
          ENDIF.
*         Filtering by Status
          CHECK LS_WBS_CRDT-STATUS IN IT_WBSSTAT.
*--> End of Insertion 420000174 21.01.2025

*<--BOI 420000174
          CALL FUNCTION 'CONVERSION_EXIT_KONPD_OUTPUT'
            EXPORTING
              INPUT  = <L_WBS_CRDT>-PSPHI
            IMPORTING
              OUTPUT = LS_WBS_CRDT-PSPID.
*-->EOI 420000174

          APPEND LS_WBS_CRDT TO ET_WBS_CRDT.

          "Collect Partner key
          INSERT VALUE #( PARTNER = <L_WBS_CRDT>-KUNNR )
            INTO TABLE LT_PARTNER_KEY.

        ENDLOOP.

      ENDIF.

    ENDIF.

    "Get Partner name
    SELECT BP~PARTNER,
       CONCAT( CONCAT( NAME_ORG1, NAME_ORG2 ) ,
               CONCAT( NAME_ORG3, NAME_ORG4 ) ) AS PARTNER_TX
     FROM BUT000 AS BP
      INNER JOIN @LT_PARTNER_KEY AS KEY
               ON BP~PARTNER = KEY~PARTNER
      INTO TABLE @ET_PARTNER_NAME.

    "Get Bill Cycle Master
    SELECT FROM ZSDSFIC024 AS BILL_CYCLE
    INNER JOIN @LT_PARTNER_KEY AS KEY
            ON BILL_CYCLE~KUNNR = KEY~PARTNER
    FIELDS BILL_CYCLE~KUNNR,
           BILL_CYCLE~ZDAYS
      INTO TABLE @ET_BILL_CYCLE.

  ENDMETHOD.


  METHOD GET_DATA.

    DATA:
      LT_DOC           TYPE TT_DOC,
      LT_PARTNER_CUST  TYPE TT_PARTNER_CUST,
      LT_PARTNER_WBS   TYPE TT_PARTNER_WBS,
      LR_DOC_TYPE_BILL TYPE RANGE OF TS_DOC-DOC_TYPE,
      LR_CREDIT_SGMNT  TYPE UKM_T_CREDIT_SGMNT_RANGES.

    CLEAR:  ET_CMS_SGM,
            ET_RISK_CLST,
            ET_PARTNER_NAME,
            ET_SO_DOC,
            ET_FI_DOC,
            ET_WBS_CRDT,
            ET_RESULT,
            ET_BILL_CYCLE,
            ET_TVKOT,
            ET_TVTWT,
            ET_TSPAT,
            ET_TVGRT,
            ET_TVKBT,
            ET_VBPA_SALE,
            ES_GENC.

    IF IF_CREDIT_SGMNT IS INITIAL OR
       IT_PARTNER      IS INITIAL.
      RETURN.
    ENDIF.

    APPEND VALUE UKM_S_CREDIT_SGMNT_RANGES( SIGN   = 'I'
                                            OPTION = 'EQ'
                                            LOW    = IF_CREDIT_SGMNT )
              TO LR_CREDIT_SGMNT.

    GET_GENC(
      IMPORTING
        ES_GENC = ES_GENC
    ).

    GET_CREDIT_MANAGEMENT(
      EXPORTING
        IT_PARTNER      = IT_PARTNER
        IT_CREDIT_SGMNT = LR_CREDIT_SGMNT
        IT_CREDIT_GROUP = IT_CREDIT_GROUP
        IT_RISK_CLASS   = IT_RISK_CLASS
        IT_CREDIT_LIMIT = IT_CREDIT_LIMIT
        IT_WBS          = IT_WBS
        IT_BUSAB        = IT_BUSAB
        IT_WBSSTAT      = IT_WBSSTAT   "+420000174
        IF_ALL_CUSTOMER = IF_ALL_CUSTOMER
        IF_LANGU        = IF_LANGU
        IF_SEL_CREDIT   = IF_SEL_CREDIT
        IF_BUKRS        = IF_BUKRS
      IMPORTING
        ET_CMS_SGM      = ET_CMS_SGM
        ET_RISK_CLST    = ET_RISK_CLST
        ET_PARTNER_NAME = ET_PARTNER_NAME
        ET_WBS_CRDT     = ET_WBS_CRDT
        ET_BILL_CYCLE   = ET_BILL_CYCLE
    ).

    LT_PARTNER_CUST = CORRESPONDING #( ET_CMS_SGM DISCARDING DUPLICATES ).
    LT_PARTNER_WBS  = CORRESPONDING #( ET_WBS_CRDT DISCARDING DUPLICATES
                                                   MAPPING PARTNER = KUNNR
                                                           PSPHI   = PSPHI ).

    GET_SO_DOCUMENT(
      EXPORTING
        IT_PARTNER_CUST = LT_PARTNER_CUST
        IT_PARTNER_WBS  = LT_PARTNER_WBS
        IT_WBS          = IT_WBS
        IF_SEL_CREDIT   = IF_SEL_CREDIT
        IS_GENC         = ES_GENC
      IMPORTING
        ET_SO_DOC       = ET_SO_DOC
    ).

    GET_FI_DOCUMENT(
      EXPORTING
        IF_SEL_CREDIT   = IF_SEL_CREDIT
        IT_PARTNER_CUST = LT_PARTNER_CUST
        IT_PARTNER_WBS  = LT_PARTNER_WBS
        IT_WBS          = IT_WBS
        IS_GENC         = ES_GENC
      IMPORTING
        ET_FI_DOC       = ET_FI_DOC
    ).


    LT_DOC = CORRESPONDING #( ET_FI_DOC MAPPING DOC_NO = REF_DOC ).
    LR_DOC_TYPE_BILL = VALUE #( SIGN = 'I' OPTION = 'EQ'
                              ( LOW = GC_DOC_TYPE-BILL )
                              ( LOW = GC_DOC_TYPE-BILL_PROJ ) ).

    "Filter document for SD
    DELETE LT_DOC WHERE NOT DOC_TYPE IN  LR_DOC_TYPE_BILL.

    LT_DOC = CORRESPONDING #( BASE ( LT_DOC ) ET_SO_DOC ).

    GET_SALE_DETAIL(
      EXPORTING
        IT_DOC       = LT_DOC
      IMPORTING
        ET_TVKOT     = ET_TVKOT
        ET_TVTWT     = ET_TVTWT
        ET_TSPAT     = ET_TSPAT
        ET_TVGRT     = ET_TVGRT
        ET_TVKBT     = ET_TVKBT
        ET_VBPA_SALE = ET_VBPA_SALE ).

    IF ET_RESULT IS SUPPLIED.

      COLLECT_RESULT(
        EXPORTING
          IT_CMS_SGM      = ET_CMS_SGM
          IT_RISK_CLST    = ET_RISK_CLST
          IT_PARTNER_NAME = ET_PARTNER_NAME
          IT_SO_DOC       = ET_SO_DOC
          IT_FI_DOC       = ET_FI_DOC
          IT_WBS_CRDT     = ET_WBS_CRDT
          IT_BILL_CYCLE   = ET_BILL_CYCLE
          IT_TVKOT        = ET_TVKOT
          IT_TVTWT        = ET_TVTWT
          IT_TSPAT        = ET_TSPAT
          IT_TVGRT        = ET_TVGRT
          IT_TVKBT        = ET_TVKBT
          IT_VBPA_SALE    = ET_VBPA_SALE
          IS_GENC         = ES_GENC
        IMPORTING
          ET_RESULT       = ET_RESULT             " Table Type for Customer Credit Report - Result
      ).

    ENDIF.

  ENDMETHOD.


  METHOD GET_FI_DOCUMENT.

    CLEAR: ET_FI_DOC,
           ET_BILL_DOC.

    DATA(LS_SPECIAL_GL) = IS_GENC-SPECIAL_GL.

*<-- Start of Insertion 420000239 13.01.2025 (New Logic read FI Doc)
    TYPES: BEGIN OF TS_VBRK,
             VBELN TYPE VBRK-VBELN,
             FKART TYPE VBRK-FKART,
           END OF TS_VBRK.
    TYPES: TT_VBRK TYPE SORTED TABLE OF TS_VBRK
                         WITH UNIQUE KEY VBELN.

    DATA:
      LT_PARTNER     TYPE STANDARD TABLE OF TS_PARTNER_CUST
                          WITH DEFAULT KEY,
      LT_VBRK        TYPE TT_VBRK,
      LT_BILL_RESULT TYPE  SORTED TABLE OF TS_DOC
                           WITH NON-UNIQUE KEY BUKRS
                                               DOC_NO
                                               GJAHR
                                               DOC_TYPE.
*      LT_PSPID       TYPE RANGE OF PRPS-PSPHI.              "-420000174

    DATA:
      LS_BILL_RESULT  TYPE  TS_DOC.


*   ------------------------
*   Collect Partner Data
*   ------------------------
    CLEAR LT_PARTNER.
    LT_PARTNER = CORRESPONDING #( IT_PARTNER_CUST ).
    LT_PARTNER = CORRESPONDING #( BASE ( LT_PARTNER ) IT_PARTNER_WBS ).
    SORT LT_PARTNER BY PARTNER ASCENDING.
    DELETE ADJACENT DUPLICATES FROM LT_PARTNER COMPARING PARTNER.

*   ------------------------
*   Get Billing Data (FI Document)
*   ------------------------
    SELECT FROM BSID_VIEW AS BSID
    INNER JOIN @LT_PARTNER AS BP ##ITAB_KEY_IN_SELECT
            ON BP~PARTNER = BSID~KUNNR
    INNER JOIN VBRK
            ON VBRK~VBELN = BSID~VBELN
    FIELDS DISTINCT
      BSID~KUNNR,
      BSID~BELNR AS DOC_NO,
      BSID~BUDAT AS DOC_DATE,
      BSID~XBLNR AS REF_DOC,
      BSID~ZTERM AS ZTERM,
*      BSID~WRBTR AS AMOUNT,                        "-420000624
      BSID~DMBTR AS AMOUNT,                                 "+420000624
      BSID~SHKZG,                                           "+420000624
      BSID~ZFBDT,
      BSID~ZBD1T,
      BSID~BLART,
      BSID~GJAHR,
      BSID~BUKRS,
      VBRK~VBELN,
      VBRK~FKART
    WHERE
      BSID~BLART      IN @IS_GENC-RT_BLART_BILLING AND
*      BSID~WRBTR      IS NOT INITIAL              AND "-420000624
      BSID~DMBTR      IS NOT INITIAL               AND      "+420000624
      VBRK~FKSTO       = @SPACE
     INTO TABLE @DATA(LT_BILL).
    IF SY-SUBRC NE 0.
      CLEAR LT_BILL.
    ENDIF.

*   ------------------------
*   Collect SD Billing no
*   ------------------------
    LT_VBRK = CORRESPONDING TT_VBRK( LT_BILL DISCARDING DUPLICATES
                                             MAPPING VBELN = VBELN
                                                     FKART = FKART ).

*   ------------------------
*   Get SD Billing Info (Only 1st item)
*   ------------------------
    SELECT A~VBELN,
           A~POSNR,
           A~VKORG_AUFT AS VKORG,
           A~VTWEG_AUFT AS VTWEG,
           A~SPART,
           A~VKGRP,
           A~VKBUR,
           C~ZZRUNNING,
           A~PS_PSP_PNR,
           B~PSPHI AS PSPID
      FROM @LT_VBRK AS X
             INNER JOIN VBRP AS A
               ON  A~VBELN = X~VBELN
             LEFT OUTER JOIN PRPS AS B
               ON  B~PSPNR = A~PS_PSP_PNR
             LEFT OUTER JOIN VBAK AS C
               ON  C~VBELN = A~AUBEL
     WHERE (
*            Non-Project
             ( X~FKART NOT IN @IS_GENC-RT_FKART_PROJ AND
               A~POSNR EQ ( SELECT MIN( M~POSNR )
                              FROM VBRP AS M
                             WHERE M~VBELN EQ X~VBELN
                               AND M~PS_PSP_PNR EQ @SPACE ) ) OR
*            Project
             ( X~FKART IN @IS_GENC-RT_FKART_PROJ AND
               A~POSNR EQ ( SELECT MIN( M~POSNR )
                              FROM VBRP AS M
                             WHERE M~VBELN EQ X~VBELN
                               AND M~PS_PSP_PNR NE @SPACE ) )
           )
     ORDER BY A~VBELN ASCENDING,
              A~POSNR ASCENDING
      INTO TABLE @DATA(LT_BILL_INFO).
    IF SY-SUBRC NE 0.
      CLEAR LT_BILL_INFO.
    ENDIF.

*   ------------------------
*   Collect Billing data
*   ------------------------
    LOOP AT LT_BILL ASSIGNING FIELD-SYMBOL(<L_BILL>).

      CLEAR LS_BILL_RESULT.
      MOVE-CORRESPONDING <L_BILL> TO LS_BILL_RESULT.

*     Read Bill infomation
      READ TABLE LT_BILL_INFO ASSIGNING FIELD-SYMBOL(<L_BILL_INFO>)
                              WITH KEY VBELN = <L_BILL>-VBELN
                              BINARY SEARCH.
      IF SY-SUBRC NE 0.
        CONTINUE.
      ENDIF.

*     Assign Bill Info
      LS_BILL_RESULT-VKORG = <L_BILL_INFO>-VKORG.
      LS_BILL_RESULT-VTWEG = <L_BILL_INFO>-VTWEG.
      LS_BILL_RESULT-SPART = <L_BILL_INFO>-SPART.
      LS_BILL_RESULT-VKGRP = <L_BILL_INFO>-VKGRP.
      LS_BILL_RESULT-VKBUR = <L_BILL_INFO>-VKBUR.
      IF <L_BILL_INFO>-PSPID IS NOT INITIAL.
        LS_BILL_RESULT-PSPID = <L_BILL_INFO>-PSPID.
      ENDIF.

*     Determine Doc Type
      IF <L_BILL_INFO>-ZZRUNNING EQ GC_RUNNING.
        LS_BILL_RESULT-DOC_TYPE = GC_DOC_TYPE-BILL.
      ELSEIF <L_BILL>-FKART IN IS_GENC-RT_FKART_PROJ.
        LS_BILL_RESULT-DOC_TYPE = GC_DOC_TYPE-BILL_PROJ.
*       Filtering by Project
        READ TABLE IT_PARTNER_WBS TRANSPORTING NO FIELDS
                                  WITH KEY PARTNER = LS_BILL_RESULT-KUNNR
                                           PSPHI   = LS_BILL_RESULT-PSPID ##WARN_OK.
        IF SY-SUBRC NE 0.
          CONTINUE.
        ENDIF.
      ELSE.
        LS_BILL_RESULT-DOC_TYPE = GC_DOC_TYPE-BILL.
      ENDIF.

*     Clear Project value for non-project doc type
      IF LS_BILL_RESULT-DOC_TYPE EQ GC_DOC_TYPE-BILL.
        CLEAR LS_BILL_RESULT-PSPID.
      ENDIF.

      INSERT LS_BILL_RESULT INTO TABLE LT_BILL_RESULT.

    ENDLOOP.

*   ------------------------
*   Get Other document types
*   ------------------------
    SELECT FROM BSID_VIEW AS BSID
    INNER JOIN @LT_PARTNER AS BP ##ITAB_KEY_IN_SELECT
            ON BP~PARTNER = BSID~KUNNR
    INNER JOIN BKPF
            ON BKPF~BUKRS = BSID~BUKRS AND
               BKPF~GJAHR = BSID~GJAHR AND
               BKPF~BELNR = BSID~BELNR
    INNER JOIN BSEG
            ON BSEG~BUKRS = BSID~BUKRS AND
               BSEG~GJAHR = BSID~GJAHR AND
               BSEG~BELNR = BSID~BELNR AND
               BSEG~BUZEI = BSID~BUZEI
    FIELDS DISTINCT
      BSID~KUNNR,
      CAST( '        ' AS NUMC( 8 ) )  AS PSPID,
      CASE BSID~UMSKZ
       WHEN @LS_SPECIAL_GL-AR_INVOICE
        THEN '02_AR_INVOICE'
       WHEN @LS_SPECIAL_GL-DOWN_PATMENT
        THEN '03_DOWN_PATMENT'
       WHEN @LS_SPECIAL_GL-ADV_RECEIVE
        THEN '04_ADV_RECEIVE'
       WHEN @LS_SPECIAL_GL-ADV_RECEIVE_01                   "+420000624
        THEN '04_ADV_RECEIVE'                               "+420000624
       WHEN @LS_SPECIAL_GL-POST_DATE_CHEQUE
        THEN '05A_POST_DATE_CHEQUE'
       WHEN @LS_SPECIAL_GL-CHQ_RETURN
        THEN '05B_CHQ_RETURN'
       WHEN @LS_SPECIAL_GL-RETENTION
        THEN '05C_RETENTION'
       WHEN @LS_SPECIAL_GL-AVAL
        THEN '06_AVAL'
       WHEN @LS_SPECIAL_GL-DLC
        THEN '07_DLC'
       WHEN @LS_SPECIAL_GL-BANK_GUARANTEE
        THEN '08_BANK_GUARANTEE'
       WHEN @LS_SPECIAL_GL-CREDIT_INSURANCE
        THEN '09_CREDIT_INSURANCE'
      END AS DOC_TYPE,
      BSID~BELNR AS DOC_NO,
      BSID~BUDAT AS DOC_DATE,
      BSID~XBLNR AS REF_DOC,
      BSID~ZTERM AS ZTERM,
*      BSID~WRBTR AS AMOUNT, "-420000624
      BSID~DMBTR AS AMOUNT,                                 "+420000624
      BSID~ZFBDT,
      BSID~ZBD1T,
      BSID~ZBD2T,
      BSID~ZBD3T,
      BSID~SHKZG,
      BSID~REBZG,
      BSID~REBZJ,
      BSEG~KOART,
      BSID~WAERS,
      BSID~BLART,
      BSID~GJAHR,
      BSID~BUKRS
    WHERE
      BSID~BLART  IN @IS_GENC-RT_BLART_OTHERS  AND
      BSID~UMSKZ  IN @IS_GENC-RT_SPECIAL_GL    AND
      BKPF~STBLG   = @SPACE                    AND
*      BSID~WRBTR  IS NOT INITIAL   "-420000624
      BSID~DMBTR  IS NOT INITIAL                            "+420000624
    INTO TABLE @DATA(LT_FI_DOC).
    IF SY-SUBRC EQ 0.
      LOOP AT LT_FI_DOC ASSIGNING FIELD-SYMBOL(<L_FI_DOC>)
                        WHERE DOC_TYPE EQ GC_DOC_TYPE-AR_INVOICE
                          AND REBZG IS NOT INITIAL.
*         Check if reference to Project Invoice
        READ TABLE LT_BILL_RESULT ASSIGNING FIELD-SYMBOL(<L_BILL_PROJ>)
                                  WITH KEY BUKRS  = <L_FI_DOC>-BUKRS
                                           DOC_NO = <L_FI_DOC>-REBZG
                                           GJAHR  = <L_FI_DOC>-REBZJ
                                           DOC_TYPE = GC_DOC_TYPE-BILL_PROJ
                                  BINARY SEARCH.
        IF SY-SUBRC EQ 0.
*         Move to be under project
          <L_FI_DOC>-DOC_TYPE = GC_DOC_TYPE-AR_INVOICE_PROJ.
          <L_FI_DOC>-PSPID    = <L_BILL_PROJ>-PSPID.
        ENDIF.
      ENDLOOP.
    ENDIF.

    ET_FI_DOC = CORRESPONDING #( LT_BILL_RESULT ).
    ET_FI_DOC = CORRESPONDING #( BASE ( ET_FI_DOC ) LT_FI_DOC ).

    CASE IF_SEL_CREDIT.
      WHEN GC_SEL_CREDIT-PROJECT.
        DELETE ET_FI_DOC WHERE DOC_TYPE EQ GC_DOC_TYPE-BILL.
      WHEN GC_SEL_CREDIT-CUSTOMER.
        DELETE ET_FI_DOC WHERE DOC_TYPE EQ GC_DOC_TYPE-BILL_PROJ.
    ENDCASE.

    "Filter Payment Term for Document for Customer Credit
    LOOP AT IT_PARTNER_CUST ASSIGNING FIELD-SYMBOL(<L_PARTNER_CUST>).

      "Check Payment term Credit Master to collect all document
      IF NOT ( <L_PARTNER_CUST>-ZTERM IN IS_GENC-RT_ZTERM_CRDT ).
        DELETE ET_FI_DOC WHERE KUNNR  = <L_PARTNER_CUST>-PARTNER
                           AND ZTERM IN IS_GENC-RT_ZTERM_EXCLUDE
                           AND DOC_TYPE EQ GC_DOC_TYPE-BILL.
      ENDIF.

    ENDLOOP.

    LOOP AT IT_PARTNER_WBS ASSIGNING FIELD-SYMBOL(<L_PARTNER_WBS>).

      "Check Payment term Credit Master to collect all document
      IF NOT ( <L_PARTNER_WBS>-ZTERM IN IS_GENC-RT_ZTERM_CRDT ).
        DELETE ET_FI_DOC WHERE KUNNR  = <L_PARTNER_WBS>-PARTNER
                           AND PSPID  = <L_PARTNER_WBS>-PSPHI
                           AND ZTERM IN IS_GENC-RT_ZTERM_EXCLUDE
                           AND DOC_TYPE EQ GC_DOC_TYPE-BILL_PROJ.
      ENDIF.

    ENDLOOP.
*--> End of Insertion 420000239 13.01.2025
*<-- Start of Deletion 420000239 13.01.2025 (Remove Old Code)
*    IF IF_SEL_CREDIT = GC_SEL_CREDIT-CUSTOMER
*    OR IF_SEL_CREDIT = GC_SEL_CREDIT-ALL.
*
*      " Get Billing w/o WBS (Project)
*      SELECT FROM BSID_VIEW AS BSID
*      INNER JOIN @IT_PARTNER_CUST AS BP
*              ON BP~PARTNER = BSID~KUNNR
*      INNER JOIN VBRK
*              ON VBRK~VBELN = BSID~VBELN
*      INNER JOIN VBRP
*              ON VBRP~VBELN = BSID~VBELN
*      FIELDS DISTINCT
*        BSID~KUNNR,
*        '01_BILL'  AS DOC_TYPE,
*        BSID~BELNR AS DOC_NO,
*        BSID~BUDAT AS DOC_DATE,
*        BSID~XBLNR AS REF_DOC,
*        BSID~ZTERM AS ZTERM,
*        BSID~WRBTR AS AMOUNT,
*        BSID~ZFBDT,
*        BSID~ZBD1T,
*        BSID~BLART,
*        BSID~GJAHR,
*        BSID~BUKRS,
*        VBRP~VKORG_AUFT AS VKORG,
*        VBRP~VTWEG_AUFT AS VTWEG,
*        VBRP~SPART,
*        VBRP~VKGRP,
*        VBRP~VKBUR
*      WHERE
*        BSID~BLART      IN @IS_GENC-RT_BLART_BILLING AND
*        BSID~WRBTR      IS NOT INITIAL               AND
*        VBRK~FKART  NOT IN @IS_GENC-RT_FKART_PROJ    AND
*        VBRP~PS_PSP_PNR  = @SPACE                    AND
*        VBRK~FKSTO       = @SPACE
*       INTO TABLE @DATA(LT_BILL).
*
*    ENDIF.                                                  "+420000238
*
*    " Get Other documents
*    SELECT FROM BSID_VIEW AS BSID
*    INNER JOIN @IT_PARTNER_CUST AS BP
*            ON BP~PARTNER = BSID~KUNNR
*    INNER JOIN BKPF
*            ON BKPF~BUKRS = BSID~BUKRS AND
*               BKPF~GJAHR = BSID~GJAHR AND
*               BKPF~BELNR = BSID~BELNR
*    INNER JOIN BSEG
*            ON BSEG~BUKRS = BSID~BUKRS AND
*               BSEG~GJAHR = BSID~GJAHR AND
*               BSEG~BELNR = BSID~BELNR AND
*               BSEG~BUZEI = BSID~BUZEI
*    FIELDS DISTINCT
*      BSID~KUNNR,
*      CAST( '        ' AS NUMC( 8 ) )  AS PSPID,            "+420000238
*      CASE BSID~UMSKZ
*       WHEN @LS_SPECIAL_GL-AR_INVOICE
*        THEN '02_AR_INVOICE'
*       WHEN @LS_SPECIAL_GL-DOWN_PATMENT
*        THEN '03_DOWN_PATMENT'
*       WHEN @LS_SPECIAL_GL-ADV_RECEIVE
*        THEN '04_ADV_RECEIVE'
*       WHEN @LS_SPECIAL_GL-POST_DATE_CHEQUE
*        THEN '05A_POST_DATE_CHEQUE'
*       WHEN @LS_SPECIAL_GL-CHQ_RETURN
*        THEN '05B_CHQ_RETURN'
*       WHEN @LS_SPECIAL_GL-RETENTION
*        THEN '05C_RETENTION'
*       WHEN @LS_SPECIAL_GL-AVAL
*        THEN '06_AVAL'
*       WHEN @LS_SPECIAL_GL-DLC
*        THEN '07_DLC'
*       WHEN @LS_SPECIAL_GL-BANK_GUARANTEE
*        THEN '08_BANK_GUARANTEE'
*       WHEN @LS_SPECIAL_GL-CREDIT_INSURANCE
*        THEN '09_CREDIT_INSURANCE'
*      END AS DOC_TYPE,
*      BSID~BELNR AS DOC_NO,
*      BSID~BUDAT AS DOC_DATE,
*      BSID~XBLNR AS REF_DOC,
*      BSID~ZTERM AS ZTERM,
*      BSID~WRBTR AS AMOUNT,
*      BSID~ZFBDT,
*      BSID~ZBD1T,
*      BSID~ZBD2T,
*      BSID~ZBD3T,
*      BSID~SHKZG,
*      BSID~REBZG,
*      BSID~REBZJ,                                           "+420000238
*      BSEG~KOART,
*      BSID~WAERS,
*      BSID~BLART,
*      BSID~GJAHR,
*      BSID~BUKRS
*    WHERE
*      BSID~BLART  IN @IS_GENC-RT_BLART_OTHERS  AND
*      BSID~UMSKZ  IN @IS_GENC-RT_SPECIAL_GL    AND
*      BKPF~STBLG   = @SPACE                    AND
*      BSID~WRBTR  IS NOT INITIAL
*    INTO TABLE @DATA(LT_FI_DOC).
*
**    ENDIF. "-420000238
*
*    IF IF_SEL_CREDIT = GC_SEL_CREDIT-PROJECT
*    OR IF_SEL_CREDIT = GC_SEL_CREDIT-ALL.
*
*      " Get Billing with WBS (Project)
*      SELECT FROM BSID_VIEW AS BSID
*      INNER JOIN @IT_PARTNER_WBS AS BP
*              ON BP~PARTNER = BSID~KUNNR
*      INNER JOIN VBRK
*              ON VBRK~VBELN = BSID~VBELN
*      INNER JOIN VBRP
*              ON VBRP~VBELN = BSID~VBELN
*      INNER JOIN PRPS
*              ON PRPS~PSPNR = VBRP~PS_PSP_PNR AND
*                 PRPS~PSPHI = BP~PSPHI
*      FIELDS DISTINCT
*         BSID~KUNNR,
*         PRPS~PSPHI         AS PSPID,
*         '01_BILL_PROJ'     AS DOC_TYPE,
*         BSID~BELNR         AS DOC_NO,
*         BSID~BUDAT         AS DOC_DATE,
*         BSID~XBLNR         AS REF_DOC,
*         BSID~ZTERM         AS ZTERM,
*         BSID~WRBTR AS AMOUNT,
*         BSID~ZFBDT,
*         BSID~ZBD1T,
*         BSID~BLART,
*         BSID~GJAHR,
*         BSID~BUKRS,
*         VBRP~VKORG_AUFT AS VKORG,
*         VBRP~VTWEG_AUFT AS VTWEG,
*         VBRP~SPART,
*         VBRP~VKGRP,
*         VBRP~VKBUR
*      WHERE
*        BSID~BLART  IN @IS_GENC-RT_BLART_BILLING     AND
*        PRPS~PSPHI  IN @IT_WBS                       AND
*        VBRK~FKART  IN @IS_GENC-RT_FKART_PROJ        AND
*        PRPS~PSPHI  <> @SPACE                        AND
*        VBRK~FKSTO   = @SPACE                        AND
*        BSID~WRBTR IS NOT INITIAL
*      ORDER BY BSID~BUKRS ASCENDING,                        "+420000238
*               BSID~BELNR ASCENDING,                        "+420000238
*               BSID~GJAHR ASCENDING                         "+420000238
*       INTO TABLE @DATA(LT_BILL_PROJ).
*
**<-- Start of Insertion 420000238 13.01.2025 (Update Partial Payment for Project)
*      IF SY-SUBRC EQ 0.
*        LOOP AT LT_FI_DOC ASSIGNING FIELD-SYMBOL(<L_FI_DOC>)
*                          WHERE DOC_TYPE EQ GC_DOC_TYPE-AR_INVOICE
*                            AND REBZG IS NOT INITIAL.
**         Check if reference to Project Invoice
*          READ TABLE LT_BILL_PROJ ASSIGNING FIELD-SYMBOL(<L_BILL_PROJ>)
*                                  WITH KEY BUKRS  = <L_FI_DOC>-BUKRS
*                                           DOC_NO = <L_FI_DOC>-REBZG
*                                           GJAHR  = <L_FI_DOC>-REBZJ
*                                  BINARY SEARCH.
*          IF SY-SUBRC EQ 0.
**           Move to be under project
*            <L_FI_DOC>-DOC_TYPE = GC_DOC_TYPE-AR_INVOICE_PROJ.
*            <L_FI_DOC>-PSPID    = <L_BILL_PROJ>-PSPID.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
**--> End of Insertion 420000238  13.01.2025
*    ENDIF.
*
*    ET_FI_DOC = CORRESPONDING #( LT_BILL ).
*    ET_FI_DOC = CORRESPONDING #( BASE ( ET_FI_DOC ) LT_FI_DOC ).
*
*    "Filter Payment Term for Document for Customer Credit
*    LOOP AT IT_PARTNER_CUST ASSIGNING FIELD-SYMBOL(<L_PARTNER_CUST>).
*
*      "Check Payment term Credit Master to collect all document
*      IF NOT ( <L_PARTNER_CUST>-ZTERM IN IS_GENC-RT_ZTERM_CRDT ).
*        DELETE ET_FI_DOC WHERE KUNNR  = <L_PARTNER_CUST>-PARTNER
*                           AND ZTERM IN IS_GENC-RT_ZTERM_EXCLUDE.
*      ENDIF.
*
*    ENDLOOP.
*
*    LOOP AT IT_PARTNER_WBS ASSIGNING FIELD-SYMBOL(<L_PARTNER_WBS>).
*
*      "Check Payment term Credit Master to collect all document
*      IF NOT ( <L_PARTNER_WBS>-ZTERM IN IS_GENC-RT_ZTERM_CRDT ).
*        DELETE LT_BILL_PROJ WHERE KUNNR  = <L_PARTNER_WBS>-PARTNER
*                              AND PSPID  = <L_PARTNER_WBS>-PSPHI
*                              AND ZTERM IN IS_GENC-RT_ZTERM_EXCLUDE.
*      ENDIF.
*
*    ENDLOOP.
*
*    ET_FI_DOC = CORRESPONDING #( BASE ( ET_FI_DOC ) LT_BILL_PROJ ).
*--> End of Deletion 420000239 13.01.2025

  ENDMETHOD.


  METHOD GET_GENC.

    CONSTANTS:
      LC_SO_DOC_CATE        TYPE ZSDSDE_PARAM_NAME    VALUE 'SO_DOC_CATE',
      LC_SO_OVERALL_STATUS  TYPE ZSDSDE_PARAM_NAME    VALUE 'SO_OVERALL_STATUS',
      LC_DOC_TYPE           TYPE ZSDSDE_PARAM_NAME    VALUE 'DOC_TYPE',
      LC_SPECIAL_GL         TYPE ZSDSDE_PARAM_NAME    VALUE 'SPECIAL_GL',
      LC_SO_CREDIT_STATUS   TYPE ZSDSDE_PARAM_NAME    VALUE 'SO_CREDIT_STATUS',
      LC_SO_DOC_TYPE_PROJ   TYPE ZSDSDE_PARAM_NAME    VALUE 'SO_DOC_TYPE_PROJ',
      LC_BILL_TYPE_PROJ     TYPE ZSDSDE_PARAM_NAME    VALUE 'BILL_TYPE_PROJ',
      LC_PAYMT_TERM_EXCLUDE TYPE ZSDSDE_PARAM_NAME    VALUE 'PAYMT_TERM_EXCLUDE',
      LC_PAYMT_TERM_CREDIT  TYPE ZSDSDE_PARAM_NAME    VALUE 'PAYMT_TERM_CREDIT',
      LC_PARAM_EXT_BLILLING TYPE ZSDSCAC001-PARAM_EXT VALUE 'BLILLING'.

    FIELD-SYMBOLS:
           <L_UMSKZ> TYPE UMSKZ.

    DATA:
      LT_GENC  TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

* Initialize Output
    CLEAR: ES_GENC.

* Read All GenC constants for program
    CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
      EXPORTING
        IF_REPID = GC_REPID
      IMPORTING
        ET_GEN_C = LT_GENC.


    LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<L_GENC>).

      CASE <L_GENC>-PARAM.
        WHEN LC_SO_DOC_CATE .

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_VBTYP.
        WHEN LC_SO_OVERALL_STATUS.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_GBSTK.

        WHEN LC_SO_CREDIT_STATUS.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_CMGST.

        WHEN LC_DOC_TYPE.

          IF <L_GENC>-PARAM_EXT = LC_PARAM_EXT_BLILLING.
            INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                            OPTION = <L_GENC>-PARAM_OPTION
                            LOW    = <L_GENC>-VALUE_LOW
                            HIGH   = <L_GENC>-VALUE_HIGH )
                   INTO TABLE ES_GENC-RT_BLART_BILLING.
          ELSE.
            INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_BLART_OTHERS.
          ENDIF.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_BLART.

        WHEN LC_SPECIAL_GL.

          IF <L_GENC>-PARAM_EXT IS NOT INITIAL.

            ASSIGN COMPONENT <L_GENC>-PARAM_EXT
                OF STRUCTURE ES_GENC-SPECIAL_GL
                          TO <L_UMSKZ>.
            IF SY-SUBRC IS INITIAL.
              <L_UMSKZ> = <L_GENC>-VALUE_LOW.
            ENDIF.

          ENDIF.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_SPECIAL_GL.

        WHEN LC_SO_DOC_TYPE_PROJ.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_AUART_PROJ.

        WHEN LC_BILL_TYPE_PROJ.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_FKART_PROJ.

        WHEN LC_PAYMT_TERM_EXCLUDE.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_ZTERM_EXCLUDE.

        WHEN LC_PAYMT_TERM_CREDIT.

          INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                 INTO TABLE ES_GENC-RT_ZTERM_CRDT.

        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


  METHOD GET_SO_BUSSINESS_DATA.

    CLEAR ET_VBKD.

    IF IT_VBELN IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM VBKD
    INNER JOIN @IT_VBELN AS KEY
            ON VBKD~VBELN = KEY~VBELN
     FIELDS DISTINCT
      VBKD~VBELN,
      POSNR,
      ZTERM
     ORDER BY VBKD~VBELN, POSNR
     INTO TABLE @DATA(LT_VBKD).

    ET_VBKD = CORRESPONDING #( LT_VBKD DISCARDING DUPLICATES ).

  ENDMETHOD.


  METHOD GET_SO_DOCUMENT.

    DATA:
      LF_TABIX      TYPE SY-TABIX,
      LF_PSPHI      TYPE PS_PSPHI,
      LF_ZTERM      TYPE TS_DOC-ZTERM,
      LF_ZTERM_CRDT TYPE TS_DOC-ZTERM,
      LF_KUNNR      TYPE TS_DOC-KUNNR,
      LF_PSPID      TYPE TS_DOC-PSPID,
      LS_SO_DOC     TYPE TS_DOC,
      LT_VBELN      TYPE TT_VBELN_KEY,
      LT_SO_DOC     TYPE TT_DOC.

    CLEAR: ET_SO_DOC.

    IF IF_SEL_CREDIT = GC_SEL_CREDIT-CUSTOMER
    OR IF_SEL_CREDIT = GC_SEL_CREDIT-ALL.

      " Get Sale Order w/o WBS (Project)
      SELECT FROM VBAK AS HDR
      INNER JOIN @IT_PARTNER_CUST AS BP
              ON BP~PARTNER = HDR~KUNNR
      INNER JOIN VBAP AS ITM
              ON ITM~VBELN = HDR~VBELN
      FIELDS DISTINCT
         HDR~KUNNR,
        '00_SO'     AS DOC_TYPE,
         HDR~VBELN  AS DOC_NO,
         HDR~AUDAT  AS DOC_DATE,
         HDR~BSTNK  AS REF_DOC,
         HDR~NETWR  AS AMOUNT,
         HDR~VKORG,
         HDR~VTWEG,
         HDR~SPART,
         HDR~VKGRP,
         HDR~VKBUR
      WHERE
        HDR~VBTYP      IN @IS_GENC-RT_VBTYP      AND
        HDR~GBSTK      IN @IS_GENC-RT_GBSTK      AND
        HDR~CMGST      IN @IS_GENC-RT_CMGST      AND
*        HDR~AUART  NOT IN @IS_GENC-RT_AUART_PROJ AND        "-420000239
        HDR~NETWR      IS NOT INITIAL            AND
*        ITM~PS_PSP_PNR  = @SPACE                            "-420000239
*<-- Start of Insertion 420000239 13.01.2025 (Add Checking ZZRUNNING)
*       ZZRUNNING = 1 is non-project
        ( ( HDR~AUART  NOT IN @IS_GENC-RT_AUART_PROJ AND
            ITM~PS_PSP_PNR EQ @SPACE )          OR
          ( HDR~AUART      IN @IS_GENC-RT_AUART_PROJ AND
            HDR~ZZRUNNING  EQ @GC_RUNNING ) )
*--> End of Insertion 420000239 13.01.2025
       INTO TABLE @DATA(LT_SO).
    ENDIF.

    IF IF_SEL_CREDIT = GC_SEL_CREDIT-PROJECT
    OR IF_SEL_CREDIT = GC_SEL_CREDIT-ALL.

      " Get Sale Order with WBS (Project)
      SELECT FROM VBAK AS HDR
      INNER JOIN @IT_PARTNER_WBS AS BP
              ON BP~PARTNER = HDR~KUNNR
      INNER JOIN VBAP AS ITM
              ON ITM~VBELN = HDR~VBELN
      INNER JOIN PRPS
              ON PRPS~PSPNR = ITM~PS_PSP_PNR AND
                 PRPS~PSPHI = BP~PSPHI
      FIELDS DISTINCT
         HDR~KUNNR,
         PRPS~PSPHI  AS PSPID,
        '00_SO_PROJ' AS DOC_TYPE,
         HDR~VBELN   AS DOC_NO,
         HDR~AUDAT   AS DOC_DATE,
         HDR~BSTNK   AS REF_DOC,
         HDR~NETWR   AS AMOUNT,
         HDR~VKORG,
         HDR~VTWEG,
         HDR~SPART,
         HDR~VKGRP,
         HDR~VKBUR
      WHERE
        HDR~VBTYP      IN @IS_GENC-RT_VBTYP      AND
        HDR~GBSTK      IN @IS_GENC-RT_GBSTK      AND
        HDR~CMGST      IN @IS_GENC-RT_CMGST      AND
        HDR~AUART      IN @IS_GENC-RT_AUART_PROJ AND
        HDR~NETWR      IS NOT INITIAL            AND
        ITM~PS_PSP_PNR <> @SPACE                 AND
        PRPS~PSPHI     IN @IT_WBS                AND
        HDR~ZZRUNNING  NE @GC_RUNNING                       "+420000239
       INTO TABLE @DATA(LT_SO_PROJ).

    ENDIF.

    LT_SO_DOC = CORRESPONDING #( LT_SO ).
    LT_SO_DOC = CORRESPONDING #( BASE ( LT_SO_DOC ) LT_SO_PROJ ).

    LT_VBELN = CORRESPONDING #( LT_SO_DOC DISCARDING DUPLICATES
                                          MAPPING VBELN = DOC_NO ).

    "Summary VAT amount for Sale Document
    SELECT FROM VBAP
     INNER JOIN @LT_VBELN AS KEY
             ON VBAP~VBELN = KEY~VBELN
         FIELDS VBAP~VBELN,
                SUM( VBAP~MWSBP ) AS SUM_MWSBP
       GROUP BY VBAP~VBELN
       INTO TABLE @DATA(LT_SUM_VBAP).
    IF SY-SUBRC IS INITIAL.
      SORT LT_SUM_VBAP BY VBELN.
    ENDIF.

    "Billing from Document Flow
    SELECT FROM VBFA
    INNER JOIN @LT_VBELN AS KEY
            ON VBFA~VBELV = KEY~VBELN
    INNER JOIN VBRK AS BILL_H
            ON BILL_H~VBELN = VBFA~VBELN
    FIELDS DISTINCT KEY~VBELN AS SO_VBELN,
                    VBFA~VBELN
     WHERE VBTYP_N = @GC_VBTYP_BILL AND
           FKSTO   = @SPACE
      INTO TABLE @DATA(LT_VBFA).
    IF SY-SUBRC IS INITIAL.
      SORT LT_VBFA BY SO_VBELN.
    ENDIF.

    "Summary Net and VAT amount for Billing Document
    SELECT FROM VBRP
     INNER JOIN @LT_VBFA AS KEY
             ON VBRP~VBELN = KEY~VBELN
         FIELDS VBRP~VBELN,
                SUM( VBRP~NETWR ) AS SUM_NETWR,
                SUM( VBRP~MWSBP ) AS SUM_MWSBP
       GROUP BY VBRP~VBELN
       INTO TABLE @DATA(LT_SUM_VBRP).
    IF SY-SUBRC IS INITIAL.
      SORT LT_SUM_VBRP BY VBELN.
    ENDIF.

    GET_SO_BUSSINESS_DATA(
      EXPORTING
        IT_VBELN = LT_VBELN
      IMPORTING
        ET_VBKD  = DATA(LT_VBKD)
    ).

    SORT LT_SO_DOC BY KUNNR PSPID.

    LF_KUNNR = 'DUMMY'.
    LF_PSPID = 'DUMMY'.

    "Collect Document from SO Document
    LOOP AT LT_SO_DOC ASSIGNING FIELD-SYMBOL(<L_SO_DOC>).

      CLEAR: LF_ZTERM,
             LS_SO_DOC.

      IF NOT ( LF_KUNNR = <L_SO_DOC>-KUNNR AND
               LF_PSPID = <L_SO_DOC>-PSPID ).

        CLEAR LF_ZTERM_CRDT.

        LF_KUNNR = <L_SO_DOC>-KUNNR.
        LF_PSPID = <L_SO_DOC>-PSPID.

        IF <L_SO_DOC>-PSPID IS INITIAL.
          READ TABLE IT_PARTNER_CUST ASSIGNING FIELD-SYMBOL(<L_PARTNER_CUST>)
          WITH KEY PARTNER = <L_SO_DOC>-KUNNR.
          IF SY-SUBRC IS INITIAL.
            LF_ZTERM_CRDT = <L_PARTNER_CUST>-ZTERM.
          ENDIF.
        ELSE.

          LF_PSPHI = <L_SO_DOC>-PSPID.

          READ TABLE IT_PARTNER_WBS ASSIGNING FIELD-SYMBOL(<L_PARTNER_WBS>)
          WITH KEY PARTNER = <L_SO_DOC>-KUNNR
                   PSPHI   = LF_PSPHI.
          IF SY-SUBRC IS INITIAL.
            LF_ZTERM_CRDT = <L_PARTNER_WBS>-ZTERM.
          ENDIF.
        ENDIF.

      ENDIF.

      "Get Payment term for SO Document
      READ TABLE LT_VBKD ASSIGNING FIELD-SYMBOL(<L_VBKD>)
      WITH KEY VBELN = <L_SO_DOC>-DOC_NO.
      IF SY-SUBRC IS INITIAL.
        LF_ZTERM = <L_VBKD>-ZTERM.
      ENDIF.

      LS_SO_DOC       = CORRESPONDING #( <L_SO_DOC> ).
      LS_SO_DOC-ZTERM = LF_ZTERM.

      "Include VAT amount for SO document item
      READ TABLE LT_SUM_VBAP ASSIGNING FIELD-SYMBOL(<L_SUM_VBAP>)
      WITH KEY VBELN = <L_SO_DOC>-DOC_NO
               BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        LS_SO_DOC-AMOUNT = LS_SO_DOC-AMOUNT + <L_SUM_VBAP>-SUM_MWSBP.
      ENDIF.

      "Get Billing for So Document
      READ TABLE LT_VBFA TRANSPORTING NO FIELDS
      WITH KEY SO_VBELN = <L_SO_DOC>-DOC_NO
               BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.

        LF_TABIX = SY-TABIX.

        LOOP AT LT_VBFA ASSIGNING FIELD-SYMBOL(<L_VBFA>) FROM LF_TABIX.

          IF <L_VBFA>-SO_VBELN <> <L_SO_DOC>-DOC_NO.
            EXIT.
          ENDIF.

          "Calculate amount from Billing Document (Net Amount + VAT Amount)
          READ TABLE LT_SUM_VBRP ASSIGNING FIELD-SYMBOL(<L_SUM_VBRP>)
          WITH KEY VBELN = <L_VBFA>-VBELN
                   BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            LS_SO_DOC-AMOUNT = LS_SO_DOC-AMOUNT - ( <L_SUM_VBRP>-SUM_NETWR + <L_SUM_VBRP>-SUM_MWSBP ).
          ENDIF.

        ENDLOOP.

      ENDIF.

      IF LS_SO_DOC-AMOUNT <= 0.
        CONTINUE.
      ENDIF.

      "Check Payment term Credit Master to collect all document
      IF LF_ZTERM_CRDT IN IS_GENC-RT_ZTERM_CRDT.
        APPEND LS_SO_DOC TO ET_SO_DOC.
        "Exclude Payment Term for SO Document
      ELSEIF NOT ( LF_ZTERM IN IS_GENC-RT_ZTERM_EXCLUDE ).
        APPEND LS_SO_DOC TO ET_SO_DOC.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD REPLACE_MESSAGE.

    RF_MSGTX = IF_MSGTX.

    REPLACE:
      '&1' WITH IF_MSG1 INTO RF_MSGTX,
      '&2' WITH IF_MSG2 INTO RF_MSGTX,
      '&3' WITH IF_MSG3 INTO RF_MSGTX,
      '&4' WITH IF_MSG4 INTO RF_MSGTX.

    CONDENSE RF_MSGTX.

  ENDMETHOD.


  METHOD SET_DOC_TYPE_TEXT.

    CLEAR: RF_DOC_TYPE_TX.

    CASE IF_DOC_TYPE.

      WHEN GC_DOC_TYPE-SALEORDER OR
           GC_DOC_TYPE-SALEORDER_PROJ.

* Text-003: SO
        RF_DOC_TYPE_TX = TEXT-003.

      WHEN GC_DOC_TYPE-BILL OR
           GC_DOC_TYPE-BILL_PROJ.

* Text-004: Billing
        RF_DOC_TYPE_TX = TEXT-004.

      WHEN GC_DOC_TYPE-AR_INVOICE OR
           GC_DOC_TYPE-AR_INVOICE_PROJ.                     "+420000238

* Text-005: AR Invoice
        RF_DOC_TYPE_TX = TEXT-005.

      WHEN GC_DOC_TYPE-DOWN_PATMENT.

* Text-006: Down Payment
        RF_DOC_TYPE_TX = TEXT-006.

      WHEN GC_DOC_TYPE-ADV_RECEIVE.

* Text-007: Advance Received
        RF_DOC_TYPE_TX = TEXT-007.

      WHEN GC_DOC_TYPE-POST_DATE_CHEQUE.

* Text-008: Posted Date Cheque
        RF_DOC_TYPE_TX = TEXT-008.

      WHEN GC_DOC_TYPE-AVAL.

* Text-009: AVAL
        RF_DOC_TYPE_TX = TEXT-009.

      WHEN GC_DOC_TYPE-DLC.

* Text-010: DLC
        RF_DOC_TYPE_TX = TEXT-010.

      WHEN GC_DOC_TYPE-BANK_GUARANTEE.

* Text-011: Bank Guarantee
        RF_DOC_TYPE_TX = TEXT-011.

      WHEN GC_DOC_TYPE-CREDIT_INSURANCE.

* Text-012: Credit Insurance
        RF_DOC_TYPE_TX = TEXT-012.

      WHEN GC_DOC_TYPE-CHQ_RETURN.

* Text-013: CHQ Return
        RF_DOC_TYPE_TX = TEXT-013.

      WHEN GC_DOC_TYPE-RETENTION.

* Text-016: Retention
        RF_DOC_TYPE_TX = TEXT-016.

      WHEN OTHERS.
    ENDCASE.

    IF IF_SUMMARY_TEXT_X EQ ABAP_TRUE.
* Text-015: Summary
      RF_DOC_TYPE_TX = |{ RF_DOC_TYPE_TX } { TEXT-015 }| .
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_PARTNER.

    DATA:
      LF_PARTNER_KEY TYPE BU_PARTNER,
      LF_PARTNER     TYPE BU_PARTNER.

    CLEAR: EF_INVALID,
           EF_MSGTX.

    IF IF_PARTNER IS INITIAL.
      EF_INVALID = ABAP_TRUE.
* Text-E03  Customer is required.
      EF_MSGTX = TEXT-E03.
      RETURN.
    ENDIF.

    LF_PARTNER_KEY = |{ IF_PARTNER ALPHA = IN }|.

    " Check if there is found the data and return
    IF LINE_EXISTS( GT_BP_CMS[ PARTNER = LF_PARTNER_KEY ] ).
      RETURN.
    ENDIF.

    SELECT FROM ZSDSV_BP_CMS
      FIELDS PARTNER
      WHERE PARTNER = @LF_PARTNER_KEY
      ORDER BY PRIMARY KEY
       INTO @LF_PARTNER UP TO 1 ROWS .
    ENDSELECT.

    IF SY-SUBRC IS INITIAL.
      INSERT VALUE TS_PARTNER_KEY( PARTNER = LF_PARTNER )
        INTO TABLE GT_BP_CMS.
    ELSE.
      EF_INVALID = ABAP_TRUE.
* Text-E02  Customer &1 dose not exist in SAP Credit Management.
      EF_MSGTX = REPLACE_MESSAGE( IF_MSGTX = TEXT-E02
                                  IF_MSG1  = IF_PARTNER ).
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_PROJECT.

    DATA:
      LS_PSPNR     TYPE TS_PSPNR,
      LF_PSPID_OUT TYPE PS_PSPID.

    CLEAR: EF_INVALID,
           EF_MSGTX.

    IF IF_PSPNR IS INITIAL.
      RETURN.
    ENDIF.

    IF LINE_EXISTS( GT_PSPNR[ PSPNR = IF_PSPNR ] ).
      RETURN.
    ENDIF.

    SELECT FROM ZSDSV_WBS_CMS
    FIELDS PSPHI,
           PSPID
    WHERE PSPHI = @IF_PSPNR
      ORDER BY PRIMARY KEY
    INTO @DATA(LS_WBS_CMS) UP TO 1 ROWS.
    ENDSELECT.
    IF SY-SUBRC IS INITIAL.
      LS_PSPNR-PSPNR = LS_WBS_CMS-PSPHI.
      LS_PSPNR-PSPID = LS_WBS_CMS-PSPID.
      INSERT LS_PSPNR INTO TABLE GT_PSPNR.
    ELSE.
      EF_INVALID = ABAP_TRUE.

      CALL FUNCTION 'CONVERSION_EXIT_KONPD_OUTPUT'
        EXPORTING
          INPUT  = IF_PSPNR
        IMPORTING
          OUTPUT = LF_PSPID_OUT.

* Text-E01  Project &1 does not exist.
      EF_MSGTX = REPLACE_MESSAGE( IF_MSGTX = TEXT-E01
                                  IF_MSG1  = LF_PSPID_OUT ).
    ENDIF.

  ENDMETHOD.


  METHOD GET_SALE_DETAIL.

    DATA:
      LT_VKORG TYPE TT_VKORG,
      LT_VTWEG TYPE TT_VTWEG,
      LT_SPART TYPE TT_SPART,
      LT_VKGRP TYPE TT_TVGRT,
      LT_VKBUR TYPE TT_TVKBT,
      LT_VBELN TYPE TT_VBELN.

    CLEAR:
        ET_TVKOT,
        ET_TVTWT,
        ET_TSPAT,
        ET_TVGRT,
        ET_TVKBT,
        ET_VBPA_SALE.

    IF IT_DOC IS INITIAL.
      RETURN.
    ENDIF.

    IF ET_TVKOT IS SUPPLIED.

      LT_VKORG = CORRESPONDING #( IT_DOC DISCARDING DUPLICATES ).

      IF LT_VKORG IS NOT INITIAL.

        " Sales Organizations: Texts
        SELECT FROM TVKOT
             FIELDS VKORG,
                    VTEXT
             FOR ALL ENTRIES IN @LT_VKORG
              WHERE VKORG = @LT_VKORG-VKORG
                AND SPRAS = @IF_LANGU
               INTO TABLE @ET_TVKOT.

      ENDIF.

    ENDIF.

    IF ET_TVTWT IS SUPPLIED.

      LT_VTWEG = CORRESPONDING #( IT_DOC DISCARDING DUPLICATES ).

      IF LT_VTWEG IS NOT INITIAL.
        " Distribution Channels: Texts
        SELECT FROM TVTWT
        FIELDS VTWEG,
               VTEXT
        FOR ALL ENTRIES IN @LT_VTWEG
         WHERE VTWEG = @LT_VTWEG-VTWEG
           AND SPRAS = @IF_LANGU
          INTO TABLE @ET_TVTWT.
      ENDIF.


    ENDIF.

    IF ET_TSPAT IS SUPPLIED.

      LT_SPART = CORRESPONDING #( IT_DOC DISCARDING DUPLICATES ).

      IF LT_SPART IS NOT INITIAL.
        " Sales Divisions: Texts
        SELECT FROM TSPAT
        FIELDS SPART,
               VTEXT
        FOR ALL ENTRIES IN @LT_SPART
         WHERE SPART = @LT_SPART-SPART
           AND SPRAS = @IF_LANGU
          INTO TABLE @ET_TSPAT.
      ENDIF.

    ENDIF.

    IF ET_TVGRT IS SUPPLIED.

      LT_VKGRP  = CORRESPONDING #( IT_DOC DISCARDING DUPLICATES ).

      IF LT_VKGRP IS NOT INITIAL.
        " Sales Groups: Texts
        SELECT FROM TVGRT
        FIELDS VKGRP,
               BEZEI
        FOR ALL ENTRIES IN @LT_VKGRP
         WHERE VKGRP = @LT_VKGRP-VKGRP
           AND SPRAS = @IF_LANGU
          INTO TABLE @ET_TVGRT.
      ENDIF.

    ENDIF.


    IF ET_TVKBT IS SUPPLIED.

      LT_VKBUR = CORRESPONDING #( IT_DOC DISCARDING DUPLICATES ).

      IF LT_VKBUR IS NOT INITIAL.
        " Sales Offices: Texts
        SELECT FROM TVKBT
        FIELDS VKBUR,
               BEZEI
        FOR ALL ENTRIES IN @LT_VKBUR
         WHERE VKBUR = @LT_VKBUR-VKBUR
           AND SPRAS = @IF_LANGU
          INTO TABLE @ET_TVKBT.
      ENDIF.

    ENDIF.

    IF ET_VBPA_SALE IS SUPPLIED.

      LT_VBELN = CORRESPONDING #( IT_DOC DISCARDING DUPLICATES
                                  MAPPING VBELN  = DOC_NO ).

      DO 1 TIMES.

        IF LT_VBELN IS INITIAL.
          EXIT.
        ENDIF.

        SELECT FROM VBPA
         INNER JOIN PA0002 AS PERS
                 ON PERS~PERNR = VBPA~PERNR
          FIELDS VBPA~VBELN,
                 VBPA~POSNR,
                 VBPA~PARVW,
                 VBPA~PERNR,
                 PERS~VORNA
            FOR ALL ENTRIES IN @LT_VBELN
             WHERE VBELN = @LT_VBELN-VBELN
               AND PARVW = @GC_PARVW_SALE
               AND VBPA~PERNR IS NOT INITIAL
               AND PERS~BEGDA <= @SY-DATUM
               AND PERS~ENDDA >= @SY-DATUM
              INTO TABLE @DATA(LT_VBPA).

        ET_VBPA_SALE = CORRESPONDING #( LT_VBPA DISCARDING DUPLICATES ).

      ENDDO.

    ENDIF.

  ENDMETHOD.
ENDCLASS.
