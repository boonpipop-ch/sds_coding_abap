*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER  DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      HANDLE_DATA_CHANGED
        FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED,

      HANDLE_TOOLBAR
        FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,

      HANDLE_USER_COMMAND
        FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,


      DOUBLE_CLICK
        FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW
                  E_COLUMN
                  ES_ROW_NO.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER IMPLEMENTATION.
  METHOD HANDLE_DATA_CHANGED.
    " Just trigger PAI followed by PBO
    CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
      EXPORTING
        NEW_CODE = 'REFRESH'
*        IMPORTING
*       rc       =
      .
  ENDMETHOD.                    "handle_data_changed
  METHOD HANDLE_TOOLBAR.
*      DATA: LS_TOOLBAR  TYPE STB_BUTTON.
*
*      CLEAR LS_TOOLBAR.
*      MOVE 3 TO LS_TOOLBAR-BUTN_TYPE.
*      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*      IF GS_HEADER-FIRCO IS INITIAL.
*        CLEAR LS_TOOLBAR.
*        MOVE GC_POST TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_POST_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_POST_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        LS_TOOLBAR-BUTN_TYPE = '3'.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        MOVE GC_SKIP TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_SKIP_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_SKIP_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        LS_TOOLBAR-BUTN_TYPE = '3'.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        MOVE GC_UNSKIP TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_UNSKIP_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_UNSKIP_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*      ENDIF.
  ENDMETHOD.
  METHOD HANDLE_USER_COMMAND.
*    CASE E_UCOMM.
*      WHEN GC_POST.
*        POST( ).
*      WHEN GC_SKIP.
*        SKIP( ).
*      WHEN GC_UNSKIP.
*        UNSKIP( ).
*    ENDCASE.
  ENDMETHOD.
  METHOD DOUBLE_CLICK.
    GV_ROW = ES_ROW_NO-ROW_ID.
    READ TABLE GT_RESULT INTO GS_RESULT INDEX ES_ROW_NO-ROW_ID.
    CALL SCREEN 102 STARTING AT 0 15.
*    READ TABLE GT_RESULT INTO GS_RESULT INDEX ES_ROW_NO-ROW_ID.

  ENDMETHOD.
ENDCLASS.
CLASS lCL_EVENTHANDLER2  DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      HANDLE_DATA_CHANGED
        FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED,

      HANDLE_TOOLBAR
        FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,

      HANDLE_USER_COMMAND
        FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,


      DOUBLE_CLICK
        FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW
                  E_COLUMN
                  ES_ROW_NO.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lCL_EVENTHANDLER2 IMPLEMENTATION.
  METHOD HANDLE_DATA_CHANGED.
    " Just trigger PAI followed by PBO
    CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
      EXPORTING
        NEW_CODE = 'REFRESH'
*        IMPORTING
*       rc       =
      .
  ENDMETHOD.                    "handle_data_changed
  METHOD HANDLE_TOOLBAR.
*      DATA: LS_TOOLBAR  TYPE STB_BUTTON.
*
*      CLEAR LS_TOOLBAR.
*      MOVE 3 TO LS_TOOLBAR-BUTN_TYPE.
*      APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*      IF GS_HEADER-FIRCO IS INITIAL.
*        CLEAR LS_TOOLBAR.
*        MOVE GC_POST TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_POST_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_POST_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        LS_TOOLBAR-BUTN_TYPE = '3'.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        MOVE GC_SKIP TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_SKIP_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_SKIP_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        LS_TOOLBAR-BUTN_TYPE = '3'.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*
*        CLEAR LS_TOOLBAR.
*        MOVE GC_UNSKIP TO LS_TOOLBAR-FUNCTION.
**      MOVE ICON_EMPLOYEE TO LS_TOOLBAR-ICON.
*        MOVE GC_UNSKIP_T TO LS_TOOLBAR-QUICKINFO.
*        MOVE GC_UNSKIP_T TO LS_TOOLBAR-TEXT.
*        MOVE SPACE TO LS_TOOLBAR-DISABLED.
*        APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*      ENDIF.
  ENDMETHOD.
  METHOD HANDLE_USER_COMMAND.
*    CASE E_UCOMM.
*      WHEN GC_POST.
*        POST( ).
*      WHEN GC_SKIP.
*        SKIP( ).
*      WHEN GC_UNSKIP.
*        UNSKIP( ).
*    ENDCASE.
  ENDMETHOD.
  METHOD DOUBLE_CLICK.
    GV_ROW = ES_ROW_NO-ROW_ID.
    READ TABLE GT_RESULT2 INTO GS_RESULT INDEX ES_ROW_NO-ROW_ID.
    CALL SCREEN 103 STARTING AT 0 15.
*    READ TABLE GT_RESULT INTO GS_RESULT INDEX ES_ROW_NO-ROW_ID.

  ENDMETHOD.
ENDCLASS.
*&---------------------------------------------------------------------*
*& Include          ZSDSFIR0810_CLASS
*&---------------------------------------------------------------------*

CLASS LCL_UTIL DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY.

ENDCLASS.
CLASS LCL_UTIL IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_IN.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_outPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
ENDCLASS.
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR,
      START_PROCESS.
    CLASS-METHODS :
      GET_DATA,
      GET_ADDTIONAL_DATA,
      SHOW_REPORT,
      SET_LAYOUT_OUTPUT,
      BUILD_FCAT,
      SET_SORT,
      SET_ALV_GRID,
      HTML_TOP_OF_PAGE,
      CREATE_OBJECT_ALV,
      EXCLUDING_TOOLBAR,
      ADD_EVENT,
      GUI_STATUS,
      SET_LAYOUT_OO,
      SET_FCAT_OO,
      CALL_ALV,
      CREATE_OBJECT_ALV2,
      EXCLUDING_TOOLBAR2,
      ADD_EVENT2,
      GUI_STATUS2,
      SET_LAYOUT2_OO,
      SET_FCAT2_OO,
      SET_SORT_OO,
      SET_SORT2_OO,
      CALL_ALV2,
      ADD_DEBIT,
      ADD_CREDIT,
      DEL_LINE,
      UPDATE_CHECK,
      UPDATE_CHECK2,
      DEL_HEAD,
      DEL_DETAIL,
      SAVE,
      GET_HEADER IMPORTING I_DATA   TYPE GY_RESULT-REFERENCE
                           I_DOCDT  TYPE SY-DATUM
                 RETURNING VALUE(R) TYPE BAPIACHE09,
      GET_ONETIME_CUSTOMER RETURNING VALUE(ONETIME) TYPE BAPIACPA09,
      UPDATE,
      UPDATE2,
      UPDATE_DOCUMENT,
      CONVERT_TMP_TO_AP_SALE,
      CLEAR_ADVANCE IMPORTING I_DATA TYPE BSIK_VIEW-DMBTR,
      VALIDATON RETURNING VALUE(R) TYPE FLAG,
      VALIDATON_DETAIL RETURNING VALUE(R) TYPE FLAG,
      START_INTERFACE,
      END_INTERFACE,
      HIDE_SHOW_HEAD,
      HIDE_SHOW_DETIAL,
      DELETE_ALL_ITEM.

    CLASS-DATA :
      LO TYPE REF TO LCL_DATA.
ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    DATA: I_BUKRS  TYPE  BUKRS,
          I_DATUM  TYPE  DATUM,
          E_PERIOD TYPE  POPER,
          E_GJAHR  TYPE  GJAHR.


    GS_HEADER-CURRENT      = 'THB'.
    GS_HEADER-COMPANY_CODE = '1000'.
    GS_HEADER-CLRCR        = '1021000035'.
    GS_HEADER-TYPE         = 'KR'.
    GS_HEADER-TYPE_C       = 'KC'.

    I_BUKRS = GS_HEADER-COMPANY_CODE.
    I_DATUM = SY-DATUM.

    CALL FUNCTION 'Z_SDSFI_GET_PERIOD_FISCAL_YEAR'
      EXPORTING
        I_BUKRS  = I_BUKRS
        I_DATUM  = I_DATUM
      IMPORTING
        E_PERIOD = E_PERIOD
        E_GJAHR  = E_GJAHR.

    GS_HEADER-DOC_ADVAN_Y = E_GJAHR.
  ENDMETHOD.
  METHOD GET_DATA.
    IF LO IS INITIAL.
      CREATE OBJECT LO.
    ENDIF.

    LO->START_PROCESS( ).
  ENDMETHOD.
  METHOD START_PROCESS.

    CALL SCREEN 101.
  ENDMETHOD.
  METHOD GET_ADDTIONAL_DATA.
*    FIELD-SYMBOLS <LFS_RESULT> LIKE LINE OF GT_RESULT.
*    LOOP AT GT_RESULT ASSIGNING <LFS_RESULT>.
*
*    ENDLOOP.
  ENDMETHOD.
  METHOD SHOW_REPORT.
    SET_LAYOUT_OUTPUT( ).
    BUILD_FCAT( ).
    SET_SORT( ).
    SET_ALV_GRID( ).
  ENDMETHOD.
  METHOD SET_LAYOUT_OUTPUT.
*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                END OF LC_CON.
    GS_LAYOUT-ZEBRA             = GC_X.
    GS_LAYOUT-COLWIDTH_OPTIMIZE = GC_X.
*    GS_LAYOUT-BOX_FIELDNAME     = LC_CON-CHK_FILED.
  ENDMETHOD.
  METHOD BUILD_FCAT.
    DATA:
       LS_FCAT TYPE SLIS_FIELDCAT_ALV.

*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                  CHK_NAME  TYPE C LENGTH 3 VALUE 'CHK',
*                END OF LC_CON.
*
*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME   = LC_CON-CHK_FILED.
*    LS_FCAT-SELTEXT_S   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_M   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_L   = LC_CON-CHK_FILED.
*    LS_FCAT-CHECKBOX    = ABAP_TRUE.
*    LS_FCAT-INPUT       = ABAP_TRUE.
*    LS_FCAT-EDIT        = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT.



    APPEND LS_FCAT TO GT_FCAT.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F TYPE C VALUE 'F',
                LC_T TYPE C VALUE 'T',
                LC_d TYPE C VALUE 'D'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.
*Field
    CLEAR : LS_FCAT.
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                                  IMPORTING E_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABNAME = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-SELTEXT_S = <LFS>.
        LS_FCAT-SELTEXT_M = <LFS>.
        LS_FCAT-SELTEXT_L = <LFS>.
      ENDIF.
      APPEND LS_FCAT TO GT_FCAT.
      CLEAR LS_FCAT.
    ENDDO.

  ENDMETHOD.
  METHOD SET_SORT.
**  CLEAR gs_sort.
**  gs_sort-fieldname = 'LIFNR'.
**  gs_sort-spos = '1'.
**  gs_sort-up = 'X'.
***  gs_sort-subtot = 'X'.
**  APPEND gs_sort TO gt_sort.
  ENDMETHOD.
  METHOD SET_ALV_GRID.
*SAPLKKBL
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        I_CALLBACK_PROGRAM = SY-REPID
        "I_CALLBACK_PF_STATUS_SET = 'PF_STATUS_1'
        "I_callback_user_command  = 'USER_COMMAND'
*       I_CALLBACK_TOP_OF_PAGE            = ' '
*       i_html_height_top  = 12
*       I_CALLBACK_HTML_TOP_OF_PAGE       = 'HTML_TOP_OF_PAGE'
*       I_CALLBACK_HTML_END_OF_LIST       = ' '
*       I_STRUCTURE_NAME   =
*       I_BACKGROUND_ID    = ' '
*       I_GRID_TITLE       =
*       I_GRID_SETTINGS    =
        IS_LAYOUT          = GS_LAYOUT
        IT_FIELDCAT        = GT_FCAT
*       IT_EXCLUDING       =
*       IT_SPECIAL_GROUPS  =
        IT_SORT            = GT_SORT
*       IT_FILTER          =
*       IS_SEL_HIDE        =
        I_DEFAULT          = GC_X
        I_SAVE             = GC_A
*       IS_VARIANT         =
*       IT_EVENTS          =
*       IT_EVENT_EXIT      =
*       IS_PRINT           =
*       IS_REPREP_ID       =
*       I_SCREEN_START_COLUMN             = 0
*       I_SCREEN_START_LINE               = 0
*       I_SCREEN_END_COLUMN               = 0
*       I_SCREEN_END_LINE  = 0
*       I_HTML_HEIGHT_TOP  = 0
*       I_HTML_HEIGHT_END  = 0
*       IT_ALV_GRAPHICS    =
*       IT_HYPERLINK       =
*       IT_ADD_FIELDCAT    =
*       IT_EXCEPT_QINFO    =
*       IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*       E_EXIT_CAUSED_BY_CALLER           =
*       ES_EXIT_CAUSED_BY_USER            =
      TABLES
        T_OUTTAB           = GT_RESULT
      EXCEPTIONS
        PROGRAM_ERROR      = 1
        OTHERS             = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMETHOD.
  METHOD HTML_TOP_OF_PAGE.
*  DATA: text TYPE sdydo_text_element.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 100.
*  text =  'Company Code Data'.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'HEADING'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*
*  text = 'User Name : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uname.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*
*  text = 'Date : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-datum.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*  text = 'Time : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uzeit.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
  ENDMETHOD.
  METHOD CREATE_OBJECT_ALV.
    CREATE OBJECT GCL_CONT
      EXPORTING
        CONTAINER_NAME = GC_CON_NAME.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CREATE OBJECT GCL_ALV
      EXPORTING
        I_PARENT = GCL_CONT.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD EXCLUDING_TOOLBAR.
    DATA LS_EXCLUDE TYPE UI_FUNC.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
  ENDMETHOD.
  METHOD ADD_EVENT.
    CALL METHOD GCL_ALV->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_DATA_CHANGED FOR GCL_ALV.
    SET HANDLER: lCL_EVENTHANDLER=>DOUBLE_CLICK FOR GCL_ALV.




  ENDMETHOD.
  METHOD GUI_STATUS.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_USER_COMMAND FOR GCL_ALV.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_TOOLBAR FOR GCL_ALV.
  ENDMETHOD.
  METHOD SET_LAYOUT_OO.
* CONSTANTS LC_STYLE TYPE C LENGTH 5 VALUE 'ALVED'.
*
*    GS_LAYOUT_OO-STYLEFNAME = LC_STYLE.
    GS_LAYOUT_OO-SEL_MODE   = 'A'.
    GS_LAYOUT_OO-BOX_FNAME  = 'CHECK'.
    GS_LAYOUT_OO-CWIDTH_OPT = ABAP_TRUE.
    GS_LAYOUT_OO-ZEBRA      = ABAP_TRUE.


    CALL METHOD GCL_ALV->SET_FRONTEND_LAYOUT
      EXPORTING
        IS_LAYOUT = GS_LAYOUT_OO.

  ENDMETHOD.
  METHOD SET_FCAT_OO.
    DATA:
          LS_FCAT TYPE LVC_S_FCAT.

    CONSTANTS : LC_CHECK   TYPE C LENGTH 5  VALUE 'CHECK',
                LC_CHECK_T TYPE C LENGTH 5  VALUE 'Check'.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F_OO TYPE C VALUE 'X',
                LC_T_OO TYPE C VALUE 'Y',
                LC_D_OO TYPE C VALUE 'Z'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.

*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME = LC_CHECK.
*    LS_FCAT-COLTEXT   = LC_CHECK_T.
*    LS_FCAT-CHECKBOX  = ABAP_TRUE.
*    LS_FCAT-EDIT      = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT_OO.
*    CLEAR : LS_FCAT.


    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME   = 'DOC_NUM'.
    LS_FCAT-COLTEXT   = 'Doc_Number'.
    APPEND LS_FCAT TO GT_FCAT_OO.

    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME   = 'BKTXT'.
    LS_FCAT-COLTEXT   = 'Tax Number'.
    APPEND LS_FCAT TO GT_FCAT_OO.



*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABLE = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-COLTEXT = <LFS>.
      ENDIF.

      LS_FCAT-COL_POS = LV_RUNNING.

      IF LS_FCAT-FIELDNAME = 'HSL_P'.
        LS_FCAT-REF_TABLE = 'ACDOCA'.
        LS_FCAT-REF_FIELD = 'HSL'.
        LS_FCAT-DO_SUM = ABAP_TRUE.
      ENDIF.

      IF LS_FCAT-FIELDNAME = 'TAX_AMT'.
        LS_FCAT-REF_TABLE = 'ACDOCA'.
        LS_FCAT-REF_FIELD = 'HSL'.
        LS_FCAT-COL_POS   = 3.
        LS_FCAT-DO_SUM = ABAP_TRUE.
      ENDIF.

      IF LS_FCAT-FIELDNAME = 'TOTAL'.
        LS_FCAT-REF_TABLE = 'ACDOCA'.
        LS_FCAT-REF_FIELD = 'HSL'.
        LS_FCAT-COL_POS   = 3.
        LS_FCAT-DO_SUM = ABAP_TRUE.
      ENDIF.

      APPEND LS_FCAT TO GT_FCAT_OO.
      CLEAR : LS_FCAT.
    ENDDO.

    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME   = 'DOC_DATE'.
    LS_FCAT-COLTEXT   = 'Document Date'.
    APPEND LS_FCAT TO GT_FCAT_OO.


  ENDMETHOD.
  METHOD CALL_ALV.
    CALL METHOD GCL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT_OO
        IT_TOOLBAR_EXCLUDING = GT_TOOLBAR_EXCLUDING
      CHANGING
        IT_OUTTAB            = GT_RESULT[]
        IT_FIELDCATALOG      = GT_FCAT_OO
        IT_SORT              = GT_SORT_OO.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.

  METHOD CREATE_OBJECT_ALV2.
    CREATE OBJECT GCL_CONT2
      EXPORTING
        CONTAINER_NAME = GC_CON_NAME2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CREATE OBJECT GCL_ALV2
      EXPORTING
        I_PARENT = GCL_CONT2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD EXCLUDING_TOOLBAR2.
    DATA LS_EXCLUDE TYPE UI_FUNC.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
    LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND LS_EXCLUDE TO GT_TOOLBAR_EXCLUDING.
  ENDMETHOD.
  METHOD ADD_EVENT2.
    CALL METHOD GCL_ALV2->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    SET HANDLER: lCL_EVENTHANDLER2=>HANDLE_DATA_CHANGED FOR GCL_ALV2.
    SET HANDLER: lCL_EVENTHANDLER2=>DOUBLE_CLICK FOR GCL_ALV2.

  ENDMETHOD.
  METHOD GUI_STATUS2.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_USER_COMMAND FOR GCL_ALV2.
    SET HANDLER: lCL_EVENTHANDLER=>HANDLE_TOOLBAR FOR GCL_ALV2.
  ENDMETHOD.
  METHOD SET_LAYOUT2_OO.
* CONSTANTS LC_STYLE TYPE C LENGTH 5 VALUE 'ALVED'.
*
*    GS_LAYOUT_OO-STYLEFNAME = LC_STYLE.

    GS_LAYOUT2_OO-SEL_MODE   = 'A'.
    GS_LAYOUT2_OO-BOX_FNAME  = 'CHECK'.
    GS_LAYOUT2_OO-CWIDTH_OPT = ABAP_TRUE.
    GS_LAYOUT2_OO-ZEBRA      = ABAP_TRUE.
*
    CALL METHOD GCL_ALV2->SET_FRONTEND_LAYOUT
      EXPORTING
        IS_LAYOUT = GS_LAYOUT2_OO.

  ENDMETHOD.
  METHOD SET_SORT2_OO.
    DATA LS_SORT TYPE LVC_S_SORT.
    CLEAR LS_SORT.
    LS_SORT-FIELDNAME = 'GROUP'.
    LS_SORT-SPOS      = '1'.
    LS_SORT-UP        = 'X'.
    LS_SORT-SUBTOT    = 'X'.
    APPEND LS_SORT TO GT_SORT2_OO.

  ENDMETHOD.
  METHOD SET_SORT_OO.
    DATA LS_SORT TYPE LVC_S_SORT.

    CLEAR LS_SORT.
    LS_SORT-FIELDNAME = 'GROUP'.
    LS_SORT-SPOS      = '1'.
    LS_SORT-UP        = 'X'.
    LS_SORT-SUBTOT    = 'X'.
    APPEND LS_SORT TO GT_SORT_OO.
  ENDMETHOD.
  METHOD SET_FCAT2_OO.
    DATA:
          LS_FCAT TYPE LVC_S_FCAT.

    CONSTANTS : LC_CHECK   TYPE C LENGTH 5  VALUE 'CHECK',
                LC_CHECK_T TYPE C LENGTH 5  VALUE 'Check'.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F_OO TYPE C VALUE 'Q',
                LC_T_OO TYPE C VALUE 'W',
                LC_D_OO TYPE C VALUE 'E'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.

*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME = LC_CHECK.
*    LS_FCAT-COLTEXT   = LC_CHECK_T.
*    LS_FCAT-CHECKBOX  = ABAP_TRUE.
*    LS_FCAT-EDIT      = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT_OO.
*    CLEAR : LS_FCAT.


    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME   = 'DOC_NUM'.
    LS_FCAT-COLTEXT   = 'Doc_Number'.
    APPEND LS_FCAT TO GT_FCAT2_OO.

    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME   = 'BKTXT'.
    LS_FCAT-COLTEXT   = 'Tax Number'.
    APPEND LS_FCAT TO GT_FCAT2_OO.

*Field
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                        IMPORTING e_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABLE = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D_OO LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-COLTEXT = <LFS>.
      ENDIF.

      LS_FCAT-COL_POS = LV_RUNNING.

      IF LS_FCAT-FIELDNAME = 'HSL_P'.
        LS_FCAT-REF_TABLE = 'ACDOCA'.
        LS_FCAT-REF_FIELD = 'HSL'.
        LS_FCAT-DO_SUM = ABAP_TRUE.
      ENDIF.

      IF LS_FCAT-FIELDNAME = 'TAX_AMT'.
        LS_FCAT-REF_TABLE = 'ACDOCA'.
        LS_FCAT-REF_FIELD = 'HSL'.
        LS_FCAT-COL_POS   = 3.
        LS_FCAT-DO_SUM = ABAP_TRUE.
      ENDIF.

      IF LS_FCAT-FIELDNAME = 'TOTAL'.
        LS_FCAT-REF_TABLE = 'ACDOCA'.
        LS_FCAT-REF_FIELD = 'HSL'.
        LS_FCAT-COL_POS   = 3.
        LS_FCAT-DO_SUM = ABAP_TRUE.
      ENDIF.

      APPEND LS_FCAT TO GT_FCAT2_OO.
      CLEAR : LS_FCAT.
    ENDDO.

    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME   = 'DOC_DATE'.
    LS_FCAT-COLTEXT   = 'Document Date'.
    APPEND LS_FCAT TO GT_FCAT2_OO.


  ENDMETHOD.
  METHOD CALL_ALV2.
    CALL METHOD GCL_ALV2->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT2_OO
        IT_TOOLBAR_EXCLUDING = GT_TOOLBAR_EXCLUDING2
      CHANGING
        IT_OUTTAB            = GT_RESULT2[]
        IT_FIELDCATALOG      = GT_FCAT2_OO
        IT_SORT              = GT_SORT2_OO.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD ADD_DEBIT.

    GS_RESULT-TOTAL = GS_RESULT-HSL_P + GS_RESULT-TAX_AMT.
    APPEND GS_RESULT TO GT_RESULT.

    IF GCL_ALV IS BOUND.
      GCL_ALV->REFRESH_TABLE_DISPLAY( ).
    ENDIF.
* ADD GS_RESULT-RACCT TO GS_RESULT-RACCT.

  ENDMETHOD.
  METHOD ADD_CREDIT.

    GS_RESULT-TOTAL = GS_RESULT-HSL_P + GS_RESULT-TAX_AMT.
    APPEND GS_RESULT TO GT_RESULT2.

    IF GCL_ALV2 IS BOUND.
      GCL_ALV2->REFRESH_TABLE_DISPLAY( ).
    ENDIF.

  ENDMETHOD.
  METHOD DEL_LINE.
    DELETE GT_RESULT2 WHERE CHECK = ABAP_TRUE.
    DELETE GT_RESULT WHERE CHECK = ABAP_TRUE.
  ENDMETHOD.
  METHOD UPDATE_CHECK.
    DATA : ET_INDEX_ROWS TYPE LVC_T_ROW,
           ET_ROW_NO     TYPE  LVC_T_ROID.

    CALL METHOD GCL_ALV->CHECK_CHANGED_DATA( ).
    CALL METHOD GCL_ALV->GET_SELECTED_ROWS(
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS
        ET_ROW_NO     = ET_ROW_NO ).

    GS_RESULT-CHECK = SPACE.
    MODIFY GT_RESULT FROM GS_RESULT TRANSPORTING CHECK
                                           WHERE CHECK EQ ABAP_TRUE .
    LOOP AT ET_INDEX_ROWS INTO DATA(WA_ROW_NO) .
      GS_RESULT-CHECK = 'X' .
      MODIFY GT_RESULT INDEX WA_ROW_NO-INDEX FROM GS_RESULT TRANSPORTING CHECK .
    ENDLOOP.
  ENDMETHOD.
  METHOD UPDATE_CHECK2.
    DATA : ET_INDEX_ROWS TYPE LVC_T_ROW,
           ET_ROW_NO     TYPE  LVC_T_ROID.

    CALL METHOD GCL_ALV2->CHECK_CHANGED_DATA.
    CALL METHOD GCL_ALV2->GET_SELECTED_ROWS(
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS
        ET_ROW_NO     = ET_ROW_NO ).

    MODIFY GT_RESULT2 FROM GS_RESULT2 TRANSPORTING CHECK
                                             WHERE CHECK EQ ABAP_TRUE .
    LOOP AT ET_INDEX_ROWS INTO DATA(WA_ROW_NO).
      GS_RESULT2-CHECK = 'X' .
      MODIFY GT_RESULT2 INDEX WA_ROW_NO-INDEX FROM GS_RESULT2 TRANSPORTING CHECK .
    ENDLOOP.
  ENDMETHOD.
  METHOD DEL_HEAD.
*    CLEAR : Gs_header.
    CLEAR : Gs_header-DOC_DATE,
            GS_HEADER-POST_DATE,
*            GS_HEADER-TYPE ,
*            GS_HEADER-TYPE_C ,
            GS_HEADER-PERIOD,
            GS_HEADER-COMPANY_CODE,
            GS_HEADER-CURRENT,
            GS_HEADER-RATE,
            GS_HEADER-REFERENCE,
            GS_HEADER-DOC_HEADER,
            GS_HEADER-SALES_VENDC,
            GS_HEADER-SALES_VENDN,
            GS_HEADER-DOC_CLEAR,
            GS_HEADER-DOC_CLEAR_Y,
            GS_HEADER-DOC_AP,
            GS_HEADER-DOC_AP_Y,
            GS_HEADER-DOC_ADVAN,
            GS_HEADER-DOC_ADVAN_Y,
            GS_HEADER-CLRDB,
*            GS_HEADER-CLRCR,
            GS_HEADER-ITEM_TEXT.
  ENDMETHOD.
  METHOD DEL_DETAIL.

    CLEAR : Gs_result.
  ENDMETHOD.
  METHOD  SAVE.
    DATA: LT_ACCOUNTGL       TYPE TABLE OF BAPIACGL09,
          LT_CURRENCY        TYPE TABLE OF BAPIACCR09,
          LS_ACCOUNTGL       TYPE BAPIACGL09,
          LT_RETURN          TYPE TABLE OF BAPIRET2,
          LV_DOC_NUMBER      TYPE BAPIACHE09-OBJ_KEY,
          LV_SUCCESS         TYPE ABAP_BOOL VALUE ABAP_TRUE,
          LS_CURRENCYAMOUNT  TYPE  BAPIACCR09,
          LS_EXTENSION2      TYPE BAPIPAREX,
          LT_ACCOUNTTAX      TYPE TABLE OF BAPIACTX09,
          LS_ACCOUNTTAX      TYPE BAPIACTX09,
          LT_CURRENCYAMOUNT  TYPE TABLE OF BAPIACCR09,
          LT_EXTENSION2      TYPE TABLE OF BAPIPAREX,
          LS_DOCUMENTHEADER  TYPE BAPIACHE09,
          LT_ACCOUNTAP       TYPE TABLE OF BAPIACAP09,
          LS_ACCOUNTAP       TYPE BAPIACAP09,
          LS_CUSTOMERONETIME TYPE BAPIACPA09,
          LT_ACCOUNTWT       TYPE TABLE OF  BAPIACWT09,
          LS_ACCOUNTWT       TYPE BAPIACWT09.

    DATA:
      LT_FILTERED_RESULT  TYPE TABLE OF GY_RESULT,
      LT_FILTERED_RESULT2 TYPE TABLE OF GY_RESULT.
    DATA LV_GL_LINE LIKE LS_ACCOUNTGL-ITEMNO_ACC.

    DATA : LV_REFER TYPE GY_RESULT-REFERENCE.

    DATA : LV_DATE TYPE SY-DATUM.

    DATA : BEGIN OF LS_group,
             GROUP TYPE CHAR5,
           END OF LS_group.
    DATA : LT_group LIKE HASHED TABLE OF LS_group WITH UNIQUE KEY GROUP.

    DATA(LT_TMP_CHECK) = GT_RESULT.

    DELETE LT_TMP_CHECK WHERE DOC_NUM IS NOT INITIAL.
    LT_GROUP =  CORRESPONDING #( LT_TMP_CHECK  DISCARDING DUPLICATES ).

    SELECT MWSKZ,
           KONTS
      FROM T030K
      WHERE KTOPL EQ @GC_CON-RCOA
      INTO TABLE @DATA(LT_T030K).

    SELECT T007A~MWSKZ,
           KONP~KBETR
      FROM T007A
      INNER JOIN A003 ON T007A~MWSKZ EQ A003~MWSKZ
      INNER JOIN KONP ON A003~KNUMH  EQ KONP~KNUMH AND
                         A003~KSCHL  EQ KONP~KSCHL AND
                         A003~KAPPL  EQ KONP~KAPPL
      WHERE T007A~KALSM EQ @GC_CON-TAXTH
        AND A003~KAPPL  EQ @GC_CON-TX
        AND A003~ALAND  EQ @GC_CON-TH
      INTO TABLE @DATA(LT_TAXRATE).

    CLEAR : GV_HEADER_TEXT.
    LOOP AT LT_GROUP INTO LS_GROUP.
      CLEAR: LT_ACCOUNTGL, LT_CURRENCYAMOUNT, LT_EXTENSION2, LV_GL_LINE,
             LS_DOCUMENTHEADER,LS_CUSTOMERONETIME,LV_DOC_NUMBER,
             LT_ACCOUNTAP,LT_RETURN.

      CLEAR: LT_FILTERED_RESULT, LT_FILTERED_RESULT2,LV_REFER.
      LOOP AT GT_RESULT INTO GS_RESULT WHERE GROUP = LS_GROUP-GROUP.
        IF GS_RESULT-REFERENCE IS NOT INITIAL.
          LV_REFER = GS_RESULT-REFERENCE.
        ENDIF.
        APPEND GS_RESULT TO LT_FILTERED_RESULT.
      ENDLOOP.
      LOOP AT GT_RESULT2 INTO GS_RESULT2 WHERE GROUP = LS_GROUP-GROUP.
        IF GS_RESULT2-REFERENCE IS NOT INITIAL.
          LV_REFER = GS_RESULT-REFERENCE.
        ENDIF.
        APPEND GS_RESULT2 TO LT_FILTERED_RESULT2.
      ENDLOOP.


      LOOP AT LT_FILTERED_RESULT INTO GS_RESULT.
        IF GS_RESULT-DOC_DATE IS NOT INITIAL.
          LV_DATE = gs_Result-DOC_DATE.
        ENDIF.
        ADD 1 TO LV_GL_LINE.
        IF GS_RESULT-VENDOR IS NOT INITIAL.
          CLEAR LS_ACCOUNTAP.
          LS_ACCOUNTAP-ITEMNO_ACC = LV_GL_LINE.
          LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
          LS_ACCOUNTAP-VENDOR_NO  = GS_RESULT-VENDOR.
          LS_ACCOUNTAP-ITEM_TEXT  = GS_RESULT-ITEM_TEXT.
          LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
          LS_ACCOUNTAP-PROFIT_CTR = GS_RESULT-PRCTR.
          LS_ACCOUNTAP-PROFIT_CTR = |{ LS_ACCOUNTAP-PROFIT_CTR ALPHA = IN }|.
          LS_ACCOUNTAP-TAX_CODE   = GS_RESULT-TAXCODE.
*          LS_ACCOUNTAP-GL_ACCOUNT = GS_RESULT-RACCT.
*          LS_ACCOUNTAP-GL_ACCOUNT = |{ LS_ACCOUNTAP-GL_ACCOUNT ALPHA = IN }|.
          APPEND LS_ACCOUNTAP TO LT_ACCOUNTAP.
          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
          LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-HSL_P.
          IF LS_ACCOUNTAP-TAX_CODE IS NOT INITIAL.
            LS_CURRENCYAMOUNT-TAX_AMT   = GS_RESULT-TAX_AMT.
          ENDIF.

          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
          LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
          CONCATENATE LS_ACCOUNTAP-ITEMNO_ACC
                      GC_CON-21
                      GC_CON-BRNCH
                      GC_CON-BUPLA
                      SPACE
                 INTO LS_EXTENSION2-VALUEPART1.
          APPEND LS_EXTENSION2 TO LT_EXTENSION2.
          CLEAR GS_RESULT.

          LS_ACCOUNTWT-ITEMNO_ACC = LS_ACCOUNTAP-ITEMNO_ACC.
          LS_ACCOUNTWT-WT_TYPE    = '11'.
          APPEND LS_ACCOUNTWT TO LT_ACCOUNTWT.

          IF GS_RESULT-TAXCODE IS NOT INITIAL AND
             GS_RESULT-TAXCODE NE GC_CON-IX.
            CLEAR : LS_ACCOUNTGL,LS_CURRENCYAMOUNT,LS_EXTENSION2,LS_ACCOUNTGL.

            ADD 1 TO LV_GL_LINE.
            LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
            LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
            LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE.
            LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-TAX_AMT.
            LS_CURRENCYAMOUNT-AMT_BASE    = GS_RESULT-HSL_P.
            LS_CURRENCYAMOUNT-TAX_AMT     = GS_RESULT-TAX_AMT.
            APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

            LS_ACCOUNTTAX-ITEMNO_ACC = LV_GL_LINE.
            READ TABLE LT_T030K INTO DATA(LS_T030K)
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-GL_ACCOUNT = LS_T030K-KONTS.
            ENDIF.

            LS_ACCOUNTTAX-COND_KEY   = GC_CON-MWVS.
            LS_ACCOUNTTAX-ACCT_KEY   = GC_CON-VST.
            LS_ACCOUNTTAX-TAX_CODE   = GS_RESULT-TAXCODE.
            LS_ACCOUNTTAX-ITEMNO_TAX = GC_CON-STAR.

            READ TABLE LT_TAXRATE INTO DATA(LS_TAXRATE)
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-TAX_RATE = LS_TAXRATE-KBETR / 10.
            ENDIF.

            LS_ACCOUNTTAX-TAX_DATE = SY-DATUM.
            APPEND LS_ACCOUNTTAX TO LT_ACCOUNTTAX.

            LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
            CONCATENATE LS_CURRENCYAMOUNT-ITEMNO_ACC
                        GC_CON-40
                        GC_CON-BRNCH
                        GC_CON-BUPLA
                        SPACE
                   INTO LS_EXTENSION2-VALUEPART1.
            APPEND LS_EXTENSION2 TO LT_EXTENSION2.
          ENDIF.

        ELSE.
          CLEAR LS_ACCOUNTGL.
          IF GS_RESULT-MAT_PSPNR IS NOT INITIAL.

            LS_ACCOUNTGL-WBS_ELEMENT = GS_RESULT-MAT_PSPNR.
          ENDIF.

          LS_ACCOUNTGL-ITEMNO_ACC  = LV_GL_LINE.
          LS_ACCOUNTGL-GL_ACCOUNT  = GS_RESULT-RACCT.

          LS_ACCOUNTGL-GL_ACCOUNT = |{ LS_ACCOUNTGL-GL_ACCOUNT ALPHA = IN }|.
          LS_ACCOUNTGL-COMP_CODE   = GS_HEADER-COMPANY_CODE.

*    READ TABLE LT_SKB1 INTO LS_SKB1
*    WITH KEY SAKNR = LS_ACCOUNTGL-RACCT
*             MWSKZ = SPACE.
*    IF SY-SUBRC = 0.
*      LS_ACCOUNTGL-TAX_CODE   = SPACE.
*    ELSE.
*      LS_ACCOUNTGL-TAX_CODE   = CS_HEADER-MWSKZ.
*    ENDIF.

          LS_ACCOUNTGL-PROFIT_CTR = GS_RESULT-PRCTR.
          LS_ACCOUNTGL-PROFIT_CTR = |{ LS_ACCOUNTGL-PROFIT_CTR ALPHA = IN }|.
          LS_ACCOUNTGL-COSTCENTER = GS_RESULT-COST_CENTER.
          LS_ACCOUNTGL-COSTCENTER = |{ LS_ACCOUNTGL-COSTCENTER ALPHA = IN }|.
          LS_ACCOUNTGL-ORDERID    = GS_RESULT-ORDER.
          LS_ACCOUNTGL-ORDERID    = |{ LS_ACCOUNTGL-ORDERID ALPHA = IN }|.
          LS_ACCOUNTGL-ITEM_TEXT  = GS_RESULT-ITEM_TEXT.
          APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

          CLEAR LS_CURRENCYAMOUNT.
          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
          LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-HSL_P.

          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

          CLEAR LS_EXTENSION2.
          LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
          CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                      GC_CON-40
                      GC_CON-BRNCH
                      GC_CON-BUPLA
                      SPACE
                 INTO LS_EXTENSION2-VALUEPART1.
          APPEND LS_EXTENSION2 TO LT_EXTENSION2.
          IF GS_RESULT-TAXCODE IS NOT INITIAL AND
             GS_RESULT-TAXCODE NE GC_CON-IX.
            CLEAR : LS_ACCOUNTGL,LS_CURRENCYAMOUNT,LS_EXTENSION2,LS_ACCOUNTGL.

            ADD 1 TO LV_GL_LINE.
            LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
            LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
            LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE.
            LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-TAX_AMT.
            LS_CURRENCYAMOUNT-AMT_BASE    = GS_RESULT-HSL_P.
            LS_CURRENCYAMOUNT-TAX_AMT     = GS_RESULT-TAX_AMT.
            APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

            LS_ACCOUNTTAX-ITEMNO_ACC = LV_GL_LINE.
            READ TABLE LT_T030K INTO LS_T030K
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-GL_ACCOUNT = LS_T030K-KONTS.
            ENDIF.

            LS_ACCOUNTTAX-COND_KEY   = GC_CON-MWVS.
            LS_ACCOUNTTAX-ACCT_KEY   = GC_CON-VST.
            LS_ACCOUNTTAX-TAX_CODE   = GS_RESULT-TAXCODE.
            LS_ACCOUNTTAX-ITEMNO_TAX = GC_CON-STAR.

            READ TABLE LT_TAXRATE INTO LS_TAXRATE
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-TAX_RATE = LS_TAXRATE-KBETR / 10.
            ENDIF.

            LS_ACCOUNTTAX-TAX_DATE = SY-DATUM.
            APPEND LS_ACCOUNTTAX TO LT_ACCOUNTTAX.

            LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
            CONCATENATE LS_CURRENCYAMOUNT-ITEMNO_ACC
                        GC_CON-40
                        GC_CON-BRNCH
                        GC_CON-BUPLA
                        SPACE
                   INTO LS_EXTENSION2-VALUEPART1.
            APPEND LS_EXTENSION2 TO LT_EXTENSION2.
          ENDIF.
        ENDIF.
        CLEAR GS_RESULT.
      ENDLOOP.


      LOOP AT LT_FILTERED_RESULT2 INTO GS_RESULT.
        IF GS_RESULT-DOC_DATE IS NOT INITIAL.
          LV_DATE = gs_Result-DOC_DATE.
        ENDIF.
        ADD 1 TO LV_GL_LINE.

        IF  GS_RESULT-VENDOR IS NOT INITIAL.
          CLEAR LS_ACCOUNTAP.
          LS_ACCOUNTAP-ITEMNO_ACC = LV_GL_LINE.
          LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
          LS_ACCOUNTAP-VENDOR_NO  = GS_RESULT-VENDOR.
          LS_ACCOUNTAP-ITEM_TEXT  = GS_RESULT-ITEM_TEXT.
          LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
          LS_ACCOUNTAP-PROFIT_CTR = GS_RESULT-PRCTR.
          LS_ACCOUNTAP-PROFIT_CTR = |{ LS_ACCOUNTAP-PROFIT_CTR ALPHA = IN }|.
          LS_ACCOUNTAP-TAX_CODE   = GS_RESULT-TAXCODE.
*          LS_ACCOUNTAP-GL_ACCOUNT = GS_RESULT-RACCT.
*          LS_ACCOUNTAP-GL_ACCOUNT = |{ LS_ACCOUNTAP-GL_ACCOUNT ALPHA = IN }|.
          APPEND LS_ACCOUNTAP TO LT_ACCOUNTAP.
          CLEAR LS_CURRENCYAMOUNT.
          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
          LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-HSL_P * -1.

          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

          LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
          CONCATENATE LS_ACCOUNTAP-ITEMNO_ACC
                      GC_CON-31
                      GC_CON-BRNCH
                      GC_CON-BUPLA
                      SPACE
                 INTO LS_EXTENSION2-VALUEPART1.
          APPEND LS_EXTENSION2 TO LT_EXTENSION2.

          LS_ACCOUNTWT-ITEMNO_ACC = LS_ACCOUNTAP-ITEMNO_ACC.
          LS_ACCOUNTWT-WT_TYPE    = '11'.
          APPEND LS_ACCOUNTWT TO LT_ACCOUNTWT.

          IF GS_RESULT-TAXCODE IS NOT INITIAL AND
             GS_RESULT-TAXCODE NE GC_CON-IX AND
             GS_RESULT-TAX_AMT IS NOT INITIAL.
            CLEAR : LS_ACCOUNTGL,LS_CURRENCYAMOUNT,LS_EXTENSION2,LS_ACCOUNTGL.

            ADD 1 TO LV_GL_LINE.
            LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
            LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
            LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE.
            LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-TAX_AMT * -1.
            LS_CURRENCYAMOUNT-AMT_BASE    = GS_RESULT-HSL_P * -1.
            LS_CURRENCYAMOUNT-TAX_AMT     = GS_RESULT-TAX_AMT * -1.
            APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

            LS_ACCOUNTTAX-ITEMNO_ACC = LV_GL_LINE.
            READ TABLE LT_T030K INTO LS_T030K
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-GL_ACCOUNT = LS_T030K-KONTS.
            ENDIF.

            LS_ACCOUNTTAX-COND_KEY   = GC_CON-MWVS.
            LS_ACCOUNTTAX-ACCT_KEY   = GC_CON-VST.
            LS_ACCOUNTTAX-TAX_CODE   = GS_RESULT-TAXCODE.
            LS_ACCOUNTTAX-ITEMNO_TAX = GC_CON-STAR.

            READ TABLE LT_TAXRATE INTO LS_TAXRATE
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-TAX_RATE = LS_TAXRATE-KBETR / 10.
            ENDIF.

            LS_ACCOUNTTAX-TAX_DATE = SY-DATUM.
            APPEND LS_ACCOUNTTAX TO LT_ACCOUNTTAX.

            LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
            CONCATENATE LS_CURRENCYAMOUNT-ITEMNO_ACC
                        GC_CON-50
                        GC_CON-BRNCH
                        GC_CON-BUPLA
                        SPACE
                   INTO LS_EXTENSION2-VALUEPART1.
            APPEND LS_EXTENSION2 TO LT_EXTENSION2.
          ENDIF.

        ELSE.
          CLEAR LS_ACCOUNTGL.
          IF GS_RESULT-MAT_PSPNR IS NOT INITIAL.
            LS_ACCOUNTGL-WBS_ELEMENT = GS_RESULT-MAT_PSPNR.
          ENDIF.

          LS_ACCOUNTGL-ITEMNO_ACC  = LV_GL_LINE.
          LS_ACCOUNTGL-GL_ACCOUNT  = GS_RESULT-RACCT.

          LS_ACCOUNTGL-GL_ACCOUNT = |{ LS_ACCOUNTGL-GL_ACCOUNT ALPHA = IN }|.
          LS_ACCOUNTGL-COMP_CODE   = GS_HEADER-COMPANY_CODE.

          LS_ACCOUNTGL-PROFIT_CTR = GS_RESULT-PRCTR.
          LS_ACCOUNTGL-PROFIT_CTR = |{ LS_ACCOUNTGL-PROFIT_CTR ALPHA = IN }|.
          LS_ACCOUNTGL-COSTCENTER = GS_RESULT-COST_CENTER.
          LS_ACCOUNTGL-COSTCENTER = |{ LS_ACCOUNTGL-COSTCENTER ALPHA = IN }|.

          LS_ACCOUNTGL-ORDERID    = GS_RESULT-ORDER.

          LS_ACCOUNTGL-ORDERID = |{ LS_ACCOUNTGL-ORDERID ALPHA = IN }|.


          LS_ACCOUNTGL-ITEM_TEXT  = GS_RESULT-ITEM_TEXT .
          APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

          LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
          LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
          LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
          LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-HSL_P * -1.
          APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

          LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
          CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                      GC_CON-50
                      GC_CON-BRNCH
                      GC_CON-BUPLA
                      SPACE
                 INTO LS_EXTENSION2-VALUEPART1.
          APPEND LS_EXTENSION2 TO LT_EXTENSION2.

          IF GS_RESULT-TAXCODE IS NOT INITIAL AND
             GS_RESULT-TAXCODE NE GC_CON-IX AND
             GS_RESULT-TAX_AMT IS NOT INITIAL.
            CLEAR : LS_ACCOUNTGL,LS_CURRENCYAMOUNT,LS_EXTENSION2,LS_ACCOUNTGL.

            ADD 1 TO LV_GL_LINE.
            LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
            LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
            LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE.
            LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-TAX_AMT * -1.
            LS_CURRENCYAMOUNT-AMT_BASE    = GS_RESULT-HSL_P * -1.
            LS_CURRENCYAMOUNT-TAX_AMT     = GS_RESULT-TAX_AMT * -1.
            APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

            LS_ACCOUNTTAX-ITEMNO_ACC = LV_GL_LINE.
            READ TABLE LT_T030K INTO LS_T030K
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-GL_ACCOUNT = LS_T030K-KONTS.
            ENDIF.

            LS_ACCOUNTTAX-COND_KEY   = GC_CON-MWVS.
            LS_ACCOUNTTAX-ACCT_KEY   = GC_CON-VST.
            LS_ACCOUNTTAX-TAX_CODE   = GS_RESULT-TAXCODE.
            LS_ACCOUNTTAX-ITEMNO_TAX = GC_CON-STAR.

            READ TABLE LT_TAXRATE INTO LS_TAXRATE
            WITH KEY MWSKZ = GS_RESULT-TAXCODE.
            IF SY-SUBRC = 0.
              LS_ACCOUNTTAX-TAX_RATE = LS_TAXRATE-KBETR / 10.
            ENDIF.

            LS_ACCOUNTTAX-TAX_DATE = SY-DATUM.
            APPEND LS_ACCOUNTTAX TO LT_ACCOUNTTAX.

            LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
            CONCATENATE LS_CURRENCYAMOUNT-ITEMNO_ACC
                        GC_CON-50
                        GC_CON-BRNCH
                        GC_CON-BUPLA
                        SPACE
                   INTO LS_EXTENSION2-VALUEPART1.
            APPEND LS_EXTENSION2 TO LT_EXTENSION2.
          ENDIF.

          CLEAR GS_RESULT.
        ENDIF.
      ENDLOOP.

      LS_DOCUMENTHEADER  = GET_HEADER( I_DATA  = LV_REFER
                                       I_DOCDT = LV_DATE ).
      LS_CUSTOMERONETIME = GET_ONETIME_CUSTOMER( ).

      " Post
      CLEAR LV_DOC_NUMBER.
      CLEAR : ZCL_SDSFI_ENHANCEMENT=>GV_ITEM_TEXT.

      CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
        EXPORTING
          DOCUMENTHEADER = LS_DOCUMENTHEADER
          CUSTOMERCPD    = LS_CUSTOMERONETIME
        IMPORTING
          OBJ_KEY        = LV_DOC_NUMBER
        TABLES
          ACCOUNTPAYABLE = LT_ACCOUNTAP
          ACCOUNTGL      = LT_ACCOUNTGL
          ACCOUNTTAX     = LT_ACCOUNTTAX
          CURRENCYAMOUNT = LT_CURRENCYAMOUNT
          EXTENSION2     = LT_EXTENSION2
          ACCOUNTWT      = LT_ACCOUNTWT
          RETURN         = LT_RETURN.
*      ENDIF.

      LOOP AT LT_RETURN INTO DATA(LS_RETURN).
        LV_SUCCESS = ABAP_TRUE.
        IF LS_RETURN-TYPE = 'E' OR LS_RETURN-TYPE = 'A'.
          LV_SUCCESS = ABAP_FALSE.
          LOOP AT LT_RETURN INTO LS_RETURN WHERE NUMBER NE 609
                                             AND ( TYPE EQ 'E' OR
                                                   TYPE EQ 'A' ).
            EXIT.
          ENDLOOP.
          EXIT.
        ENDIF.
      ENDLOOP.

      IF LV_SUCCESS    EQ ABAP_TRUE AND
         LV_DOC_NUMBER IS NOT INITIAL AND
         LV_DOC_NUMBER NE '$'.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'.

        SELECT SINGLE BKTXT
          FROM BKPF
          WHERE BUKRS EQ @GS_HEADER-COMPANY_CODE
            AND BELNR EQ @LV_DOC_NUMBER+0(10)
            AND GJAHR EQ @LV_DOC_NUMBER+14(4)
          INTO @DATA(LV_BKTXT).

        LOOP AT GT_RESULT ASSIGNING FIELD-SYMBOL(<FS_RESULT>) WHERE GROUP = LS_GROUP-GROUP.
          <FS_RESULT>-DOC_NUM = LV_DOC_NUMBER+0(10).
          <FS_RESULT>-GJAHR   = LV_DOC_NUMBER+14(4).
          <FS_RESULT>-BKTXT   = LV_BKTXT.
        ENDLOOP.
        LOOP AT GT_RESULT2 ASSIGNING FIELD-SYMBOL(<FS_RESULT2>) WHERE GROUP = LS_GROUP-GROUP.
          <FS_RESULT2>-DOC_NUM = LV_DOC_NUMBER+0(10).
          <FS_RESULT2>-GJAHR   = LV_DOC_NUMBER+14(4).
          <FS_RESULT2>-BKTXT   = LV_BKTXT.
        ENDLOOP.
      ELSE.
        LV_SUCCESS = ABAP_FALSE.
        MESSAGE S998 WITH LS_RETURN-MESSAGE DISPLAY LIKE 'E'.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ENDIF.

      CLEAR : LS_DOCUMENTHEADER,
              LS_CUSTOMERONETIME,
              LV_DOC_NUMBER,
              LT_ACCOUNTAP,
              LT_ACCOUNTGL,
              LT_ACCOUNTTAX,
              LT_CURRENCYAMOUNT,
              LT_EXTENSION2,
              LT_ACCOUNTWT,
              LT_RETURN.
    ENDLOOP.

    IF LV_SUCCESS EQ ABAP_TRUE.
      CONVERT_TMP_TO_AP_SALE( ).
      UPDATE_DOCUMENT( ).
    ENDIF.
  ENDMETHOD.
  METHOD GET_HEADER.

    DATA: I_BUKRS  TYPE  BUKRS,
          I_DATUM  TYPE  DATUM,
          E_PERIOD TYPE  POPER,
          E_GJAHR  TYPE  GJAHR.

    R-USERNAME    = SY-UNAME.
    R-COMP_CODE   = GS_HEADER-COMPANY_CODE.
    R-DOC_DATE    = I_DOCDT.
    R-PSTNG_DATE  = GS_HEADER-POST_DATE.

    I_BUKRS = R-COMP_CODE.
    I_DATUM = R-PSTNG_DATE.

    CALL FUNCTION 'Z_SDSFI_GET_PERIOD_FISCAL_YEAR'
      EXPORTING
        I_BUKRS  = I_BUKRS
        I_DATUM  = I_DATUM
      IMPORTING
        E_PERIOD = E_PERIOD
        E_GJAHR  = E_GJAHR.

    R-FIS_PERIOD  = E_PERIOD.
    R-FISC_YEAR   = E_GJAHR.
    R-TRANS_DATE  = GS_HEADER-POST_DATE.
    R-DOC_TYPE    = GS_HEADER-TYPE.
    IF I_DATA IS NOT INITIAL.
      R-REF_DOC_NO = I_DATA.
    ELSE.
      R-REF_DOC_NO  = GS_HEADER-REFERENCE.
    ENDIF.
  ENDMETHOD.
  METHOD GET_ONETIME_CUSTOMER.

*    CLEAR LS_CUSTOMERONETIME.
*    LS_CUSTOMERONETIME-NAME         = GS_RESULT-OT01_NAME1.
*    LS_CUSTOMERONETIME-NNAME_2      = GS_RESULT-OT01_NAME2.
*    LS_CUSTOMERONETIME-NAME_3       = GS_RESULT-OT01_NAME3.
*    LS_CUSTOMERONETIME-NAME_4       = GS_RESULT-OT01_NAME4.
*    LS_CUSTOMERONETIME-STREET       = GS_RESULT-ADDR_NUM.
*    LS_CUSTOMERONETIME-POSTL_CODE   = GS_RESULT-POSTCODE.
*    LS_CUSTOMERONETIME-TAX_NO_3     = GS_RESULT-OT01_TAXID.


    DATA(LS_CUSTOMERONETIME) = VALUE BAPIACPA09(

      NAME       = GS_RESULT-OT01_NAME1
      NAME_2     = GS_RESULT-OT01_NAME2
      NAME_3     = GS_RESULT-OT01_NAME3
      NAME_4     = GS_RESULT-OT01_NAME4
      STREET     = GS_RESULT-ADDR_NUM
      POSTL_CODE = GS_RESULT-POSTCODE
      CITY       = GS_RESULT-CITY
      COUNTRY    = GS_RESULT-COUNTRY
      TAX_NO_3   = GS_RESULT-TAXID ).

    ONETIME = LS_CUSTOMERONETIME.

  ENDMETHOD.
  METHOD UPDATE.

    READ TABLE GT_RESULT ASSIGNING FIELD-SYMBOL(<LFS_DATA>) INDEX GV_ROW.
    IF SY-SUBRC EQ 0.
      <LFS_DATA>-RACCT          = GS_RESULT-RACCT.
      <LFS_DATA>-HSL_P          = GS_RESULT-HSL_P.
      <LFS_DATA>-MAT_PSPNR      = GS_RESULT-MAT_PSPNR.
      <LFS_DATA>-PRCTR          = GS_RESULT-PRCTR.
      <LFS_DATA>-MATNR          = GS_RESULT-MATNR.
      <LFS_DATA>-SGTXT          = GS_RESULT-SGTXT.
      <LFS_DATA>-ORDER          = GS_RESULT-ORDER.
      <LFS_DATA>-COST_CENTER    = GS_RESULT-COST_CENTER.
      <LFS_DATA>-ITEM_TEXT      = GS_RESULT-ITEM_TEXT.
      <LFS_DATA>-VENDOR         = GS_RESULT-VENDOR.
      <LFS_DATA>-NAME           = GS_RESULT-NAME.
      <LFS_DATA>-TAXCODE        = GS_RESULT-TAXCODE.
      <LFS_DATA>-GROUP          = GS_RESULT-GROUP.
      <LFS_DATA>-OT01_NAME1     = GS_RESULT-OT01_NAME1.
      <LFS_DATA>-OT01_NAME2     = GS_RESULT-OT01_NAME2.
      <LFS_DATA>-OT01_NAME3     = GS_RESULT-OT01_NAME3.
      <LFS_DATA>-OT01_NAME4     = GS_RESULT-OT01_NAME4.
      <LFS_DATA>-ADDR_NUM       = GS_RESULT-ADDR_NUM.
      <LFS_DATA>-DISTRIC        = GS_RESULT-DISTRIC.
      <LFS_DATA>-SUB_DISTRIC    = GS_RESULT-SUB_DISTRIC.
      <LFS_DATA>-POSTCODE       = GS_RESULT-POSTCODE.
      <LFS_DATA>-TAXID          = GS_RESULT-TAXID.
      <LFS_DATA>-PHONE          = GS_RESULT-PHONE.
      <LFS_DATA>-EMAIL          = GS_RESULT-EMAIL.
      <LFS_DATA>-DOC_NUM        = GS_RESULT-DOC_NUM.
      <LFS_DATA>-REFERENCE      = GS_RESULT-REFERENCE.
      <LFS_DATA>-TAX_AMT        = GS_RESULT-TAX_AMT.
      <LFS_DATA>-TOTAL          = GS_RESULT-HSL_P + GS_RESULT-TAX_AMT.
      <LFS_DATA>-COUNTRY        = GS_RESULT-COUNTRY.

      IF GCL_ALV IS BOUND.
        GCL_ALV->REFRESH_TABLE_DISPLAY( ).
      ENDIF.
    ENDIF.
    LEAVE TO SCREEN 0.

  ENDMETHOD.
  METHOD UPDATE2.

    READ TABLE GT_RESULT2 ASSIGNING FIELD-SYMBOL(<LFS_DATA2>) INDEX GV_ROW.
    IF SY-SUBRC EQ 0.
      <LFS_DATA2>-RACCT          = GS_RESULT-RACCT.
      <LFS_DATA2>-HSL_P          = GS_RESULT-HSL_P.
      <LFS_DATA2>-MAT_PSPNR      = GS_RESULT-MAT_PSPNR.
      <LFS_DATA2>-PRCTR          = GS_RESULT-PRCTR.
      <LFS_DATA2>-MATNR          = GS_RESULT-MATNR.
      <LFS_DATA2>-SGTXT          = GS_RESULT-SGTXT.
      <LFS_DATA2>-ORDER          = GS_RESULT-ORDER.
      <LFS_DATA2>-COST_CENTER    = GS_RESULT-COST_CENTER.
      <LFS_DATA2>-ITEM_TEXT      = GS_RESULT-ITEM_TEXT.
      <LFS_DATA2>-VENDOR         = GS_RESULT-VENDOR.
      <LFS_DATA2>-NAME           = GS_RESULT-NAME.
      <LFS_DATA2>-TAXCODE        = GS_RESULT-TAXCODE.
      <LFS_DATA2>-GROUP          = GS_RESULT-GROUP.
      <LFS_DATA2>-OT01_NAME1     = GS_RESULT-OT01_NAME1.
      <LFS_DATA2>-OT01_NAME2     = GS_RESULT-OT01_NAME2.
      <LFS_DATA2>-OT01_NAME3     = GS_RESULT-OT01_NAME3.
      <LFS_DATA2>-OT01_NAME4     = GS_RESULT-OT01_NAME4.
      <LFS_DATA2>-ADDR_NUM       = GS_RESULT-ADDR_NUM.
      <LFS_DATA2>-DISTRIC        = GS_RESULT-DISTRIC.
      <LFS_DATA2>-SUB_DISTRIC    = GS_RESULT-SUB_DISTRIC.
      <LFS_DATA2>-POSTCODE       = GS_RESULT-POSTCODE.
      <LFS_DATA2>-TAXID          = GS_RESULT-TAXID.
      <LFS_DATA2>-PHONE          = GS_RESULT-PHONE.
      <LFS_DATA2>-EMAIL          = GS_RESULT-EMAIL.
      <LFS_DATA2>-DOC_NUM        = GS_RESULT-DOC_NUM.
      <LFS_DATA2>-REFERENCE      = GS_RESULT-REFERENCE.
      <LFS_DATA2>-TAX_AMT        = GS_RESULT-TAX_AMT.
      <LFS_DATA2>-TOTAL          = GS_RESULT-HSL_P + GS_RESULT-TAX_AMT.
      <LFS_DATA2>-CITY           = GS_RESULT-CITY.
      <LFS_DATA2>-COUNTRY        = GS_RESULT-COUNTRY.

      IF GCL_ALV2 IS BOUND.
        GCL_ALV2->REFRESH_TABLE_DISPLAY( ).
      ENDIF.
    ENDIF.

    LEAVE TO SCREEN 0.

  ENDMETHOD.
  METHOD UPDATE_DOCUMENT.
    DATA : LS_ZSDSFIT061 TYPE ZSDSFIT061,
           LT_ZSDSFIT061 TYPE TABLE OF ZSDSFIT061.

    DATA : BEGIN OF LS_DOC,
             BUKRS TYPE ZSDSFIT061-BUKRS,
             BELNR TYPE ZSDSFIT061-BELNR,
             GJAHR TYPE ZSDSFIT061-GJAHR,
           END OF LS_DOC.
    DATA : LT_DOC LIKE HASHED TABLE OF LS_DOC WITH UNIQUE KEY BUKRS,
           BELNR,
           GJAHR.
    LT_DOC =  CORRESPONDING #( GT_RESULT DISCARDING DUPLICATES ).

    SELECT ZSDSFIT061~BUKRS,
           ZSDSFIT061~BELNR,
           ZSDSFIT061~GJAHR,
           ZSDSFIT061~ERNAM,
           ZSDSFIT061~ERDAT,
           ZSDSFIT061~ERZET
      FROM @LT_DOC AS A
      INNER JOIN ZSDSFIT061 ON A~BUKRS EQ ZSDSFIT061~BUKRS
                           AND A~BELNR EQ ZSDSFIT061~BELNR
                           AND A~GJAHR EQ ZSDSFIT061~GJAHR
      INTO TABLE @DATA(LT_TMP).

    LOOP AT GT_RESULT INTO DATA(LS_RESULT) .
      LS_ZSDSFIT061-BUKRS = '1000'.
      LS_ZSDSFIT061-BELNR = LS_RESULT-DOC_NUM.
      LS_ZSDSFIT061-GJAHR = LS_RESULT-GJAHR.
      LS_ZSDSFIT061-DOCAD = GS_HEADER-DOC_AP.
      LS_ZSDSFIT061-DOCAY = GS_HEADER-DOC_AP_Y.
      LS_ZSDSFIT061-DOCCD = GS_HEADER-DOC_CLEAR.
      LS_ZSDSFIT061-DOCCY = GS_HEADER-DOC_CLEAR_Y.
      CONCATENATE SY-UNAME '_' SY-DATUM '_' SY-UZEIT INTO LS_ZSDSFIT061-DOCPY.

      READ TABLE LT_TMP INTO DATA(LS_TMP)
      WITH KEY BELNR = LS_RESULT-DOC_NUM
               GJAHR = LS_RESULT-GJAHR.
      IF SY-SUBRC = 0.
        LS_ZSDSFIT061-ERNAM = LS_TMP-ERNAM.
        LS_ZSDSFIT061-ERDAT = LS_TMP-ERDAT.
        LS_ZSDSFIT061-ERZET = LS_TMP-ERZET.
      ELSE.
        LS_ZSDSFIT061-ERNAM = SY-UNAME.
        LS_ZSDSFIT061-ERDAT = SY-DATUM.
        LS_ZSDSFIT061-ERZET = SY-UZEIT.
      ENDIF.

      LS_ZSDSFIT061-AENAM = SY-UNAME.
      LS_ZSDSFIT061-AEDAT = SY-DATUM.
      LS_ZSDSFIT061-AEZET = SY-UZEIT.

      APPEND LS_ZSDSFIT061 TO LT_ZSDSFIT061.
    ENDLOOP.

    MODIFY ZSDSFIT061 FROM TABLE LT_ZSDSFIT061.
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD CONVERT_TMP_TO_AP_SALE.
    DATA : I_AUGLV   TYPE T041A-AUGLV,
           I_TCODE   TYPE SY-TCODE,
           I_SGFUNCT TYPE RFIPI-SGFUNCT,
           I_NO_AUTH ,
           I_XSIMU   TYPE CHAR1.

    DATA : E_MSGID TYPE SY-MSGID,
           E_MSGNO TYPE SY-MSGNO,
           E_MSGTY TYPE SY-MSGTY,
           E_MSGV1 TYPE SY-MSGV1,
           E_MSGV2 TYPE SY-MSGV2,
           E_MSGV3 TYPE SY-MSGV3,
           E_MSGV4 TYPE SY-MSGV4,
           E_SUBRC TYPE SY-SUBRC.

    DATA : LT_BLNTAB  TYPE TABLE OF BLNTAB,
           LT_FTCLEAR TYPE TABLE OF FTCLEAR,
           LT_FTPOST  TYPE TABLE OF FTPOST,
           LT_FTTAX   TYPE TABLE OF FTTAX.

    DATA : LS_BLNTAB  TYPE BLNTAB,
           LS_FTCLEAR TYPE FTCLEAR,
           LS_FTPOST  TYPE FTPOST,
           LS_FTTAX   TYPE FTTAX.

    DATA : LV_DATE   TYPE C LENGTH 10.
    DATA : LV_AMOUNT TYPE C LENGTH 25.

    DATA : LV_SUM_DABIT  TYPE BSIK_VIEW-DMBTR.
    DATA : LV_SUM_CREDIT TYPE BSIK_VIEW-DMBTR.
    DATA : LV_SUM_PAID   TYPE BSIK_VIEW-DMBTR.

    DATA : LV_MES_POS  TYPE NATXT.

*    IF GS_HEADER-DOC_AP IS NOT INITIAL.
*      LCL_DATA=>CLEAR_ADVANCE( LV_SUM_PAID ).
*    ELSE.

    IF GS_HEADER-DOC_CLEAR IS NOT INITIAL.
      MESSAGE S000 WITH TEXT-107 DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    SELECT SINGLE BSEG~DMBTR,
                  BSEG~PRCTR,
                  BSEG~LIFNR
      FROM BSEG
      INNER JOIN BKPF ON BSEG~BELNR EQ BKPF~BELNR AND
                         BKPF~BLART EQ 'K1'
      WHERE BSEG~BELNR EQ @GS_HEADER-DOC_ADVAN
        AND BSEG~GJAHR EQ @GS_HEADER-DOC_ADVAN_Y
        AND BSEG~BSCHL EQ '29'
       INTO @DATA(LS_ADVANCE).
    IF SY-SUBRC NE 0.
      MESSAGE S000 WITH TEXT-104 DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    START_INTERFACE( ).

    I_AUGLV   = 'AUSGZAHL'.
    I_TCODE   = 'FB05'.
    I_SGFUNCT = 'C'.
*    I_XSIMU   = ABAP_TRUE.

    LOOP AT GT_RESULT INTO GS_RESULT WHERE VENDOR IS NOT INITIAL.
      LS_FTCLEAR-AGKOA   = GC_CON-K.
      LS_FTCLEAR-AGKON   = GS_RESULT-VENDOR.
      LS_FTCLEAR-AGBUK   = GS_HEADER-COMPANY_CODE.
      LS_FTCLEAR-XNOPS   = ABAP_TRUE.
      LS_FTCLEAR-AGUMS   = 'E'.

      LS_FTCLEAR-SELFD   = 'BELNR'.
      CONCATENATE GS_RESULT-DOC_NUM GS_RESULT-GJAHR INTO LS_FTCLEAR-SELVON.
      CONCATENATE GS_RESULT-DOC_NUM GS_RESULT-GJAHR INTO LS_FTCLEAR-SELBIS.
*      LS_FTCLEAR-SELBIS  = GS_RESULT-DOC_NUM.
      APPEND LS_FTCLEAR TO LT_FTCLEAR.
      ADD GS_RESULT-HSL_P TO LV_SUM_DABIT.
    ENDLOOP.

    LOOP AT GT_RESULT2 INTO GS_RESULT2 WHERE VENDOR IS NOT INITIAL.
      LS_FTCLEAR-AGKOA   = GC_CON-K.
      LS_FTCLEAR-AGKON   = GS_RESULT2-VENDOR.
      LS_FTCLEAR-AGBUK   = GS_HEADER-COMPANY_CODE.
      LS_FTCLEAR-XNOPS   = ABAP_TRUE.
      LS_FTCLEAR-AGUMS   = 'E'.

      LS_FTCLEAR-SELFD   = 'BELNR'.
      CONCATENATE GS_RESULT2-DOC_NUM GS_RESULT2-GJAHR INTO LS_FTCLEAR-SELVON.
      CONCATENATE GS_RESULT2-DOC_NUM GS_RESULT2-GJAHR INTO LS_FTCLEAR-SELBIS.
*      LS_FTCLEAR-SELBIS  = GS_RESULT-DOC_NUM.
      APPEND LS_FTCLEAR TO LT_FTCLEAR.
      ADD GS_RESULT2-HSL_P TO LV_SUM_CREDIT.
    ENDLOOP.

    LS_FTCLEAR-AGKON   = LS_ADVANCE-LIFNR.
    LS_FTCLEAR-SELFD   = 'BELNR'.
    CONCATENATE GS_HEADER-DOC_ADVAN GS_HEADER-DOC_ADVAN_Y INTO LS_FTCLEAR-SELVON.
    CONCATENATE GS_HEADER-DOC_ADVAN GS_HEADER-DOC_ADVAN_Y INTO LS_FTCLEAR-SELBIS.
    APPEND LS_FTCLEAR TO LT_FTCLEAR.
*--------------------------------------------------------------------*
* Header
*--------------------------------------------------------------------*
    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-BUKRS'.
    LS_FTPOST-FVAL  = GS_HEADER-COMPANY_CODE.
    APPEND LS_FTPOST TO LT_FTPOST.

    WRITE GS_HEADER-DOC_DATE  TO LV_DATE.
    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-BLDAT'.
    LS_FTPOST-FVAL  = LV_DATE.
    APPEND LS_FTPOST TO LT_FTPOST.

    WRITE GS_HEADER-POST_DATE TO LV_DATE.
    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-BUDAT'.
    LS_FTPOST-FVAL  = LV_DATE."p_budat.
    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-WAERS'.
    LS_FTPOST-FVAL  = 'THB'.
    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-BLART'.
    LS_FTPOST-FVAL  = GS_HEADER-TYPE_C.
    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-XBLNR'.
    LS_FTPOST-FVAL  = GS_HEADER-REFERENCE.
    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'K'.
    LS_FTPOST-COUNT = '001'.
    LS_FTPOST-FNAM  = 'BKPF-BRNCH'.
    LS_FTPOST-FVAL  = '0000'.
    APPEND LS_FTPOST TO LT_FTPOST.

    SORT LT_FTCLEAR.
    DELETE ADJACENT DUPLICATES FROM LT_FTCLEAR COMPARING ALL FIELDS.
*--------------------------------------------------------------------*
*Detail
*--------------------------------------------------------------------*
    LV_SUM_PAID = LS_ADVANCE-DMBTR + ( LV_SUM_DABIT - LV_SUM_CREDIT ).
    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'P'.
    LS_FTPOST-COUNT = '002'.
    LS_FTPOST-FNAM  = 'RF05A-NEWBS'.
    IF LV_SUM_PAID GT 0.
      IF CB_ADVANCE EQ ABAP_TRUE.
        LS_FTPOST-FVAL  = '29'.
      ELSE.
        LS_FTPOST-FVAL  = '40'.
      ENDIF.
    ELSE.
      IF CB_ADVANCE EQ ABAP_TRUE.
        LS_FTPOST-FVAL  = '39'.
      ELSE.
        LS_FTPOST-FVAL  = '50'.
      ENDIF.
    ENDIF.

    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'P'.
    LS_FTPOST-COUNT = '002'.
    LS_FTPOST-FNAM  = 'RF05A-NEWKO'.
    IF LV_SUM_PAID GT 0.
      IF CB_ADVANCE EQ ABAP_TRUE.
        LS_FTPOST-FVAL  = GS_HEADER-SALES_VENDC.
      ELSE.
        LS_FTPOST-FVAL  = GS_HEADER-CLRDB.
      ENDIF.
    ELSE.
      IF CB_ADVANCE EQ ABAP_TRUE.
        LS_FTPOST-FVAL  = GS_HEADER-SALES_VENDC.
      ELSE.
        LS_FTPOST-FVAL  = GS_HEADER-CLRCR.
      ENDIF.
    ENDIF.
*      LS_FTPOST-FVAL  = GS_HEADER-SALES_VENDC.
    APPEND LS_FTPOST TO LT_FTPOST.

    IF LV_SUM_PAID GT 0.
      IF CB_ADVANCE EQ ABAP_TRUE.
        CLEAR : LS_FTPOST.
        LS_FTPOST-STYPE = 'P'.
        LS_FTPOST-COUNT = '002'.
        LS_FTPOST-FNAM  = 'RF05A-NEWUM'.
        LS_FTPOST-FVAL  = 'E'.
        APPEND LS_FTPOST TO LT_FTPOST.
      ENDIF.
    ENDIF.

    IF LV_SUM_PAID LT 0.
      LV_SUM_PAID = LV_SUM_PAID * -1.
    ENDIF.

    LV_AMOUNT = LV_SUM_PAID.
    REPLACE ALL OCCURRENCES OF PCRE '[ ]+' IN LV_AMOUNT WITH ''.
    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'P'.
    LS_FTPOST-COUNT = '002'.
    LS_FTPOST-FNAM  = 'BSEG-WRBTR'.
    LS_FTPOST-FVAL  = LV_AMOUNT.
    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'P'.
    LS_FTPOST-COUNT = '002'.
    LS_FTPOST-FNAM  = 'COBL-PRCTR'.
    LS_FTPOST-FVAL  = LS_ADVANCE-PRCTR.
    APPEND LS_FTPOST TO LT_FTPOST.

    CLEAR : LS_FTPOST.
    LS_FTPOST-STYPE = 'P'.
    LS_FTPOST-COUNT = '002'.
    LS_FTPOST-FNAM  = 'BSEG-SGTXT'.
    LS_FTPOST-FVAL  = GS_HEADER-ITEM_TEXT.
    APPEND LS_FTPOST TO LT_FTPOST.

    PERFORM F_EXPORT_MEMORY.

    CALL FUNCTION 'POSTING_INTERFACE_CLEARING'
      EXPORTING
        I_AUGLV                    = I_AUGLV
        I_TCODE                    = I_TCODE
        I_SGFUNCT                  = I_SGFUNCT
*       I_NO_AUTH                  = I_NO_AUTH
*       I_XSIMU                    = I_XSIMU
      IMPORTING
        E_MSGID                    = E_MSGID
        E_MSGNO                    = E_MSGNO
        E_MSGTY                    = E_MSGTY
        E_MSGV1                    = E_MSGV1
        E_MSGV2                    = E_MSGV2
        E_MSGV3                    = E_MSGV3
        E_MSGV4                    = E_MSGV4
        E_SUBRC                    = E_SUBRC
      TABLES
        T_BLNTAB                   = LT_BLNTAB
        T_FTCLEAR                  = LT_FTCLEAR
        T_FTPOST                   = LT_FTPOST
        T_FTTAX                    = LT_FTTAX
      EXCEPTIONS
        CLEARING_PROCEDURE_INVALID = 1
        CLEARING_PROCEDURE_MISSING = 2
        TABLE_T041A_EMPTY          = 3
        TRANSACTION_CODE_INVALID   = 4
        AMOUNT_FORMAT_ERROR        = 5
        TOO_MANY_LINE_ITEMS        = 6
        COMPANY_CODE_INVALID       = 7
        SCREEN_NOT_FOUND           = 8
        NO_AUTHORIZATION           = 9
        OTHERS                     = 10.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
      EXPORTING
        MSGID               = E_MSGID
        MSGNR               = E_MSGNO
        MSGV1               = E_MSGV1
        MSGV2               = E_MSGV2
        MSGV3               = E_MSGV3
        MSGV4               = E_MSGV4
      IMPORTING
        MESSAGE_TEXT_OUTPUT = LV_MES_POS.

    END_INTERFACE( ).

    IF E_MSGTY EQ 'E'.
      MESSAGE S998 WITH TEXT-104 DISPLAY LIKE 'E'.
    ELSE.
      GS_HEADER-DOC_CLEAR = E_MSGV1.
      SELECT SINGLE GJAHR
        FROM BKPF
        INTO GS_HEADER-DOC_CLEAR_Y
        WHERE BELNR EQ GS_HEADER-DOC_CLEAR
          AND BUDAT EQ GS_HEADER-POST_DATE.
      MESSAGE S998 WITH TEXT-105.
*      LCL_DATA=>CLEAR_ADVANCE( LV_SUM_PAID ).
    ENDIF.
*    ENDIF.

*    DATA: LT_ACCOUNTGL       TYPE TABLE OF BAPIACGL09,
*          LT_CURRENCY        TYPE TABLE OF BAPIACCR09,
*          LS_ACCOUNTGL       TYPE BAPIACGL09,
*          LT_RETURN          TYPE TABLE OF BAPIRET2,
*          LV_DOC_NUMBER      TYPE BAPIACHE09-OBJ_KEY,
*          LV_SUCCESS         TYPE ABAP_BOOL VALUE ABAP_TRUE,
*          LS_CURRENCYAMOUNT  TYPE  BAPIACCR09,
*          LS_EXTENSION2      TYPE BAPIPAREX,
*          LT_CURRENCYAMOUNT  TYPE TABLE OF BAPIACCR09,
*          LT_EXTENSION2      TYPE TABLE OF BAPIPAREX,
*          LS_DOCUMENTHEADER  TYPE BAPIACHE09,
*          LT_ACCOUNTAP       TYPE TABLE OF BAPIACAP09,
*          LS_ACCOUNTAP       TYPE BAPIACAP09,
*          LS_CUSTOMERONETIME TYPE BAPIACPA09.
*
*    DATA : LV_GL_LINE TYPE I.
*
*    DATA : LV_AMOUNT LIKE GS_RESULT-HSL_P.
*
*    LOOP AT GT_RESULT INTO GS_RESULT WHERE VENDOR IS NOT INITIAL.
*      ADD 1 TO LV_GL_LINE.
*      CLEAR LS_ACCOUNTAP.
*      LS_ACCOUNTAP-ITEMNO_ACC = LV_GL_LINE.
*      LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
*      LS_ACCOUNTAP-VENDOR_NO  = GS_RESULT-VENDOR.
*      LS_ACCOUNTAP-ITEM_TEXT  = GS_RESULT-ITEM_TEXT.
*      LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
*      LS_ACCOUNTAP-PROFIT_CTR = GS_RESULT-PRCTR.
*      LS_ACCOUNTAP-TAX_CODE   = GS_RESULT-TAXCODE.
**          LS_ACCOUNTAP-GL_ACCOUNT = GS_RESULT-RACCT.
**          LS_ACCOUNTAP-GL_ACCOUNT = |{ LS_ACCOUNTAP-GL_ACCOUNT ALPHA = IN }|.
*      APPEND LS_ACCOUNTAP TO LT_ACCOUNTAP.
*      CLEAR LS_CURRENCYAMOUNT.
*      LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*      LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
*      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE.
*      LS_CURRENCYAMOUNT-AMT_DOCCUR  = GS_RESULT-HSL_P.
*
*      ADD GS_RESULT-HSL_P TO LV_AMOUNT.
*
*      APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*
*      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
*      CONCATENATE LS_ACCOUNTAP-ITEMNO_ACC
*                  GC_CON-27
*                  GC_CON-BRNCH
*                  GC_CON-BUPLA
*                  SPACE
*             INTO LS_EXTENSION2-VALUEPART1.
*      APPEND LS_EXTENSION2 TO LT_EXTENSION2.
*
*    ENDLOOP.
*
*    ADD 1 TO LV_GL_LINE.
*    CLEAR LS_ACCOUNTAP.
*    LS_ACCOUNTAP-ITEMNO_ACC = LV_GL_LINE.
*    LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
*    LS_ACCOUNTAP-VENDOR_NO  = GS_RESULT-VENDOR.
*    LS_ACCOUNTAP-ITEM_TEXT  = GS_RESULT-ITEM_TEXT.
*    LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
*    LS_ACCOUNTAP-PROFIT_CTR = GS_RESULT-PRCTR.
*    LS_ACCOUNTAP-TAX_CODE   = GS_RESULT-TAXCODE.
*    APPEND LS_ACCOUNTAP TO LT_ACCOUNTAP.
*    CLEAR LS_CURRENCYAMOUNT.
*    LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
*    LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
*    LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
*    LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_AMOUNT * -1.
*
*    APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.
*
*    LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
*    CONCATENATE LS_ACCOUNTAP-ITEMNO_ACC
*                GC_CON-31
*                GC_CON-BRNCH
*                GC_CON-BUPLA
*                SPACE
*           INTO LS_EXTENSION2-VALUEPART1.
*    APPEND LS_EXTENSION2 TO LT_EXTENSION2.
*
*    LS_DOCUMENTHEADER  = GET_HEADER( ).
*    LS_CUSTOMERONETIME = GET_ONETIME_CUSTOMER( ).
*
*
*    CLEAR LV_DOC_NUMBER.
*
*    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
*      EXPORTING
*        DOCUMENTHEADER = LS_DOCUMENTHEADER
*        CUSTOMERCPD    = LS_CUSTOMERONETIME
*      IMPORTING
*        OBJ_KEY        = LV_DOC_NUMBER
*      TABLES
*        ACCOUNTPAYABLE = LT_ACCOUNTAP
*        ACCOUNTGL      = LT_ACCOUNTGL
*        CURRENCYAMOUNT = LT_CURRENCYAMOUNT
*        EXTENSION2     = LT_EXTENSION2
*        RETURN         = LT_RETURN.
**      ENDIF.
*
*    LOOP AT LT_RETURN INTO DATA(LS_RETURN).
*      LV_SUCCESS = ABAP_TRUE.
*      IF LS_RETURN-TYPE = 'E' OR LS_RETURN-TYPE = 'A'.
*        LV_SUCCESS = ABAP_FALSE.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*
*    IF LV_SUCCESS    EQ ABAP_TRUE AND
*       LV_DOC_NUMBER IS NOT INITIAL AND
*       LV_DOC_NUMBER NE '$'.
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*        EXPORTING
*          WAIT = 'X'.
*
*      GS_HEADER-DOC_CLEAR   = LV_DOC_NUMBER+0(10).
*      GS_HEADER-DOC_CLEAR_Y = LV_DOC_NUMBER+14(4).
*    ELSE.
*      LV_SUCCESS = ABAP_FALSE.
*      MESSAGE S000 WITH LS_RETURN-MESSAGE DISPLAY LIKE 'E'.
*      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*    ENDIF.

  ENDMETHOD.
  METHOD CLEAR_ADVANCE.
*    DATA : I_AUGLV   TYPE T041A-AUGLV,
*           I_TCODE   TYPE SY-TCODE,
*           I_SGFUNCT TYPE RFIPI-SGFUNCT,
*           I_NO_AUTH ,
*           I_XSIMU   TYPE CHAR1.
*
*    DATA : E_MSGID TYPE SY-MSGID,
*           E_MSGNO TYPE SY-MSGNO,
*           E_MSGTY TYPE SY-MSGTY,
*           E_MSGV1 TYPE SY-MSGV1,
*           E_MSGV2 TYPE SY-MSGV2,
*           E_MSGV3 TYPE SY-MSGV3,
*           E_MSGV4 TYPE SY-MSGV4,
*           E_SUBRC TYPE SY-SUBRC.
*
*    DATA : LT_BLNTAB  TYPE TABLE OF BLNTAB,
*           LT_FTCLEAR TYPE TABLE OF FTCLEAR,
*           LT_FTPOST  TYPE TABLE OF FTPOST,
*           LT_FTTAX   TYPE TABLE OF FTTAX.
*
*    DATA : LS_BLNTAB  TYPE BLNTAB,
*           LS_FTCLEAR TYPE FTCLEAR,
*           LS_FTPOST  TYPE FTPOST,
*           LS_FTTAX   TYPE FTTAX.
*
*    DATA : LV_DATE   TYPE C LENGTH 10.
*    DATA : LV_AMOUNT TYPE C LENGTH 25.
*
*    DATA : LV_SUM_DABIT  TYPE BSIK_VIEW-DMBTR.
*    DATA : LV_SUM_CREDIT TYPE BSIK_VIEW-DMBTR.
*    DATA : LV_SUM_PAID   TYPE BSIK_VIEW-DMBTR.
*
*    DATA : LV_MES_POS  TYPE NATXT.
*
*    DATA : LV_HKONT TYPE BSEG-HKONT.
*
*    SELECT SINGLE BSEG~DMBTR
*      FROM BSEG
*      INNER JOIN BKPF ON BSEG~BELNR EQ BKPF~BELNR AND
*                         BKPF~BLART EQ 'K1'
*      WHERE BSEG~BELNR EQ @GS_HEADER-DOC_ADVAN
*        AND BSEG~GJAHR EQ @GS_HEADER-DOC_ADVAN_Y
*        AND BSEG~BSCHL EQ '29'
*       INTO @DATA(LV_ADVANCE).
*    IF SY-SUBRC EQ 0.
*
*      IF GS_HEADER-DOC_CLEAR IS INITIAL.
*        RETURN.
*      ENDIF.
*
*      START_INTERFACE( ).
*      I_AUGLV   = 'AUSGZAHL'.
*      I_TCODE   = 'FB05'.
*      I_SGFUNCT = 'C'.
**    I_XSIMU   = ABAP_TRUE.
*
*      LS_FTCLEAR-AGKOA   = GC_CON-K.
*      LS_FTCLEAR-AGKON   = GS_RESULT-VENDOR.
*      LS_FTCLEAR-AGBUK   = GS_HEADER-COMPANY_CODE.
*      LS_FTCLEAR-XNOPS   = ABAP_TRUE.
*
*      LS_FTCLEAR-SELFD   = 'BELNR'.
*      CONCATENATE GS_HEADER-DOC_ADVAN GS_HEADER-DOC_ADVAN_Y INTO LS_FTCLEAR-SELVON.
*      CONCATENATE GS_HEADER-DOC_ADVAN GS_HEADER-DOC_ADVAN_Y INTO LS_FTCLEAR-SELBIS.
*      APPEND LS_FTCLEAR TO LT_FTCLEAR.
*
*      CONCATENATE GS_HEADER-DOC_AP GS_HEADER-DOC_AP_Y INTO LS_FTCLEAR-SELVON.
*      CONCATENATE GS_HEADER-DOC_AP GS_HEADER-DOC_AP_Y INTO LS_FTCLEAR-SELBIS.
*      APPEND LS_FTCLEAR TO LT_FTCLEAR.
*
*
**--------------------------------------------------------------------*
** Header
**--------------------------------------------------------------------*
*      CLEAR : LS_FTPOST.
*      LS_FTPOST-STYPE = 'K'.
*      LS_FTPOST-COUNT = '001'.
*      LS_FTPOST-FNAM  = 'BKPF-BUKRS'.
*      LS_FTPOST-FVAL  = GS_HEADER-COMPANY_CODE.
*      APPEND LS_FTPOST TO LT_FTPOST.
*
*      WRITE GS_HEADER-DOC_DATE  TO LV_DATE.
*      CLEAR : LS_FTPOST.
*      LS_FTPOST-STYPE = 'K'.
*      LS_FTPOST-COUNT = '001'.
*      LS_FTPOST-FNAM  = 'BKPF-BLDAT'.
*      LS_FTPOST-FVAL  = LV_DATE.
*      APPEND LS_FTPOST TO LT_FTPOST.
*
*      WRITE GS_HEADER-POST_DATE TO LV_DATE.
*      CLEAR : LS_FTPOST.
*      LS_FTPOST-STYPE = 'K'.
*      LS_FTPOST-COUNT = '001'.
*      LS_FTPOST-FNAM  = 'BKPF-BUDAT'.
*      LS_FTPOST-FVAL  = LV_DATE."p_budat.
*      APPEND LS_FTPOST TO LT_FTPOST.
*
*      CLEAR : LS_FTPOST.
*      LS_FTPOST-STYPE = 'K'.
*      LS_FTPOST-COUNT = '001'.
*      LS_FTPOST-FNAM  = 'BKPF-WAERS'.
*      LS_FTPOST-FVAL  = 'THB'.
*      APPEND LS_FTPOST TO LT_FTPOST.
*
*      CLEAR : LS_FTPOST.
*      LS_FTPOST-STYPE = 'K'.
*      LS_FTPOST-COUNT = '001'.
*      LS_FTPOST-FNAM  = 'BKPF-BLART'.
*      LS_FTPOST-FVAL  = GS_HEADER-TYPE.
*      APPEND LS_FTPOST TO LT_FTPOST.
*
*      CLEAR : LS_FTPOST.
*      LS_FTPOST-STYPE = 'K'.
*      LS_FTPOST-COUNT = '001'.
*      LS_FTPOST-FNAM  = 'BKPF-BRNCH'.
*      LS_FTPOST-FVAL  = '0000'.
*      APPEND LS_FTPOST TO LT_FTPOST.
*
*      SORT LT_FTCLEAR.
*      DELETE ADJACENT DUPLICATES FROM LT_FTCLEAR COMPARING ALL FIELDS.
**--------------------------------------------------------------------*
**Detail
**--------------------------------------------------------------------*
*      LV_SUM_PAID = LV_ADVANCE - I_DATA.
*      IF LV_SUM_PAID NE 0.
*        CLEAR : LS_FTPOST.
*        LS_FTPOST-STYPE = 'P'.
*        LS_FTPOST-COUNT = '002'.
*        LS_FTPOST-FNAM  = 'RF05A-NEWBS'.
*        IF LV_SUM_PAID GT 0.
*          LS_FTPOST-FVAL  = '40'.
*        ELSEIF LV_SUM_PAID LT 0.
*          LS_FTPOST-FVAL  = '50'.
*        ENDIF.
*
*        APPEND LS_FTPOST TO LT_FTPOST.
*
*        CLEAR : LS_FTPOST.
*        LS_FTPOST-STYPE = 'P'.
*        LS_FTPOST-COUNT = '002'.
*        LS_FTPOST-FNAM  = 'RF05A-NEWKO'.
*        IF LV_SUM_PAID GT 0.
*          LV_HKONT = GS_HEADER-CLRDB.
*        ELSE.
*          LV_HKONT = GS_HEADER-CLRCR.
*        ENDIF.
*        LS_FTPOST-FVAL  = LV_HKONT.
*        APPEND LS_FTPOST TO LT_FTPOST.
*
*        IF LV_SUM_PAID LT 0.
*          LV_SUM_PAID = LV_SUM_PAID * -1.
*        ENDIF.
*
*        LV_AMOUNT = LV_SUM_PAID.
*        REPLACE ALL OCCURRENCES OF PCRE '[ ]+' IN LV_AMOUNT WITH ''.
*        CLEAR : LS_FTPOST.
*        LS_FTPOST-STYPE = 'P'.
*        LS_FTPOST-COUNT = '002'.
*        LS_FTPOST-FNAM  = 'BSEG-WRBTR'.
*        LS_FTPOST-FVAL  = LV_AMOUNT.
*        APPEND LS_FTPOST TO LT_FTPOST.
*      ENDIF.
*
*      CALL FUNCTION 'POSTING_INTERFACE_CLEARING'
*        EXPORTING
*          I_AUGLV                    = I_AUGLV
*          I_TCODE                    = I_TCODE
*          I_SGFUNCT                  = I_SGFUNCT
**         I_NO_AUTH                  = I_NO_AUTH
*          I_XSIMU                    = I_XSIMU
*        IMPORTING
*          E_MSGID                    = E_MSGID
*          E_MSGNO                    = E_MSGNO
*          E_MSGTY                    = E_MSGTY
*          E_MSGV1                    = E_MSGV1
*          E_MSGV2                    = E_MSGV2
*          E_MSGV3                    = E_MSGV3
*          E_MSGV4                    = E_MSGV4
*          E_SUBRC                    = E_SUBRC
*        TABLES
*          T_BLNTAB                   = LT_BLNTAB
*          T_FTCLEAR                  = LT_FTCLEAR
*          T_FTPOST                   = LT_FTPOST
*          T_FTTAX                    = LT_FTTAX
*        EXCEPTIONS
*          CLEARING_PROCEDURE_INVALID = 1
*          CLEARING_PROCEDURE_MISSING = 2
*          TABLE_T041A_EMPTY          = 3
*          TRANSACTION_CODE_INVALID   = 4
*          AMOUNT_FORMAT_ERROR        = 5
*          TOO_MANY_LINE_ITEMS        = 6
*          COMPANY_CODE_INVALID       = 7
*          SCREEN_NOT_FOUND           = 8
*          NO_AUTHORIZATION           = 9
*          OTHERS                     = 10.
*      IF SY-SUBRC <> 0.
** Implement suitable error handling here
*      ENDIF.
*
*      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*        EXPORTING
*          MSGID               = E_MSGID
*          MSGNR               = E_MSGNO
*          MSGV1               = E_MSGV1
*          MSGV2               = E_MSGV2
*          MSGV3               = E_MSGV3
*          MSGV4               = E_MSGV4
*        IMPORTING
*          MESSAGE_TEXT_OUTPUT = LV_MES_POS.
*
*      END_INTERFACE( ).
*      IF E_MSGTY EQ 'E'.
*        MESSAGE S998 WITH TEXT-102 DISPLAY LIKE 'E'.
*      ELSE.
*        GS_HEADER-DOC_CLEAR = E_MSGV1.
*        SELECT SINGLE GJAHR
*        FROM BKPF
*        INTO GS_HEADER-DOC_CLEAR_Y
*        WHERE BELNR EQ GS_HEADER-DOC_CLEAR
*          AND BUDAT EQ GS_HEADER-POST_DATE.
*      ENDIF.
*    ELSE.
*      MESSAGE S998 WITH TEXT-104 DISPLAY LIKE 'E'.
*    ENDIF.

    DATA: LT_ACCOUNTGL       TYPE TABLE OF BAPIACGL09,
          LT_CURRENCY        TYPE TABLE OF BAPIACCR09,
          LS_ACCOUNTGL       TYPE BAPIACGL09,
          LT_RETURN          TYPE TABLE OF BAPIRET2,
          LV_DOC_NUMBER      TYPE BAPIACHE09-OBJ_KEY,
          LV_SUCCESS         TYPE ABAP_BOOL VALUE ABAP_TRUE,
          LS_CURRENCYAMOUNT  TYPE  BAPIACCR09,
          LS_EXTENSION2      TYPE BAPIPAREX,
          LT_CURRENCYAMOUNT  TYPE TABLE OF BAPIACCR09,
          LT_EXTENSION2      TYPE TABLE OF BAPIPAREX,
          LS_DOCUMENTHEADER  TYPE BAPIACHE09,
          LT_ACCOUNTAP       TYPE TABLE OF BAPIACAP09,
          LS_ACCOUNTAP       TYPE BAPIACAP09,
          LS_CUSTOMERONETIME TYPE BAPIACPA09.

    DATA : LV_GL_LINE TYPE I.

    DATA : LV_AMOUNT LIKE GS_RESULT-HSL_P.

    DATA : LV_SUM_DABIT  TYPE BSIK_VIEW-DMBTR.
    DATA : LV_SUM_CREDIT TYPE BSIK_VIEW-DMBTR.
    DATA : LV_SUM_PAID   TYPE BSIK_VIEW-DMBTR.

    DATA : LV_D_C_GL TYPE C LENGTH 2.
    DATA : LV_D_C_VD TYPE C LENGTH 2.

    SELECT SINGLE BSEG~DMBTR,
                  BSEG~PRCTR
      FROM BSEG
      INNER JOIN BKPF ON BSEG~BELNR EQ BKPF~BELNR AND
                         BKPF~BLART EQ 'K1'
      WHERE BSEG~BELNR EQ @GS_HEADER-DOC_ADVAN
        AND BSEG~GJAHR EQ @GS_HEADER-DOC_ADVAN_Y
        AND BSEG~BSCHL EQ '29'
       INTO @DATA(LS_ADVANCE).

    LV_SUM_PAID = LS_ADVANCE-DMBTR - I_DATA.

    IF LV_SUM_PAID EQ 0.
      GS_HEADER-DOC_CLEAR = 'NODIF'.
    ELSE.

      ADD 1 TO LV_GL_LINE.

      LV_AMOUNT = ABS( LV_SUM_PAID ).
      IF LV_SUM_PAID GT 0.
        LV_D_C_VD = GC_CON-29.
      ELSE.
        LV_D_C_VD = GC_CON-39.
        LV_AMOUNT = LV_AMOUNT * -1.
      ENDIF.

      CLEAR LS_ACCOUNTAP.
      LS_ACCOUNTAP-ITEMNO_ACC = LV_GL_LINE.
      LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
      LS_ACCOUNTAP-VENDOR_NO  = GS_RESULT-VENDOR.
      LS_ACCOUNTAP-ITEM_TEXT  = GS_RESULT-ITEM_TEXT.
      LS_ACCOUNTAP-COMP_CODE  = GS_HEADER-COMPANY_CODE.
      LS_ACCOUNTAP-PROFIT_CTR = LS_ADVANCE-PRCTR.
      APPEND LS_ACCOUNTAP TO LT_ACCOUNTAP.

      CLEAR LS_CURRENCYAMOUNT.
      LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
      LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
      LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_AMOUNT.
      APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTAP-ITEMNO_ACC
                  LV_D_C_VD
                  GC_CON-BRNCH
                  GC_CON-BUPLA
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.

      ADD 1 TO LV_GL_LINE.
      CLEAR LS_ACCOUNTGL.
      IF GS_RESULT-MAT_PSPNR IS NOT INITIAL.
        LS_ACCOUNTGL-WBS_ELEMENT = GS_RESULT-MAT_PSPNR.
      ENDIF.

      LS_ACCOUNTGL-ITEMNO_ACC  = LV_GL_LINE.
      IF LV_SUM_PAID GT 0.
        LS_ACCOUNTGL-GL_ACCOUNT  = GS_HEADER-CLRCR.
        LV_D_C_GL                = GC_CON-50.
      ELSE.
        LS_ACCOUNTGL-GL_ACCOUNT  = GS_HEADER-CLRDB.
        LV_D_C_GL                = GC_CON-40.
      ENDIF.

      LS_ACCOUNTGL-GL_ACCOUNT = |{ LS_ACCOUNTGL-GL_ACCOUNT ALPHA = IN }|.
      LS_ACCOUNTGL-COMP_CODE   = GS_HEADER-COMPANY_CODE.

      LS_ACCOUNTGL-PROFIT_CTR = LS_ADVANCE-PRCTR.
      LS_ACCOUNTGL-PROFIT_CTR = |{ LS_ACCOUNTGL-PROFIT_CTR ALPHA = IN }|.
      LS_ACCOUNTGL-COSTCENTER = |{ LS_ACCOUNTGL-COSTCENTER ALPHA = IN }|.
      LS_ACCOUNTGL-ITEM_TEXT  = 'Clear Advance'.
      APPEND LS_ACCOUNTGL TO LT_ACCOUNTGL.

      CLEAR LS_CURRENCYAMOUNT.
      LS_CURRENCYAMOUNT-ITEMNO_ACC  = LV_GL_LINE.
      LS_CURRENCYAMOUNT-CURRENCY    = GS_HEADER-CURRENT.
      LS_CURRENCYAMOUNT-EXCH_RATE   = GS_HEADER-RATE .
      LS_CURRENCYAMOUNT-AMT_DOCCUR  = LV_AMOUNT * -1.

      APPEND LS_CURRENCYAMOUNT TO LT_CURRENCYAMOUNT.

      CLEAR LS_EXTENSION2.
      LS_EXTENSION2-STRUCTURE = GC_ADDITIONAL_FILED.
      CONCATENATE LS_ACCOUNTGL-ITEMNO_ACC
                  LV_D_C_GL
                  GC_CON-BRNCH
                  GC_CON-BUPLA
                  SPACE
             INTO LS_EXTENSION2-VALUEPART1.
      APPEND LS_EXTENSION2 TO LT_EXTENSION2.
      CLEAR GS_RESULT.

      LS_DOCUMENTHEADER  = GET_HEADER( I_DATA  = GS_HEADER-REFERENCE
                                       I_DOCDT = GS_HEADER-DOC_DATE ).

      CLEAR LV_DOC_NUMBER.

      CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
        EXPORTING
          DOCUMENTHEADER = LS_DOCUMENTHEADER
          CUSTOMERCPD    = LS_CUSTOMERONETIME
        IMPORTING
          OBJ_KEY        = LV_DOC_NUMBER
        TABLES
          ACCOUNTPAYABLE = LT_ACCOUNTAP
          ACCOUNTGL      = LT_ACCOUNTGL
          CURRENCYAMOUNT = LT_CURRENCYAMOUNT
          EXTENSION2     = LT_EXTENSION2
          RETURN         = LT_RETURN.
*      ENDIF.

      LOOP AT LT_RETURN INTO DATA(LS_RETURN).
        LV_SUCCESS = ABAP_TRUE.
        IF LS_RETURN-TYPE = 'E' OR LS_RETURN-TYPE = 'A'.
          LV_SUCCESS = ABAP_FALSE.
          EXIT.
        ENDIF.
      ENDLOOP.

      IF LV_SUCCESS    EQ ABAP_TRUE AND
         LV_DOC_NUMBER IS NOT INITIAL AND
         LV_DOC_NUMBER NE '$'.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'.

        GS_HEADER-DOC_CLEAR   = LV_DOC_NUMBER+0(10).
        GS_HEADER-DOC_CLEAR_Y = LV_DOC_NUMBER+14(4).
      ELSE.
        LV_SUCCESS = ABAP_FALSE.
        MESSAGE S000 WITH LS_RETURN-MESSAGE DISPLAY LIKE 'E'.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD VALIDATON.

    IF GS_HEADER-DOC_DATE      IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-DOC_DATE'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-POST_DATE     IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-POST_DATE'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-TYPE          IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-TYPE'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-TYPE_C          IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-TYPE_C'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-COMPANY_CODE  IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-COMPANY_CODE'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-CURRENT       IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-CURRENT'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-SALES_VENDC   IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-SALES_VENDC'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-DOC_ADVAN     IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-DOC_ADVAN'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-DOC_ADVAN_Y   IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-DOC_ADVAN_Y'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-CLRDB         IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-CLRDB'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_HEADER-CLRCR         IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_HEADER-CLRCR'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

*    IF GS_RESULT-DOC_DATE        IS INITIAL.
*      R = ABAP_TRUE.
*      GV_CURSOR = 'GS_RESULT-DOC_DATE'.
*      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
*    ENDIF.

  ENDMETHOD.
  METHOD VALIDATON_DETAIL.
    IF GS_RESULT-GROUP         IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_RESULT-GROUP'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

    IF GS_RESULT-DOC_DATE         IS INITIAL.
      R = ABAP_TRUE.
      GV_CURSOR = 'GS_RESULT-DOC_DATE'.
      MESSAGE S998 WITH TEXT-101 DISPLAY LIKE 'E'.
    ENDIF.

  ENDMETHOD.
  METHOD START_INTERFACE.
    DATA : I_FUNCTION	TYPE RFIPI-FUNCT,
           I_MODE     TYPE RFPDO-ALLGAZMD,
           I_UPDATE   TYPE RFPDO-ALLGVBMD.

    I_FUNCTION = 'C'.
    I_MODE     = 'N'.
    I_UPDATE   = 'S'.

    CALL FUNCTION 'POSTING_INTERFACE_START'
      EXPORTING
        I_CLIENT           = SY-MANDT
        I_FUNCTION         = I_FUNCTION
        I_MODE             = I_MODE
        I_UPDATE           = I_UPDATE
      EXCEPTIONS
        CLIENT_INCORRECT   = 1
        FUNCTION_INVALID   = 2
        GROUP_NAME_MISSING = 3
        MODE_INVALID       = 4
        UPDATE_INVALID     = 5
        OTHERS             = 6.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD END_INTERFACE.
    CALL FUNCTION 'POSTING_INTERFACE_END'
      EXPORTING
        I_BDCIMMED              = 'X'
      EXCEPTIONS
        SESSION_NOT_PROCESSABLE = 1
        OTHERS                  = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDMETHOD.
  METHOD HIDE_SHOW_HEAD.

    IF GV_HEAD = 'SHOW'.
      GV_HEAD = 'HIDE'.
    ELSE.
      GV_HEAD = 'SHOW'.
    ENDIF.

  ENDMETHOD.
  METHOD HIDE_SHOW_DETIAL.
    IF GV_DETIAL = 'SHOW'.
      GV_DETIAL = 'HIDE'.
    ELSE.
      GV_DETIAL = 'SHOW'.
    ENDIF.
  ENDMETHOD.
  METHOD DELETE_ALL_ITEM.
    CLEAR : GT_RESULT,GT_RESULT2.
  ENDMETHOD.
ENDCLASS.
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS DEFINITION.
*Handling double click
  PUBLIC SECTION.
    METHODS:
    HANDLE_DOUBLE_CLICK
    FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS. "lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.

  ENDMETHOD. "handle_double_click
ENDCLASS. "lcl_event_receiver IMPLEMENTATION
