class ZCL_ZSDSFI_BI_REPORT_DPC_EXT definition
  public
  inheriting from ZCL_ZSDSFI_BI_REPORT_DPC
  create public .

public section.
protected section.

  methods GPREPORTSET_GET_ENTITYSET
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_ZSDSFI_BI_REPORT_DPC_EXT IMPLEMENTATION.


  METHOD GPREPORTSET_GET_ENTITYSET.
    DATA : LS_FILTER LIKE LINE OF IT_FILTER_SELECT_OPTIONS.

    DATA : LR_BUDAT  TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LR_RLDNR  TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LR_RBUKRS TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LR_GJAHR  TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LR_BELNR  TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LR_POSID  TYPE /IWBEP/T_COD_SELECT_OPTIONS.

    DATA : LS_RESULT LIKE LINE OF ET_ENTITYSET.

    DATA : LV_PRODH LIKE LS_RESULT-PRODH.

    DATA : BEGIN OF LS_COPA,
             AUFNR LIKE LS_RESULT-AUFNR,
             PRODH LIKE LS_RESULT-PRODH,
           END OF LS_COPA.
    DATA : LT_COPA LIKE HASHED TABLE OF LS_COPA WITH UNIQUE KEY AUFNR PRODH.

    DATA : BEGIN OF LS_PERNR,
             PERNR TYPE PA0002-PERNR,
           END OF LS_PERNR.
    DATA : LT_PERNR LIKE HASHED TABLE OF LS_PERNR WITH UNIQUE KEY PERNR.

    DATA : BEGIN OF LS_VBELN,
             VBELN TYPE VBRK-VBELN,
           END OF LS_VBELN.
    DATA : LT_VBELN LIKE HASHED TABLE OF LS_VBELN WITH UNIQUE KEY VBELN.

    DATA : LCL_SD TYPE REF TO ZCL_SDSSD_SALES_ANALYSIS.

    DATA : LV_AUTO TYPE C.

    DATA : LS_SELECT_OPTIONS LIKE LINE OF LS_FILTER-SELECT_OPTIONS.

    DATA : LV_DATE_LOW  TYPE STRING,
           LV_DATE_HIGH TYPE STRING.

    IF LCL_SD IS NOT BOUND.
      CREATE OBJECT LCL_SD.
    ENDIF.

    CONSTANTS : BEGIN OF LC_CON,
                  POSTD TYPE C LENGTH 5 VALUE 'BUDAT',
                END OF LC_CON.

*    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
*    WITH KEY PROPERTY = LC_CON-POSTD.
*    IF SY-SUBRC EQ 0.
*      LR_BUDAT = LS_FILTER-SELECT_OPTIONS.
*    ELSE.
*      CLEAR : LR_BUDAT.
*    ENDIF.
    CLEAR : LR_BUDAT.
    LOOP AT IT_FILTER_SELECT_OPTIONS INTO LS_FILTER.
      READ TABLE LS_FILTER-SELECT_OPTIONS INTO LS_SELECT_OPTIONS INDEX 1.
      IF LS_FILTER-PROPERTY EQ 'DATELOW'.
        LV_DATE_LOW = LS_SELECT_OPTIONS-LOW.
      ELSEIF LS_FILTER-PROPERTY EQ 'DATEHIGH'.
        LV_DATE_HIGH = LS_SELECT_OPTIONS-LOW.
      ENDIF.
    ENDLOOP.

    IF LV_DATE_HIGH IS INITIAL.
      LV_DATE_HIGH = LV_DATE_LOW.
    ENDIF.

    LR_BUDAT =  VALUE #( ( SIGN  = 'I' OPTION = 'BT' LOW = LV_DATE_LOW HIGH = LV_DATE_HIGH ) ).
    LR_RLDNR =  VALUE #( ( SIGN  = 'I' OPTION = 'EQ' LOW = '0L' ) ).

    IF LV_DATE_LOW IS INITIAL.
      CLEAR : LR_BUDAT[].
    ENDIF.

    DATA : LCL_REPORT TYPE REF TO ZCL_SDSFI_REPORT.

    IF LCL_REPORT IS NOT BOUND.
      CREATE OBJECT LCL_REPORT.
    ENDIF.

    DATA(LT_RESULT) = LCL_REPORT->GP_REPORT( IR_RLDNR  = LR_RLDNR[]
                                             IR_RBUKRS = LR_RBUKRS[]
                                             IR_GJAHR  = LR_GJAHR[]
                                             IR_BELNR  = LR_BELNR[]
                                             IR_BUDAT  = LR_BUDAT[]
                                             IR_POSID  = LR_POSID[]
     ).

    ET_ENTITYSET = CORRESPONDING #( LT_RESULT ).

*    APPEND LINES OF CORRESPONDING LT_RESULT into ET_ENTITYSET

*    IF  'AUTO' IN LR_BUDAT[].
*      CLEAR : LR_BUDAT[].
*      LV_AUTO = ABAP_TRUE.
*      SELECT SINGLE BUDAT
*        FROM ZSDSFIC033
*        INTO @DATA(LV_BUDAT).
*      IF SY-SUBRC EQ 0.
*        LR_BUDAT =  VALUE #( ( SIGN  = 'I' OPTION = 'BT' LOW = LV_BUDAT HIGH = SY-DATUM ) ).
*      ELSE.
*        CLEAR : LR_BUDAT.
*      ENDIF.
*    ENDIF.





*    SELECT *
*      FROM ZSDSVC_GET_SALES_REPORT
*      WHERE BUDAT  IN @LR_BUDAT[]
*      INTO TABLE @DATA(LT_DATA).
*
*    IF LCL_SD IS NOT BOUND.
*      CREATE OBJECT LCL_SD.
*    ENDIF.
*
*    SORT  LT_DATA BY RLDNR
*                     RBUKRS
*                     GJAHR
*                     BELNR
*                     DOCLN.
*
*    DELETE ADJACENT DUPLICATES FROM LT_DATA COMPARING RLDNR
*                                                      RBUKRS
*                                                      GJAHR
*                                                      BELNR
*                                                      DOCLN.
*
*    LT_COPA = CORRESPONDING #( LT_DATA DISCARDING DUPLICATES ).
*    DELETE LT_COPA WHERE PRODH IS INITIAL.
*
*    LT_VBELN = CORRESPONDING #( LT_DATA DISCARDING DUPLICATES ).
*
*    IF LT_VBELN IS NOT INITIAL.
*      SELECT FROM VBPA
*          FIELDS VBELN,
*                 PARVW,
*                 PERNR
*          FOR ALL ENTRIES IN @LT_VBELN
*           WHERE VBELN = @LT_VBELN-VBELN
*             AND PARVW IN ( 'VE', 'ZM' )
*            INTO TABLE @DATA(LT_PERS_C).
*
*      IF SY-SUBRC IS INITIAL.
*        SORT LT_PERS_C BY VBELN PARVW.
*      ENDIF.
*    ENDIF.
*
*    LT_PERNR = CORRESPONDING #( LT_DATA DISCARDING DUPLICATES ).
*    LCL_SD->GET_PERSON_NAME(
*      EXPORTING
*        IT_PERNR  = LT_PERNR
*      IMPORTING
*        ET_PA0002 = DATA(LT_PERS) ).
*
*    SORT LT_DATA BY PS_POSID DESCENDING PRODH DESCENDING RACCT DESCENDING.
*
*    LOOP AT LT_DATA ASSIGNING FIELD-SYMBOL(<LFS_RESULT>).
*      IF LV_BUDAT LE <LFS_RESULT>-BUDAT.
*        LV_BUDAT = <LFS_RESULT>-BUDAT.
*      ENDIF.
*
*      AT NEW PS_POSID.
*        IF <LFS_RESULT>-PRODH IS NOT INITIAL.
*          LV_PRODH = <LFS_RESULT>-PRODH.
*        ELSE.
*          LOOP AT LT_DATA INTO DATA(LS_TMP) WHERE PS_POSID EQ <LFS_RESULT>-PS_POSID AND
*                                                  PRODH    IS NOT INITIAL.
*            LV_PRODH = LS_TMP-PRODH.
*            EXIT.
*          ENDLOOP.
*        ENDIF.
*      ENDAT.
*
*      IF <LFS_RESULT>-PS_POSID IS NOT INITIAL AND
*         <LFS_RESULT>-PRODH IS INITIAL.
*        <LFS_RESULT>-PRODH = LV_PRODH.
*      ENDIF.
*
*      IF <LFS_RESULT>-BLART+0(1) NE 'R'.
*        <LFS_RESULT>-FKART = <LFS_RESULT>-FKART_V.
*        <LFS_RESULT>-VKORG = <LFS_RESULT>-VKORG_V.
*        <LFS_RESULT>-VTWEG = <LFS_RESULT>-VTWEG_V.
*        <LFS_RESULT>-VBELN = <LFS_RESULT>-VBELN_V.
*        <LFS_RESULT>-VKGRP = <LFS_RESULT>-VKGRP_V.
*        <LFS_RESULT>-VKBUR = <LFS_RESULT>-VKBUR_V.
*        <LFS_RESULT>-SONO  = <LFS_RESULT>-SONO_V.
*        <LFS_RESULT>-DONO  = <LFS_RESULT>-DONO_V.
*        <LFS_RESULT>-GRPDS = <LFS_RESULT>-GRPDS_M.
*        <LFS_RESULT>-OFFDS = <LFS_RESULT>-OFFDS_M.
*        <LFS_RESULT>-CHADS = <LFS_RESULT>-CHADS_M.
*        <LFS_RESULT>-ORGDS = <LFS_RESULT>-ORGDS_M.
*        <LFS_RESULT>-DIVIS = <LFS_RESULT>-DIVIS_M.
*        <LFS_RESULT>-APPLI = <LFS_RESULT>-APPLI_M.
*        <LFS_RESULT>-PSTYV     = <LFS_RESULT>-PSTYV_V.
*        <LFS_RESULT>-MATNR_BOM = <LFS_RESULT>-MATNR_BOM_V.
*      ELSE.
*        IF <LFS_RESULT>-VBELN_V IS NOT INITIAL.
*          <LFS_RESULT>-FKART = <LFS_RESULT>-FKART_V.
*          <LFS_RESULT>-VKORG = <LFS_RESULT>-VKORG_V.
*          <LFS_RESULT>-VTWEG = <LFS_RESULT>-VTWEG_V.
*          <LFS_RESULT>-VBELN = <LFS_RESULT>-VBELN_V.
*          <LFS_RESULT>-VKGRP = <LFS_RESULT>-VKGRP_V.
*          <LFS_RESULT>-VKBUR = <LFS_RESULT>-VKBUR_V.
*          <LFS_RESULT>-SONO  = <LFS_RESULT>-SONO_V.
*          <LFS_RESULT>-DONO  = <LFS_RESULT>-DONO_V.
*          <LFS_RESULT>-GRPDS = <LFS_RESULT>-GRPDS_M.
*          <LFS_RESULT>-OFFDS = <LFS_RESULT>-OFFDS_M.
*          <LFS_RESULT>-CHADS = <LFS_RESULT>-CHADS_M.
*          <LFS_RESULT>-ORGDS = <LFS_RESULT>-ORGDS_M.
*          <LFS_RESULT>-DIVIS = <LFS_RESULT>-DIVIS_M.
*          <LFS_RESULT>-APPLI = <LFS_RESULT>-APPLI_M.
*          <LFS_RESULT>-PSTYV     = <LFS_RESULT>-PSTYV_V.
*          <LFS_RESULT>-MATNR_BOM = <LFS_RESULT>-MATNR_BOM_V.
*        ENDIF.
*      ENDIF.
*
*      IF <LFS_RESULT>-PRODH IS INITIAL AND
*         <LFS_RESULT>-AUFNR IS NOT INITIAL.
*        READ TABLE lt_COPA INTO LS_COPA
*        WITH KEY AUFNR = <LFS_RESULT>-AUFNR.
*        IF SY-SUBRC EQ 0.
*          <LFS_RESULT>-PRODH = LS_COPA-PRODH.
*        ENDIF.
*      ENDIF.
*
*      IF <LFS_RESULT>-PERNR IS INITIAL.
*        READ TABLE LT_PERS_C ASSIGNING FIELD-SYMBOL(<L_PERS_C>)
*          WITH KEY VBELN = <LFS_RESULT>-VBELN
*             PARVW = 'VE'
*             BINARY SEARCH.
*        IF SY-SUBRC IS INITIAL.
*          <LFS_RESULT>-PERNR  = <L_PERS_C>-PERNR.
*        ENDIF.
*      ENDIF.
*
*      MOVE-CORRESPONDING <LFS_RESULT> TO LS_RESULT.
*
*      IF <LFS_RESULT>-RACCT+0(2) NE '41'.
*        LS_RESULT-SOQTY = <LFS_RESULT>-MSL.
*      ENDIF.
*
*      IF <LFS_RESULT>-PRODH IS NOT INITIAL.
*        LS_RESULT-PH1 =  <LFS_RESULT>-PRODH+0(5).
*        LS_RESULT-PH2 =  <LFS_RESULT>-PRODH+5(5).
*        LS_RESULT-PH3 =  <LFS_RESULT>-PRODH+10(8).
*      ENDIF.
*
*      READ TABLE LT_PERS ASSIGNING FIELD-SYMBOL(<L_PERS>)
*      WITH KEY PERNR = <LFS_RESULT>-PERNR.
*      IF SY-SUBRC IS INITIAL.
*        LS_RESULT-SALEN = <L_PERS>-NAME.
*      ENDIF.
*
*    APPEND LS_RESULT TO ET_ENTITYSET.
*    ENDLOOP.

*    IF LV_AUTO EQ ABAP_TRUE.
*      DATA : LS_ZSDSFIC033 TYPE ZSDSFIC033.
*      LS_ZSDSFIC033-BUDAT = LV_BUDAT.
*      MODIFY ZSDSFIC033 FROM LS_ZSDSFIC033.
*      COMMIT WORK AND WAIT.
*    ENDIF.

  ENDMETHOD.
ENDCLASS.
