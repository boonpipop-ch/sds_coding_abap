class ZCL_SDSFI_BP definition
  public
  final
  create public .

public section.

  data:
    GT_DATA TYPE TABLE OF ZSDSFIS119 WITH EMPTY KEY .

  methods UPDATE_CREDIT
    importing
      !I_BP_NO type BU_PARTNER
      value(I_TEST) type BOOLE_D optional
      !I_CREDIT_LIMIT type UKM_CREDIT_LIMIT
      !I_LIMIT_VALID_DATE type UKM_VALID_DATE
      value(I_PAY_TERM) type DZTERM optional
    exporting
      !E_MESSAGE type CHAR255
    returning
      value(E_MESTYPE) type FLAG .
  methods UPDATE_TMP_PROJECT
    importing
      !IT_DATA like GT_DATA
    exporting
      !E_MESTYPE type BOOLE_D
      !E_MESSAGE type CHAR255 .
  methods CREATE_PA30
    importing
      !IS_INFOTYPE type ZSDSFIS132
    returning
      value(RS_MESSAGE) type ZSDSFIS134 .
  methods VALIDATE_TMP_PROJECT
    importing
      !IT_DATA like GT_DATA
    exporting
      !E_MESTYPE type BOOLE_D
      !E_MESSAGE type CHAR255 .
protected section.
private section.

  constants:
    BEGIN OF GC_CON,
                I           TYPE C LENGTH 1 VALUE 'I',
                U           TYPE C LENGTH 1 VALUE 'U',
                S           TYPE C LENGTH 1 VALUE 'S',
                E           TYPE C LENGTH 1 VALUE 'E',
                COMC        TYPE C LENGTH 4 VALUE '1000',
                CUSTOMER    TYPE BU_ROLE VALUE 'FLCU01',
                CUSTOMER_FI TYPE BU_ROLE VALUE 'FLCU00',
                VENDOR      TYPE BU_ROLE VALUE 'FLVN01',
                VENDOR_FI   TYPE BU_ROLE VALUE 'FLVN00',
                CREDIT      TYPE BU_ROLE VALUE 'UKM000',
                CONTACT_P   TYPE BU_ROLE VALUE 'CHM003',
              END OF GC_CON .
ENDCLASS.



CLASS ZCL_SDSFI_BP IMPLEMENTATION.


  METHOD UPDATE_CREDIT.
    DATA : LT_BP TYPE CVIS_EI_EXTERN_T,
           LS_BP TYPE CVIS_EI_EXTERN.

    DATA : LT_CRE_SEGMENT TYPE UKMT_EI_BP_CMS_SGM,
           LT_CUS_COMPANY TYPE CMDS_EI_COMPANY_T,
           LT_CUS_SALES   TYPE CMDS_EI_SALES_T.

    DATA : LV_BP_GUID TYPE BU_PARTNER_GUID.

    DATA : LT_ROLE TYPE BUS_EI_BUPA_ROLES_T.

    LS_BP-PARTNER-HEADER-OBJECT_TASK                  = GC_CON-U.
    LS_BP-PARTNER-HEADER-OBJECT_INSTANCE-BPARTNERGUID = LV_BP_GUID = LCL_DATA=>GET_PARTNER_GUID( I_BP_NO ).
    LS_BP-PARTNER-HEADER-OBJECT_INSTANCE-BPARTNER     = |{ I_BP_NO ALPHA = IN }|.

    APPEND INITIAL LINE TO LT_CRE_SEGMENT ASSIGNING FIELD-SYMBOL(<LFS_CRE_SEGMENT>).
    <LFS_CRE_SEGMENT>-TASK                      = GC_CON-U.
    <LFS_CRE_SEGMENT>-DATA_KEY-PARTNER          = |{ I_BP_NO ALPHA = IN }|.
    <LFS_CRE_SEGMENT>-DATA_KEY-CREDIT_SGMNT     = GC_CON-COMC.

    <LFS_CRE_SEGMENT>-DATA-CREDIT_LIMIT         = I_CREDIT_LIMIT.
*    <LFS_CRE_SEGMENT>-DATA-LIMIT_VALID_DATE     = I_LIMIT_VALID_DATE.

    <LFS_CRE_SEGMENT>-DATAX-CREDIT_LIMIT        = ABAP_TRUE.
*    <LFS_CRE_SEGMENT>-DATAX-LIMIT_VALID_DATE    = ABAP_TRUE.

    LS_BP-PARTNER-UKMBP_DATA-SEGMENTS-SEGMENTS = LT_CRE_SEGMENT[].

    IF I_PAY_TERM IS NOT INITIAL.
      APPEND INITIAL LINE TO LT_CUS_COMPANY ASSIGNING FIELD-SYMBOL(<LFS_CUS_COMPANY>).
      <LFS_CUS_COMPANY>-TASK              = GC_CON-U.
      <LFS_CUS_COMPANY>-DATA_KEY-BUKRS    = GC_CON-COMC.

      <LFS_CUS_COMPANY>-DATA-ZTERM        = I_PAY_TERM.
      <LFS_CUS_COMPANY>-DATAX-ZTERM       = ABAP_TRUE.

      LS_BP-CUSTOMER-COMPANY_DATA-COMPANY = LT_CUS_COMPANY.
    ENDIF.

    SELECT VKORG, VTWEG, SPART FROM KNVV INTO TABLE @DATA(LT_KNVV) WHERE KUNNR = @LS_BP-PARTNER-HEADER-OBJECT_INSTANCE-BPARTNER.
    LOOP AT LT_KNVV INTO DATA(LS_KNVV).

      APPEND INITIAL LINE TO LT_CUS_SALES ASSIGNING FIELD-SYMBOL(<LFS_CUS_SALES>).
      <LFS_CUS_SALES>-TASK                = GC_CON-U.
      <LFS_CUS_SALES>-DATA_KEY-VKORG      = LS_KNVV-VKORG.
      <LFS_CUS_SALES>-DATA_KEY-VTWEG      = LS_KNVV-VTWEG.
      <LFS_CUS_SALES>-DATA_KEY-SPART      = LS_KNVV-SPART.


      <LFS_CUS_SALES>-DATA-ZTERM          = I_PAY_TERM.    "Terms of Payment Key
      <LFS_CUS_SALES>-DATAX-ZTERM         = ABAP_TRUE.

    ENDLOOP.
    LS_BP-CUSTOMER-SALES_DATA-SALES       = LT_CUS_SALES[].

    E_MESTYPE = LCL_DATA=>CHECK_UPDATE_BP( EXPORTING IS_BP     = LS_BP
                                           IMPORTING E_MESSAGE = E_MESSAGE ).

    IF E_MESTYPE EQ GC_CON-S.
      APPEND LS_BP TO LT_BP.
      E_MESTYPE = LCL_DATA=>UPDATE_BP( EXPORTING IT_BP     = LT_BP
                                                 I_TEST    = ABAP_TRUE
                                       IMPORTING E_MESSAGE = E_MESSAGE ).

      IF E_MESTYPE EQ GC_CON-S AND
         I_TEST    EQ ABAP_FALSE.
        CLEAR : E_MESSAGE.
        E_MESTYPE = LCL_DATA=>UPDATE_BP( EXPORTING IT_BP     = LT_BP
                                                   I_TEST    = ABAP_FALSE
                                         IMPORTING E_MESSAGE = E_MESSAGE ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD UPDATE_TMP_PROJECT.

    DATA : LT_ZSDSFIT036 TYPE TABLE OF ZSDSFIT036 WITH EMPTY KEY,
           LS_ZSDSFIT036 TYPE ZSDSFIT036.

    DATA : LT_DATA_C LIKE IT_DATA.

    LT_DATA_C = IT_DATA.

    LOOP AT LT_DATA_C ASSIGNING FIELD-SYMBOL(<LFS_DATA>).
*      IF <LFS_DATA>-POSID IS NOT INITIAL.
*        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
*          EXPORTING
*            INPUT     = <LFS_DATA>-POSID
*          IMPORTING
*            OUTPUT    = <LFS_DATA>-WBS
*          EXCEPTIONS
*            NOT_FOUND = 1
*            OTHERS    = 2.
*      ENDIF.
      IF <LFS_DATA>-POSID IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_KONPD_INPUT'
          EXPORTING
            INPUT     = <LFS_DATA>-POSID
          IMPORTING
            OUTPUT    = <LFS_DATA>-WBS
          EXCEPTIONS
            NOT_FOUND = 1
            OTHERS    = 2.
      ENDIF.


    ENDLOOP.

    IF LT_DATA_C IS NOT INITIAL.
      SELECT B~KUNNR,
             B~PSPHI,
             B~SEQ,
             B~STARTDATE,
             B~ENDDATE,
             B~ZCRT_DATE,
             B~ZCRT_TIME,
             B~ZCRT_USER,
             B~ZCRT_PGM
        FROM @LT_DATA_C AS A
        INNER JOIN ZSDSFIT036 AS B ON A~KUNNR     EQ B~KUNNR     AND
                                      A~WBS       EQ B~PSPHI     "AND
*                                      A~STARTDATE EQ B~STARTDATE AND
*                                      A~ENDDATE   EQ B~ENDDATE   "AND
*                                 A~SEQ       EQ ZSDSFIT036~SEQ
*        WHERE B~SEQ EQ ( SELECT MAX( SEQ )
*                         FROM ZSDSFIT036
*                         WHERE ZSDSFIT036~KUNNR     EQ B~KUNNR
*                           AND ZSDSFIT036~POSID     EQ B~POSID
*                           AND ZSDSFIT036~STARTDATE EQ B~STARTDATE
*                           AND ZSDSFIT036~ENDDATE   EQ B~ENDDATE  )
        INTO TABLE @DATA(LT_CHECK).

      "Flag delete other records same customer and WBS
      IF LT_DATA_C[] IS NOT INITIAL.
        SELECT * FROM ZSDSFIT036 INTO TABLE @DATA(LT_ORECORD)
          FOR ALL ENTRIES IN @LT_DATA_C WHERE KUNNR = @LT_DATA_C-KUNNR AND
                                              PSPHI = @LT_DATA_C-WBS.
        IF SY-SUBRC = 0.
          "Close another recored (flag deleted)
          LOOP AT LT_ORECORD ASSIGNING FIELD-SYMBOL(<LFS_ORECORD>).
            <LFS_ORECORD>-ZDEL_FLG = ABAP_TRUE.
          ENDLOOP.
          MODIFY ZSDSFIT036 FROM TABLE LT_ORECORD.
        ENDIF.
      ENDIF.


      SORT LT_CHECK BY KUNNR PSPHI SEQ DESCENDING.

      LOOP AT LT_DATA_C INTO DATA(LS_DATA).
        LS_ZSDSFIT036-KUNNR        = LS_DATA-KUNNR.
        LS_ZSDSFIT036-PSPHI        = LS_DATA-WBS.
        LS_ZSDSFIT036-STARTDATE    = LS_DATA-STARTDATE.
        LS_ZSDSFIT036-ENDDATE      = LS_DATA-ENDDATE.
        LS_ZSDSFIT036-SEQ          = LS_DATA-SEQ.
        LS_ZSDSFIT036-CREDIT_LIMIT = LS_DATA-CREDIT_LIMIT.
        LS_ZSDSFIT036-ZTERM        = LS_DATA-ZTERM.
        LS_ZSDSFIT036-ZDEL_FLG     = SPACE.
        READ TABLE LT_CHECK INTO DATA(LS_CHECK)
        WITH KEY KUNNR     = LS_DATA-KUNNR
                 PSPHI     = LS_DATA-WBS.
*                 STARTDATE = LS_DATA-STARTDATE
*                 ENDDATE   = LS_DATA-ENDDATE.
        IF SY-SUBRC EQ 0.
*          LS_ZSDSFIT036-ZCRT_DATE    = LS_CHECK-ZCRT_DATE.
*          LS_ZSDSFIT036-ZCRT_TIME    = LS_CHECK-ZCRT_TIME.
*          LS_ZSDSFIT036-ZCRT_USER    = LS_CHECK-ZCRT_USER.
*          LS_ZSDSFIT036-ZCRT_PGM     = LS_CHECK-ZCRT_PGM.
          LS_ZSDSFIT036-SEQ          = LS_CHECK-SEQ + 1.
        ELSE.
*          LS_ZSDSFIT036-ZCRT_DATE    = SY-DATUM.
*          LS_ZSDSFIT036-ZCRT_TIME    = SY-UZEIT.
*          LS_ZSDSFIT036-ZCRT_USER    = SY-UNAME.
*          LS_ZSDSFIT036-ZCRT_PGM     = SY-CPROG.
        ENDIF.
        LS_ZSDSFIT036-ZCRT_DATE    = SY-DATUM.
        LS_ZSDSFIT036-ZCRT_TIME    = SY-UZEIT.
        LS_ZSDSFIT036-ZCRT_USER    = SY-UNAME.
        LS_ZSDSFIT036-ZCRT_PGM     = SY-CPROG.
        LS_ZSDSFIT036-ZUPD_DATE    = SY-DATUM.
        LS_ZSDSFIT036-ZUPD_TIME    = SY-UZEIT.
        LS_ZSDSFIT036-ZUPD_USER    = SY-UNAME.
        LS_ZSDSFIT036-ZUPD_PGM     = SY-CPROG.

        APPEND LS_ZSDSFIT036 TO LT_ZSDSFIT036.
        CLEAR : LS_ZSDSFIT036.
      ENDLOOP.

      MODIFY ZSDSFIT036 FROM TABLE LT_ZSDSFIT036.
      IF SY-SUBRC EQ 0.
        LCL_DATA=>COMMIT( ).
        E_MESTYPE = GC_CON-S.
        E_MESSAGE = TEXT-S02.
      ELSE.
        E_MESTYPE = GC_CON-E.
        E_MESSAGE = TEXT-E01.
      ENDIF.
    ENDIF.

  ENDMETHOD.


METHOD CREATE_PA30.

  DATA: LS_ACTION         TYPE P0000,
        LS_ORGANIZATION   TYPE P0001,
        LS_PERSONAL_DATA  TYPE P0002,
        LS_ADDRESS        TYPE P0006,
        LS_PLAN_WORK_TIME TYPE P0007,
        LS_BASIC_PAY      TYPE P0008,
        LS_BANK_DETAIL    TYPE P0009.

  DATA : LT_PROP TYPE TABLE OF PPROP.

  DATA : LT_PROP_TMP TYPE TABLE OF PPROP.

  DATA : LS_TMP TYPE P0000.

  DATA : LS_RETURN  TYPE BAPIRETURN.

  DATA : LS_RETURN_V1  TYPE BAPIRETURN1.

  DATA : LS_MESSAGE TYPE ZSDSFIS135.

  DATA : LV_MASSN TYPE PA0000-MASSN,
         LV_BEGDA TYPE PA0000-BEGDA,
         LV_ENDDA TYPE PA0000-ENDDA,
         LV_WERKS TYPE PSPAR-WERKS,
         LV_PERSG TYPE PSPAR-PERSG,
         LV_PERSK TYPE PSPAR-PERSK,
         LV_PLANS TYPE PSPAR-PLANS.

  LOOP AT IS_INFOTYPE-ACTION INTO LS_TMP.
    MOVE-CORRESPONDING LS_TMP TO LS_ACTION.

    LT_PROP_TMP = LCL_DATA=>CREATE_PA0000( LS_ACTION ).
    APPEND LINES OF LT_PROP_TMP TO LT_PROP.

    LOOP AT IS_INFOTYPE-ORGANIZATION INTO LS_ORGANIZATION WHERE PERNR EQ LS_ACTION-PERNR.
      LT_PROP_TMP = LCL_DATA=>CREATE_PA0001( LS_ORGANIZATION ).
      APPEND LINES OF LT_PROP_TMP TO LT_PROP.
    ENDLOOP.

    LOOP AT IS_INFOTYPE-PERSONAL_DATA INTO LS_PERSONAL_DATA WHERE PERNR EQ LS_ACTION-PERNR.
      LT_PROP_TMP = LCL_DATA=>CREATE_PA0002( LS_PERSONAL_DATA ).
      APPEND LINES OF LT_PROP_TMP TO LT_PROP.
    ENDLOOP.

    LOOP AT IS_INFOTYPE-ADDRESS INTO LS_ADDRESS WHERE PERNR EQ LS_ACTION-PERNR.
      LT_PROP_TMP = LCL_DATA=>CREATE_PA0006( LS_ADDRESS ).
      APPEND LINES OF LT_PROP_TMP TO LT_PROP.
    ENDLOOP.

    LOOP AT IS_INFOTYPE-PLAN_WORK_TIME INTO LS_PLAN_WORK_TIME WHERE PERNR EQ LS_ACTION-PERNR.
      LT_PROP_TMP = LCL_DATA=>CREATE_PA0007( LS_PLAN_WORK_TIME ).
      APPEND LINES OF LT_PROP_TMP TO LT_PROP.
    ENDLOOP.

    LOOP AT IS_INFOTYPE-BASIC_PAY INTO LS_BASIC_PAY WHERE PERNR EQ LS_ACTION-PERNR.
      LT_PROP_TMP = LCL_DATA=>CREATE_PA0008( LS_BASIC_PAY ).
      APPEND LINES OF LT_PROP_TMP TO LT_PROP.
    ENDLOOP.

    LOOP AT IS_INFOTYPE-BANK_DETAIL INTO LS_BANK_DETAIL WHERE PERNR EQ LS_ACTION-PERNR.
      LT_PROP_TMP = LCL_DATA=>CREATE_PA0009( LS_BANK_DETAIL ).
      APPEND LINES OF LT_PROP_TMP TO LT_PROP.
    ENDLOOP.

    AT END OF PERNR.
      LV_MASSN  = LS_ACTION-MASSN.
      LV_BEGDA  = LS_ACTION-BEGDA.
      LV_ENDDA  = LS_ACTION-ENDDA.
      LV_WERKS  = LS_ORGANIZATION-WERKS.
      LV_PERSG  = LS_ORGANIZATION-PERSG.
      LV_PERSK  = LS_ORGANIZATION-PERSK.
      LV_PLANS  = LS_ORGANIZATION-PLANS.

      LS_RETURN = LCL_DATA=>CALL_CREATE_PA30( I_EMPLOYEE = LS_ACTION-PERNR
                                              I_MASSN    = LV_MASSN
                                              I_WERKS    = LV_WERKS
                                              I_PERSG    = LV_PERSG
                                              I_PERSK    = LV_PERSK
                                              I_PLANS    = LV_PLANS
                                              I_BEGDA    = LV_BEGDA
                                              I_ENDDA    = LV_ENDDA
                                              IT_PPROP   = LT_PROP ).

      LS_MESSAGE-EMPLOYEE     = LS_ACTION-PERNR.
      IF LS_RETURN IS INITIAL.
        LCL_DATA=>COMMIT( ).
        SELECT COUNT( * )
          FROM PA0000
          WHERE PERNR EQ LS_ACTION-PERNR.
        IF SY-SUBRC EQ 0.
          LS_MESSAGE-MESSAGE_TYPE = GC_CON-S.
          LS_MESSAGE-MESSAGE      = TEXT-S02.
        ELSE.
          LS_MESSAGE-MESSAGE_TYPE = GC_CON-E.
          LS_MESSAGE-MESSAGE      = TEXT-E01.
        ENDIF.
      ELSE.
        LS_MESSAGE-MESSAGE_TYPE = LS_RETURN-TYPE.
        LS_MESSAGE-MESSAGE      = LS_RETURN-MESSAGE.
      ENDIF.
      APPEND LS_MESSAGE TO RS_MESSAGE-RETURN_MESSAGE.
    ENDAT.
  ENDLOOP.

ENDMETHOD.


  METHOD VALIDATE_TMP_PROJECT.

    DATA(IT_DATA_C) = IT_DATA[].

    LOOP AT IT_DATA_C ASSIGNING FIELD-SYMBOL(<LFS_DATA>).
      "CHECK WBS
      IF <LFS_DATA>-POSID IS NOT INITIAL.

        "CONVERT POSID -> PSPHI
        CALL FUNCTION 'CONVERSION_EXIT_KONPD_INPUT'     "
          EXPORTING
            INPUT     = <LFS_DATA>-POSID
          IMPORTING
            OUTPUT    = <LFS_DATA>-WBS
          EXCEPTIONS
            NOT_FOUND = 1
            OTHERS    = 2.

        IF SY-SUBRC = 1.
          E_MESTYPE = GC_CON-E.
          MESSAGE E011(CJ) WITH '1' INTO E_MESSAGE.
          EXIT.
        ENDIF.
      ELSE.
        E_MESTYPE = GC_CON-E.
        E_MESSAGE = TEXT-E03.
        EXIT.
      ENDIF.
    ENDLOOP.


  ENDMETHOD.
ENDCLASS.
