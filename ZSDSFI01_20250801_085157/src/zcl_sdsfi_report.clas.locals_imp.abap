*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.

    TYPES:
      BEGIN OF GY_KUNAG,
        KUNNR TYPE VBRK-KUNAG,
      END OF GY_KUNAG.
    TYPES:
      GTY_KUNAG TYPE HASHED TABLE OF GY_KUNAG
                        WITH UNIQUE KEY KUNNR.

    TYPES : BEGIN OF GY_WBS,
              PS_POSID TYPE ZSDSFIS183-PS_POSID,
            END OF GY_WBS.
    TYPES : GTY_WBS TYPE HASHED TABLE OF GY_WBS WITH UNIQUE KEY PS_POSID.

    TYPES:
      BEGIN OF GY_PRODH,
        PS_POSID TYPE ZSDSFIS183-PS_POSID,
        PRDHA    TYPE MARA-PRDHA,
      END OF GY_PRODH.
    TYPES:
      GTY_PRODH TYPE HASHED TABLE OF GY_PRODH
                        WITH UNIQUE KEY PS_POSID.

    TYPES:
      BEGIN OF GY_INV,
        VBELN TYPE VBRK-VBELN,
      END OF GY_INV.
    TYPES:
      GTY_INV TYPE HASHED TABLE OF GY_INV
                        WITH UNIQUE KEY VBELN.

    TYPES:
      BEGIN OF GY_DONUM,
        DONO  TYPE LIKP-VBELN,
        VBELN TYPE LIKP-VBELN,
      END OF GY_DONUM.
    TYPES:
      GTY_DONUM TYPE HASHED TABLE OF GY_DONUM
                        WITH UNIQUE KEY DONO VBELN.

    TYPES : GTY_ADDRESS TYPE STANDARD TABLE OF ZSDSVC_CUSTOMER_INFO WITH EMPTY KEY.

    TYPES:
      BEGIN OF TS_SHIPMENT,
        VBELN      TYPE VBPA-VBELN,
        PARVW      TYPE VBPA-PARVW,                              "CH01.01+
        NATION     TYPE ADRC-NATION,
        KUNNR      TYPE VBPA-KUNNR,
        ADRNR      TYPE VBPA-ADRNR,
        NAME       TYPE C LENGTH 70,
        STREET     TYPE ADRC-STREET,
        STR_SUPPL3 TYPE ADRC-STR_SUPPL3,
        LOCATION   TYPE ADRC-LOCATION,
        STR_SUPPL1 TYPE ADRC-STR_SUPPL1,
        STR_SUPPL2 TYPE ADRC-STR_SUPPL2,
        CITY2      TYPE ADRC-CITY2,
        CITY1      TYPE ADRC-CITY1,
        POST_CODE1 TYPE ADRC-POST_CODE1,
        TEL_NUMBER TYPE ADRC-TEL_NUMBER,
      END OF TS_SHIPMENT .
    TYPES: TT_SHIPMENT TYPE SORTED TABLE OF TS_SHIPMENT
                         WITH NON-UNIQUE KEY VBELN .

    TYPES : BEGIN OF GY_ORDER,
              AUFNR       TYPE IAOM_CRM_AUFK-AUFNR,
              CATEGORY_ID TYPE IAOM_CRM_AUFK-CATEGORY_ID,
            END OF GY_ORDER.
    TYPES : GTY_ORDER TYPE HASHED TABLE OF GY_ORDER WITH UNIQUE KEY AUFNR.

    TYPES : GY_RESULT  TYPE ZSDSFIS183,
            GTY_RESULT TYPE TABLE OF ZSDSFIS183.

    CONSTANTS:
      BEGIN OF GC_VBTYP,
        SALE_ORDER      TYPE VBAK-VBTYP VALUE 'C',
        SHIP_TO         TYPE VBAK-VBTYP VALUE '8',
        DELIVERY        TYPE VBAK-VBTYP VALUE 'J',
        QUOTATION       TYPE VBAK-VBTYP VALUE 'B',
        CREDIT_MEMO_REQ TYPE VBAK-VBTYP VALUE 'K',
        DEBIT_MEMO_REQ  TYPE VBAK-VBTYP VALUE 'L',
        RETURN          TYPE VBAK-VBTYP VALUE 'H',
      END OF GC_VBTYP .

    CONSTANTS:
      BEGIN OF GC_PARVW,
        PAYER         TYPE VBPA-PARVW VALUE 'RG',
        SHIP_TO       TYPE VBPA-PARVW VALUE 'WE',
        SALE_EMPLOYEE TYPE VBPA-PARVW VALUE 'VE',
        EMPLOYEE_RESP TYPE VBPA-PARVW VALUE 'ZM',
      END OF GC_PARVW .

    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      GET_DATA,
      GET_ADDTIONAL_DATA CHANGING CT_RESULT TYPE ZSDSFIS183_TT,
      GET_ADDRESS IMPORTING IT_DATA  TYPE GTY_KUNAG
                  RETURNING VALUE(R) TYPE GTY_ADDRESS,
      GET_SHIPTO IMPORTING IT_DATA  TYPE GTY_DONUM
                 RETURNING VALUE(R) TYPE TT_SHIPMENT,
      GET_ORDER IMPORTING I_DATA   TYPE ZSDSFIS183_TT
                RETURNING VALUE(R) TYPE GTY_ORDER,
      GET_PRODH_WBS IMPORTING IT_DATA  TYPE GTY_WBS
                    RETURNING VALUE(R) TYPE GTY_PRODH.
    CLASS-DATA :
      LO TYPE REF TO LCL_DATA.

ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD GET_DATA.
  ENDMETHOD.
  METHOD GET_ADDRESS.
    SELECT B~*
      FROM ZSDSVC_CUSTOMER_INFO AS B
      INNER JOIN @IT_DATA AS A ON B~KUNNR EQ A~KUNNR
    INTO TABLE @R.
  ENDMETHOD.
  METHOD GET_SHIPTO.
    SELECT FROM VBPA AS PA
    INNER JOIN @IT_DATA AS KEY
             ON PA~VBELN = KEY~VBELN
    INNER JOIN ADRC
             ON PA~ADRNR = ADRC~ADDRNUMBER
    FIELDS PA~VBELN,
           PA~PARVW,                              "CH01.01+
           ADRC~NATION,
           PA~KUNNR,
           PA~ADRNR,
           CONCAT_WITH_SPACE( ADRC~NAME1, ADRC~NAME2, 1 ) AS NAME,
           ADRC~STREET,
           ADRC~STR_SUPPL3,
           ADRC~LOCATION,
           ADRC~STR_SUPPL1,
           ADRC~STR_SUPPL2,
           ADRC~CITY2,
           ADRC~CITY1,
           ADRC~POST_CODE1,
           ADRC~TEL_NUMBER                        "CH01.01+
*    WHERE PA~PARVW = @GC_PARVW-SHIP_TO           "CH01.01-
    WHERE PA~PARVW       EQ @GC_PARVW-SHIP_TO
      AND ADRC~DATE_FROM <= @SY-DATUM
      AND ADRC~DATE_TO   >= @SY-DATUM
      AND ADRC~NATION    EQ 'I'
*    INTO TABLE @ET_SHIPTO.                       "CH01.01-
    INTO TABLE @R.                    "CH01.01+
  ENDMETHOD.
  METHOD GET_ORDER.
    DATA : BEGIN OF LS_AUFNR,
             AUFNR TYPE ACDOCA-AUFNR,
           END OF LS_AUFNR.
    DATA : LT_AUFNR LIKE HASHED TABLE OF LS_AUFNR WITH UNIQUE KEY AUFNR.

    LT_AUFNR = CORRESPONDING #( I_DATA  DISCARDING DUPLICATES ).

    SELECT DISTINCT IAOM_CRM_AUFK~AUFNR,
                    IAOM_CRM_AUFK~CATEGORY_ID
      FROM @LT_AUFNR AS A
      INNER JOIN IAOM_CRM_AUFK ON A~AUFNR EQ IAOM_CRM_AUFK~AUFNR
      INTO TABLE @R.
  ENDMETHOD.
  METHOD GET_ADDTIONAL_DATA.
    FIELD-SYMBOLS <LFS_RESULT> LIKE LINE OF CT_RESULT.
    DATA : LV_PRODH TYPE GY_RESULT-PRODH.

    DATA : BEGIN OF LS_DATA,
             AUFNR TYPE GY_RESULT-AUFNR,
             PRODH TYPE GY_RESULT-PRODH,
           END OF LS_DATA.
    DATA : LT_DATA LIKE HASHED TABLE OF LS_DATA WITH UNIQUE KEY AUFNR.

    DATA : BEGIN OF LS_PERNR,
             PERNR TYPE PA0002-PERNR,
           END OF LS_PERNR.
    DATA : LT_PERNR LIKE HASHED TABLE OF LS_PERNR WITH UNIQUE KEY PERNR.

    DATA : BEGIN OF LS_VBELN,
             VBELN TYPE VBRK-VBELN,
           END OF LS_VBELN.
    DATA : LT_VBELN LIKE HASHED TABLE OF LS_VBELN WITH UNIQUE KEY VBELN.

    DATA : LCL_SD TYPE REF TO ZCL_SDSSD_SALES_ANALYSIS.

    DATA : LT_KUNAG TYPE GTY_KUNAG,
           LT_DONUM TYPE GTY_DONUM,
           LT_WBS   TYPE GTY_WBS.

    DATA : lv_WBS1      TYPE CHAR50,
           lv_WBS2      TYPE CHAR50,
           lv_WBS3      TYPE CHAR50,
           lv_WBS4      TYPE CHAR50,
           lv_WBS5      TYPE CHAR50,
           lv_WBS6      TYPE CHAR50,
           LV_WBS_CHECK TYPE CHAR50.

    IF LCL_SD IS NOT BOUND.
      CREATE OBJECT LCL_SD.
    ENDIF.

    SORT  CT_RESULT BY RLDNR
                       RBUKRS
                       GJAHR
                       BELNR
                       DOCLN.

    SELECT PARAM_EXT,
           VALUE_LOW
      FROM ZSDSCAC001
      WHERE REPID EQ 'ZSDSFIR0610'
        AND PARAM EQ 'HIERARCHY'
      INTO TABLE @DATA(LT_HIERARCHY).
    SORT LT_HIERARCHY BY PARAM_EXT.

    DELETE ADJACENT DUPLICATES FROM CT_RESULT COMPARING RLDNR
                                                        RBUKRS
                                                        GJAHR
                                                        BELNR
                                                        DOCLN.

    LT_DATA = CORRESPONDING #( CT_RESULT DISCARDING DUPLICATES ).
    DELETE LT_DATA WHERE PRODH IS INITIAL.

    LT_VBELN = CORRESPONDING #( CT_RESULT DISCARDING DUPLICATES ).

    IF LT_VBELN IS NOT INITIAL.
      SELECT FROM VBPA
          FIELDS VBELN,
                 PARVW,
                 PERNR
          FOR ALL ENTRIES IN @LT_VBELN
           WHERE VBELN = @LT_VBELN-VBELN
             AND PARVW IN ( 'VE', 'ZM' )
            INTO TABLE @DATA(LT_PERS_C).

      IF SY-SUBRC IS INITIAL.
        SORT LT_PERS_C BY VBELN PARVW.
      ENDIF.
    ENDIF.

    LT_PERNR = CORRESPONDING #( CT_RESULT DISCARDING DUPLICATES ).
    LCL_SD->GET_PERSON_NAME(
      EXPORTING
        IT_PERNR  = LT_PERNR
      IMPORTING
        ET_PA0002 = DATA(LT_PERS) ).

    LT_KUNAG = CORRESPONDING #( CT_RESULT  DISCARDING DUPLICATES ).
    LT_DONUM = CORRESPONDING #( CT_RESULT  DISCARDING DUPLICATES ).
    LT_WBS   = CORRESPONDING #( CT_RESULT  DISCARDING DUPLICATES ).

    DATA(LT_ADDRESS) = GET_ADDRESS( LT_KUNAG ).
    SORT LT_ADDRESS BY KUNNR.
    DATA(LT_SHIPTO)  = GET_SHIPTO( LT_DONUM ).
    DATA(LT_AUFNR)   = GET_ORDER( CT_RESULT ).
    DATA(LT_PRODH)   = GET_PRODH_WBS( LT_WBS ).

    DATA : LS_ADDRESS LIKE LINE OF LT_ADDRESS,
           LS_SHIPTO  LIKE LINE OF LT_SHIPTO.

    SORT CT_RESULT BY PS_POSID DESCENDING PRODH DESCENDING RACCT DESCENDING.
    LOOP AT CT_RESULT ASSIGNING <LFS_RESULT>.
      AT NEW PS_POSID.
        CLEAR : LV_PRODH.
*        IF <LFS_RESULT>-PRODH IS NOT INITIAL.
        LV_PRODH = <LFS_RESULT>-PRODH.
*        ELSE.
*          LOOP AT CT_RESULT INTO DATA(LS_TMP) WHERE PS_POSID EQ <LFS_RESULT>-PS_POSID AND
*                                                    PRODH    IS NOT INITIAL.
*            LV_PRODH = LS_TMP-PRODH.
*            EXIT.
*          ENDLOOP.
*        ENDIF.
      ENDAT.
      IF <LFS_RESULT>-RACCT+0(2) NE '41'.
        <LFS_RESULT>-SOQTY = <LFS_RESULT>-MSL.
      ENDIF.

      IF <LFS_RESULT>-PS_POSID IS NOT INITIAL AND
         <LFS_RESULT>-PRODH IS INITIAL.
        <LFS_RESULT>-PRODH = LV_PRODH.
      ENDIF.
      " If PRODH still No value
      IF <LFS_RESULT>-PS_POSID IS NOT INITIAL AND
         <LFS_RESULT>-PRODH IS INITIAL.

        SPLIT <LFS_RESULT>-PS_POSID AT '-' INTO lv_WBS1
                                                lv_WBS2
                                                lv_WBS3
                                                lv_WBS4
                                                lv_WBS5
                                                lv_WBS6.

        CONCATENATE lv_WBS4 lv_WBS5 lv_WBS6 INTO LV_WBS_CHECK SEPARATED BY '-'.

        READ TABLE LT_HIERARCHY INTO DATA(LS_HIERARCHY)
        WITH KEY PARAM_EXT = LV_WBS_CHECK
        BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          <LFS_RESULT>-PRODH = LS_HIERARCHY-VALUE_LOW.
        ENDIF.
      ENDIF.

      IF <LFS_RESULT>-BLART+0(1) NE 'R'.
        <LFS_RESULT>-FKART = <LFS_RESULT>-FKART_V.
        <LFS_RESULT>-VKORG = <LFS_RESULT>-VKORG_V.
        <LFS_RESULT>-VTWEG = <LFS_RESULT>-VTWEG_V.
        <LFS_RESULT>-VBELN = <LFS_RESULT>-VBELN_V.
        <LFS_RESULT>-POSNR = <LFS_RESULT>-POSNR_V.
        <LFS_RESULT>-VKGRP = <LFS_RESULT>-VKGRP_V.
        <LFS_RESULT>-VKBUR = <LFS_RESULT>-VKBUR_V.
        <LFS_RESULT>-SONO  = <LFS_RESULT>-SONO_V.
        <LFS_RESULT>-DONO  = <LFS_RESULT>-DONO_V.
        <LFS_RESULT>-GRPDS = <LFS_RESULT>-GRPDS_M.
        <LFS_RESULT>-OFFDS = <LFS_RESULT>-OFFDS_M.
        <LFS_RESULT>-CHADS = <LFS_RESULT>-CHADS_M.
        <LFS_RESULT>-ORGDS = <LFS_RESULT>-ORGDS_M.
        <LFS_RESULT>-DIVIS = <LFS_RESULT>-DIVIS_M.
        <LFS_RESULT>-APPLI = <LFS_RESULT>-APPLI_M.
        <LFS_RESULT>-PSTYV     = <LFS_RESULT>-PSTYV_V.
        <LFS_RESULT>-MATNR_BOM = <LFS_RESULT>-MATNR_BOM_V.
      ELSE.
        IF <LFS_RESULT>-VBELN_V IS NOT INITIAL.
          <LFS_RESULT>-FKART = <LFS_RESULT>-FKART_V.
          <LFS_RESULT>-VKORG = <LFS_RESULT>-VKORG_V.
          <LFS_RESULT>-VTWEG = <LFS_RESULT>-VTWEG_V.
          <LFS_RESULT>-VBELN = <LFS_RESULT>-VBELN_V.
          <LFS_RESULT>-POSNR = <LFS_RESULT>-POSNR_V.
          <LFS_RESULT>-VKGRP = <LFS_RESULT>-VKGRP_V.
          <LFS_RESULT>-VKBUR = <LFS_RESULT>-VKBUR_V.
          <LFS_RESULT>-SONO  = <LFS_RESULT>-SONO_V.
          <LFS_RESULT>-DONO  = <LFS_RESULT>-DONO_V.
          <LFS_RESULT>-GRPDS = <LFS_RESULT>-GRPDS_M.
          <LFS_RESULT>-OFFDS = <LFS_RESULT>-OFFDS_M.
          <LFS_RESULT>-CHADS = <LFS_RESULT>-CHADS_M.
          <LFS_RESULT>-ORGDS = <LFS_RESULT>-ORGDS_M.
          <LFS_RESULT>-DIVIS = <LFS_RESULT>-DIVIS_M.
          <LFS_RESULT>-APPLI = <LFS_RESULT>-APPLI_M.
          <LFS_RESULT>-PSTYV     = <LFS_RESULT>-PSTYV_V.
          <LFS_RESULT>-MATNR_BOM = <LFS_RESULT>-MATNR_BOM_V.
        ENDIF.
      ENDIF.

      IF <LFS_RESULT>-PRODH IS INITIAL AND
         <LFS_RESULT>-AUFNR IS NOT INITIAL.
        READ TABLE lt_Data INTO LS_DATA
        WITH TABLE KEY AUFNR = <LFS_RESULT>-AUFNR.
        IF SY-SUBRC EQ 0.
          <LFS_RESULT>-PRODH = LS_DATA-PRODH.
        ENDIF.
      ENDIF.

      IF <LFS_RESULT>-PRODH IS INITIAL.
        READ TABLE LT_PRODH INTO DATA(LS_PRODH)
        WITH TABLE KEY PS_POSID = <LFS_RESULT>-PS_POSID.
        IF SY-SUBRC EQ 0.
          <LFS_RESULT>-PRODH = LS_PRODH-PRDHA.
        ENDIF.
      ENDIF.

      IF <LFS_RESULT>-PRODH IS NOT INITIAL.
        <LFS_RESULT>-PH1 =  <LFS_RESULT>-PRODH+0(5).
        <LFS_RESULT>-PH2 =  <LFS_RESULT>-PRODH+5(5).
        <LFS_RESULT>-PH3 =  <LFS_RESULT>-PRODH+10(8).
      ELSE.
        READ TABLE LT_AUFNR INTO DATA(LS_AUFNR)
        WITH TABLE KEY AUFNR = <LFS_RESULT>-AUFNR.
        IF SY-SUBRC EQ 0.
          IF LS_AUFNR-CATEGORY_ID+0(5) IS NOT INITIAL.
            <LFS_RESULT>-PH1 =  LS_AUFNR-CATEGORY_ID+0(5).
          ENDIF.
          IF LS_AUFNR-CATEGORY_ID+5(5) IS NOT INITIAL.
            <LFS_RESULT>-PH2 =  LS_AUFNR-CATEGORY_ID+5(5).
          ENDIF.
          IF LS_AUFNR-CATEGORY_ID+10(8) IS NOT INITIAL.
            <LFS_RESULT>-PH3 =  LS_AUFNR-CATEGORY_ID+10(8).
          ENDIF.
        ENDIF.
      ENDIF.

      IF <LFS_RESULT>-PERNR IS INITIAL.
        READ TABLE LT_PERS_C ASSIGNING FIELD-SYMBOL(<L_PERS_C>)
        WITH KEY VBELN = <LFS_RESULT>-VBELN
             PARVW = 'VE'
             BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          <LFS_RESULT>-PERNR  = <L_PERS_C>-PERNR.
        ENDIF.
      ENDIF.

      READ TABLE LT_PERS ASSIGNING FIELD-SYMBOL(<L_PERS>)
      WITH TABLE KEY PERNR = <LFS_RESULT>-PERNR.
      IF SY-SUBRC IS INITIAL.
        <LFS_RESULT>-SALEN = <L_PERS>-NAME.
      ENDIF.

      READ TABLE LT_ADDRESS INTO LS_ADDRESS
      WITH KEY KUNNR = <LFS_RESULT>-KUNNR
      BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        <LFS_RESULT>-CUST_REGION_DESC = LS_ADDRESS-CITY1TH.
      ENDIF.

      READ TABLE LT_SHIPTO INTO LS_SHIPTO
      WITH TABLE KEY VBELN = <LFS_RESULT>-VBELN.
      IF SY-SUBRC EQ 0.
        <LFS_RESULT>-SHIP_REGION_DESC = LS_SHIPTO-CITY1.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD GET_PRODH_WBS.
    SELECT PRPS~POSID,
           MARA~PRDHA
      FROM @IT_DATA AS A
      INNER JOIN PRPS ON A~PS_POSID EQ PRPS~POSID
      INNER JOIN MARA ON PRPS~POST1 EQ MARA~MATNR
      INTO TABLE @R.
  ENDMETHOD.
ENDCLASS.
