CLASS ZCL_SDSCM_SERVICE_CONTRCT_SERV DEFINITION
  PUBLIC
  INHERITING FROM ZCL_SDSCA_REST_SERVICE
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF TS_SRVCONTR_HEAD,
        HEADER_GUID     TYPE CRMS4D_SERV_H-HEADER_GUID,
        OBJECT_ID       TYPE CRMS4D_SERV_H-OBJECT_ID,
        DEL_FLAG        TYPE FLAG,
        PROCESS_TYPE    TYPE CRMS4D_SERV_H-PROCESS_TYPE,
        DESCRIPTION     TYPE CRMS4D_SERV_H-DESCRIPTION_H,
        PO_NUMBER_SOLD  TYPE CRMS4D_SERV_H-PO_NUMBER_SOLD,
        CONTSTART       TYPE CRMS4D_SERV_H-CONTSTART,
        CONTEND         TYPE CRMS4D_SERV_H-CONTEND,
        PMNTTRMS        TYPE CRMS4D_SERV_H-PMNTTRMS,
        STATUS          TYPE CRMS4D_SERV_H-STAT_LIFECYCLE,
        SALES_ORG_SD    TYPE CRMS4D_SERV_H-SALES_ORG_SD,
        DIS_CHANNEL     TYPE CRMS4D_SERV_H-DIS_CHANNEL,
        DIVISION        TYPE CRMS4D_SERV_H-DIVISION,
        SALES_GROUP_SD  TYPE CRMS4D_SERV_H-SALES_GROUP_SD,
        SALES_OFFICE_SD TYPE CRMS4D_SERV_H-SALES_OFFICE_SD,
        AC_OBJECT_TYPE  TYPE CRMS4D_SERV_H-AC_OBJECT_TYPE,
        AC_ASSIGNMENT   TYPE CRMS4D_SERV_H-AC_ASSIGNMENT,
        ZZ1_BILL_METHOD TYPE CRMS4D_SERV_H-ZZ1_BILL_METHOD,
        ZZ1_EXT_REFNO   TYPE CRMS4D_SERV_H-ZZ1_EXT_REFNO,
        ZZ1_LOB_SRH     TYPE CRMS4D_SERV_H-ZZ1_LOB_SRH,
        CURRENT_STATUS  TYPE CRMS4D_SERV_H-STAT_LIFECYCLE,  "+420000714
      END OF TS_SRVCONTR_HEAD .
    TYPES:
      BEGIN OF TS_SRVCONTR_HEADX,
        HEADER_GUID     TYPE BAPIUPDATE,
        OBJECT_ID       TYPE BAPIUPDATE,
        PROCESS_TYPE    TYPE BAPIUPDATE,
        DESCRIPTION     TYPE BAPIUPDATE,
        PO_NUMBER_SOLD  TYPE BAPIUPDATE,
        CONTSTART       TYPE BAPIUPDATE,
        CONTEND         TYPE BAPIUPDATE,
        PMNTTRMS        TYPE BAPIUPDATE,
        STATUS          TYPE BAPIUPDATE,
        SALES_ORG_SD    TYPE BAPIUPDATE,
        DIS_CHANNEL     TYPE BAPIUPDATE,
        DIVISION        TYPE BAPIUPDATE,
        SALES_GROUP_SD  TYPE BAPIUPDATE,
        SALES_OFFICE_SD TYPE BAPIUPDATE,
        AC_OBJECT_TYPE  TYPE BAPIUPDATE,
        AC_ASSIGNMENT   TYPE BAPIUPDATE,
        ZZ1_BILL_METHOD TYPE BAPIUPDATE,
        ZZ1_EXT_REFNO   TYPE BAPIUPDATE,
        ZZ1_LOB_SRH     TYPE BAPIUPDATE,
      END OF TS_SRVCONTR_HEADX .
    TYPES:
      BEGIN OF TS_SRVCONTR_PARTNER,
        PARTNER_FCT      TYPE CRMT_PARTNER_COM-PARTNER_FCT,
        PARTNER_NO       TYPE CRMT_PARTNER_COM-PARTNER_NO,
        REF_PARTNER_FCT  TYPE CRMT_PARTNER_COM-REF_PARTNER_FCT,
        REF_PARTNER_NO   TYPE CRMT_PARTNER_COM-REF_PARTNER_NO,
        REF_NO_TYPE      TYPE CRMT_PARTNER_COM-REF_NO_TYPE,
        REF_DISPLAY_TYPE TYPE CRMT_PARTNER_COM-REF_DISPLAY_TYPE,
      END OF TS_SRVCONTR_PARTNER .
    TYPES:
      TT_SRVCONTR_PARTNER TYPE STANDARD TABLE OF TS_SRVCONTR_PARTNER
                                                WITH DEFAULT KEY .
    TYPES:
      BEGIN OF TS_REFEQUIP_DATA,
        EQUIPMENT_ID TYPE CRMS4D_REFOBJ-EQUIPMENT_ID,
      END OF TS_REFEQUIP_DATA.
    TYPES:
      TT_REFEQUIP_DATA TYPE STANDARD TABLE OF TS_REFEQUIP_DATA
                            WITH DEFAULT KEY.

    TYPES:
      BEGIN OF TS_SRVCONTR_ITEM,
        ITEM_GUID        TYPE CRMT_ORDERADM_I_COM-GUID,
        NUMBER_INT       TYPE CRMT_ORDERADM_I_COM-NUMBER_INT,
        DEL_FLAG         TYPE FLAG,
        ITM_TYPE         TYPE CRMT_ORDERADM_I_COM-ITM_TYPE,
        ORDERED_PROD     TYPE CRMT_ORDERADM_I_COM-ORDERED_PROD,
        QUANTITY         TYPE CRMT_SCHEDLIN_EXTD-QUANTITY,
        PROCESS_QTY_UNIT TYPE CRMT_PRODUCT_I_EXT-PROCESS_QTY_UNIT,
        AC_OBJECT_TYPE   TYPE CRMS4D_SERV_I-AC_OBJECT_TYPE,
        AC_ASSIGNMENT    TYPE CRMS4D_SERV_I-AC_ASSIGNMENT,
        STATUS           TYPE CRMS4D_SERV_I-STAT_LIFECYCLE,
      END OF TS_SRVCONTR_ITEM .
    TYPES:
      BEGIN OF TS_SRVCONTR_ITEMX,
        ITEM_GUID        TYPE BAPIUPDATE,
        NUMBER_INT       TYPE BAPIUPDATE,
        ITM_TYPE         TYPE BAPIUPDATE,
        ORDERED_PROD     TYPE BAPIUPDATE,
        QUANTITY         TYPE BAPIUPDATE,
        PROCESS_QTY_UNIT TYPE BAPIUPDATE,
        AC_OBJECT_TYPE   TYPE BAPIUPDATE,
        AC_ASSIGNMENT    TYPE BAPIUPDATE,
        STATUS           TYPE BAPIUPDATE,
      END OF TS_SRVCONTR_ITEMX .
    TYPES:
      BEGIN OF TS_SRVCONTR_PRICE_DATA,
        KSCHL TYPE  PRCT_COND_TYPE,
        WAERS TYPE  PRCT_COND_CURR,
        KBETR TYPE  PRCT_COND_RATE,
        KPEIN TYPE  PRCT_COND_PRICING_UNIT,
        KMEIN TYPE  PRCT_COND_UOM,
        KWERT TYPE  PRCT_COND_VALUE,
      END OF TS_SRVCONTR_PRICE_DATA .
    TYPES:
      TT_SRVCONTR_PRICE_DATA TYPE STANDARD TABLE OF TS_SRVCONTR_PRICE_DATA
                                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF TS_SRVCONTR_BILLPLAN_DATA,
        BILL_DATE   TYPE  CRMT_BILLPLAN_D_WRK-BILL_DATE,
        BILL_VALUE  TYPE  CRMT_BILLPLAN_D_WRK-BILL_VALUE,
        CURRENCY    TYPE  CRMT_BILLPLAN_D_WRK-CURRENCY,
        DESCRIPTION TYPE  CRMT_BILLPLAN_D_WRK-DESCRIPTION,
      END OF TS_SRVCONTR_BILLPLAN_DATA .
    TYPES:
      TT_SRVCONTR_BILLPLAN_DATA TYPE STANDARD TABLE OF TS_SRVCONTR_BILLPLAN_DATA
                                         WITH DEFAULT KEY .
    TYPES:
      BEGIN OF TS_SRVCONTR_ITEM_DATA,
        ITEM     TYPE TS_SRVCONTR_ITEM,
        ITEMX    TYPE TS_SRVCONTR_ITEMX,
        PRICE    TYPE TT_SRVCONTR_PRICE_DATA,
        REFEQUIP TYPE TT_REFEQUIP_DATA,
        BILLPLAN TYPE TT_SRVCONTR_BILLPLAN_DATA,
      END OF TS_SRVCONTR_ITEM_DATA .
    TYPES:
      TT_SRVCONTR_ITEM_DATA TYPE STANDARD TABLE OF TS_SRVCONTR_ITEM_DATA
                                                WITH DEFAULT KEY .
    TYPES:
      BEGIN OF TS_SRVCONTR_DATA,
        HEAD    TYPE TS_SRVCONTR_HEAD,
        HEADX   TYPE TS_SRVCONTR_HEADX,
        PARTNER TYPE  TT_SRVCONTR_PARTNER,
        ITEM    TYPE  TT_SRVCONTR_ITEM_DATA,
      END OF TS_SRVCONTR_DATA .
    TYPES:
      BEGIN OF TS_T683S,
        STUNR TYPE  T683S-STUNR,
        ZAEHK TYPE  T683S-ZAEHK,
        KSCHL TYPE  T683S-KSCHL,
      END OF TS_T683S .
    TYPES:
      TT_T683S TYPE SORTED TABLE OF TS_T683S
                                WITH UNIQUE KEY STUNR
                                                ZAEHK .

    CONSTANTS GC_SRVCONTR TYPE CRMS4D_SERV_H-OBJTYPE_H VALUE 'BUS2000112' ##NO_TEXT.
    CONSTANTS GC_CREATE TYPE CHAR1 VALUE ' ' ##NO_TEXT.
    CONSTANTS GC_CHANGE TYPE CHAR1 VALUE 'U' ##NO_TEXT.
    CONSTANTS GC_DELETE TYPE CHAR1 VALUE 'D' ##NO_TEXT.
    CONSTANTS GC_REFKIND_HEAD TYPE CRMT_OBJECT_KIND VALUE 'A' ##NO_TEXT.
    CONSTANTS GC_REFKIND_ITEM TYPE CRMT_OBJECT_KIND VALUE 'B' ##NO_TEXT.
    CONSTANTS GC_MODE_CREATE TYPE CRMT_MODE VALUE 'A' ##NO_TEXT.
    CONSTANTS GC_MODE_CHANGE TYPE CRMT_MODE VALUE 'B' ##NO_TEXT.
    CONSTANTS GC_MODE_DELETE TYPE CRMT_MODE VALUE 'D' ##NO_TEXT.
    CONSTANTS GC_KSCHL_DISC_PERCT TYPE PRCT_COND_TYPE VALUE 'ZSI1' ##NO_TEXT.
    CONSTANTS GC_KSCHL_DISC_AMOUNT TYPE PRCT_COND_TYPE VALUE 'ZSI2' ##NO_TEXT.
    CONSTANTS GC_STATUS_PROFILE TYPE J_STSMA VALUE 'ZCRMZSRO' ##NO_TEXT.
    CONSTANTS GC_STATUS_OPEN TYPE J_ESTAT VALUE 'E0001' ##NO_TEXT.
    CONSTANTS GC_STATUS_INPR TYPE J_ESTAT VALUE 'E0002' ##NO_TEXT.
    CONSTANTS GC_STATUS_COMP TYPE J_ESTAT VALUE 'E0004' ##NO_TEXT.
    CONSTANTS GC_STATUS_RELE TYPE J_ESTAT VALUE 'E0003' ##NO_TEXT.
    CONSTANTS GC_STATUS_DELE TYPE J_ESTAT VALUE 'E0005' ##NO_TEXT.

    CLASS-METHODS GET_PRICE_PROCEDURE
      IMPORTING
        !IF_HEADER_GUID TYPE CRMT_OBJECT_GUID
      EXPORTING
        !ET_T683S       TYPE TT_T683S .
    CLASS-METHODS MAINTAIN_CRM_SRVCONTR
      IMPORTING
        !IS_SRVCONTR  TYPE TS_SRVCONTR_DATA
      EXPORTING
        !EF_OBJECT_ID TYPE TS_SRVCONTR_HEAD-OBJECT_ID
        !ET_RETURN    TYPE BAPIRET2_TAB .

    METHODS INITIALIZE_DATA
        REDEFINITION .
    METHODS PROCESS_DATA
        REDEFINITION .
protected section.
private section.

  data GF_DEFT_VKORG type VBAK-VKORG .
  data GF_DEFT_VTWEG type VBAK-VTWEG .
  data GF_DEFT_SPART type VBAK-SPART .
  data GF_DEFT_LOB type ZDSDE_LOB .

  methods ASSIGN_RESPONSE_FROM_DATA
    importing
      !IS_SRVCONTR type TS_SRVCONTR_DATA
    changing
      !CS_RESPONSE type ZSDSCMS005 .
  class-methods GET_BILLPLAN_TYPE
    importing
      !IF_HEAD_GUID type CRMT_OBJECT_GUID
      !IF_ITEM_GUID type CRMT_OBJECT_GUID
      !IF_PROCESS_TYPE type CRMT_PROCESS_TYPE
      !IF_ITM_TYPE type CRMT_ITEM_TYPE
    exporting
      !EF_BILLPLAN_TYPE type CRMT_BILLPLAN_TYPE .
  class-methods DETERMINE_COND_SEQNO
    importing
      !IT_T683S type TT_T683S
      !IT_COND type PRCT_COND_DU_TAB
      !IF_STUNR type PRCT_PP_STEP
      !IF_ZAEHK type PRCT_PP_COUNTER
    exporting
      !EF_ZAEHK type PRCT_PP_COUNTER .
  class-methods ASSIGN_ITEMS
    importing
      !IF_GUID type CRMT_OBJECT_GUID
      !IS_HEAD type TS_SRVCONTR_HEAD
      !IT_ITEM type TT_SRVCONTR_ITEM_DATA
    exporting
      !ET_RETURN type BAPIRET2_TAB
    changing
      !CT_ORDERADM_I type CRMT_ORDERADM_I_COMT
      !CT_SCHEDLIN_I type CRMT_SCHEDLIN_I_COMT
      !CT_AC_ASSIGN type CRMT_AC_ASSIGN_COMT
      !CT_STATUS type CRMT_STATUS_COMT
      !CT_ORDPRP_OBJL_I_D type CRMT_ORDPRP_OBJL_I_D_COMT
      !CT_PRIDOC type CRMT_PRIDOC_COMT
      !CT_BILLPLAN type CRMT_BILLPLAN_COMT
      !CT_INPUT_FIELDS type CRMT_INPUT_FIELD_TAB
      !CT_INPUT_FIELDS2 type CRMT_INPUT_FIELD_TAB .
  class-methods ASSIGN_PARTNERS
    importing
      !IF_GUID type CRMT_OBJECT_GUID
      !IT_PARTNER type TT_SRVCONTR_PARTNER
    changing
      !CT_PARTNER type CRMT_PARTNER_COMT
      !CT_INPUT_FIELDS type CRMT_INPUT_FIELD_TAB .
  methods ASSIGN_SRVCONTR_RESULT
    importing
      !IS_SRVCONTR type TS_SRVCONTR_DATA
      !IF_OBJECT_ID type TS_SRVCONTR_HEAD-OBJECT_ID   ##NEEDED
      !IT_RETURN type BAPIRET2_TAB
    changing
      !CS_RESPONSE type ZSDSCMS005 .
  class-methods COLLECT_EXCEPTION
    importing
      !IT_EXCEPTION type CRMT_EXCEPTION_T
    changing
      !CT_RETURN type BAPIRET2_TAB .
  class-methods COLLECT_INPUT_FIELDS
    importing
      !IF_REF_GUID type CRMT_OBJECT_GUID
      !IF_REF_KIND type CRMT_OBJECT_KIND default ' '
      !IF_OBJECTNAME type CRMT_OBJECT_NAME
      !IF_LOGICAL_KEY type CRMT_LOGICAL_KEY default ' '
      !IF_FIELDNAME type CRMT_FIELDNAME
    changing
      !CT_INPUT_FIELDS type CRMT_INPUT_FIELD_TAB .
  methods GET_GENC .
  class-methods LOCK_SRVCONTR
    importing
      !IF_GUID type CRMT_OBJECT_GUID
    returning
      value(RF_RESULT) type ABAP_BOOLEAN .
  class-methods VALIDATE_CRM_PARTNER
    importing
      !IF_PARTNER_FCT type CRMT_PARTNER_FCT
      !IF_PARTNER_NO type CRMT_PARTNER_NO
    exporting
      !EF_PARTNER_FCT type CRMT_PARTNER_FCT
      !EF_PARTNER_NO type CRMT_PARTNER_NO
      !EF_INVALID type FLAG .
  methods VALIDATE_REQUEST
    importing
      !IS_REQUEST type ZSDSCMS005
    exporting
      !ES_SRVCONTR type TS_SRVCONTR_DATA
      !EF_STATUS type ZSDSDE_REST_STATUS
      !EF_MESSAGE type ZSDSDE_REST_MESSAGE .
  methods MAINTAIN_SERVICE_CONTRACT
    importing
      !IS_REQUEST type ZSDSCMS005
    exporting
      !ES_RESPONSE type ZSDSCMS005
      !EF_STATUS type ZSDSDE_REST_STATUS
      !EF_MESSAGE type ZSDSDE_REST_MESSAGE .
ENDCLASS.



CLASS ZCL_SDSCM_SERVICE_CONTRCT_SERV IMPLEMENTATION.


METHOD ASSIGN_ITEMS.

  DATA:
    LT_INPUT_FIELDS   TYPE  CRMT_INPUT_FIELD_TAB,
    LT_SCHEDLIN_WRK   TYPE  CRMT_SCHEDLIN_WRKT,
    LT_ORDPRP_I_D_WRK TYPE  CRMT_ORDPRP_OBJL_I_D_WRKT,
    LT_T683S          TYPE  TT_T683S.

  DATA:
    LS_ORDERADM_I      TYPE  CRMT_ORDERADM_I_COM,
    LS_SCHEDLIN_I      TYPE  CRMT_SCHEDLIN_I_COM,
    LS_AC_ASSIGN       TYPE  CRMT_AC_ASSIGN_COM,
    LS_STATUS          TYPE  CRMT_STATUS_COM,
    LS_ORDPRP_OBJL_I_D TYPE  CRMT_ORDPRP_OBJL_I_D_COM,
    LS_BILLPLAN        TYPE  CRMT_BILLPLAN_COM,
    LS_BILLPLAN_D      TYPE  CRMT_BILLPLAN_D_COM,
    LS_PRIDOC          TYPE  CRMT_PRIDOC_COM,
    LS_SCHEDLIN_WRK    TYPE  CRMT_SCHEDLIN_WRK,
    LS_PRIDOC_OW       TYPE  CRMT_PRIC_COND,
    LS_BILLPLAN_WRK    TYPE  CRMT_BILLPLAN_WRK.

  DATA:
    LF_MODE          TYPE  CRMT_MODE,
    LF_GUID          TYPE  CRMT_OBJECT_GUID,
    LF_SCHED_MODE    TYPE  CRMT_MODE,
    LF_LOGICAL_KEY   TYPE  CRMT_LOGICAL_KEY,
    LF_ZAEHK         TYPE  PRCT_PP_COUNTER,
    LF_BILLPLAN_TYPE TYPE  CRMT_BILLPLAN_TYPE,
    LF_INDEX         TYPE  I.


* Initialize Output
  CLEAR: ET_RETURN.

* Get Pricing Procedure
  GET_PRICE_PROCEDURE(
    EXPORTING
      IF_HEADER_GUID = IF_GUID
    IMPORTING
      ET_T683S       = LT_T683S ).

  LOOP AT IT_ITEM ASSIGNING FIELD-SYMBOL(<L_ITEM>).

    CLEAR: LT_INPUT_FIELDS,
           LF_GUID,
           LF_MODE.

    IF <L_ITEM>-ITEM-ITEM_GUID IS INITIAL.
      LF_MODE = GC_MODE_CREATE.
      CALL FUNCTION 'CRM_GUID_CREATE'
        IMPORTING
          EV_GUID = LF_GUID.
    ELSE.
      LF_MODE = GC_MODE_CHANGE.
      LF_GUID = <L_ITEM>-ITEM-ITEM_GUID.
    ENDIF.

*   --------------------------
*   ORDERADM_I Fields
*   --------------------------
    CLEAR LS_ORDERADM_I.
    LS_ORDERADM_I-GUID = LF_GUID.
    LS_ORDERADM_I-MODE = LF_MODE.
    LS_ORDERADM_I-HEADER = IF_GUID.

*   Category (Item_type)
    IF <L_ITEM>-ITEMX-ITM_TYPE EQ 'X'.
      LS_ORDERADM_I-ITM_TYPE = <L_ITEM>-ITEM-ITM_TYPE.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = ' '
          IF_OBJECTNAME   = 'ORDERADM_I'
          IF_FIELDNAME    = 'ITM_TYPE'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    ENDIF.

*   Item number
    LS_ORDERADM_I-NUMBER_INT = <L_ITEM>-ITEM-NUMBER_INT.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'NUMBER_INT'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'MODE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

*   Product
    IF <L_ITEM>-ITEMX-ORDERED_PROD EQ 'X'.
      LS_ORDERADM_I-ORDERED_PROD = <L_ITEM>-ITEM-ORDERED_PROD.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = ' '
          IF_OBJECTNAME   = 'ORDERADM_I'
          IF_FIELDNAME    = 'ORDERED_PROD'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    ENDIF.

    INSERT LINES OF LT_INPUT_FIELDS INTO TABLE CT_INPUT_FIELDS.
    INSERT LS_ORDERADM_I INTO TABLE CT_ORDERADM_I.

*   --------------------------
*   SCHEDLIN_I Fields
*   --------------------------
    IF <L_ITEM>-ITEMX-QUANTITY EQ 'X'.
      CLEAR: LS_SCHEDLIN_I,
             LF_SCHED_MODE.
      LS_SCHEDLIN_I-REF_GUID = LF_GUID.
*     Read Schedule Line GUID
      CALL FUNCTION 'CRM_SCHEDLIN_READ_OB'
        EXPORTING
          IV_ITEM_GUID        = LF_GUID
        IMPORTING
          ET_SCHEDLIN_WRK     = LT_SCHEDLIN_WRK
        EXCEPTIONS
          ITEM_DOES_NOT_EXIST = 1
          OTHERS              = 2.
      IF SY-SUBRC <> 0.
        CLEAR LT_SCHEDLIN_WRK.
      ENDIF.
      READ TABLE LT_SCHEDLIN_WRK INTO LS_SCHEDLIN_WRK
                                 INDEX 1.
      IF SY-SUBRC NE 0.
        CLEAR LS_SCHEDLIN_WRK.
      ENDIF.

      IF LS_SCHEDLIN_WRK-GUID IS NOT INITIAL.
        LF_SCHED_MODE = GC_MODE_CHANGE.
      ELSE.
        LF_SCHED_MODE = GC_MODE_CREATE.
      ENDIF.

      INSERT VALUE #( GUID      = LS_SCHEDLIN_WRK-GUID
                      ITEM_GUID  = LF_GUID
                      QUANTITY  = <L_ITEM>-ITEM-QUANTITY
                      LOGICAL_KEY  = LS_SCHEDLIN_WRK-GUID
                      MODE        = LF_SCHED_MODE
                      )
             INTO TABLE LS_SCHEDLIN_I-SCHEDLINES.
      INSERT LS_SCHEDLIN_I INTO TABLE CT_SCHEDLIN_I.
      LF_LOGICAL_KEY = LS_SCHEDLIN_WRK-GUID.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'SCHEDLIN'
          IF_LOGICAL_KEY  = LF_LOGICAL_KEY
          IF_FIELDNAME    = 'QUANTITY'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    ENDIF.

*   --------------------------
*   AC_ASSIGN Fields
*   --------------------------
*   WBS
    IF <L_ITEM>-ITEMX-AC_ASSIGNMENT EQ 'X'.
      CLEAR LS_AC_ASSIGN.
      LS_AC_ASSIGN-REF_GUID  = LF_GUID.
      LS_AC_ASSIGN-REF_KIND  = GC_REFKIND_ITEM.
      LS_AC_ASSIGN-AC_OBJECT_TYPE = <L_ITEM>-ITEM-AC_OBJECT_TYPE.
      LS_AC_ASSIGN-AC_ASSIGNMENT  = <L_ITEM>-ITEM-AC_ASSIGNMENT.
      INSERT LS_AC_ASSIGN INTO TABLE CT_AC_ASSIGN.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'AC_ASSIGN'
          IF_FIELDNAME    = 'AC_OBJECT_TYPE'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'AC_ASSIGN'
          IF_FIELDNAME    = 'AC_ASSIGNMENT'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    ENDIF.

*   --------------------------
*   STATUS Fields
*   --------------------------
*   For Delete mode, Set status = Deleted
    IF <L_ITEM>-ITEM-DEL_FLAG EQ 'X' OR
       <L_ITEM>-ITEMX-STATUS EQ 'X'.

      CLEAR LS_STATUS.
      LS_STATUS-REF_GUID = LF_GUID.
      LS_STATUS-REF_KIND  = GC_REFKIND_ITEM.
      LS_STATUS-ACTIVATE  = 'X'.
      LS_STATUS-USER_STAT_PROC = GC_STATUS_PROFILE.

      IF <L_ITEM>-ITEM-DEL_FLAG EQ 'X'.
        LS_STATUS-STATUS = GC_STATUS_DELE.
      ELSE.
        CASE  <L_ITEM>-ITEM-STATUS.
          WHEN 'A'. "Open
            LS_STATUS-STATUS = GC_STATUS_OPEN.
          WHEN 'B'. "Inprogress
            LS_STATUS-STATUS = GC_STATUS_INPR.
          WHEN 'C'. "Complete
            LS_STATUS-STATUS = GC_STATUS_COMP.
          WHEN 'D'. "Release
            LS_STATUS-STATUS = GC_STATUS_RELE.
        ENDCASE.
      ENDIF.
      INSERT LS_STATUS INTO TABLE CT_STATUS.
      LF_LOGICAL_KEY = LS_STATUS-STATUS && LS_STATUS-USER_STAT_PROC.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'STATUS'
          IF_LOGICAL_KEY  = LF_LOGICAL_KEY
          IF_FIELDNAME    = 'ACTIVATE'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS2 ).
    ENDIF.

*   --------------------------
*   ORDPRP_OBJL_I_D Fields
*   --------------------------
    IF <L_ITEM>-REFEQUIP IS NOT INITIAL.

      DATA(LT_REFEQUIP) = <L_ITEM>-REFEQUIP.

      CALL FUNCTION 'CRM_ORDPRP_I_READ_OB'
        EXPORTING
          IV_GUID                       = LF_GUID
        IMPORTING
          ET_ORDPRP_OBJL_I_D            = LT_ORDPRP_I_D_WRK
        EXCEPTIONS
          PARAMETER_ERROR               = 1
          RECORD_NOT_FOUND              = 2
          AT_LEAST_ONE_RECORD_NOT_FOUND = 3
          OTHERS                        = 4.
      IF SY-SUBRC <> 0.
        CLEAR LT_ORDPRP_I_D_WRK.
      ELSE.
*       Remove Same Equipment
        LOOP AT LT_REFEQUIP ASSIGNING FIELD-SYMBOL(<L_REFEQUIP>).
          LF_INDEX = SY-TABIX.
          DELETE LT_ORDPRP_I_D_WRK WHERE EQUIPMENT_ID EQ <L_REFEQUIP>-EQUIPMENT_ID.
          IF SY-SUBRC EQ 0.
            DELETE LT_REFEQUIP.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CLEAR LF_INDEX.
      LOOP AT LT_REFEQUIP ASSIGNING <L_REFEQUIP>.

        CLEAR: LS_ORDPRP_OBJL_I_D.

        LF_INDEX = LF_INDEX + 1.
        READ TABLE LT_ORDPRP_I_D_WRK ASSIGNING FIELD-SYMBOL(<L_ORDPRP_I_D_WRK>)
                                     INDEX LF_INDEX.
        IF SY-SUBRC EQ 0.
          LS_ORDPRP_OBJL_I_D-PRPPROD_I_GUID = <L_ORDPRP_I_D_WRK>-PRPPROD_I_GUID.
        ENDIF.

        LS_ORDPRP_OBJL_I_D-REF_GUID = LF_GUID.
        IF LS_ORDPRP_OBJL_I_D-PRPPROD_I_GUID IS NOT INITIAL.
          LS_ORDPRP_OBJL_I_D-PROC_MODE = GC_MODE_CHANGE.
        ELSE.
          LS_ORDPRP_OBJL_I_D-PROC_MODE = GC_MODE_CREATE.
        ENDIF.
        LS_ORDPRP_OBJL_I_D-EQUIPMENT_ID = <L_REFEQUIP>-EQUIPMENT_ID.

        INSERT LS_ORDPRP_OBJL_I_D INTO TABLE CT_ORDPRP_OBJL_I_D.
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'ORDPRP_I'
            IF_FIELDNAME    = 'EQUIPMENT_ID'
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'ORDPRP_I'
            IF_FIELDNAME    = 'PROC_MODE'
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).

      ENDLOOP.
      FREE: LT_REFEQUIP.

*     Remove Remaining Ref Equipment
      LF_INDEX = LF_INDEX + 1.
      LOOP AT LT_ORDPRP_I_D_WRK ASSIGNING <L_ORDPRP_I_D_WRK>
                                FROM LF_INDEX.
        CLEAR: LS_ORDPRP_OBJL_I_D.
        LS_ORDPRP_OBJL_I_D-REF_GUID = LF_GUID.
        LS_ORDPRP_OBJL_I_D-PRPPROD_I_GUID = <L_ORDPRP_I_D_WRK>-PRPPROD_I_GUID.
        LS_ORDPRP_OBJL_I_D-PROC_MODE = GC_MODE_DELETE.
        INSERT LS_ORDPRP_OBJL_I_D INTO TABLE CT_ORDPRP_OBJL_I_D.
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'ORDPRP_I'
            IF_FIELDNAME    = 'PROC_MODE'
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
      ENDLOOP.

    ENDIF.

*   --------------------------
*   PRIDOC Fields
*   --------------------------
    IF <L_ITEM>-PRICE IS NOT INITIAL.

*     Read Existing Price data
      CALL FUNCTION 'CRM_PRIDOC_READ_OW'
        EXPORTING
          IV_HEADER_GUID = IF_GUID
          IV_ITEM_GUID   = LF_GUID
        IMPORTING
          ES_PRIDOC      = LS_PRIDOC_OW.

      CLEAR LS_PRIDOC.
      LS_PRIDOC-REF_GUID = LF_GUID.
      LS_PRIDOC-REF_KIND = GC_REFKIND_ITEM.

      LOOP AT <L_ITEM>-PRICE ASSIGNING FIELD-SYMBOL(<L_PRICE>).

        READ TABLE LS_PRIDOC_OW-PRIC_COND ASSIGNING FIELD-SYMBOL(<L_PRIC_COND>)
                                          WITH KEY KSCHL = <L_PRICE>-KSCHL.
        IF SY-SUBRC EQ 0.
*         *********************************
*         Due to Silly logic in method CL_VF_PRC_API_PRICE_CONTROLLER->IF_VF_PRC_API_PRICE_CONTROLLER~GET_PRICEELEMENTS_FOR_DISPLAY
*         uses logic to generate new condition sequence number and use it as key
*         for changing item.
*         *********************************
          DETERMINE_COND_SEQNO(
            EXPORTING
              IT_T683S = LT_T683S
              IT_COND  = LS_PRIDOC_OW-PRIC_COND
              IF_STUNR = <L_PRIC_COND>-STUNR
              IF_ZAEHK = <L_PRIC_COND>-ZAEHK
            IMPORTING
              EF_ZAEHK = LF_ZAEHK ).

          IF <L_PRICE>-KBETR IS INITIAL.
*           Delete
            INSERT VALUE #( STUNR = <L_PRIC_COND>-STUNR
                            ZAEHK = LF_ZAEHK
                            ZAEKO = <L_PRIC_COND>-ZAEKO
                          )
                         INTO TABLE LS_PRIDOC-COND_DELETE.
          ELSE.
*           Change
            INSERT VALUE #( STUNR = <L_PRIC_COND>-STUNR
                            ZAEHK = LF_ZAEHK
                            ZAEKO = <L_PRIC_COND>-ZAEKO
                            KNUMH = <L_PRIC_COND>-KNUMH
                            KRECH = <L_PRIC_COND>-KRECH
                            WAERS = <L_PRICE>-WAERS
                            KBETR = <L_PRICE>-KBETR
                            KPEIN = <L_PRICE>-KPEIN
                            KMEIN = <L_PRICE>-KMEIN
                            KWERT = <L_PRICE>-KWERT )
                         INTO TABLE LS_PRIDOC-COND_CHANGE.
          ENDIF.

        ELSE.
*         Add
          INSERT VALUE #( KSCHL = <L_PRICE>-KSCHL
                          WAERS = <L_PRICE>-WAERS
                          KBETR = <L_PRICE>-KBETR
                          KPEIN = <L_PRICE>-KPEIN
                          KMEIN = <L_PRICE>-KMEIN
                          KWERT = <L_PRICE>-KWERT )
                       INTO TABLE LS_PRIDOC-COND_ADD.
        ENDIF.

      ENDLOOP.

      INSERT LS_PRIDOC INTO TABLE CT_PRIDOC.

      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'PRIDOC'
          IF_FIELDNAME    = ' '
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).

    ENDIF.

*   --------------------------
*   BILLPLAN Fields
*   --------------------------
    IF <L_ITEM>-BILLPLAN IS NOT INITIAL.
*     Read Existing Billing Plan
      CALL FUNCTION 'CRM_BILLPLAN_READ_OB'
        EXPORTING
          IV_REF_GUID          = LF_GUID
          IV_REF_KIND          = GC_REFKIND_ITEM
          IV_BILLPLAN_ONLY     = SPACE
          IV_INHERIT_FROM_HDR  = SPACE
          IV_DELETED_LINES     = SPACE
        IMPORTING
          ES_BILLPLAN_WRK      = LS_BILLPLAN_WRK
        EXCEPTIONS
          ENTRY_DOES_NOT_EXIST = 1
          PARAMETER_ERROR      = 2
          OTHERS               = 3.
      IF SY-SUBRC <> 0.
        CLEAR LS_BILLPLAN_WRK.
      ENDIF.
*     Get Billing Plan type
      GET_BILLPLAN_TYPE(
        EXPORTING
          IF_HEAD_GUID     = IF_GUID
          IF_ITEM_GUID     = LF_GUID
          IF_PROCESS_TYPE  = IS_HEAD-PROCESS_TYPE
          IF_ITM_TYPE      = <L_ITEM>-ITEM-ITM_TYPE
        IMPORTING
          EF_BILLPLAN_TYPE = LF_BILLPLAN_TYPE ).
      IF LF_BILLPLAN_TYPE IS INITIAL.
*       Error: Cannot determin Billing plan type for item category &1.
        INSERT VALUE #( TYPE       = 'E'
                        ID         = 'ZSDSCM01'
                        NUMBER     = '019'
                        MESSAGE_V1 = <L_ITEM>-ITEM-NUMBER_INT )
                INTO TABLE ET_RETURN.
        EXIT.
      ENDIF.

      CLEAR LS_BILLPLAN.
      LS_BILLPLAN-REF_GUID      = LF_GUID.
      LS_BILLPLAN-REF_KIND      = GC_REFKIND_ITEM.
      LS_BILLPLAN-GUID          = LF_GUID.
      LS_BILLPLAN-BILLPLAN_TYPE = LF_BILLPLAN_TYPE.

      CLEAR LF_INDEX.
      LOOP AT <L_ITEM>-BILLPLAN ASSIGNING FIELD-SYMBOL(<L_BILLPLAN>).
        LF_INDEX = LF_INDEX + 1.
        CLEAR LS_BILLPLAN_D.
        READ TABLE LS_BILLPLAN_WRK-BILLPLAN_DATES ASSIGNING FIELD-SYMBOL(<L_BILLPLAN_D>)
                                                  INDEX LF_INDEX.
        IF SY-SUBRC EQ 0.
          LS_BILLPLAN_D-GUID          = <L_BILLPLAN_D>-GUID.
          LS_BILLPLAN_D-BILLPLAN_MODE = GC_MODE_CHANGE.
        ELSE.
          CALL FUNCTION 'CRM_GUID_CREATE'
            IMPORTING
              EV_GUID = LS_BILLPLAN_D-GUID.
          LS_BILLPLAN_D-BILLPLAN_MODE = GC_MODE_CREATE.
        ENDIF.
        LS_BILLPLAN_D-BILL_DATE   = <L_BILLPLAN>-BILL_DATE.
        LS_BILLPLAN_D-BILL_VALUE  = <L_BILLPLAN>-BILL_VALUE.
        LS_BILLPLAN_D-CURRENCY    = <L_BILLPLAN>-CURRENCY.
        LS_BILLPLAN_D-DESCRIPTION = <L_BILLPLAN>-DESCRIPTION.

        INSERT LS_BILLPLAN_D INTO TABLE LS_BILLPLAN-BILLPLAN_DATES_COM.

        CLEAR LF_LOGICAL_KEY.
*       Assign Logical Key
        LF_LOGICAL_KEY = 'DG' && LS_BILLPLAN_D-GUID.

        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'BILLPLAN'
            IF_LOGICAL_KEY  = LF_LOGICAL_KEY
            IF_FIELDNAME    = 'BILL_DATE'
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'BILLPLAN'
            IF_LOGICAL_KEY  = LF_LOGICAL_KEY
            IF_FIELDNAME    = 'BILL_VALUE'
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'BILLPLAN'
            IF_LOGICAL_KEY  = LF_LOGICAL_KEY
            IF_FIELDNAME    = 'DESCRIPTION'
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
        IF LS_BILLPLAN_D-CURRENCY IS NOT INITIAL.
          COLLECT_INPUT_FIELDS(
            EXPORTING
              IF_REF_GUID     = LF_GUID
              IF_REF_KIND     = GC_REFKIND_ITEM
              IF_OBJECTNAME   = 'BILLPLAN'
              IF_LOGICAL_KEY  = LF_LOGICAL_KEY
              IF_FIELDNAME    = 'CURRENCY'
            CHANGING
              CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
        ENDIF.

      ENDLOOP.

*     Remove Remaining billing plan
      LF_INDEX = LF_INDEX + 1.
      LOOP AT LS_BILLPLAN_WRK-BILLPLAN_DATES ASSIGNING <L_BILLPLAN_D>
                                             FROM LF_INDEX.
        CLEAR LS_BILLPLAN_D.
        LS_BILLPLAN_D-GUID          = <L_BILLPLAN_D>-GUID.
        LS_BILLPLAN_D-BILLPLAN_MODE = GC_MODE_DELETE.
        INSERT LS_BILLPLAN_D INTO TABLE LS_BILLPLAN-BILLPLAN_DATES_COM.
        CLEAR LF_LOGICAL_KEY.
*       Assign Logical Key
        LF_LOGICAL_KEY = 'DG' && LS_BILLPLAN_D-GUID.
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_ITEM
            IF_OBJECTNAME   = 'BILLPLAN'
            IF_LOGICAL_KEY  = LF_LOGICAL_KEY
            IF_FIELDNAME    = ' '
          CHANGING
            CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
      ENDLOOP.

      INSERT LS_BILLPLAN INTO TABLE CT_BILLPLAN.

    ENDIF.

  ENDLOOP.
  IF ET_RETURN IS NOT INITIAL.
    RETURN.
  ENDIF.


ENDMETHOD.


METHOD ASSIGN_PARTNERS.

  DATA:
    LT_INPUT_FIELDS  TYPE  CRMT_INPUT_FIELD_TAB.

  DATA:
    LS_PARTNER             TYPE  CRMT_PARTNER_COM,
    LS_PARTNER_LOGICAL_KEY TYPE  CRMT_PARTNER_LOGIC_PARTNER_KEY.

  DATA:
    LF_KIND_OF_ENTRY TYPE  CRMT_PARTNER_COM-KIND_OF_ENTRY VALUE 'C',
    LF_DISPLAY_TYPE  TYPE  CRMT_PARTNER_COM-DISPLAY_TYPE  VALUE 'BP',
    LF_NO_TYPE       TYPE  CRMT_PARTNER_COM-NO_TYPE       VALUE 'BP',
    LF_LOGICAL_KEY   TYPE  CRMT_INPUT_FIELD-LOGICAL_KEY.


  LOOP AT IT_PARTNER ASSIGNING FIELD-SYMBOL(<L_PARTNER>).

    CLEAR: LS_PARTNER,
           LT_INPUT_FIELDS.

    LS_PARTNER-REF_GUID         = IF_GUID.
    LS_PARTNER-REF_KIND	        = 'A'.
    LS_PARTNER-KIND_OF_ENTRY    = LF_KIND_OF_ENTRY.
    LS_PARTNER-PARTNER_FCT      = <L_PARTNER>-PARTNER_FCT.
*   Replace Ship-to function
    IF LS_PARTNER-PARTNER_FCT EQ '00000002'.
      LS_PARTNER-PARTNER_FCT = '00000055'.
    ENDIF.
    LS_PARTNER-PARTNER_NO	      = <L_PARTNER>-PARTNER_NO.
    LS_PARTNER-DISPLAY_TYPE     = LF_DISPLAY_TYPE.
    LS_PARTNER-NO_TYPE          = LF_NO_TYPE.
    LS_PARTNER-REF_PARTNER_FCT  = <L_PARTNER>-REF_PARTNER_FCT.
    LS_PARTNER-REF_PARTNER_NO   = <L_PARTNER>-REF_PARTNER_NO.
    LS_PARTNER-REF_NO_TYPE      = <L_PARTNER>-REF_NO_TYPE.
    LS_PARTNER-REF_DISPLAY_TYPE = <L_PARTNER>-REF_DISPLAY_TYPE.


    INSERT LS_PARTNER INTO TABLE CT_PARTNER.

    MOVE-CORRESPONDING LS_PARTNER TO LS_PARTNER_LOGICAL_KEY.
    LF_LOGICAL_KEY = LS_PARTNER_LOGICAL_KEY.

    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'DISPLAY_TYPE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'KIND_OF_ENTRY'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'NO_TYPE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    IF LS_PARTNER-REF_PARTNER_FCT IS INITIAL.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = IF_GUID
          IF_REF_KIND     = 'A'
          IF_OBJECTNAME   = 'PARTNER'
          IF_LOGICAL_KEY  = LF_LOGICAL_KEY
          IF_FIELDNAME    = 'PARTNER_FCT'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    ENDIF.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'PARTNER_NO'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

    INSERT LINES OF LT_INPUT_FIELDS INTO TABLE CT_INPUT_FIELDS.

  ENDLOOP.

ENDMETHOD.


METHOD ASSIGN_RESPONSE_FROM_DATA.

  DATA:
    LS_ITEM  TYPE  ZSDSCMS006.

  DATA:
    LF_DATUM_TXT  TYPE ZSDSDE_REST_DATUM.


* ----------------
* Header Data
* ----------------
  CS_RESPONSE-SVC_NO           = IS_SRVCONTR-HEAD-OBJECT_ID.
  CS_RESPONSE-PROCESS_TYPE     = IS_SRVCONTR-HEAD-PROCESS_TYPE.
  CS_RESPONSE-SF_CONTRACT_NO   = IS_SRVCONTR-HEAD-PO_NUMBER_SOLD.
  CS_RESPONSE-SF_QUOT_NO       = IS_SRVCONTR-HEAD-ZZ1_EXT_REFNO.
  IF IS_SRVCONTR-HEAD-DEL_FLAG EQ 'X'.
    CS_RESPONSE-ZMODE          = GC_DELETE.
  ELSEIF IS_SRVCONTR-HEAD-HEADER_GUID IS NOT INITIAL.
    CS_RESPONSE-ZMODE          = GC_CHANGE.
  ENDIF.
  ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_DATE_TIME_TO_ISO(
    EXPORTING
      IF_TIMESTAMP = IS_SRVCONTR-HEAD-CONTSTART
    IMPORTING
      EF_OUTPUT    = CS_RESPONSE-START_DATE ).
  ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_DATE_TIME_TO_ISO(
    EXPORTING
      IF_TIMESTAMP = IS_SRVCONTR-HEAD-CONTEND
    IMPORTING
      EF_OUTPUT    = CS_RESPONSE-END_DATE ).
  CS_RESPONSE-DESCRIPTION      = IS_SRVCONTR-HEAD-DESCRIPTION.
  CS_RESPONSE-PMNTTRMS         = IS_SRVCONTR-HEAD-PMNTTRMS.
  CS_RESPONSE-SALES_OFFICE     = IS_SRVCONTR-HEAD-SALES_OFFICE_SD.
  CS_RESPONSE-SALES_GROUP      = IS_SRVCONTR-HEAD-SALES_GROUP_SD.
  CS_RESPONSE-WBS              = IS_SRVCONTR-HEAD-AC_ASSIGNMENT.
  CS_RESPONSE-ZZ1_BILL_METHOD  = IS_SRVCONTR-HEAD-ZZ1_BILL_METHOD.
  CS_RESPONSE-STATUS           = IS_SRVCONTR-HEAD-STATUS.

* ----------------
* Partner Data
* ----------------
  LOOP AT IS_SRVCONTR-PARTNER ASSIGNING FIELD-SYMBOL(<L_PARTNER>).
    INSERT VALUE #( PARTNER_FCT = <L_PARTNER>-PARTNER_FCT
                    PARTNER_NO  = <L_PARTNER>-PARTNER_NO )
           INTO TABLE CS_RESPONSE-PARTNER.
  ENDLOOP.

* ----------------
* Item Data
* ----------------
  LOOP AT IS_SRVCONTR-ITEM ASSIGNING FIELD-SYMBOL(<L_ITEM>).
    CLEAR LS_ITEM.
    LS_ITEM-NUMBER_INT     = <L_ITEM>-ITEM-NUMBER_INT.
    LS_ITEM-ITM_TYPE       = <L_ITEM>-ITEM-ITM_TYPE.
    IF <L_ITEM>-ITEM-DEL_FLAG EQ 'X'.
      LS_ITEM-ZMODE        = GC_DELETE.
    ELSEIF <L_ITEM>-ITEM-ITEM_GUID IS NOT INITIAL.
      LS_ITEM-ZMODE        = GC_CHANGE.
    ENDIF.
    LS_ITEM-PRODUCT_ID     = <L_ITEM>-ITEM-ORDERED_PROD.
    LS_ITEM-WBS            = <L_ITEM>-ITEM-AC_ASSIGNMENT.
    LS_ITEM-STATUS         = <L_ITEM>-ITEM-STATUS.
    LS_ITEM-QUANTITY       = <L_ITEM>-ITEM-QUANTITY.
    LS_ITEM-QTY_UNIT       = <L_ITEM>-ITEM-PROCESS_QTY_UNIT .

    LOOP AT <L_ITEM>-REFEQUIP ASSIGNING FIELD-SYMBOL(<L_REFEQUIP>).
      INSERT VALUE #( EQUIPMENT_ID   = <L_REFEQUIP>-EQUIPMENT_ID )
               INTO TABLE LS_ITEM-REF_EQUIPMENT.
    ENDLOOP.

    LOOP AT <L_ITEM>-PRICE ASSIGNING FIELD-SYMBOL(<L_PRICE>).
      IF <L_PRICE>-WAERS IS NOT INITIAL.
        LS_ITEM-WAERS = <L_PRICE>-WAERS.
      ENDIF.
      CASE <L_PRICE>-KSCHL.
        WHEN GC_KSCHL_DISC_PERCT.
          LS_ITEM-DISC_PERCT = <L_PRICE>-KBETR * -1.
        WHEN GC_KSCHL_DISC_AMOUNT.
          LS_ITEM-DISC_AMOUNT = <L_PRICE>-KBETR * -1.
        WHEN OTHERS.
          LS_ITEM-COND_TYPE = <L_PRICE>-KSCHL.
          LS_ITEM-AMOUNT    = <L_PRICE>-KBETR.
      ENDCASE.
    ENDLOOP.

    LOOP AT <L_ITEM>-BILLPLAN ASSIGNING FIELD-SYMBOL(<L_BILLPLAN>).
      ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_DATE_TIME_TO_ISO(
        EXPORTING
          IF_TIMESTAMP = <L_BILLPLAN>-BILL_DATE
        IMPORTING
          EF_OUTPUT    = LF_DATUM_TXT ).
      INSERT VALUE #( BILL_DATE    = LF_DATUM_TXT
                      DESCRIPTION  = <L_BILLPLAN>-DESCRIPTION
                      NET_VALUE    = <L_BILLPLAN>-BILL_VALUE )
             INTO TABLE LS_ITEM-BILLPLAN.
    ENDLOOP.

    INSERT LS_ITEM INTO TABLE CS_RESPONSE-ITEM.

  ENDLOOP.

ENDMETHOD.


METHOD ASSIGN_SRVCONTR_RESULT.

  DATA:
    LS_RETURN   TYPE  BAPIRET2.


* ----------------------
* Determine Result Message
* ----------------------
* Success
  IF IT_RETURN IS INITIAL.
    IF IS_SRVCONTR-HEAD-DEL_FLAG EQ 'X'.
*     Message: Service contract &1 has been marked as deleted.
      LS_RETURN-TYPE   = 'S'.
      LS_RETURN-ID     = 'ZSDSCM01'.
      LS_RETURN-NUMBER = '023'.
      LS_RETURN-MESSAGE_V1  = IF_OBJECT_ID.
    ELSEIF IS_SRVCONTR-HEAD-OBJECT_ID IS INITIAL.
*     Message: Service contract &1 has been created.
      LS_RETURN-TYPE   = 'S'.
      LS_RETURN-ID     = 'ZSDSCM01'.
      LS_RETURN-NUMBER = '004'.
      LS_RETURN-MESSAGE_V1  = IF_OBJECT_ID.
    ELSE.
*     Message: Service contract &1 has been changed.
      LS_RETURN-TYPE   = 'S'.
      LS_RETURN-ID     = 'ZSDSCM01'.
      LS_RETURN-NUMBER = '005'.
      LS_RETURN-MESSAGE_V1  = IF_OBJECT_ID.
    ENDIF.
* Error
  ELSE.
*   Get 1st Error message
    LOOP AT IT_RETURN ASSIGNING FIELD-SYMBOL(<L_RETURN>)
                      WHERE ( TYPE EQ 'X' OR
                              TYPE EQ 'A' OR
                              TYPE EQ 'E' ).
      EXIT.
    ENDLOOP.
    IF SY-SUBRC NE 0.
*     Get 1st Message
      READ TABLE IT_RETURN ASSIGNING <L_RETURN>
                           INDEX 1.
    ENDIF.
    IF SY-SUBRC EQ 0.
      LS_RETURN = <L_RETURN>.
    ENDIF.
  ENDIF.

* Assign Fields value from result.....
  ASSIGN_RESPONSE_FROM_DATA(
    EXPORTING
      IS_SRVCONTR = IS_SRVCONTR
    CHANGING
      CS_RESPONSE = CS_RESPONSE ).

* Assign Service Contract Result
  IF LS_RETURN-TYPE = 'S'.
    CS_RESPONSE-SVC_NO = IF_OBJECT_ID.
    CS_RESPONSE-RESP_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_SUCCESS.
  ELSE.
    CS_RESPONSE-RESP_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
  ENDIF.
  IF LS_RETURN-MESSAGE IS NOT INITIAL.
    CS_RESPONSE-RESP_MESSAGE = LS_RETURN-MESSAGE.
  ELSE.
    MESSAGE ID LS_RETURN-ID TYPE 'I'
            NUMBER LS_RETURN-NUMBER
            WITH LS_RETURN-MESSAGE_V1 LS_RETURN-MESSAGE_V2
                 LS_RETURN-MESSAGE_V3 LS_RETURN-MESSAGE_V4
            INTO CS_RESPONSE-RESP_MESSAGE.
  ENDIF.

ENDMETHOD.


METHOD COLLECT_EXCEPTION.

  DATA:
    LS_MSG         TYPE BAL_S_MSG.


* Get Exception Message(s)
  LOOP AT IT_EXCEPTION ASSIGNING FIELD-SYMBOL(<L_EXCEPTION>).
    CLEAR  LS_MSG.
    CALL FUNCTION 'CRM_MESSAGES_GET_MSG_INFO'
      EXPORTING
        IS_MSG_HANDLE           = <L_EXCEPTION>-MSG_HANDLE
      IMPORTING
        ES_MSG                  = LS_MSG
      EXCEPTIONS
        NOT_FOUND               = 1
        WRONG_CONTEXT_STRUCTURE = 2
        DATA_ERROR              = 3
        OTHERS                  = 4.
    IF sy-subrc NE 0.
      CLEAR LS_MSG.
    ENDIF.

    INSERT VALUE #( TYPE       = LS_MSG-MSGTY
                    ID         = LS_MSG-MSGID
                    NUMBER     = LS_MSG-MSGNO
                    MESSAGE_V1 = LS_MSG-MSGV1
                    MESSAGE_V2 = LS_MSG-MSGV2
                    MESSAGE_V3 = LS_MSG-MSGV3
                    MESSAGE_V4 = LS_MSG-MSGV4 )
            INTO TABLE CT_RETURN.
  ENDLOOP.

ENDMETHOD.


METHOD COLLECT_INPUT_FIELDS.

  READ TABLE CT_INPUT_FIELDS ASSIGNING FIELD-SYMBOL(<L_INPUT_FIELDS>)
                             WITH KEY REF_GUID = IF_REF_GUID
                                      REF_KIND = IF_REF_KIND
                                      OBJECTNAME = IF_OBJECTNAME
                                      LOGICAL_KEY = IF_LOGICAL_KEY.
  IF SY-SUBRC NE 0.
    INSERT VALUE #( REF_GUID = IF_REF_GUID
                    REF_KIND = IF_REF_KIND
                    OBJECTNAME = IF_OBJECTNAME
                    LOGICAL_KEY = IF_LOGICAL_KEY )
           INTO TABLE CT_INPUT_FIELDS
           ASSIGNING <L_INPUT_FIELDS>.
  ENDIF.

  IF IF_FIELDNAME IS NOT INITIAL.
    READ TABLE <L_INPUT_FIELDS>-FIELD_NAMES TRANSPORTING NO FIELDS
                                            WITH KEY FIELDNAME = IF_FIELDNAME.
    IF SY-SUBRC NE 0.
      INSERT VALUE #( FIELDNAME = IF_FIELDNAME )
             INTO TABLE <L_INPUT_FIELDS>-FIELD_NAMES.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD DETERMINE_COND_SEQNO.

  DATA:
    LF_INDEX TYPE  I,
    LF_ZAEHK TYPE  PRCT_PP_COUNTER.


* Initialize Output
  CLEAR: EF_ZAEHK.

* Count from Pricing Procedure
  READ TABLE IT_T683S TRANSPORTING NO FIELDS
                      WITH KEY STUNR = IF_STUNR
                      BINARY SEARCH.
  IF SY-SUBRC NE 0.
*   Critical error
    CLEAR SY-TABIX.
  ENDIF.
  LF_INDEX = SY-TABIX - 1.
  IF LF_INDEX GE 1.
    LOOP AT IT_T683S ASSIGNING FIELD-SYMBOL(<L_T683S>)
                     FROM 1 TO LF_INDEX.
      IF <L_T683S>-KSCHL IS NOT INITIAL.
*       Count condition
        LOOP AT IT_COND TRANSPORTING NO FIELDS
                        WHERE STUNR = <L_T683S>-STUNR
                          AND KSCHL = <L_T683S>-KSCHL.
          LF_ZAEHK = LF_ZAEHK + 1.
        ENDLOOP.
      ELSE.
        LF_ZAEHK = LF_ZAEHK + 1.
      ENDIF.
    ENDLOOP.
  ENDIF.

* Assign Result
  EF_ZAEHK = LF_ZAEHK + IF_ZAEHK.

ENDMETHOD.


METHOD GET_BILLPLAN_TYPE.

  DATA:
    LS_ORDERADM_H_WRK TYPE   CRMT_ORDERADM_H_WRK,
    LS_ORDERADM_I_WRK TYPE   CRMT_ORDERADM_I_WRK.

  DATA:
    LF_PROCESS_TYPE TYPE  CRMT_PROCESS_TYPE,
    LF_ITM_TYPE     TYPE  CRMT_ITEM_TYPE.


* Initialize Output
  CLEAR: EF_BILLPLAN_TYPE.

* Assign Process Type
  IF IF_PROCESS_TYPE IS NOT INITIAL.
    LF_PROCESS_TYPE = IF_PROCESS_TYPE.
  ELSE.
*   Read from Header GUI
    CALL FUNCTION 'CRM_ORDERADM_H_READ_OB'
      EXPORTING
        IV_GUID                       = IF_HEAD_GUID
      IMPORTING
        ES_ORDERADM_H_WRK             = LS_ORDERADM_H_WRK
      EXCEPTIONS
        PARAMETER_ERROR               = 1
        RECORD_NOT_FOUND              = 2
        AT_LEAST_ONE_RECORD_NOT_FOUND = 3
        OTHERS                        = 4.
    IF SY-SUBRC <> 0.
      CLEAR LS_ORDERADM_H_WRK.
    ENDIF.
    LF_PROCESS_TYPE = LS_ORDERADM_H_WRK-PROCESS_TYPE.
  ENDIF.

* Assign Item Type
  IF IF_ITM_TYPE IS NOT INITIAL.
    LF_ITM_TYPE = IF_ITM_TYPE.
  ELSE.
*   Read from Item GUI
    CALL FUNCTION 'CRM_ORDERADM_I_READ_OB'
      EXPORTING
        IV_GUID             = IF_ITEM_GUID
      IMPORTING
        ES_ORDERADM_I_WRK   = LS_ORDERADM_I_WRK
      EXCEPTIONS
        ITEM_DOES_NOT_EXIST = 1
        ERROR_OCCURRED      = 2
        OTHERS              = 3.
    IF SY-SUBRC <> 0.
      CLEAR LS_ORDERADM_I_WRK.
    ENDIF.
    LF_ITM_TYPE = LS_ORDERADM_I_WRK-ITM_TYPE.
  ENDIF.

* Get Billing Plan type from configuration
  SELECT BILLPLAN_TYPE
    FROM CRMC_BILP_BT_IT
   WHERE PROCESS_TYPE EQ @LF_PROCESS_TYPE
     AND ITM_TYPE     EQ @LF_ITM_TYPE
    ORDER BY PRIMARY KEY
    INTO @EF_BILLPLAN_TYPE
      UP TO 1 ROWS.
  ENDSELECT.
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

ENDMETHOD.


METHOD GET_GENC.

  CONSTANTS:
    LC_DEFT_VKORG TYPE  ZSDSDE_PARAM_NAME VALUE 'DEFAULT_SALES_ORG',
    LC_DEFT_VTWEG TYPE  ZSDSDE_PARAM_NAME VALUE 'DEFAULT_DIS_CHANNEL',
    LC_DEFT_SPART TYPE  ZSDSDE_PARAM_NAME VALUE 'DEFAULT_DIVISION',
    LC_DEFT_LOB   TYPE  ZSDSDE_PARAM_NAME VALUE 'DEFAULT_LOB'.

  DATA:
    LT_GENC       TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

  DATA:
    LF_REPID   TYPE  PROGRAMM VALUE 'ZCL_SDSCM_SERVICE_CONTRCT_SERV'.


* Initialize Output
  CLEAR: GF_DEFT_VKORG,
         GF_DEFT_VTWEG,
         GF_DEFT_SPART,
         GF_DEFT_LOB.

* Read All GenC constants for program
  CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
    EXPORTING
      IF_REPID = LF_REPID
    IMPORTING
      ET_GEN_C = LT_GENC.


* Assign GenC Constants
  LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<L_GENC>).

    CASE <L_GENC>-PARAM.
*     ------------------------------------
*     Default Sales Org
*     ------------------------------------
      WHEN LC_DEFT_VKORG.
        GF_DEFT_VKORG = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Dist. Chan.
*     ------------------------------------
      WHEN LC_DEFT_VTWEG.
        GF_DEFT_VTWEG = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Division
*     ------------------------------------
      WHEN LC_DEFT_SPART.
        GF_DEFT_SPART = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default LOB
*     ------------------------------------
      WHEN LC_DEFT_LOB.
        GF_DEFT_LOB = <L_GENC>-VALUE_LOW.

    ENDCASE.

  ENDLOOP.

ENDMETHOD.


METHOD GET_PRICE_PROCEDURE.

  DATA:
    LS_ORDERADM_H_WRK TYPE CRMT_ORDERADM_H_WRK.


* Initialize Output
  CLEAR: ET_T683S.

  CALL FUNCTION 'CRM_ORDERADM_H_READ_OB'
    EXPORTING
      IV_GUID                       = IF_HEADER_GUID
    IMPORTING
      ES_ORDERADM_H_WRK             = LS_ORDERADM_H_WRK
    EXCEPTIONS
      PARAMETER_ERROR               = 1
      RECORD_NOT_FOUND              = 2
      AT_LEAST_ONE_RECORD_NOT_FOUND = 3
      OTHERS                        = 4.
  IF SY-SUBRC <> 0.
    RETURN.
  ENDIF.

  SELECT STUNR,
         ZAEHK,
         KSCHL
    FROM T683S
   WHERE KVEWE EQ 'A'
     AND KAPPL EQ 'V'
     AND KALSM EQ @LS_ORDERADM_H_WRK-KALSM
    INTO TABLE @ET_T683S.
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

ENDMETHOD.


METHOD INITIALIZE_DATA.

  GET_GENC( ).

ENDMETHOD.


METHOD LOCK_SRVCONTR.

  CLEAR RF_RESULT.

  CALL FUNCTION 'ENQUEUE_E_CRM_ORDER'
    EXPORTING
      MODE_CRMD_ORDERADM_H = 'E'
      CLIENT               = SY-MANDT
      GUID                 = IF_GUID
    EXCEPTIONS
      FOREIGN_LOCK         = 1
      SYSTEM_FAILURE       = 2
      OTHERS               = 3.
  IF SY-SUBRC <> 0.
    RETURN.
  ELSE.
    CALL FUNCTION 'DEQUEUE_E_CRM_ORDER'
      EXPORTING
        MODE_CRMD_ORDERADM_H = 'E'
        CLIENT               = SY-MANDT
        GUID                 = IF_GUID.
    RF_RESULT = ABAP_TRUE.
  ENDIF.

ENDMETHOD.


METHOD MAINTAIN_CRM_SRVCONTR.
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  31.07.2025  420000714   Wuthichai L. - Fix logic checking delete status
*-----------------------------------------------------------------------

  DATA:
    LT_EXCEPTION       TYPE  CRMT_EXCEPTION_T,
    LT_ORDERADM_H      TYPE  CRMT_ORDERADM_H_COMT,
    LT_ORDERADM_I      TYPE  CRMT_ORDERADM_I_COMT,
    LT_INPUT_FIELDS    TYPE  CRMT_INPUT_FIELD_TAB,
    LT_APPOINTMENT     TYPE  CRMT_APPOINTMENT_COMT,
    LT_SALES           TYPE  CRMT_SALES_COMT,
    LT_PRICING         TYPE  CRMT_PRICING_COMT,
    LT_STATUS          TYPE  CRMT_STATUS_COMT,
    LT_ORGMAN          TYPE  CRMT_ORGMAN_COMT,
    LT_AC_ASSIGN       TYPE  CRMT_AC_ASSIGN_COMT,
    LT_CUSTOMER_H      TYPE  CRMT_CUSTOMER_H_COMT,
    LT_PARTNER         TYPE  CRMT_PARTNER_COMT,
    LT_SCHEDLIN_I      TYPE  CRMT_SCHEDLIN_I_COMT,
    LT_ORDPRP_OBJL_I_D TYPE  CRMT_ORDPRP_OBJL_I_D_COMT,
    LT_PRIDOC          TYPE  CRMT_PRIDOC_COMT,
    LT_BILLPLAN        TYPE  CRMT_BILLPLAN_COMT,
    LT_GUID            TYPE  CRMT_OBJECT_GUID_TAB,
    LT_SAVED           TYPE  CRMT_RETURN_OBJECTS,
*   2nd Round Maintain
    LT_STATUS2         TYPE  CRMT_STATUS_COMT,
    LT_INPUT_FIELDS2   TYPE  CRMT_INPUT_FIELD_TAB,
*   3nd Round Maintain
    LT_INPUT_FIELDS3   TYPE  CRMT_INPUT_FIELD_TAB.          "+420000714

  DATA:
    LS_ORDERADM_H  TYPE  CRMT_ORDERADM_H_COM,
    LS_APPOINTMENT TYPE  CRMT_APPOINTMENT_COM,
    LS_SALES       TYPE  CRMT_SALES_COM,
    LS_PRICING     TYPE  CRMT_PRICING_COM,
    LS_STATUS      TYPE  CRMT_STATUS_COM,
    LS_ORGMAN      TYPE  CRMT_ORGMAN_COM,
    LS_AC_ASSIGN   TYPE  CRMT_AC_ASSIGN_COM,
    LS_CUSTOMER_H  TYPE  CRMT_CUSTOMER_H_COM.

  DATA:
    LF_MODE        TYPE  CRMT_MODE,
    LF_GUID        TYPE  CRMT_OBJECT_GUID,
    LF_LOGICAL_KEY TYPE  CRMT_LOGICAL_KEY.


* Initialize Output
  CLEAR: EF_OBJECT_ID,
         ET_RETURN.

  IF IS_SRVCONTR-HEAD-HEADER_GUID IS INITIAL.
    LF_MODE = GC_MODE_CREATE.
    CALL FUNCTION 'CRM_GUID_CREATE'
      IMPORTING
        EV_GUID = LF_GUID.
  ELSE.
    IF NOT LOCK_SRVCONTR( IS_SRVCONTR-HEAD-HEADER_GUID ).
*     Error: GUID &1 is currently locked by user &2. Please try again later.
      INSERT VALUE #( TYPE       = 'E'
                      ID         = 'ZSDSCM01'
                      NUMBER     = '007'
                      MESSAGE_V1 = IS_SRVCONTR-HEAD-HEADER_GUID
                      MESSAGE_V2 = SY-MSGV1 )
              INTO TABLE ET_RETURN.
      RETURN.
    ENDIF.
    LF_MODE = GC_MODE_CHANGE.
    LF_GUID = IS_SRVCONTR-HEAD-HEADER_GUID.
  ENDIF.

* --------------------------
* ORDERADM_H Fields
* --------------------------
  CLEAR LS_ORDERADM_H.
  LS_ORDERADM_H-GUID = LF_GUID.
  LS_ORDERADM_H-MODE = LF_MODE.
* Contract Type (Process_type)
  IF IS_SRVCONTR-HEADX-PROCESS_TYPE EQ 'X'.
    LS_ORDERADM_H-PROCESS_TYPE = IS_SRVCONTR-HEAD-PROCESS_TYPE.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_H'
        IF_FIELDNAME    = 'PROCESS_TYPE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Description
  IF IS_SRVCONTR-HEADX-DESCRIPTION EQ 'X'.
    LS_ORDERADM_H-DESCRIPTION = IS_SRVCONTR-HEAD-DESCRIPTION.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_H'
        IF_FIELDNAME    = 'DESCRIPTION'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
  INSERT LS_ORDERADM_H INTO TABLE LT_ORDERADM_H.

* --------------------------
* APPOINTMENT Fields
* --------------------------
* Contract Start
  IF IS_SRVCONTR-HEADX-CONTSTART EQ 'X'.
    CLEAR LS_APPOINTMENT.
    LS_APPOINTMENT-MODE = LF_MODE.
    LS_APPOINTMENT-REF_GUID	      = LF_GUID.
    LS_APPOINTMENT-REF_KIND	      = GC_REFKIND_HEAD.
    LS_APPOINTMENT-APPT_TYPE      = 'CONTSTART'.
    LS_APPOINTMENT-TIMESTAMP_FROM = IS_SRVCONTR-HEAD-CONTSTART.
    INSERT LS_APPOINTMENT INTO TABLE LT_APPOINTMENT.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'APPOINTMENT'
        IF_LOGICAL_KEY  = 'CONTSTART'
        IF_FIELDNAME    = 'TIMESTAMP_FROM'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Contract End
  IF IS_SRVCONTR-HEADX-CONTEND EQ 'X'.
    CLEAR LS_APPOINTMENT.
    LS_APPOINTMENT-MODE = LF_MODE.
    LS_APPOINTMENT-REF_GUID	      = LF_GUID.
    LS_APPOINTMENT-REF_KIND	      = GC_REFKIND_HEAD.
    LS_APPOINTMENT-APPT_TYPE      = 'CONTEND'.
    LS_APPOINTMENT-TIMESTAMP_FROM = IS_SRVCONTR-HEAD-CONTEND.
    INSERT LS_APPOINTMENT INTO TABLE LT_APPOINTMENT.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'APPOINTMENT'
        IF_LOGICAL_KEY  = 'CONTEND'
        IF_FIELDNAME    = 'TIMESTAMP_FROM'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.

* --------------------------
* SALES Fields
* --------------------------
  IF IS_SRVCONTR-HEADX-PO_NUMBER_SOLD EQ 'X'.
    CLEAR LS_SALES.
    LS_SALES-REF_GUID = LF_GUID.
    LS_SALES-REF_KIND	= GC_REFKIND_HEAD.
    LS_SALES-PO_NUMBER_SOLD = IS_SRVCONTR-HEAD-PO_NUMBER_SOLD.
    INSERT LS_SALES INTO TABLE LT_SALES.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'SALES'
        IF_FIELDNAME    = 'PO_NUMBER_SOLD'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.

* --------------------------
* PRICING Fields
* --------------------------
  IF IS_SRVCONTR-HEADX-PMNTTRMS EQ 'X'.
    CLEAR LS_PRICING.
    LS_PRICING-REF_GUID = LF_GUID.
    LS_PRICING-REF_KIND	= GC_REFKIND_HEAD.
    LS_PRICING-PMNTTRMS = IS_SRVCONTR-HEAD-PMNTTRMS.
    INSERT LS_PRICING INTO TABLE LT_PRICING.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'PRICING'
        IF_FIELDNAME    = 'PMNTTRMS'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.

* --------------------------
* STATUS Fields
* --------------------------
* For Delete mode, Set status = Deleted
  IF IS_SRVCONTR-HEAD-DEL_FLAG EQ 'X' OR
     IS_SRVCONTR-HEADX-STATUS EQ 'X'.

    CLEAR LS_STATUS.
    LS_STATUS-REF_GUID = LF_GUID.
    LS_STATUS-REF_KIND  = GC_REFKIND_HEAD.
    LS_STATUS-ACTIVATE  = 'X'.
    LS_STATUS-USER_STAT_PROC = GC_STATUS_PROFILE.

    IF IS_SRVCONTR-HEAD-DEL_FLAG EQ 'X'.
*<-- Start of Insertion 420000714 31.07.2025 (Reset Status before delete)
      IF IS_SRVCONTR-HEAD-CURRENT_STATUS EQ 'C' OR "Completed
         IS_SRVCONTR-HEAD-CURRENT_STATUS EQ 'D' .  "Released
        LS_STATUS-STATUS = GC_STATUS_INPR.
        INSERT LS_STATUS INTO TABLE LT_STATUS.
        LF_LOGICAL_KEY = LS_STATUS-STATUS && LS_STATUS-USER_STAT_PROC.
        COLLECT_INPUT_FIELDS(
          EXPORTING
            IF_REF_GUID     = LF_GUID
            IF_REF_KIND     = GC_REFKIND_HEAD
            IF_OBJECTNAME   = 'STATUS'
            IF_LOGICAL_KEY  = LF_LOGICAL_KEY
            IF_FIELDNAME    = 'ACTIVATE'
          CHANGING
            CT_INPUT_FIELDS = LT_INPUT_FIELDS3 ).
      ENDIF.
*--> End of Insertion 420000714 31.07.2025
      LS_STATUS-STATUS = GC_STATUS_DELE.

    ELSE.
      CASE IS_SRVCONTR-HEAD-STATUS.
        WHEN 'A'. "Open
          LS_STATUS-STATUS = GC_STATUS_OPEN.
        WHEN 'B'. "Inprogress
          LS_STATUS-STATUS = GC_STATUS_INPR.
        WHEN 'C'. "Complete
          LS_STATUS-STATUS = GC_STATUS_COMP.
        WHEN 'D'. "Release
          LS_STATUS-STATUS = GC_STATUS_RELE.
      ENDCASE.
    ENDIF.
    INSERT LS_STATUS INTO TABLE LT_STATUS.
    LF_LOGICAL_KEY = LS_STATUS-STATUS && LS_STATUS-USER_STAT_PROC.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'STATUS'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'ACTIVATE'
      CHANGING
*       CT_INPUT_FIELDS = LT_INPUT_FIELDS ). "-420000714
        CT_INPUT_FIELDS = LT_INPUT_FIELDS3 ). "+420000714
  ENDIF.

* --------------------------
* ORGMAN Fields
* --------------------------
  CLEAR LS_ORGMAN.
* Sales Org
  IF IS_SRVCONTR-HEADX-SALES_ORG_SD EQ 'X'.
    LS_ORGMAN-REF_GUID       = LF_GUID.
    LS_ORGMAN-REF_KIND       = GC_REFKIND_HEAD.
    LS_ORGMAN-SALES_ORG_SD = IS_SRVCONTR-HEAD-SALES_ORG_SD.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'ORGMAN'
        IF_FIELDNAME    = 'SALES_ORG_SD'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Distribution Channel
  IF IS_SRVCONTR-HEADX-DIS_CHANNEL EQ 'X'.
    LS_ORGMAN-REF_GUID    = LF_GUID.
    LS_ORGMAN-REF_KIND    = GC_REFKIND_HEAD.
    LS_ORGMAN-DIS_CHANNEL = IS_SRVCONTR-HEAD-DIS_CHANNEL.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'ORGMAN'
        IF_FIELDNAME    = 'DIS_CHANNEL'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Division
  IF IS_SRVCONTR-HEADX-DIVISION EQ 'X'.
    LS_ORGMAN-REF_GUID    = LF_GUID.
    LS_ORGMAN-REF_KIND    = GC_REFKIND_HEAD.
    LS_ORGMAN-DIVISION = IS_SRVCONTR-HEAD-DIVISION.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'ORGMAN'
        IF_FIELDNAME    = 'DIVISION'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Sales Group
  IF IS_SRVCONTR-HEADX-SALES_GROUP_SD EQ 'X'.
    LS_ORGMAN-REF_GUID       = LF_GUID.
    LS_ORGMAN-REF_KIND       = GC_REFKIND_HEAD.
    LS_ORGMAN-SALES_GROUP_SD = IS_SRVCONTR-HEAD-SALES_GROUP_SD.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'ORGMAN'
        IF_FIELDNAME    = 'SALES_GROUP_SD'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Sales Office
  IF IS_SRVCONTR-HEADX-SALES_OFFICE_SD EQ 'X'.
    LS_ORGMAN-REF_GUID       = LF_GUID.
    LS_ORGMAN-REF_KIND       = GC_REFKIND_HEAD.
    LS_ORGMAN-SALES_OFFICE_SD = IS_SRVCONTR-HEAD-SALES_OFFICE_SD.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'ORGMAN'
        IF_FIELDNAME    = 'SALES_OFFICE_SD'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
  IF LS_ORGMAN IS NOT INITIAL.
    INSERT LS_ORGMAN INTO TABLE LT_ORGMAN.
  ENDIF.

* --------------------------
* AC_ASSIGN Fields
* --------------------------
* WBS
  IF IS_SRVCONTR-HEADX-AC_ASSIGNMENT EQ 'X'.
    CLEAR LS_AC_ASSIGN.
    LS_AC_ASSIGN-REF_GUID  = LF_GUID.
    LS_AC_ASSIGN-REF_KIND  = GC_REFKIND_HEAD.
    LS_AC_ASSIGN-AC_OBJECT_TYPE = IS_SRVCONTR-HEAD-AC_OBJECT_TYPE.
    LS_AC_ASSIGN-AC_ASSIGNMENT  = IS_SRVCONTR-HEAD-AC_ASSIGNMENT.
    INSERT LS_AC_ASSIGN INTO TABLE LT_AC_ASSIGN.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'AC_ASSIGN'
        IF_FIELDNAME    = 'AC_OBJECT_TYPE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_HEAD
        IF_OBJECTNAME   = 'AC_ASSIGN'
        IF_FIELDNAME    = 'AC_ASSIGNMENT'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.

* --------------------------
* CUSTOMER_H Fields
* --------------------------
  CLEAR LS_CUSTOMER_H.
* Bill Method
  IF IS_SRVCONTR-HEADX-ZZ1_BILL_METHOD EQ 'X'.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_BILL_METHOD = IS_SRVCONTR-HEAD-ZZ1_BILL_METHOD.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_BILL_METHOD'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* External Reference no
  IF IS_SRVCONTR-HEADX-ZZ1_EXT_REFNO EQ 'X'.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_EXT_REFNO = IS_SRVCONTR-HEAD-ZZ1_EXT_REFNO.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_EXT_REFNO'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* LOB
  IF IS_SRVCONTR-HEADX-ZZ1_LOB_SRH EQ 'X'.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_LOB_SRH = IS_SRVCONTR-HEAD-ZZ1_LOB_SRH.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_LOB_SRH'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.

  IF LS_CUSTOMER_H IS NOT INITIAL.
    INSERT LS_CUSTOMER_H INTO TABLE LT_CUSTOMER_H.
  ENDIF.

* --------------------------
* PARTNER Fields
* --------------------------
  ASSIGN_PARTNERS(
    EXPORTING
      IF_GUID         = LF_GUID
      IT_PARTNER      = IS_SRVCONTR-PARTNER
    CHANGING
      CT_PARTNER      = LT_PARTNER
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

* --------------------------
* ITEM Fields
* --------------------------
  ASSIGN_ITEMS(
    EXPORTING
      IF_GUID            = LF_GUID
      IS_HEAD            = IS_SRVCONTR-HEAD
      IT_ITEM            = IS_SRVCONTR-ITEM
    IMPORTING
      ET_RETURN          = ET_RETURN
    CHANGING
      CT_ORDERADM_I      = LT_ORDERADM_I
      CT_SCHEDLIN_I      = LT_SCHEDLIN_I
      CT_AC_ASSIGN       = LT_AC_ASSIGN
      CT_STATUS          = LT_STATUS2
      CT_ORDPRP_OBJL_I_D = LT_ORDPRP_OBJL_I_D
      CT_PRIDOC          = LT_PRIDOC
      CT_BILLPLAN        = LT_BILLPLAN
      CT_INPUT_FIELDS    = LT_INPUT_FIELDS
      CT_INPUT_FIELDS2   = LT_INPUT_FIELDS2 ).
  IF ET_RETURN IS NOT INITIAL.
    RETURN.
  ENDIF.

* --------------------------
* Call Function Maintain Service Contract
* --------------------------
  CALL FUNCTION 'CRM_ORDER_MAINTAIN'
    EXPORTING
      IT_SALES           = LT_SALES
      IT_PRICING         = LT_PRICING
      IT_PRIDOC          = LT_PRIDOC
      IT_ORGMAN          = LT_ORGMAN
      IT_CUSTOMER_H      = LT_CUSTOMER_H
      IT_APPOINTMENT     = LT_APPOINTMENT
      IT_SCHEDLIN_I      = LT_SCHEDLIN_I
      IT_PARTNER         = LT_PARTNER
      IT_STATUS          = LT_STATUS
      IT_BILLPLAN        = LT_BILLPLAN
      IT_ORDPRP_OBJL_I_D = LT_ORDPRP_OBJL_I_D
      IT_AC_ASSIGN       = LT_AC_ASSIGN
    IMPORTING
      ET_EXCEPTION       = LT_EXCEPTION
    CHANGING
      CT_ORDERADM_H      = LT_ORDERADM_H
      CT_ORDERADM_I      = LT_ORDERADM_I
      CT_INPUT_FIELDS    = LT_INPUT_FIELDS
    EXCEPTIONS
      ERROR_OCCURRED     = 1
      DOCUMENT_LOCKED    = 2
      NO_CHANGE_ALLOWED  = 3
      NO_AUTHORITY       = 4
      OTHERS             = 5.
  IF SY-SUBRC <> 0 OR
     LT_EXCEPTION IS NOT INITIAL.
    IF LT_EXCEPTION IS INITIAL.
      INSERT VALUE #( TYPE       = SY-MSGTY
                      ID         = SY-MSGID
                      NUMBER     = SY-MSGNO
                      MESSAGE_V1 = SY-MSGV1
                      MESSAGE_V2 = SY-MSGV2
                      MESSAGE_V3 = SY-MSGV3
                      MESSAGE_V4 = SY-MSGV4 )
              INTO TABLE ET_RETURN.
    ELSE.
      COLLECT_EXCEPTION(
        EXPORTING
          IT_EXCEPTION = LT_EXCEPTION
        CHANGING
          CT_RETURN    = ET_RETURN ).
    ENDIF.
    RETURN.
  ENDIF.

* 2nd Maintain exist?
* - Item status has issue when update together with
*   header status in same CRM_ORDER_MAINTAIN calling
  IF LT_INPUT_FIELDS2 IS NOT INITIAL.
    CALL FUNCTION 'CRM_ORDER_MAINTAIN'
      EXPORTING
        IT_STATUS         = LT_STATUS2
      IMPORTING
        ET_EXCEPTION      = LT_EXCEPTION
      CHANGING
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS2
      EXCEPTIONS
        ERROR_OCCURRED    = 1
        DOCUMENT_LOCKED   = 2
        NO_CHANGE_ALLOWED = 3
        NO_AUTHORITY      = 4
        OTHERS            = 5.
    IF SY-SUBRC <> 0 OR
       LT_EXCEPTION IS NOT INITIAL.
      IF LT_EXCEPTION IS INITIAL.
        INSERT VALUE #( TYPE       = SY-MSGTY
                        ID         = SY-MSGID
                        NUMBER     = SY-MSGNO
                        MESSAGE_V1 = SY-MSGV1
                        MESSAGE_V2 = SY-MSGV2
                        MESSAGE_V3 = SY-MSGV3
                        MESSAGE_V4 = SY-MSGV4 )
                INTO TABLE ET_RETURN.
      ELSE.
        COLLECT_EXCEPTION(
          EXPORTING
            IT_EXCEPTION = LT_EXCEPTION
          CHANGING
            CT_RETURN    = ET_RETURN ).
      ENDIF.
      RETURN.
    ENDIF.
  ENDIF.

*<-- Start of Insertion 31.07.2025 (3rd Maintain)
* 2nd Maintain exist?
* - Header status has issue when update together with
*   item status in same CRM_ORDER_MAINTAIN calling
  IF LT_INPUT_FIELDS3 IS NOT INITIAL.
    CALL FUNCTION 'CRM_ORDER_MAINTAIN'
      EXPORTING
        IT_STATUS         = LT_STATUS
      IMPORTING
        ET_EXCEPTION      = LT_EXCEPTION
      CHANGING
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS3
      EXCEPTIONS
        ERROR_OCCURRED    = 1
        DOCUMENT_LOCKED   = 2
        NO_CHANGE_ALLOWED = 3
        NO_AUTHORITY      = 4
        OTHERS            = 5.
    IF SY-SUBRC <> 0 OR
       LT_EXCEPTION IS NOT INITIAL.
      IF LT_EXCEPTION IS INITIAL.
        INSERT VALUE #( TYPE       = SY-MSGTY
                        ID         = SY-MSGID
                        NUMBER     = SY-MSGNO
                        MESSAGE_V1 = SY-MSGV1
                        MESSAGE_V2 = SY-MSGV2
                        MESSAGE_V3 = SY-MSGV3
                        MESSAGE_V4 = SY-MSGV4 )
                INTO TABLE ET_RETURN.
      ELSE.
        COLLECT_EXCEPTION(
          EXPORTING
            IT_EXCEPTION = LT_EXCEPTION
          CHANGING
            CT_RETURN    = ET_RETURN ).
      ENDIF.
      RETURN.
    ENDIF.
  ENDIF.
*--> End of Insertion 31.07.2025

* Save Document
  INSERT LF_GUID INTO TABLE LT_GUID.
  CALL FUNCTION 'CRM_ORDER_SAVE'
    EXPORTING
      IT_OBJECTS_TO_SAVE   = LT_GUID
      IV_UPDATE_TASK_LOCAL = 'X'
*     IV_NO_BDOC_SEND      = 'X'
    IMPORTING
      ET_SAVED_OBJECTS     = LT_SAVED
      ET_EXCEPTION         = LT_EXCEPTION
    EXCEPTIONS
      DOCUMENT_NOT_SAVED   = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0 OR
     LT_EXCEPTION IS NOT INITIAL.
    IF LT_EXCEPTION IS INITIAL.
      INSERT VALUE #( TYPE       = SY-MSGTY
                      ID         = SY-MSGID
                      NUMBER     = SY-MSGNO
                      MESSAGE_V1 = SY-MSGV1
                      MESSAGE_V2 = SY-MSGV2
                      MESSAGE_V3 = SY-MSGV3
                      MESSAGE_V4 = SY-MSGV4 )
              INTO TABLE ET_RETURN.
    ELSE.
      COLLECT_EXCEPTION(
        EXPORTING
          IT_EXCEPTION = LT_EXCEPTION
        CHANGING
          CT_RETURN    = ET_RETURN ).
    ENDIF.
    RETURN.
  ENDIF.

* Return Object ID
  READ TABLE LT_SAVED ASSIGNING FIELD-SYMBOL(<L_SAVED>)
                      WITH KEY GUID = LF_GUID.
  IF SY-SUBRC NE 0.
*   Error: Error during processing GUID &1.
    INSERT VALUE #( TYPE       = 'E'
                    ID         = 'ZSDSCM01'
                    NUMBER     = '006'
                    MESSAGE_V1 = LF_GUID )
            INTO TABLE ET_RETURN.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

* Commit Work
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      WAIT = 'X'.

* Assign Result
  EF_OBJECT_ID = <L_SAVED>-OBJECT_ID.

ENDMETHOD.


METHOD MAINTAIN_SERVICE_CONTRACT.

  DATA:
    LT_RETURN    TYPE  BAPIRET2_TAB.

  DATA:
    LS_SRVCONTR  TYPE  TS_SRVCONTR_DATA.

  DATA:
    LF_OBJECT_ID  TYPE  TS_SRVCONTR_DATA-HEAD-OBJECT_ID.


* Initialize Output
  CLEAR: ES_RESPONSE.

* -------------------
* Validate Request
* -------------------
  VALIDATE_REQUEST(
    EXPORTING
      IS_REQUEST  = IS_REQUEST
    IMPORTING
      ES_SRVCONTR = LS_SRVCONTR
      EF_STATUS   = EF_STATUS
      EF_MESSAGE  = EF_MESSAGE ).
  IF EF_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

* Call BAPI to maintain Service Contract
  MAINTAIN_CRM_SRVCONTR(
    EXPORTING
      IS_SRVCONTR  = LS_SRVCONTR
    IMPORTING
      EF_OBJECT_ID = LF_OBJECT_ID
      ET_RETURN    = LT_RETURN ).

* Assign Processing Result
  ASSIGN_SRVCONTR_RESULT(
    EXPORTING
      IS_SRVCONTR  = LS_SRVCONTR
      IF_OBJECT_ID = LF_OBJECT_ID
      IT_RETURN    = LT_RETURN
    CHANGING
      CS_RESPONSE  = ES_RESPONSE ).

ENDMETHOD.


METHOD PROCESS_DATA.
*-----------------------------------------------------------------------
*  Class              : ZCL_SDSCM_SERVICE_CONTRCT_SERV
*  Creation Date      : 03.06.2024
*  Author             : Wuthichai L.(Eviden)
*  Add-on ID          : CMI005, CMI007
*  Description        : This is a Processing class of REST interface
*                       CMI005 to maintain Service Contract
*  Purpose            : To maintain Service Contract
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

  DATA:
    LS_REQUEST  TYPE  ZSDSCMS005.

  FIELD-SYMBOLS:
    <L_RESPONSE>  TYPE  ZSDSCMS005.


* Initialize Output
  CLEAR: EF_STATUS,
         EF_MESSAGE,
         EF_HTTP_ERROR.

  LS_REQUEST = IREF_REQUEST_DATA->*.

  ASSIGN EREF_RESPONSE_DATA->* TO <L_RESPONSE>.
  IF SY-SUBRC NE 0.
*   Critical error
    RETURN.
  ENDIF.

* Maintain Service Contract
  MAINTAIN_SERVICE_CONTRACT(
    EXPORTING
      IS_REQUEST  = LS_REQUEST
    IMPORTING
      ES_RESPONSE = <L_RESPONSE>
      EF_STATUS   = EF_STATUS
      EF_MESSAGE  = EF_MESSAGE ).

* Validation Error Found
  IF EF_STATUS IS NOT INITIAL.
*   Assign Validation error to response
    <L_RESPONSE>-RESP_STATUS  = EF_STATUS.
    <L_RESPONSE>-RESP_MESSAGE = EF_MESSAGE.
    RETURN.
  ENDIF.

* Assign Result from Response
  EF_STATUS = <L_RESPONSE>-RESP_STATUS.
  EF_MESSAGE = <L_RESPONSE>-RESP_MESSAGE.

ENDMETHOD.


METHOD VALIDATE_CRM_PARTNER.

  CONSTANTS:
    LC_EMP_RESP TYPE  CRMC_PARTNER_FCT-PARTNER_FCT VALUE '00000014',
    LC_TYPE     TYPE  BUT0ID-TYPE VALUE 'HCM001'.

  DATA:
    LF_PARTNER  TYPE  BUT000-PARTNER,
    LF_PERNR    TYPE  PA0001-PERNR,
    LF_IDNUMBER TYPE  BUT0ID-IDNUMBER.


* Initialize Output
  CLEAR: EF_PARTNER_FCT,
         EF_PARTNER_NO,
         EF_INVALID.

* Validate Funcion
  SELECT A~PARTNER_FCT,
         A~PARTNER_PFT,
         B~NRART
    FROM CRMC_PARTNER_FCT AS A
           LEFT OUTER JOIN CRMC_PARTNER_2R3 AS B       "#EC CI_BUFFJOIN
             ON  B~PARTNER_FCT = A~PARTNER_FCT
   WHERE A~PARTNER_FCT EQ @IF_PARTNER_FCT
   ORDER BY A~PARTNER_FCT ASCENDING
    INTO @DATA(LS_PARTNER_FCT)
      UP TO 1 ROWS.
  ENDSELECT.
  IF SY-SUBRC NE 0.
    EF_INVALID = 'X'.
    RETURN.
  ENDIF.

  CASE LS_PARTNER_FCT-PARTNER_FCT.

*   --------------------------
*   Employee Response --> Convert Employee code to partner number
*   --------------------------
    WHEN LC_EMP_RESP.
      IF IF_PARTNER_NO CO '0123456789 '.
        LF_PERNR    = IF_PARTNER_NO.
        LF_IDNUMBER = LF_PERNR.
        SELECT PARTNER
          FROM BUT0ID
         WHERE TYPE     EQ @LC_TYPE
           AND IDNUMBER EQ @LF_IDNUMBER
         ORDER BY PRIMARY KEY
          INTO @LF_PARTNER
            UP TO 1 ROWS.
        ENDSELECT.
        IF SY-SUBRC NE 0.
          EF_INVALID = 'X'.
          RETURN.
        ENDIF.
      ELSE.
        EF_INVALID = 'X'.
        RETURN.
      ENDIF.

*   --------------------------
*   Other Partner Functions
*   --------------------------
    WHEN OTHERS.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = IF_PARTNER_NO
        IMPORTING
          OUTPUT = LF_PARTNER.

      SELECT SINGLE PARTNER
        FROM BUT000
       WHERE PARTNER EQ @LF_PARTNER
        INTO @LF_PARTNER.
      IF SY-SUBRC NE 0.
        EF_INVALID = 'X'.
        RETURN.
      ENDIF.
  ENDCASE.

* Assign Result
  EF_PARTNER_FCT = LS_PARTNER_FCT-PARTNER_FCT.
  EF_PARTNER_NO  = LF_PARTNER.

ENDMETHOD.


METHOD VALIDATE_REQUEST.
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  31.07.2025  420000714   Wuthichai L. - Fix logic checking delete status
*-----------------------------------------------------------------------

  DATA:
    LS_PARTNER  TYPE  TS_SRVCONTR_PARTNER,
    LS_ITEM     TYPE  TS_SRVCONTR_ITEM_DATA,
    LS_BILLPLAN TYPE  TS_SRVCONTR_BILLPLAN_DATA.

  DATA:
    LF_INVALID TYPE  FLAG,
    LF_NO_TYPE TYPE  CRMT_PARTNER_COM-NO_TYPE       VALUE 'BP',
    LF_KBETR   TYPE  PRCT_COND_RATE,
    LF_TEXT    TYPE  TEXT50.


* Initialize Output
  CLEAR: ES_SRVCONTR,
         EF_STATUS,
         EF_MESSAGE.

* --------------------------------
* Validate & Assign Header data
* --------------------------------
  CASE IS_REQUEST-ZMODE.
    WHEN GC_CREATE.
      IF IS_REQUEST-SVC_NO IS NOT INITIAL.
*       Error: SAPContractNo must be blank in create mode.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E010(ZSDSCM01) INTO EF_MESSAGE.
        RETURN.
      ENDIF.

    WHEN GC_CHANGE OR GC_DELETE.
      IF IS_REQUEST-SVC_NO IS INITIAL.
*       Error: SAPContractNo is required in change/delete mode.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E011(ZSDSCM01) INTO EF_MESSAGE.
        RETURN.
      ENDIF.

  ENDCASE.

* Get Header GUID
  IF IS_REQUEST-SVC_NO IS NOT INITIAL.

    SELECT SINGLE OBJECT_ID,
                  HEADER_GUID,
                  PROCESS_TYPE,
                  PO_NUMBER_SOLD,
                  STAT_LIFECYCLE                            "+420000714
      FROM CRMS4D_SERV_H
     WHERE OBJTYPE_H EQ @GC_SRVCONTR
       AND OBJECT_ID EQ @IS_REQUEST-SVC_NO
      INTO @DATA(LS_SERV_H).
    IF SY-SUBRC NE 0.
*     Error: Service Contract &1 does not exist.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E008(ZSDSCM01) WITH IS_REQUEST-SVC_NO
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.
    ES_SRVCONTR-HEAD-HEADER_GUID = LS_SERV_H-HEADER_GUID.
*   Check SF Contract no
    IF IS_REQUEST-SF_CONTRACT_NO NE LS_SERV_H-PO_NUMBER_SOLD.
*     Error: SFContractNo &1 mismathes with service contract &2.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E009(ZSDSCM01) WITH IS_REQUEST-SF_CONTRACT_NO
                                  IS_REQUEST-SVC_NO
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.
*   Check Contract Type
    IF IS_REQUEST-UPDFLG-PROCESS_TYPE EQ 'X' AND
       IS_REQUEST-PROCESS_TYPE NE LS_SERV_H-PROCESS_TYPE.
*     Error: ContractType &1 mismathes with service contract &2.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E016(ZSDSCM01) WITH IS_REQUEST-PROCESS_TYPE
                                  IS_REQUEST-SVC_NO
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.

* Create new GUID
  ELSE.
*   Check Ref no
    SELECT OBJECT_ID,
           HEADER_GUID,
           PO_NUMBER_SOLD
      FROM CRMS4D_SERV_H
     WHERE OBJTYPE_H EQ @GC_SRVCONTR
       AND PO_NUMBER_SOLD EQ @IS_REQUEST-SF_CONTRACT_NO
       AND SALES_ORG_SD   EQ @GF_DEFT_VKORG
     ORDER BY OBJECT_ID ASCENDING
      INTO @DATA(LS_SERV_H2)
        UP TO 1 ROWS.
    ENDSELECT.
    IF SY-SUBRC EQ 0.
*     Error: SFContractNo &1 is already created with Service contract &2.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E015(ZSDSCM01) WITH IS_REQUEST-SF_CONTRACT_NO
                                  LS_SERV_H2-OBJECT_ID
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.
  ENDIF.

  IF IS_REQUEST-ZMODE EQ GC_DELETE.
    ES_SRVCONTR-HEAD-DEL_FLAG = 'X'.
    ES_SRVCONTR-HEAD-CURRENT_STATUS = LS_SERV_H-STAT_LIFECYCLE. "+420000714
  ENDIF.

  ES_SRVCONTR-HEAD-OBJECT_ID = IS_REQUEST-SVC_NO.
  ES_SRVCONTR-HEADX-OBJECT_ID = IS_REQUEST-UPDFLG-SVC_NO.

  ES_SRVCONTR-HEAD-DESCRIPTION  = IS_REQUEST-DESCRIPTION.
  ES_SRVCONTR-HEADX-DESCRIPTION = IS_REQUEST-UPDFLG-DESCRIPTION.

  ES_SRVCONTR-HEAD-PROCESS_TYPE = IS_REQUEST-PROCESS_TYPE.
  ES_SRVCONTR-HEADX-PROCESS_TYPE = IS_REQUEST-UPDFLG-PROCESS_TYPE.

  ES_SRVCONTR-HEAD-PO_NUMBER_SOLD = IS_REQUEST-SF_CONTRACT_NO.
  ES_SRVCONTR-HEADX-PO_NUMBER_SOLD = IS_REQUEST-UPDFLG-SF_CONTRACT_NO.

  ES_SRVCONTR-HEAD-PMNTTRMS = IS_REQUEST-PMNTTRMS.
  ES_SRVCONTR-HEADX-PMNTTRMS = IS_REQUEST-UPDFLG-PMNTTRMS.

  IF GF_DEFT_VKORG IS NOT INITIAL.
    ES_SRVCONTR-HEAD-SALES_ORG_SD = GF_DEFT_VKORG.
    ES_SRVCONTR-HEADX-SALES_ORG_SD = 'X'.
  ENDIF.

  IF GF_DEFT_VTWEG IS NOT INITIAL.
    ES_SRVCONTR-HEAD-DIS_CHANNEL = GF_DEFT_VTWEG.
    ES_SRVCONTR-HEADX-DIS_CHANNEL = 'X'.
  ENDIF.

  IF GF_DEFT_SPART IS NOT INITIAL.
    ES_SRVCONTR-HEAD-DIVISION = GF_DEFT_SPART.
    ES_SRVCONTR-HEADX-DIVISION = 'X'.
  ENDIF.

  ES_SRVCONTR-HEAD-SALES_GROUP_SD = IS_REQUEST-SALES_GROUP.
  ES_SRVCONTR-HEADX-SALES_GROUP_SD = IS_REQUEST-UPDFLG-SALES_GROUP.

  ES_SRVCONTR-HEAD-SALES_OFFICE_SD = IS_REQUEST-SALES_OFFICE.
  ES_SRVCONTR-HEADX-SALES_OFFICE_SD = IS_REQUEST-UPDFLG-SALES_OFFICE.

  IF IS_REQUEST-UPDFLG-WBS EQ 'X' AND
     IS_REQUEST-WBS IS NOT INITIAL.
    ES_SRVCONTR-HEAD-AC_OBJECT_TYPE = '03'.
    ES_SRVCONTR-HEADX-AC_OBJECT_TYPE = 'X'.
    ES_SRVCONTR-HEAD-AC_ASSIGNMENT = IS_REQUEST-WBS.
    ES_SRVCONTR-HEADX-AC_ASSIGNMENT = 'X'.
  ENDIF.

  ES_SRVCONTR-HEAD-ZZ1_BILL_METHOD = IS_REQUEST-ZZ1_BILL_METHOD.
  ES_SRVCONTR-HEADX-ZZ1_BILL_METHOD = IS_REQUEST-UPDFLG-ZZ1_BILL_METHOD.

  ES_SRVCONTR-HEAD-ZZ1_EXT_REFNO = IS_REQUEST-SF_QUOT_NO.
  ES_SRVCONTR-HEADX-ZZ1_EXT_REFNO = IS_REQUEST-UPDFLG-SF_QUOT_NO.

  IF GF_DEFT_LOB IS NOT INITIAL.
    ES_SRVCONTR-HEAD-ZZ1_LOB_SRH = GF_DEFT_LOB.
    ES_SRVCONTR-HEADX-ZZ1_LOB_SRH = 'X'.
  ENDIF.

  IF IS_REQUEST-UPDFLG-START_DATE EQ 'X'.
    ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME(
      EXPORTING
        IF_INPUT         = IS_REQUEST-START_DATE
      IMPORTING
        EF_TIMESTAMP     = ES_SRVCONTR-HEAD-CONTSTART
      EXCEPTIONS
        CONVERSION_ERROR = 1
        OTHERS           = 2 ).
    IF SY-SUBRC NE 0.
*     Error: Invalid date value &1.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E029(ZSDSCA01) WITH IS_REQUEST-START_DATE
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.
    ES_SRVCONTR-HEADX-CONTSTART = 'X'.

  ENDIF.

  IF IS_REQUEST-UPDFLG-END_DATE EQ 'X'.
    ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME(
      EXPORTING
        IF_INPUT         = IS_REQUEST-END_DATE
      IMPORTING
        EF_TIMESTAMP     = ES_SRVCONTR-HEAD-CONTEND
      EXCEPTIONS
        CONVERSION_ERROR = 1
        OTHERS           = 2 ).
    IF SY-SUBRC NE 0.
*     Error: Invalid date value &1.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E029(ZSDSCA01) WITH IS_REQUEST-END_DATE
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.
    ES_SRVCONTR-HEADX-CONTEND = 'X'.

  ENDIF.

  ES_SRVCONTR-HEAD-STATUS = IS_REQUEST-STATUS.
  ES_SRVCONTR-HEADX-STATUS = IS_REQUEST-UPDFLG-STATUS.

* --------------------------------
* Validate & Assign Partner data
* --------------------------------
* Get Existing Partner data
  IF ES_SRVCONTR-HEAD-OBJECT_ID IS NOT INITIAL.
    SELECT A~PARTNER_FCT,
           A~PARTNER_NO,
           A~NO_TYPE,
           A~DISPLAY_TYPE,
           A~PARTNER_ID
      FROM CRMS4D_PARTNER AS A
     WHERE A~OBJTYPE_H EQ @GC_SRVCONTR
       AND A~OBJECT_ID EQ @ES_SRVCONTR-HEAD-OBJECT_ID
       AND A~NUMBER_INT EQ '000000'
     ORDER BY A~PARTNER_FCT ASCENDING,
           A~PARTNER_NO ASCENDING
      INTO TABLE @DATA(LT_PARTNER).
    IF SY-SUBRC NE 0.
      CLEAR LT_PARTNER.
    ENDIF.
  ENDIF.

  LOOP AT IS_REQUEST-PARTNER ASSIGNING FIELD-SYMBOL(<L_PARTNER>).

    CLEAR LS_PARTNER.

    VALIDATE_CRM_PARTNER(
      EXPORTING
        IF_PARTNER_FCT = <L_PARTNER>-PARTNER_FCT
        IF_PARTNER_NO  = <L_PARTNER>-PARTNER_NO
      IMPORTING
        EF_PARTNER_FCT = LS_PARTNER-PARTNER_FCT
        EF_PARTNER_NO  = LS_PARTNER-PARTNER_NO
        EF_INVALID     = LF_INVALID ).
    IF LF_INVALID EQ 'X'.
*     Error: Partner &1 &2 is not valid.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E012(ZSDSCM01) WITH <L_PARTNER>-PARTNER_FCT
                                  <L_PARTNER>-PARTNER_NO
              INTO EF_MESSAGE.
      EXIT.
    ENDIF.

*   Update Existing Parter
    READ TABLE LT_PARTNER ASSIGNING FIELD-SYMBOL(<L_EXIST>)
                          WITH KEY PARTNER_FCT = LS_PARTNER-PARTNER_FCT
                          BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      LS_PARTNER-REF_PARTNER_FCT   = <L_EXIST>-PARTNER_FCT.
      LS_PARTNER-REF_PARTNER_NO    = <L_EXIST>-PARTNER_ID.
      LS_PARTNER-REF_NO_TYPE       = LF_NO_TYPE.
      LS_PARTNER-REF_DISPLAY_TYPE  = <L_EXIST>-DISPLAY_TYPE.
    ENDIF.

    INSERT LS_PARTNER INTO TABLE ES_SRVCONTR-PARTNER.

  ENDLOOP.
  IF EF_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

* --------------------------------
* Validate & Assign Item data
* --------------------------------
* Get Existing Item data
  IF ES_SRVCONTR-HEAD-OBJECT_ID IS NOT INITIAL.
    SELECT A~NUMBER_INT,
           A~ITEM_GUID,
           A~ITM_TYPE,
           A~BILLPLAN_TYPE
      FROM CRMS4D_SERV_I AS A
     WHERE A~OBJTYPE_H EQ @GC_SRVCONTR
       AND A~OBJECT_ID EQ @ES_SRVCONTR-HEAD-OBJECT_ID
     ORDER BY A~NUMBER_INT ASCENDING
      INTO TABLE @DATA(LT_SERV_I).
    IF SY-SUBRC NE 0.
      CLEAR LT_SERV_I.
    ENDIF.
  ENDIF.

  LOOP AT IS_REQUEST-ITEM ASSIGNING FIELD-SYMBOL(<L_ITEM>).

    CLEAR LS_ITEM.

    CASE <L_ITEM>-ZMODE.
      WHEN GC_CREATE.
*       Check Item exists?
        READ TABLE LT_SERV_I TRANSPORTING NO FIELDS
                             WITH KEY NUMBER_INT = <L_ITEM>-NUMBER_INT
                             BINARY SEARCH.
        IF SY-SUBRC EQ 0.
*         Error: ItemNo &1 already exists.
          EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
          MESSAGE E013(ZSDSCM01) WITH <L_ITEM>-NUMBER_INT
                                 INTO EF_MESSAGE.
          RETURN.
        ENDIF.

      WHEN GC_CHANGE OR GC_DELETE.
*       Check Item exists?
        READ TABLE LT_SERV_I ASSIGNING FIELD-SYMBOL(<L_SERV_I>)
                             WITH KEY NUMBER_INT = <L_ITEM>-NUMBER_INT
                             BINARY SEARCH.
        IF SY-SUBRC NE 0.
*         Error: ItemNo &1 does not exist.
          EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
          MESSAGE E014(ZSDSCM01) WITH <L_ITEM>-NUMBER_INT
                                 INTO EF_MESSAGE.
          RETURN.
        ENDIF.
*       Check Item Categrory
        IF <L_ITEM>-UPDFLG-ITM_TYPE EQ 'X' AND
           <L_ITEM>-ITM_TYPE NE <L_SERV_I>-ITM_TYPE AND
           <L_SERV_I>-BILLPLAN_TYPE IS NOT INITIAL.
*         Error: Item Category &1 mismatches with service item &2.
          EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
          MESSAGE E017(ZSDSCM01) WITH <L_ITEM>-ITM_TYPE
                                      <L_ITEM>-NUMBER_INT
                                 INTO EF_MESSAGE.
          RETURN.
        ENDIF.
        LS_ITEM-ITEM-ITEM_GUID = <L_SERV_I>-ITEM_GUID.

    ENDCASE.

    IF <L_ITEM>-ZMODE EQ GC_DELETE.
      LS_ITEM-ITEM-DEL_FLAG = 'X'.
    ENDIF.

    LS_ITEM-ITEM-NUMBER_INT  = <L_ITEM>-NUMBER_INT.
    LS_ITEM-ITEMX-NUMBER_INT = <L_ITEM>-UPDFLG-NUMBER_INT.

    LS_ITEM-ITEM-ITM_TYPE  = <L_ITEM>-ITM_TYPE.
    LS_ITEM-ITEMX-ITM_TYPE = <L_ITEM>-UPDFLG-ITM_TYPE.

    LS_ITEM-ITEM-ORDERED_PROD  = <L_ITEM>-PRODUCT_ID.
    LS_ITEM-ITEMX-ORDERED_PROD = <L_ITEM>-UPDFLG-PRODUCT_ID.
*   Product is required
    IF LS_ITEM-ITEM-ORDERED_PROD IS INITIAL.
*     Error: Product is required for item &1.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      WRITE <L_ITEM>-NUMBER_INT TO LF_TEXT LEFT-JUSTIFIED NO-ZERO.
      CONDENSE LF_TEXT NO-GAPS.
      MESSAGE E042(ZSDSCM01) WITH LF_TEXT
              INTO EF_MESSAGE.
      EXIT.
    ENDIF.

    LS_ITEM-ITEM-QUANTITY  = <L_ITEM>-QUANTITY.
    LS_ITEM-ITEMX-QUANTITY = <L_ITEM>-UPDFLG-QUANTITY.

    IF <L_ITEM>-UPDFLG-WBS EQ 'X' AND
       <L_ITEM>-WBS IS NOT INITIAL.
      LS_ITEM-ITEM-AC_OBJECT_TYPE = '03'.
      LS_ITEM-ITEMX-AC_OBJECT_TYPE = 'X'.
      LS_ITEM-ITEM-AC_ASSIGNMENT = <L_ITEM>-WBS.
      LS_ITEM-ITEMX-AC_ASSIGNMENT = 'X'.
    ENDIF.

    LS_ITEM-ITEM-STATUS = <L_ITEM>-STATUS.
    LS_ITEM-ITEMX-STATUS = <L_ITEM>-UPDFLG-STATUS.

    IF <L_ITEM>-UPDFLG-COND_TYPE EQ 'X' OR
       <L_ITEM>-UPDFLG-AMOUNT EQ 'X'.
      IF <L_ITEM>-COND_TYPE IS INITIAL AND
         <L_ITEM>-AMOUNT IS NOT INITIAL.
*       Error: ConditionType is required for item &1.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E018(ZSDSCM01) WITH <L_ITEM>-NUMBER_INT
                               INTO EF_MESSAGE.
        RETURN.
      ENDIF.
      IF NOT ( <L_ITEM>-COND_TYPE IS INITIAL AND
               <L_ITEM>-AMOUNT IS INITIAL ).
        INSERT VALUE #( KSCHL = <L_ITEM>-COND_TYPE
                        KBETR = <L_ITEM>-AMOUNT )
                      INTO TABLE LS_ITEM-PRICE.
      ENDIF.
    ENDIF.
    IF <L_ITEM>-UPDFLG-DISC_PERCT EQ 'X'.
      LF_KBETR = <L_ITEM>-DISC_PERCT * -1.
      INSERT VALUE #( KSCHL = GC_KSCHL_DISC_PERCT
                      KBETR = LF_KBETR )
                    INTO TABLE LS_ITEM-PRICE.
    ENDIF.
    IF <L_ITEM>-UPDFLG-DISC_AMOUNT EQ 'X'.
      LF_KBETR = <L_ITEM>-DISC_AMOUNT * -1.
      INSERT VALUE #( KSCHL = GC_KSCHL_DISC_AMOUNT
                      KBETR = LF_KBETR )
                    INTO TABLE LS_ITEM-PRICE.
    ENDIF.


*   --------------------------------
*   Validate & Assign Ref. Equipment data
*   --------------------------------
    LOOP AT <L_ITEM>-REF_EQUIPMENT ASSIGNING FIELD-SYMBOL(<L_REF_EQUIPMENT>).
      INSERT VALUE #( EQUIPMENT_ID = <L_REF_EQUIPMENT>-EQUIPMENT_ID )
             INTO TABLE LS_ITEM-REFEQUIP.
    ENDLOOP.

*   --------------------------------
*   Validate & Assign Billing Plan data
*   --------------------------------
    LOOP AT <L_ITEM>-BILLPLAN ASSIGNING FIELD-SYMBOL(<L_BILLPLAN>).
      CLEAR LS_BILLPLAN.
      ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME(
        EXPORTING
          IF_INPUT         = <L_BILLPLAN>-BILL_DATE
        IMPORTING
          EF_TIMESTAMP     = LS_BILLPLAN-BILL_DATE
        EXCEPTIONS
          CONVERSION_ERROR = 1
          OTHERS           = 2 ).
      IF SY-SUBRC NE 0.
*       Error: Invalid date value &1.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E029(ZSDSCA01) WITH <L_BILLPLAN>-BILL_DATE
                INTO EF_MESSAGE.
        EXIT.
      ENDIF.
      LS_BILLPLAN-DESCRIPTION = <L_BILLPLAN>-DESCRIPTION.
      LS_BILLPLAN-BILL_VALUE  = <L_BILLPLAN>-NET_VALUE.

      INSERT LS_BILLPLAN INTO TABLE LS_ITEM-BILLPLAN.

    ENDLOOP.
    IF EF_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    INSERT LS_ITEM INTO TABLE ES_SRVCONTR-ITEM.

  ENDLOOP.

ENDMETHOD.
ENDCLASS.
