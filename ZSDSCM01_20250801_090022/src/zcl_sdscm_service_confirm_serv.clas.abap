CLASS ZCL_SDSCM_SERVICE_CONFIRM_SERV DEFINITION
  PUBLIC
  INHERITING FROM ZCL_SDSCA_REST_SERVICE
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES TT_PROCTYP_RANGE TYPE RANGE OF CRMS4D_SERV_H-PROCESS_TYPE.

    CONSTANTS GC_EMP_RESP TYPE COMT_PARTNER_FCT VALUE '00000014' ##NO_TEXT.
    CONSTANTS GC_SOLD_TO TYPE COMT_PARTNER_FCT VALUE '00000001' ##NO_TEXT.
    CONSTANTS GC_SRVORDER TYPE CRMS4D_SERV_H-OBJTYPE_H VALUE 'BUS2000116' ##NO_TEXT.
    CONSTANTS GC_SRVCONF TYPE CRMS4D_SERV_H-OBJTYPE_H VALUE 'BUS2000117' ##NO_TEXT.

    METHODS PROCESS_DATA
        REDEFINITION .
protected section.
private section.

  data GT_SKIP_WBS type TT_PROCTYP_RANGE .

  methods ASSIGN_RESPONSE_FROM_DATA
    importing
      !IS_SRVCONF type ZCL_SDSCM_SERVICE_CONFIRMATION=>TS_SRVCONF_DATA
      !IF_OBJECT_ID type CRMS4D_SERV_H-OBJECT_ID
    changing
      !CS_RESPONSE type ZSDSCMS010 .
  methods ASSIGN_SRVCONF_RESULT
    importing
      !IS_SRVCONF type ZCL_SDSCM_SERVICE_CONFIRMATION=>TS_SRVCONF_DATA
      !IF_OBJECT_ID type CRMS4D_SERV_H-OBJECT_ID
      !IT_RETURN type BAPIRET2_TAB
    changing
      !CS_RESPONSE type ZSDSCMS010 .
  methods MAINTAIN_SERVICE_CONFIRM
    importing
      !IS_REQUEST type ZSDSCMS010
    exporting
      !ES_RESPONSE type ZSDSCMS010
      !EF_STATUS type ZSDSDE_REST_STATUS
      !EF_MESSAGE type ZSDSDE_REST_MESSAGE .
  methods VALIDATE_REQUEST
    importing
      !IS_REQUEST type ZSDSCMS010
    exporting
      !ES_SRVCONF type ZCL_SDSCM_SERVICE_CONFIRMATION=>TS_SRVCONF_DATA
      !EF_STATUS type ZSDSDE_REST_STATUS
      !EF_MESSAGE type ZSDSDE_REST_MESSAGE .
  methods GET_GENC .
ENDCLASS.



CLASS ZCL_SDSCM_SERVICE_CONFIRM_SERV IMPLEMENTATION.


METHOD ASSIGN_RESPONSE_FROM_DATA.

  DATA:
    LS_ITEM  TYPE  ZSDSCMS011.


* Read Confirmation Status
  IF IF_OBJECT_ID IS NOT INITIAL.
    DO 30 TIMES ##NUMBER_OK.
      SELECT SINGLE STAT_LIFECYCLE
        FROM CRMS4D_SERV_H
       WHERE OBJTYPE_H EQ @GC_SRVCONF
         AND OBJECT_ID EQ @IF_OBJECT_ID
        INTO @DATA(LF_STATUS).
      IF SY-SUBRC EQ 0.
        EXIT.
      ENDIF.
      WAIT UP TO 1 SECONDS.
    ENDDO.
    DO 30 TIMES ##NUMBER_OK.
      SELECT NUMBER_INT,
             PRODUCT_ID,
             AC_OBJECT_TYPE,
             AC_ASSIGNMENT
        FROM CRMS4D_SERV_I
       WHERE OBJTYPE_H EQ @GC_SRVCONF
         AND OBJECT_ID EQ @IF_OBJECT_ID
       ORDER BY NUMBER_INT ASCENDING
        INTO TABLE @DATA(LT_SERV_I).
      IF SY-SUBRC EQ 0.
        EXIT.
      ENDIF.
      WAIT UP TO 1 SECONDS.
    ENDDO.
  ENDIF.

* ----------------
* Header Data
* ----------------
  CS_RESPONSE-PROCESS_TYPE    = IS_SRVCONF-HEAD-PROCESS_TYPE.
  CS_RESPONSE-SF_CONFIRM_NO   = IS_SRVCONF-HEAD-PO_NUMBER_SOLD.
  CS_RESPONSE-STATUS          = LF_STATUS.
  CS_RESPONSE-BREAK_REASON    = IS_SRVCONF-HEAD-ZZ1_BREAK_REASON.
  CS_RESPONSE-BREAK_POSITION  = IS_SRVCONF-HEAD-ZZ1_BREAK_POSITION.
  CS_RESPONSE-RESULT_PROGRESS = IS_SRVCONF-HEAD-ZZ1_RESULT_PROGRESS.
  CS_RESPONSE-ERROR_CODE      = IS_SRVCONF-HEAD-ZZ1_ERROR_CODE.
  CS_RESPONSE-MAIN_CAUSE      = IS_SRVCONF-HEAD-ZZ1_MAIN_CAUSE.

* ----------------
* Partner Data
* ----------------
  LOOP AT IS_SRVCONF-PARTNER ASSIGNING FIELD-SYMBOL(<L_PARTNER>).
    CASE <L_PARTNER>-PARTNER_FCT.
      WHEN GC_SOLD_TO.
        WRITE <L_PARTNER>-PARTNER_NO TO CS_RESPONSE-SOLD_TO LEFT-JUSTIFIED NO-ZERO.
        CONDENSE CS_RESPONSE-SOLD_TO NO-GAPS.
      WHEN GC_EMP_RESP.
        WRITE <L_PARTNER>-PARTNER_NO TO CS_RESPONSE-EMP_RESP LEFT-JUSTIFIED NO-ZERO.
        CONDENSE CS_RESPONSE-EMP_RESP NO-GAPS.
    ENDCASE.
  ENDLOOP.

* ----------------
* Item Data
* ----------------
  LOOP AT IS_SRVCONF-ITEM ASSIGNING FIELD-SYMBOL(<L_ITEM>).

    IF <L_ITEM>-PLANT IS NOT INITIAL.
      CS_RESPONSE-PLANT = <L_ITEM>-PLANT.
    ENDIF.
    IF <L_ITEM>-ZZ1_LGORT IS NOT INITIAL.
      CS_RESPONSE-LGORT = <L_ITEM>-ZZ1_LGORT.
    ENDIF.

    CLEAR LS_ITEM.
    WRITE <L_ITEM>-NUMBER_INT TO LS_ITEM-NUMBER_INT NO-ZERO.
    CONDENSE LS_ITEM-NUMBER_INT NO-GAPS.
    LS_ITEM-QUANTITY        = <L_ITEM>-QUANTITY.
    LS_ITEM-QTY_UNIT        = <L_ITEM>-QTY_UNIT .
    WRITE IS_SRVCONF-HEAD-SERVICE_ORDER TO LS_ITEM-REF_SRVORD.
    WRITE <L_ITEM>-SERVICE_ITEM TO LS_ITEM-REF_SRVORD_ITEM NO-ZERO.
    CONDENSE LS_ITEM-REF_SRVORD_ITEM NO-GAPS.
    LS_ITEM-STATUS          = LF_STATUS.

    ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_DATE_TIME_TO_ISO(
      EXPORTING
        IF_TIMESTAMP = <L_ITEM>-SRV_CUST_BEG
      IMPORTING
        EF_OUTPUT    = LS_ITEM-START_DATE ).
    ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_DATE_TIME_TO_ISO(
      EXPORTING
        IF_TIMESTAMP = <L_ITEM>-SRV_CUST_END
      IMPORTING
        EF_OUTPUT    = LS_ITEM-END_DATE ).

    READ TABLE LT_SERV_I ASSIGNING FIELD-SYMBOL(<L_SERV_I>)
                         WITH KEY NUMBER_INT = <L_ITEM>-NUMBER_INT
                         BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      LS_ITEM-PRODUCT_ID     = <L_SERV_I>-PRODUCT_ID.
      LS_ITEM-AC_OBJECT_TYPE = <L_SERV_I>-AC_OBJECT_TYPE.
      LS_ITEM-AC_ASSIGNMENT  = <L_SERV_I>-AC_ASSIGNMENT.
    ENDIF.

    INSERT LS_ITEM INTO TABLE CS_RESPONSE-ITEM.

  ENDLOOP.

ENDMETHOD.


METHOD ASSIGN_SRVCONF_RESULT.

  DATA:
    LS_RETURN   TYPE  BAPIRET2.


* ----------------------
* Determine Result Message
* ----------------------
* Success
  IF IT_RETURN IS INITIAL.
*   Message: Service confirmation &1 has been created.
    LS_RETURN-TYPE   = 'S'.
    LS_RETURN-ID     = 'ZSDSCM01'.
    LS_RETURN-NUMBER = '024'.
    WRITE IF_OBJECT_ID TO LS_RETURN-MESSAGE_V1.
* Error
  ELSE.
*   Get 1st Error message
    LOOP AT IT_RETURN ASSIGNING FIELD-SYMBOL(<L_RETURN>)
                      WHERE ( TYPE EQ 'X' OR
                              TYPE EQ 'A' OR
                              TYPE EQ 'E' ).
      EXIT.
    ENDLOOP.
    IF SY-SUBRC NE 0.
*     Get 1st Message
      READ TABLE IT_RETURN ASSIGNING <L_RETURN>
                           INDEX 1.
    ENDIF.
    IF SY-SUBRC EQ 0.
      LS_RETURN = <L_RETURN>.
    ENDIF.
  ENDIF.

* Assign Fields value from result.....
  ASSIGN_RESPONSE_FROM_DATA(
    EXPORTING
      IS_SRVCONF   = IS_SRVCONF
      IF_OBJECT_ID = IF_OBJECT_ID
    CHANGING
      CS_RESPONSE  = CS_RESPONSE ).

* Assign Service Contract Result
  IF LS_RETURN-TYPE = 'S'.
    WRITE IF_OBJECT_ID TO CS_RESPONSE-SVC_NO.
    CS_RESPONSE-RESP_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_SUCCESS.
  ELSE.
    CS_RESPONSE-RESP_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
  ENDIF.
  IF LS_RETURN-MESSAGE IS NOT INITIAL.
    CS_RESPONSE-RESP_MESSAGE = LS_RETURN-MESSAGE.
  ELSE.
    MESSAGE ID LS_RETURN-ID TYPE 'I'
            NUMBER LS_RETURN-NUMBER
            WITH LS_RETURN-MESSAGE_V1 LS_RETURN-MESSAGE_V2
                 LS_RETURN-MESSAGE_V3 LS_RETURN-MESSAGE_V4
            INTO CS_RESPONSE-RESP_MESSAGE.
  ENDIF.

ENDMETHOD.


method GET_GENC.

  CONSTANTS:
    LC_SKIP_WBS   TYPE  ZSDSDE_PARAM_NAME VALUE 'ORDTYP_SKIP_WBS_VALIDATE'.

  DATA:
    LT_GENC       TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

  DATA:
    LF_REPID   TYPE  PROGRAMM VALUE 'ZCL_SDSCM_SERVICE_CONFIRM_SERV'.


* Initialize Output
  CLEAR: GT_SKIP_WBS.

* Read All GenC constants for program
  CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
    EXPORTING
      IF_REPID = LF_REPID
    IMPORTING
      ET_GEN_C = LT_GENC.


* Assign GenC Constants
  LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<L_GENC>).

    CASE <L_GENC>-PARAM.
*     ------------------------------------
*     Order Type Skip WBS Validation
*     ------------------------------------
      WHEN LC_SKIP_WBS.
        INSERT VALUE #( SIGN = <L_GENC>-PARAM_SIGN
                        OPTION = <L_GENC>-PARAM_OPTION
                        LOW    = <L_GENC>-VALUE_LOW
                        HIGH   = <L_GENC>-VALUE_HIGH )
               INTO TABLE GT_SKIP_WBS.

    ENDCASE.

  ENDLOOP.

endmethod.


METHOD MAINTAIN_SERVICE_CONFIRM.

  DATA:
    LT_RETURN    TYPE  BAPIRET2_TAB.

  DATA:
    LS_SRVCONF  TYPE  ZCL_SDSCM_SERVICE_CONFIRMATION=>TS_SRVCONF_DATA.

  DATA:
    LF_OBJECT_ID  TYPE  CRMS4D_SERV_H-OBJECT_ID.


* Initialize Output
  CLEAR: ES_RESPONSE.

* Get Constant
  GET_GENC( ).

* -------------------
* Validate Request
* -------------------
  VALIDATE_REQUEST(
    EXPORTING
      IS_REQUEST = IS_REQUEST
    IMPORTING
      ES_SRVCONF = LS_SRVCONF
      EF_STATUS  = EF_STATUS
      EF_MESSAGE = EF_MESSAGE ).
  IF EF_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

* Call BAPI to Create Service Confirmation
  ZCL_SDSCM_SERVICE_CONFIRMATION=>CREATE_SERVICE_CONFIRMATION(
    EXPORTING
      IS_SRVCONF   = LS_SRVCONF
    IMPORTING
      EF_OBJECT_ID = LF_OBJECT_ID
      ET_RETURN    = LT_RETURN ).

* Assign Processing Result
  ASSIGN_SRVCONF_RESULT(
    EXPORTING
      IS_SRVCONF   = LS_SRVCONF
      IF_OBJECT_ID = LF_OBJECT_ID
      IT_RETURN    = LT_RETURN
    CHANGING
      CS_RESPONSE  = ES_RESPONSE ).

ENDMETHOD.


METHOD PROCESS_DATA.
*-----------------------------------------------------------------------
*  Class              : ZCL_SDSCM_SERVICE_CONFIRM_SERV
*  Creation Date      : 18.06.2024
*  Author             : Wuthichai L.(Eviden)
*  Add-on ID          : CMI011
*  Description        : This is a Processing class of REST interface
*                       CMI011 to maintain Service Confirmation
*  Purpose            : To maintain Service Confirmation
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

  DATA:
    LS_REQUEST  TYPE  ZSDSCMS010.

  FIELD-SYMBOLS:
    <L_RESPONSE>  TYPE  ZSDSCMS010.


* Initialize Output
  CLEAR: EF_STATUS,
         EF_MESSAGE,
         EF_HTTP_ERROR.

  LS_REQUEST = IREF_REQUEST_DATA->*.

  ASSIGN EREF_RESPONSE_DATA->* TO <L_RESPONSE>.
  IF SY-SUBRC NE 0.
*   Critical error
    RETURN.
  ENDIF.

* Maintain Service Confirmation
  MAINTAIN_SERVICE_CONFIRM(
    EXPORTING
      IS_REQUEST  = LS_REQUEST
    IMPORTING
      ES_RESPONSE = <L_RESPONSE>
      EF_STATUS   = EF_STATUS
      EF_MESSAGE  = EF_MESSAGE ).

* Validation Error Found
  IF EF_STATUS IS NOT INITIAL.
*   Assign Validation error to response
    <L_RESPONSE>-RESP_STATUS  = EF_STATUS.
    <L_RESPONSE>-RESP_MESSAGE = EF_MESSAGE.
    RETURN.
  ENDIF.

* Assign Result from Response
  EF_STATUS = <L_RESPONSE>-RESP_STATUS.
  EF_MESSAGE = <L_RESPONSE>-RESP_MESSAGE.

ENDMETHOD.


METHOD VALIDATE_REQUEST.

  CONSTANTS:
    LC_TYPE     TYPE  BUT0ID-TYPE VALUE 'HCM001'.

  DATA:
    LS_PARTNER TYPE ZCL_SDSCM_SERVICE_CONFIRMATION=>TS_SRVCONF_PARTNER,
    LS_ITEM    TYPE ZCL_SDSCM_SERVICE_CONFIRMATION=>TS_SRVCONF_ITEM.

  DATA:
    LF_SERVICE_ORDER TYPE  CRMS4D_SERV_H-OBJECT_ID,
    LF_PARTNER       TYPE  BUT000-PARTNER,
    LF_PERNR         TYPE  PA0001-PERNR,
    LF_IDNUMBER      TYPE  BUT0ID-IDNUMBER,
    LF_ERROR         TYPE  CHAR1.


* Initialize Output
  CLEAR: ES_SRVCONF,
         EF_STATUS,
         EF_MESSAGE.

* Assign Header data
  ES_SRVCONF-HEAD-PO_NUMBER_SOLD      = IS_REQUEST-SF_CONFIRM_NO.
  ES_SRVCONF-HEAD-PROCESS_TYPE        = IS_REQUEST-PROCESS_TYPE.
  ES_SRVCONF-HEAD-ZZ1_BREAK_REASON    = IS_REQUEST-BREAK_REASON.
  ES_SRVCONF-HEAD-ZZ1_BREAK_POSITION  = IS_REQUEST-BREAK_POSITION.
  ES_SRVCONF-HEAD-ZZ1_RESULT_PROGRESS = IS_REQUEST-RESULT_PROGRESS.
  ES_SRVCONF-HEAD-ZZ1_ERROR_CODE      = IS_REQUEST-ERROR_CODE.
  ES_SRVCONF-HEAD-ZZ1_MAIN_CAUSE      = IS_REQUEST-MAIN_CAUSE.

  IF IS_REQUEST-SOLD_TO IS NOT INITIAL.
    CLEAR LS_PARTNER.
    LS_PARTNER-PARTNER_FCT = GC_SOLD_TO.
    CLEAR LF_PARTNER.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = IS_REQUEST-SOLD_TO
      IMPORTING
        OUTPUT = LF_PARTNER.
    LS_PARTNER-PARTNER_NO = LF_PARTNER.
    INSERT LS_PARTNER INTO TABLE ES_SRVCONF-PARTNER.
  ENDIF.

  IF IS_REQUEST-EMP_RESP IS NOT INITIAL.
    CLEAR LF_ERROR.
    CLEAR LS_PARTNER.
    LS_PARTNER-PARTNER_FCT = GC_EMP_RESP.
    IF IS_REQUEST-EMP_RESP CO '0123456789 '.
      LF_PERNR    = IS_REQUEST-EMP_RESP.
      LF_IDNUMBER = LF_PERNR.
      SELECT PARTNER
        FROM BUT0ID
       WHERE TYPE     EQ @LC_TYPE
         AND IDNUMBER EQ @LF_IDNUMBER
       ORDER BY PRIMARY KEY
        INTO @LF_PARTNER
          UP TO 1 ROWS.
      ENDSELECT.
      IF SY-SUBRC NE 0.
        LF_ERROR  = 'X'.
      ENDIF.
    ELSE.
      LF_ERROR = 'X'.
    ENDIF.

    IF LF_ERROR = 'X'.
*     Error: Partner &1 &2 is not valid.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E012(ZSDSCM01) WITH GC_EMP_RESP
                                  IS_REQUEST-EMP_RESP
              INTO EF_MESSAGE.
      RETURN.
    ENDIF.
    LS_PARTNER-PARTNER_NO = LF_PARTNER.
    INSERT LS_PARTNER INTO TABLE ES_SRVCONF-PARTNER.
  ENDIF.

  LOOP AT IS_REQUEST-ITEM ASSIGNING FIELD-SYMBOL(<L_ITEM>).

*   Convert Input format
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = <L_ITEM>-REF_SRVORD
      IMPORTING
        OUTPUT = LF_SERVICE_ORDER.

*   Assign and Validate Service Order
    IF ES_SRVCONF-HEAD-SERVICE_ORDER IS INITIAL.
      ES_SRVCONF-HEAD-SERVICE_ORDER = LF_SERVICE_ORDER.
*     Get List of Service Items
      SELECT NUMBER_INT,
             PRODUCT_ID,
             AC_OBJECT_TYPE,
             AC_ASSIGNMENT
        FROM CRMS4D_SERV_I
       WHERE OBJTYPE_H EQ @GC_SRVORDER
         AND OBJECT_ID EQ @ES_SRVCONF-HEAD-SERVICE_ORDER
      ORDER BY NUMBER_INT ASCENDING
        INTO TABLE @DATA(LT_SERV_I).
      IF SY-SUBRC NE 0.
*       Error: Invalid Service Order value &1.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E001(ZSDSCM01) WITH <L_ITEM>-REF_SRVORD
                               INTO EF_MESSAGE.
        EXIT.
      ENDIF.
    ELSEIF ES_SRVCONF-HEAD-SERVICE_ORDER NE LF_SERVICE_ORDER.
*     Error: More than 1 service order found in confirmation.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E026(ZSDSCM01) INTO EF_MESSAGE.
      EXIT.
    ENDIF.

    CLEAR LS_ITEM.

    LS_ITEM-NUMBER_INT    = <L_ITEM>-NUMBER_INT.
    LS_ITEM-SERVICE_ITEM  = <L_ITEM>-REF_SRVORD_ITEM.
    LS_ITEM-QUANTITY      = <L_ITEM>-QUANTITY.
    LS_ITEM-PLANT         = IS_REQUEST-PLANT.
    LS_ITEM-ZZ1_LGORT     = IS_REQUEST-LGORT.

*   Validate Service Item
    READ TABLE LT_SERV_I ASSIGNING FIELD-SYMBOL(<L_SERV_I>)
                         WITH KEY NUMBER_INT = LS_ITEM-SERVICE_ITEM
                         BINARY SEARCH.
    IF SY-SUBRC NE 0.
*     Error: ItemNo &1 does not exist.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E014(ZSDSCM01) WITH <L_ITEM>-REF_SRVORD_ITEM
                             INTO EF_MESSAGE.
      EXIT.
    ENDIF.

*   Validate Product ID
    IF <L_ITEM>-PRODUCT_ID IS NOT INITIAL AND
       <L_ITEM>-PRODUCT_ID NE <L_SERV_I>-PRODUCT_ID.
*     Error: Product &1 is not matched with product in service order item.
      EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      MESSAGE E031(ZSDSCM01) WITH <L_ITEM>-PRODUCT_ID
                             INTO EF_MESSAGE.
      EXIT.
    ENDIF.

    IF GT_SKIP_WBS IS INITIAL OR
       NOT ES_SRVCONF-HEAD-PROCESS_TYPE IN GT_SKIP_WBS.
*     Validate WBS
      IF <L_ITEM>-AC_ASSIGNMENT IS NOT INITIAL AND
         <L_ITEM>-AC_ASSIGNMENT NE <L_SERV_I>-AC_ASSIGNMENT.
*       Error: WBS &1 is not matched with WBS in service order item.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E032(ZSDSCM01) WITH <L_ITEM>-AC_ASSIGNMENT
                               INTO EF_MESSAGE.
        EXIT.
      ENDIF.
      LS_ITEM-AC_ASSIGNMENT = <L_ITEM>-AC_ASSIGNMENT.       "+420000292
    ENDIF.

    IF <L_ITEM>-START_DATE IS NOT INITIAL.
      CALL METHOD ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME
        EXPORTING
          IF_INPUT         = <L_ITEM>-START_DATE
        IMPORTING
          EF_TIMESTAMP     = LS_ITEM-SRV_CUST_BEG
        EXCEPTIONS
          CONVERSION_ERROR = 1
          OTHERS           = 2.
      IF SY-SUBRC <> 0.
*       Error: Invalid date value &1.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E029(ZSDSCA01) WITH <L_ITEM>-START_DATE
                               INTO EF_MESSAGE.
        EXIT.
      ENDIF.
    ENDIF.

    IF <L_ITEM>-END_DATE IS NOT INITIAL.
      CALL METHOD ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME
        EXPORTING
          IF_INPUT         = <L_ITEM>-END_DATE
        IMPORTING
          EF_TIMESTAMP     = LS_ITEM-SRV_CUST_END
        EXCEPTIONS
          CONVERSION_ERROR = 1
          OTHERS           = 2.
      IF SY-SUBRC <> 0.
*       Error: Invalid date value &1.
        EF_STATUS = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
        MESSAGE E029(ZSDSCA01) WITH <L_ITEM>-END_DATE
                               INTO EF_MESSAGE.
        EXIT.
      ENDIF.
    ENDIF.

    INSERT LS_ITEM INTO TABLE ES_SRVCONF-ITEM.

  ENDLOOP.
  IF EF_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

ENDMETHOD.
ENDCLASS.
