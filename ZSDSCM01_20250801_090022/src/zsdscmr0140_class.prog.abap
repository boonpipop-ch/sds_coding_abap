*&---------------------------------------------------------------------*
*& Include          ZSDSCMR0140_CLASS
*&---------------------------------------------------------------------*
CLASS LCL_UTIL DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY.

ENDCLASS.
CLASS LCL_UTIL IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_IN.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_outPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
ENDCLASS.
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR,
      START_PROCESS.
    CLASS-METHODS :
      GET_DATA,
      GET_ADDTIONAL_DATA,
      SHOW_REPORT,
      SET_LAYOUT_OUTPUT,
      BUILD_FCAT,
      SET_SORT,
      SET_ALV_GRID,
      HTML_TOP_OF_PAGE,
      SAVE,
      UPDATE_CRMS4D_SERV_H IMPORTING I_DATA TYPE CRMS4T_SERV_H,
      UPDATE_CRMS4D_SERV_I IMPORTING I_DATA TYPE CRMS4T_SERV_I,
      GET_HEADER_DATA RETURNING VALUE(R) TYPE CRMS4T_SERV_H,
      GET_DETIAL_DATA RETURNING VALUE(R) TYPE CRMS4T_SERV_I,
      CREATE_BDR,
      CREATE_INV,
      CALL_CREATE_BDR IMPORTING I_DATA   TYPE ANY
                      RETURNING VALUE(R) TYPE IF_SD_BIL_TYPE_DEF=>TT_EBDR.

    CLASS-DATA :
      LO TYPE REF TO LCL_DATA.
ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD GET_DATA.
    IF LO IS INITIAL.
      CREATE OBJECT LO.
    ENDIF.

    LO->START_PROCESS( ).
  ENDMETHOD.
  METHOD START_PROCESS.

    SELECT CRMS4D_SERV_I~OBJTYPE_H,
           CRMS4D_SERV_I~OBJECT_ID,
           CRMS4D_SERV_I~NUMBER_INT,
           CRMS4D_SERV_H~STAT_LIFECYCLE AS STAT_H,
           CRMS4D_SERV_I~STAT_LIFECYCLE AS STAT_I,
           CRMS4D_SERV_I~ORDERED_PROD,
           CRMS4D_SERV_I~DESCRIPTION_I,
           CRMS4D_SERV_I~BILLED_VALUE,
           CRMS4D_SERV_I~BILLED_QUANTITY,
           CRMS4D_SERV_I~DIS_CHANNEL,
           CRMS4D_SERV_I~DIVISION,
           CRMS4D_SERV_I~SALES_OFFICE_SD,
           CRMS4D_SERV_I~SALES_GROUP_SD,
           CRMS4D_SERV_I~SOLD_TO_PARTY,
           CRMS4D_SERV_I~PMNTTRMS,
           CRMS4D_SERV_I~BASE_QTY_UNIT,
           CRMS4D_SERV_I~PROCESS_TYPE,
           CRMS4D_SERV_I~CREATED_AT_H,
           CRMS4D_SERV_I~CREATED_BY_H,
           CRMS4D_SERV_I~CHANGED_AT_H,
           CRMS4D_SERV_I~CHANGED_BY_H,
           CRMS4D_SERV_I~ZZ1_LOB_SRI,
           CRMS4D_SERV_I~ZZ1_LGORT,
           CRMS4D_SERV_H~SHIP_TO_PARTY,
           CRMS4D_SERV_H~BILL_TO_PARTY,
           CRMS4D_SERV_H~PAYER,
           CRMS4D_SERV_H~PERSON_RESP,
           CRMS4D_SERV_H~PRICING_PROCEDURE,
           CRMS4D_SERV_H~INCOTERMS1,
           CRMS4D_SERV_H~INCOTERMS2,
           CRMS4D_SERV_I~PROCESS_QTY_NUM,
           CRMS4D_SERV_I~PROCESS_QTY_UNIT,
           CRMS4D_SERV_I~ZZ1_WERKS,
           CRMS4D_SERV_I~PROD_HIERARCHY,
           CRMS4D_SERV_I~AC_ASSIGNMENT,
           CRMS4D_SERV_H~PRICING_DOCUMENT,
           CRMS4D_SERV_H~SALES_ORG_SD,
           @GC_WARN,
           @SPACE,
           @ABAP_TRUE,
           ZSDSCMT011~HEADER_STATUS,
           ZSDSCMT011~DETIAL_STATUS,
           VBRP~VBELN
      FROM CRMS4D_SERV_H
      INNER JOIN CRMS4D_SERV_I ON CRMS4D_SERV_H~OBJTYPE_H    EQ CRMS4D_SERV_I~OBJTYPE_H AND
                                  CRMS4D_SERV_H~OBJECT_ID    EQ CRMS4D_SERV_I~OBJECT_ID AND
                                  CRMS4D_SERV_I~NET_VALUE_I NE 0
      LEFT JOIN ZSDSCMT011 ON CRMS4D_SERV_I~OBJECT_ID   EQ ZSDSCMT011~SAP_SVO_NO AND
                              CRMS4D_SERV_I~NUMBER_INT  EQ ZSDSCMT011~LINE_ITEM
      LEFT JOIN VBRP ON CRMS4D_SERV_I~OBJECT_ID  EQ VBRP~VGBEL AND
                        CRMS4D_SERV_I~NUMBER_INT EQ VBRP~VGPOS
      WHERE CRMS4D_SERV_H~OBJECT_ID    IN @S_OBJECT[]
        AND CRMS4D_SERV_H~POSTING_DATE IN @S_POSING[]
        AND CRMS4D_SERV_H~PROCESS_TYPE IN @S_PROCTH[]
        AND CRMS4D_SERV_I~PROCESS_TYPE IN @S_PROCTI[]
        AND CRMS4D_SERV_I~OBJTYPE_H    EQ 'BUS2000116'
        AND NOT EXISTS ( SELECT VGBEL,
                                VGPOS
                           FROM VBRP AS A
                           WHERE A~VGBEL EQ VBRP~VBELN
                             AND A~VGPOS EQ VBRP~POSNR )
      INTO TABLE @GT_RESULT.

  ENDMETHOD.
  METHOD GET_ADDTIONAL_DATA.
*    FIELD-SYMBOLS <LFS_RESULT> LIKE LINE OF GT_RESULT.
*    LOOP AT GT_RESULT ASSIGNING <LFS_RESULT>.
*
*    ENDLOOP.
  ENDMETHOD.
  METHOD SHOW_REPORT.
    SET_LAYOUT_OUTPUT( ).
    BUILD_FCAT( ).
    SET_SORT( ).
    SET_ALV_GRID( ).
  ENDMETHOD.
  METHOD SET_LAYOUT_OUTPUT.
    CONSTANTS : BEGIN OF LC_CON,
                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
                END OF LC_CON.
    GS_LAYOUT-ZEBRA             = GC_X.
    GS_LAYOUT-COLWIDTH_OPTIMIZE = GC_X.
    GS_LAYOUT-BOX_FIELDNAME     = LC_CON-CHK_FILED.
  ENDMETHOD.
  METHOD BUILD_FCAT.
    DATA:
       LS_FCAT TYPE SLIS_FIELDCAT_ALV.

*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                  CHK_NAME  TYPE C LENGTH 3 VALUE 'CHK',
*                END OF LC_CON.
*
*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME   = LC_CON-CHK_FILED.
*    LS_FCAT-SELTEXT_S   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_M   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_L   = LC_CON-CHK_FILED.
*    LS_FCAT-CHECKBOX    = ABAP_TRUE.
*    LS_FCAT-INPUT       = ABAP_TRUE.
*    LS_FCAT-EDIT        = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F TYPE C VALUE 'F',
                LC_T TYPE C VALUE 'T',
                LC_d TYPE C VALUE 'D'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.
*Field
    CLEAR : LS_FCAT.
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                                  IMPORTING E_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABNAME = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-SELTEXT_S = <LFS>.
        LS_FCAT-SELTEXT_M = <LFS>.
        LS_FCAT-SELTEXT_L = <LFS>.
      ENDIF.
      APPEND LS_FCAT TO GT_FCAT.
      CLEAR LS_FCAT.
    ENDDO.

  ENDMETHOD.
  METHOD SET_SORT.
**  CLEAR gs_sort.
**  gs_sort-fieldname = 'LIFNR'.
**  gs_sort-spos = '1'.
**  gs_sort-up = 'X'.
***  gs_sort-subtot = 'X'.
**  APPEND gs_sort TO gt_sort.
  ENDMETHOD.
  METHOD SET_ALV_GRID.
*SAPLKKBL
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        I_CALLBACK_PROGRAM       = SY-REPID
        I_CALLBACK_PF_STATUS_SET = 'PF_STATUS_1'
        I_callback_user_command  = 'USER_COMMAND'
*       I_CALLBACK_TOP_OF_PAGE   = ' '
*       i_html_height_top        = 12
*       I_CALLBACK_HTML_TOP_OF_PAGE       = 'HTML_TOP_OF_PAGE'
*       I_CALLBACK_HTML_END_OF_LIST       = ' '
*       I_STRUCTURE_NAME         =
*       I_BACKGROUND_ID          = ' '
*       I_GRID_TITLE             =
*       I_GRID_SETTINGS          =
        IS_LAYOUT                = GS_LAYOUT
        IT_FIELDCAT              = GT_FCAT
*       IT_EXCLUDING             =
*       IT_SPECIAL_GROUPS        =
        IT_SORT                  = GT_SORT
*       IT_FILTER                =
*       IS_SEL_HIDE              =
        I_DEFAULT                = GC_X
        I_SAVE                   = GC_A
*       IS_VARIANT               =
*       IT_EVENTS                =
*       IT_EVENT_EXIT            =
*       IS_PRINT                 =
*       IS_REPREP_ID             =
*       I_SCREEN_START_COLUMN    = 0
*       I_SCREEN_START_LINE      = 0
*       I_SCREEN_END_COLUMN      = 0
*       I_SCREEN_END_LINE        = 0
*       I_HTML_HEIGHT_TOP        = 0
*       I_HTML_HEIGHT_END        = 0
*       IT_ALV_GRAPHICS          =
*       IT_HYPERLINK             =
*       IT_ADD_FIELDCAT          =
*       IT_EXCEPT_QINFO          =
*       IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*       E_EXIT_CAUSED_BY_CALLER  =
*       ES_EXIT_CAUSED_BY_USER   =
      TABLES
        T_OUTTAB                 = GT_RESULT
      EXCEPTIONS
        PROGRAM_ERROR            = 1
        OTHERS                   = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMETHOD.
  METHOD HTML_TOP_OF_PAGE.
*  DATA: text TYPE sdydo_text_element.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 100.
*  text =  'Company Code Data'.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'HEADING'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*
*  text = 'User Name : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uname.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*
*  text = 'Date : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-datum.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*  text = 'Time : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uzeit.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
  ENDMETHOD.
  METHOD SAVE.
    DATA : LT_CRMS4D_SERV_H TYPE CRMS4T_SERV_H,
           LT_CRMS4D_SERV_I TYPE CRMS4T_SERV_I.

    DATA : LS_CRMS4D_SERV_H TYPE CRMS4D_SERV_H,
           LS_CRMS4D_SERV_I TYPE CRMS4D_SERV_I.

*    LT_CRMS4D_SERV_H = GET_HEADER_DATA( ).
    LT_CRMS4D_SERV_I = GET_DETIAL_DATA( ).

*    UPDATE_CRMS4D_SERV_H( LT_CRMS4D_SERV_H ).
    UPDATE_CRMS4D_SERV_I( LT_CRMS4D_SERV_I ).

    CREATE_BDR( ).
    CREATE_INV( ).

*    LS_CRMS4D_SERV_H-STAT_LIFECYCLE = GC_D.
    LS_CRMS4D_SERV_I-STAT_LIFECYCLE = GC_D.

*    MODIFY LT_CRMS4D_SERV_H FROM LS_CRMS4D_SERV_H TRANSPORTING STAT_LIFECYCLE WHERE STAT_LIFECYCLE EQ GC_C.
    MODIFY LT_CRMS4D_SERV_I FROM LS_CRMS4D_SERV_I TRANSPORTING STAT_LIFECYCLE WHERE STAT_LIFECYCLE EQ GC_C.

*    UPDATE_CRMS4D_SERV_H( LT_CRMS4D_SERV_H ).
    UPDATE_CRMS4D_SERV_I( LT_CRMS4D_SERV_I ).

  ENDMETHOD.
  METHOD UPDATE_CRMS4D_SERV_H.
    DATA : IT_SERV_H      TYPE TABLE OF  CRMS4D_SERV_H,
           IT_SERV_I      TYPE TABLE OF  CRMS4D_SERV_I,
           IT_BTX_H       TYPE TABLE OF  CRMS4D_BTX_H,
           IT_BTX_I       TYPE TABLE OF  CRMS4D_BTX_I,
           IT_SCAPPTSEG_I TYPE TABLE OF  SCAPPTSEG.

    CALL FUNCTION 'CRMS4_BTX_SERV_CONT_CREATE'
      TABLES
        IT_SERV_H      = I_DATA
        IT_SERV_I      = IT_SERV_I
        IT_BTX_H       = IT_BTX_H
        IT_BTX_I       = IT_BTX_I
        IT_SCAPPTSEG_I = IT_SCAPPTSEG_I.


    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD UPDATE_CRMS4D_SERV_I.
    DATA : IT_SERV_H      TYPE TABLE OF  CRMS4D_SERV_H,
           IT_SERV_I      TYPE TABLE OF  CRMS4D_SERV_I,
           IT_BTX_H       TYPE TABLE OF  CRMS4D_BTX_H,
           IT_BTX_I       TYPE TABLE OF  CRMS4D_BTX_I,
           IT_SCAPPTSEG_I TYPE TABLE OF  SCAPPTSEG.

    CALL FUNCTION 'CRMS4_BTX_SERV_CONT_CREATE'
      TABLES
        IT_SERV_H      = IT_SERV_H
        IT_SERV_I      = I_DATA
        IT_BTX_H       = IT_BTX_H
        IT_BTX_I       = IT_BTX_I
        IT_SCAPPTSEG_I = IT_SCAPPTSEG_I.

    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD GET_HEADER_DATA.
    DATA : BEGIN OF LS_DOC,
             OBJTYPE_H TYPE CRMS4D_SERV_H-OBJTYPE_H,
             OBJECT_ID TYPE CRMS4D_SERV_H-OBJECT_ID,
           END OF LS_DOC.
    DATA : LT_DOC LIKE HASHED TABLE OF LS_DOC WITH UNIQUE KEY OBJTYPE_H
                                                              OBJECT_ID.

    DATA(LT_RESULT) = GT_RESULT.

    SORT LT_RESULT BY CHECK.
    DELETE LT_RESULT WHERE CHECK EQ SPACE.

    LT_DOC =  CORRESPONDING #( LT_RESULT  DISCARDING DUPLICATES ).

    SELECT CRMS4D_SERV_H~*
      FROM @LT_DOC AS A
      INNER JOIN CRMS4D_SERV_H ON A~OBJTYPE_H EQ  CRMS4D_SERV_H~OBJTYPE_H AND
                                  A~OBJECT_ID EQ  CRMS4D_SERV_H~OBJECT_ID
      INTO TABLE @R.

    LOOP AT R ASSIGNING FIELD-SYMBOL(<LFS_DATA>).
      <LFS_DATA>-STAT_LIFECYCLE = GC_C.
    ENDLOOP.

  ENDMETHOD.
  METHOD GET_DETIAL_DATA.
    DATA : BEGIN OF LS_DOC,
             OBJTYPE_H TYPE CRMS4D_SERV_H-OBJTYPE_H,
             OBJECT_ID TYPE CRMS4D_SERV_H-OBJECT_ID,
           END OF LS_DOC.
    DATA : LT_DOC LIKE HASHED TABLE OF LS_DOC WITH UNIQUE KEY OBJTYPE_H
                                                              OBJECT_ID.

    DATA(LT_RESULT) = GT_RESULT.

    SORT LT_RESULT BY CHECK.
    DELETE LT_RESULT WHERE CHECK EQ SPACE.

    LT_DOC =  CORRESPONDING #( LT_RESULT DISCARDING DUPLICATES ).

    SELECT CRMS4D_SERV_I~*
      FROM @LT_DOC AS A
      INNER JOIN CRMS4D_SERV_I ON A~OBJTYPE_H EQ  CRMS4D_SERV_I~OBJTYPE_H AND
                                  A~OBJECT_ID EQ  CRMS4D_SERV_I~OBJECT_ID
      INTO TABLE @R.

    LOOP AT R ASSIGNING FIELD-SYMBOL(<LFS_DATA>).
      <LFS_DATA>-STAT_LIFECYCLE = GC_C.
    ENDLOOP.

  ENDMETHOD.
  METHOD CREATE_BDR.

*    DATA : LT_BILLINGDATAIN   TYPE TABLE OF BAPIVBRK,
*           LT_CONDITIONDATAIN TYPE TABLE OF  BAPIKOMV,
*           LT_CCARDDATAIN     TYPE TABLE OF  BAPICCARD_VF,
*           LT_TEXTDATAIN      TYPE TABLE OF BAPIKOMFKTX,
*           LT_ERRORS          TYPE TABLE OF BAPIVBRKERRORS,
*           LT_RETURN          TYPE TABLE OF BAPIRET1,
*           LT_SUCCESS         TYPE TABLE OF  BAPIVBRKSUCCESS.
*
*    DATA : LT_SUCCESS_TMP     TYPE TABLE OF  BAPIVBRKSUCCESS.
*
*    DATA : LS_BILLINGDATAIN   TYPE BAPIVBRK.
*
*    DATA : LS_CREATORDATAIN  TYPE BAPICREATORDATA,
*           LS_TESTRUN        TYPE BAPIVBRKTESTRUN-TESTRUN,
*           LS_POSTING        TYPE POSTING_TYPE_CT.
*
*    DATA : BEGIN OF LS_DOC,
*             OBJECT_ID TYPE GY_RESULT-OBJECT_ID,
*             CHECK     TYPE GY_RESULT-CHECK,
*           END OF LS_DOC.
*    DATA : LT_DOC LIKE HASHED TABLE OF LS_DOC WITH UNIQUE KEY OBJECT_ID
*                                                              CHECK.
*
*    LT_DOC = CORRESPONDING #( GT_RESULT  DISCARDING DUPLICATES ).
*
*    DELETE LT_DOC WHERE CHECK EQ SPACE.
*
*    LOOP AT LT_DOC ASSIGNING FIELD-SYMBOL(<LFS_DATA>) WHERE CHECK EQ ABAP_TRUE.
*      LS_BILLINGDATAIN-REF_DOC         = <LFS_DATA>-OBJECT_ID.
*      LS_BILLINGDATAIN-REF_DOC_CA_LONG = 'EBDR'.
*      LS_BILLINGDATAIN-BILL_DATE       = SY-DATUM.
*
*      AT END OF OBJECT_ID.
*        APPEND LS_BILLINGDATAIN TO LT_BILLINGDATAIN.
*        CLEAR : GS_RESULT.
*        CALL FUNCTION 'BAPI_BILLINGDOC_CREATEMULTIPLE'
*          EXPORTING
*            CREATORDATAIN   = LS_CREATORDATAIN
*            TESTRUN         = LS_TESTRUN
*            POSTING         = LS_POSTING
*          TABLES
*            BILLINGDATAIN   = LT_BILLINGDATAIN
*            CONDITIONDATAIN = LT_CONDITIONDATAIN
*            CCARDDATAIN     = LT_CCARDDATAIN
*            TEXTDATAIN      = LT_TEXTDATAIN
*            ERRORS          = LT_ERRORS
*            RETURN          = LT_RETURN
*            SUCCESS         = LT_SUCCESS_TMP.
*        READ TABLE LT_ERRORS INTO DATA(LS_ERROR)
*        WITH KEY TYPE = 'E'.
*        IF SY-SUBRC EQ 0.
*          GS_RESULT-STATUS  = GC_ERRO.
*          GS_RESULT-MESSAGE = LS_ERROR-MESSAGE.
*        ENDIF.
*
*        READ TABLE LT_ERRORS INTO LS_ERROR
*        WITH KEY TYPE = 'A'.
*        IF SY-SUBRC EQ 0.
*          GS_RESULT-STATUS  = GC_ERRO.
*          GS_RESULT-MESSAGE = LS_ERROR-MESSAGE.
*        ENDIF.
*
*        IF GS_RESULT-STATUS IS INITIAL.
*          READ TABLE LT_SUCCESS_TMP INTO DATA(LS_SUCC) INDEX 1.
*          IF SY-SUBRC EQ 0.
*            GS_RESULT-STATUS  = GC_SUCS.
*            GS_RESULT-MESSAGE = TEXT-S01.
*            GS_RESULT-BDR_NUM = LS_SUCC-BILL_DOC.
*          ELSE.
*            GS_RESULT-STATUS  = GC_ERRO.
*            GS_RESULT-MESSAGE = TEXT-E03.
*          ENDIF.
*        ENDIF.
*
*        MODIFY GT_RESULT FROM GS_RESULT TRANSPORTING STATUS MESSAGE
*                                        WHERE CHECK EQ ABAP_TRUE.
*
*        CLEAR : LS_CREATORDATAIN,
*                LS_TESTRUN,
*                LS_POSTING,
*                LT_BILLINGDATAIN,
*                LT_CONDITIONDATAIN,
*                LT_CCARDDATAIN,
*                LT_TEXTDATAIN,
*                LT_ERRORS,
*                LT_RETURN,
*                LT_SUCCESS_TMP.
*
*      ENDAT.
*
*      COMMIT WORK AND WAIT.
*    ENDLOOP.

    DATA LT_EBDR TYPE  IF_SD_BIL_TYPE_DEF=>TT_EBDR.

    DATA : BEGIN OF LS_DOC,
             OBJECT_ID TYPE GY_RESULT-OBJECT_ID,
             CHECK     TYPE GY_RESULT-CHECK,
*             SOLD_TO_PARTY TYPE GY_RESULT-SOLD_TO_PARTY,
*             SHIP_TO_PARTY TYPE GY_RESULT-SHIP_TO_PARTY,
*             BILL_TO_PARTY TYPE GY_RESULT-BILL_TO_PARTY,
*             PAYER         TYPE GY_RESULT-PAYER,
*             PERSON_RESP   TYPE GY_RESULT-PERSON_RESP,
           END OF LS_DOC.
    DATA : LT_DOC LIKE HASHED TABLE OF LS_DOC WITH UNIQUE KEY OBJECT_ID
                                                              CHECK.


    DATA : BEGIN OF LS_PRO,
             SALES_ORG_SD    TYPE GY_RESULT-SALES_ORG_SD,
             PROCESS_TYPE    TYPE GY_RESULT-PROCESS_TYPE,
             SALES_OFFICE_SD TYPE GY_RESULT-SALES_OFFICE_SD,
             SALES_GROUP_SD  TYPE GY_RESULT-SALES_GROUP_SD,
           END OF LS_PRO.
    DATA : LT_PRO LIKE HASHED TABLE OF LS_PRO WITH UNIQUE KEY SALES_ORG_SD
                                                              PROCESS_TYPE
                                                              SALES_OFFICE_SD
                                                              SALES_GROUP_SD.

    LT_DOC = CORRESPONDING #( GT_RESULT  DISCARDING DUPLICATES ).
    DELETE LT_DOC WHERE CHECK EQ SPACE.

    LT_PRO = CORRESPONDING #( GT_RESULT  DISCARDING DUPLICATES ).

    CLEAR : GT_PROFIT.
    SELECT ZSDSCMC001~*
      FROM @LT_PRO AS A
      INNER JOIN ZSDSCMC001 ON A~SALES_ORG_SD    EQ ZSDSCMC001~SALES_ORG_SD    AND
                               A~PROCESS_TYPE    EQ ZSDSCMC001~PROCESS_TYPE    AND
                               A~SALES_OFFICE_SD EQ ZSDSCMC001~SALES_OFFICE_SD AND
                               A~SALES_GROUP_SD  EQ ZSDSCMC001~SALES_GROUP_SD
      INTO TABLE @GT_PROFIT.

    LOOP AT LT_DOC INTO LS_DOC.

      LT_EBDR = CALL_CREATE_BDR( LS_DOC ).
      IF LT_EBDR IS NOT INITIAL.
        READ TABLE LT_EBDR INTO DATA(LS_EBDR) INDEX 1.
        COMMIT WORK AND WAIT.
        GS_RESULT-STATUS  = GC_SUCS.
        GS_RESULT-MESSAGE = TEXT-S01.
        GS_RESULT-BDR_NUM = LS_EBDR-VBELN.
      ELSE.
        GS_RESULT-STATUS  = GC_ERRO.
        GS_RESULT-MESSAGE = TEXT-E03.
      ENDIF.

      MODIFY GT_RESULT FROM GS_RESULT TRANSPORTING STATUS MESSAGE BDR_NUM
                                      WHERE CHECK EQ ABAP_TRUE.

      CLEAR : GS_RESULT.
    ENDLOOP.

  ENDMETHOD.
  METHOD CREATE_INV.
    DATA : LT_BILLINGDATAIN   TYPE TABLE OF BAPIVBRK,
           LT_CONDITIONDATAIN TYPE TABLE OF	BAPIKOMV,
           LT_CCARDDATAIN     TYPE TABLE OF	BAPICCARD_VF,
           LT_TEXTDATAIN      TYPE TABLE OF BAPIKOMFKTX,
           LT_ERRORS          TYPE TABLE OF BAPIVBRKERRORS,
           LT_RETURN          TYPE TABLE OF BAPIRET1,
           LT_SUCCESS         TYPE TABLE OF	BAPIVBRKSUCCESS.

    DATA : LT_SUCCESS_TMP     TYPE TABLE OF	BAPIVBRKSUCCESS.

    DATA : LS_BILLINGDATAIN   TYPE BAPIVBRK.

    DATA : LS_CREATORDATAIN	TYPE BAPICREATORDATA,
           LS_TESTRUN	      TYPE BAPIVBRKTESTRUN-TESTRUN,
           LS_POSTING	      TYPE POSTING_TYPE_CT.

    DATA : BEGIN OF LS_DOC,
             BDR_NUM TYPE GY_RESULT-BDR_NUM,
             CHECK   TYPE GY_RESULT-CHECK,
           END OF LS_DOC.
    DATA : LT_DOC LIKE HASHED TABLE OF LS_DOC WITH UNIQUE KEY BDR_NUM
                                                              CHECK.

    LT_DOC = CORRESPONDING #( GT_RESULT  DISCARDING DUPLICATES ).

    DELETE LT_DOC WHERE CHECK   EQ SPACE.
    DELETE LT_DOC WHERE BDR_NUM EQ SPACE.

    LOOP AT LT_DOC ASSIGNING FIELD-SYMBOL(<LFS_DATA>) WHERE CHECK EQ ABAP_TRUE
                                                        AND BDR_NUM IS NOT INITIAL.

      PERFORM F_PROCESS_BDC CHANGING <LFS_DATA>-BDR_NUM.

*      LS_BILLINGDATAIN-REF_DOC         = <LFS_DATA>-BDR_NUM.
*      LS_BILLINGDATAIN-REF_DOC_CA_LONG = 'M'.
*      LS_BILLINGDATAIN-BILL_DATE       = SY-DATUM.
*
*      AT END OF BDR_NUM.
*        APPEND LS_BILLINGDATAIN TO LT_BILLINGDATAIN.
*
*        CLEAR : GS_RESULT.
*        CALL FUNCTION 'BAPI_BILLINGDOC_CREATEMULTIPLE'
*          EXPORTING
*            CREATORDATAIN   = LS_CREATORDATAIN
*            TESTRUN         = LS_TESTRUN
*            POSTING         = LS_POSTING
*          TABLES
*            BILLINGDATAIN   = LT_BILLINGDATAIN
*            CONDITIONDATAIN = LT_CONDITIONDATAIN
*            CCARDDATAIN     = LT_CCARDDATAIN
*            TEXTDATAIN      = LT_TEXTDATAIN
*            ERRORS          = LT_ERRORS
*            RETURN          = LT_RETURN
*            SUCCESS         = LT_SUCCESS_TMP.
*        READ TABLE LT_ERRORS INTO DATA(LS_ERROR)
*        WITH KEY TYPE = 'E'.
*        IF SY-SUBRC EQ 0.
*          GS_RESULT-STATUS  = GC_ERRO.
*          GS_RESULT-MESSAGE = LS_ERROR-MESSAGE.
*        ENDIF.
*
*        READ TABLE LT_ERRORS INTO LS_ERROR
*        WITH KEY TYPE = 'A'.
*        IF SY-SUBRC EQ 0.
*          GS_RESULT-STATUS  = GC_ERRO.
*          GS_RESULT-MESSAGE = LS_ERROR-MESSAGE.
*        ENDIF.
*
*        IF GS_RESULT-STATUS IS INITIAL.
*          READ TABLE LT_SUCCESS_TMP INTO DATA(LS_SUCC) INDEX 1.
*          IF SY-SUBRC EQ 0.
*            GS_RESULT-STATUS  = GC_SUCS.
*            GS_RESULT-MESSAGE = TEXT-S02.
*            GS_RESULT-INV_NUM = LS_SUCC-BILL_DOC.
*          ELSE.
*            GS_RESULT-STATUS  = GC_ERRO.
*            GS_RESULT-MESSAGE = TEXT-E03.
*          ENDIF.
*        ENDIF.
*
*        MODIFY GT_RESULT FROM GS_RESULT TRANSPORTING STATUS MESSAGE
*                                        WHERE CHECK EQ ABAP_TRUE.
*
*        COMMIT WORK AND WAIT.
*
*        CLEAR : LS_CREATORDATAIN,
*                    LS_TESTRUN,
*                    LS_POSTING,
*                    LT_BILLINGDATAIN,
*                    LT_CONDITIONDATAIN,
*                    LT_CCARDDATAIN,
*                    LT_TEXTDATAIN,
*                    LT_ERRORS,
*                    LT_RETURN,
*                    LT_SUCCESS_TMP.
*      ENDAT.
    ENDLOOP.

  ENDMETHOD.
  METHOD CALL_CREATE_BDR.
    DATA : IS_EBDR_REQUEST_CTRL   TYPE  SDBIL_EBDR_REQUEST_CTRL_INT VALUE 'F',
           LT_KOMFKGN             TYPE  KOMFKGN_TAB,
           LT_KOMFKKO             TYPE  KOMV_TAB,
           LT_KOMFKTX             TYPE  KOMFKTX_TAB,
           LT_KOMFKZM             TYPE  KOMFKZM_TAB,
           LT_KOMFK_PARTY         TYPE  SDBIL_KOMFK_PARTY_T,
*           ET_EBDR                TYPE  IF_SD_BIL_TYPE_DEF=>TT_EBDR,
           LT_EBDR_REQUEST_RESULT TYPE  EBDR_REQUEST_RESULT_T,
           LT_EBDR_REQUEST_FAILED TYPE  EBDR_REQUEST_FAILED_T,
           LT_VBFS                TYPE  VBFS_T,
           LT_VBFS_EBDR           TYPE  VBFS_T,
           LT_EBDR_KOMV_DATA      TYPE  KOMV_TAB.

    DATA : LS_KOMFK_PARTY LIKE LINE OF LT_KOMFK_PARTY,
           LS_KOMFKGN     LIKE LINE OF LT_KOMFKGN.

    DATA : LT_TMP TYPE TABLE OF SDBIL_KOMFK_PARTY_S.

    DATA : BEGIN OF LS_DOC,
             OBJECT_ID TYPE GY_RESULT-OBJECT_ID,
             CHECK     TYPE GY_RESULT-CHECK,
*             SOLD_TO_PARTY TYPE GY_RESULT-SOLD_TO_PARTY,
*             SHIP_TO_PARTY TYPE GY_RESULT-SHIP_TO_PARTY,
*             BILL_TO_PARTY TYPE GY_RESULT-BILL_TO_PARTY,
*             PAYER         TYPE GY_RESULT-PAYER,
*             PERSON_RESP   TYPE GY_RESULT-PERSON_RESP,
           END OF LS_DOC.

    DATA : LV_SYSTEM TYPE TBDLS-LOGSYS.

    MOVE-CORRESPONDING I_DATA TO LS_DOC.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        OWN_LOGICAL_SYSTEM             = LV_SYSTEM
      EXCEPTIONS
        OWN_LOGICAL_SYSTEM_NOT_DEFINED = 1
        OTHERS                         = 2.


    LOOP AT GT_RESULT INTO gs_Result WHERE OBJECT_ID EQ LS_DOC-OBJECT_ID AND
                                           VBELN IS INITIAL.
      LS_KOMFKGN-WERKS          = GS_RESULT-ZZ1_WERKS.
      LS_KOMFKGN-VGBEL          = GS_RESULT-OBJECT_ID.
      LS_KOMFKGN-VGPOS          = GS_RESULT-NUMBER_INT.
      LS_KOMFKGN-AUART          = 'ZBS3'.
      LS_KOMFKGN-WAERK          = 'THB'.
      LS_KOMFKGN-VKORG          = GS_RESULT-SALES_ORG_SD.
      LS_KOMFKGN-VTWEG          = GS_RESULT-DIS_CHANNEL.
      LS_KOMFKGN-SPART          = GS_RESULT-DIVISION.
      LS_KOMFKGN-KALSM          = GS_RESULT-PRICING_PROCEDURE.
      LS_KOMFKGN-FKARA          = 'ZV1B'.
      LS_KOMFKGN-INCO1          = GS_RESULT-INCOTERMS1.
      LS_KOMFKGN-INCO2          = GS_RESULT-INCOTERMS2.
      LS_KOMFKGN-KURSK          = 1.
      LS_KOMFKGN-PRSDT          = SY-DATUM.
      LS_KOMFKGN-KUNAG          = GS_RESULT-SOLD_TO_PARTY.
      LS_KOMFKGN-KUNWE          = GS_RESULT-SHIP_TO_PARTY.
      LS_KOMFKGN-KUNRG          = GS_RESULT-PAYER.
      LS_KOMFKGN-KUNRE          = GS_RESULT-BILL_TO_PARTY.
      LS_KOMFKGN-MATNR          = GS_RESULT-ORDERED_PROD.
      LS_KOMFKGN-ARKTX          = GS_RESULT-DESCRIPTION_I.
      LS_KOMFKGN-PSTYV          = 'CS01'.
      LS_KOMFKGN-KWMENG         = GS_RESULT-PROCESS_QTY_NUM.
      LS_KOMFKGN-VRKME          = GS_RESULT-PROCESS_QTY_UNIT.
      LS_KOMFKGN-VGTYP          = 'CSVO'.
      LS_KOMFKGN-PRODH          = GS_RESULT-PROD_HIERARCHY.
      READ TABLE GT_PROFIT INTO DATA(LS_PROFIT)
      WITH KEY SALES_ORG_SD    = GS_RESULT-SALES_ORG_SD
               PROCESS_TYPE    = GS_RESULT-PROCESS_TYPE
               SALES_OFFICE_SD = GS_RESULT-SALES_OFFICE_SD
               SALES_GROUP_SD  = GS_RESULT-SALES_GROUP_SD.
      IF SY-SUBRC EQ 0.
        LS_KOMFKGN-PRCTR = LS_PROFIT-PRCTR.
      ELSE.
        READ TABLE GT_PROFIT INTO LS_PROFIT
        WITH KEY SALES_ORG_SD      = GS_RESULT-SALES_ORG_SD
                 PROCESS_TYPE+0(2) = GS_RESULT-PROCESS_TYPE+0(2)
                 SALES_OFFICE_SD   = GS_RESULT-SALES_OFFICE_SD
                 SALES_GROUP_SD    = GS_RESULT-SALES_GROUP_SD.
        IF SY-SUBRC EQ 0.
          LS_KOMFKGN-PRCTR = LS_PROFIT-PRCTR.
        ENDIF.
      ENDIF.
      LS_KOMFKGN-BSTNK_VF       = GS_RESULT-OBJECT_ID.
      LS_KOMFKGN-AUFNR          = GS_RESULT-AC_ASSIGNMENT.
      LS_KOMFKGN-LOGSYS         = LV_SYSTEM.
      LS_KOMFKGN-VKBUR          = GS_RESULT-SALES_OFFICE_SD.
      LS_KOMFKGN-VKGRP          = GS_RESULT-SALES_GROUP_SD.
      LS_KOMFKGN-KNUMV          = GS_RESULT-PRICING_DOCUMENT.
      LS_KOMFKGN-ZZ1_WERKS0_BDI = GS_RESULT-ZZ1_WERKS.

      APPEND LS_KOMFKGN TO LT_KOMFKGN.

      IF GS_RESULT-SOLD_TO_PARTY IS NOT INITIAL.
        CLEAR LS_KOMFK_PARTY.
        LS_KOMFK_PARTY-VGBEL            = GS_RESULT-OBJECT_ID.
        LS_KOMFK_PARTY-VGPOS            = GS_RESULT-NUMBER_INT.
*        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'SP'."'AG'.
        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'AG'.
        LS_KOMFK_PARTY-PARTNER_NUMBER   = GS_RESULT-SOLD_TO_PARTY.
        APPEND LS_KOMFK_PARTY TO LT_TMP.
      ENDIF.

      IF GS_RESULT-BILL_TO_PARTY IS NOT INITIAL.
        CLEAR LS_KOMFK_PARTY.
        LS_KOMFK_PARTY-VGBEL            = GS_RESULT-OBJECT_ID.
        LS_KOMFK_PARTY-VGPOS            = GS_RESULT-NUMBER_INT.
*        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'BP'."'RE'.
        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'RE'.
        LS_KOMFK_PARTY-PARTNER_NUMBER   = GS_RESULT-BILL_TO_PARTY.
        APPEND LS_KOMFK_PARTY TO LT_TMP.
      ENDIF.

      IF GS_RESULT-PAYER IS NOT INITIAL.
        CLEAR LS_KOMFK_PARTY.
        LS_KOMFK_PARTY-VGBEL            = GS_RESULT-OBJECT_ID.
        LS_KOMFK_PARTY-VGPOS            = GS_RESULT-NUMBER_INT.
*        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'PY'."'RG'.
        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'RG'.
        LS_KOMFK_PARTY-PARTNER_NUMBER   = GS_RESULT-PAYER.
        APPEND LS_KOMFK_PARTY TO LT_TMP.
      ENDIF.

      IF GS_RESULT-SHIP_TO_PARTY IS NOT INITIAL.
        CLEAR LS_KOMFK_PARTY.
        LS_KOMFK_PARTY-VGBEL            = GS_RESULT-OBJECT_ID.
        LS_KOMFK_PARTY-VGPOS            = GS_RESULT-NUMBER_INT.
        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'WE'.
*        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'SH'."'WE'.
        LS_KOMFK_PARTY-PARTNER_NUMBER   = GS_RESULT-SHIP_TO_PARTY.
        APPEND LS_KOMFK_PARTY TO LT_TMP.
      ENDIF.

      IF GS_RESULT-PERSON_RESP IS NOT INITIAL.
        CLEAR LS_KOMFK_PARTY.
        LS_KOMFK_PARTY-VGBEL            = GS_RESULT-OBJECT_ID.
        LS_KOMFK_PARTY-VGPOS            = GS_RESULT-NUMBER_INT.
*        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'ER'."'ZM'.
        LS_KOMFK_PARTY-PARTNER_FUNCTION = 'ZM'."'ZM'.
        LS_KOMFK_PARTY-PARTNER_NUMBER   = GS_RESULT-PERSON_RESP.
        APPEND LS_KOMFK_PARTY TO LT_TMP.
      ENDIF.
    ENDLOOP.
    IF SY-SUBRC EQ 0.
      SORT LT_TMP.
      DELETE ADJACENT DUPLICATES FROM LT_TMP COMPARING ALL FIELDS.

      APPEND LINES OF LT_TMP TO LT_KOMFK_PARTY.

*    SORT LT_KOMFK_PARTY.
      DELETE ADJACENT DUPLICATES FROM LT_KOMFK_PARTY COMPARING ALL FIELDS.

      CALL METHOD CL_SD_BIL_EBDR_FACADE=>IF_SD_BIL_EBDR_ACTION~CREATE_FROM_DATA
        EXPORTING
          IS_EBDR_REQUEST_CTRL   = IS_EBDR_REQUEST_CTRL
          IT_KOMFKGN             = LT_KOMFKGN "XXX
          IT_KOMFKKO             = LT_KOMFKKO
          IT_KOMFKTX             = LT_KOMFKTX
          IT_KOMFKZM             = LT_KOMFKZM
          IT_KOMFK_PARTY         = LT_KOMFK_PARTY "XXX
        IMPORTING
          ET_EBDR                = R
          ET_EBDR_REQUEST_RESULT = LT_EBDR_REQUEST_RESULT
          ET_EBDR_REQUEST_FAILED = LT_EBDR_REQUEST_FAILED
          ET_VBFS                = LT_VBFS
          ET_VBFS_EBDR           = LT_VBFS_EBDR.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS DEFINITION.
*Handling double click
  PUBLIC SECTION.
    METHODS:
    HANDLE_DOUBLE_CLICK
    FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS. "lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.

  ENDMETHOD. "handle_double_click
ENDCLASS. "lcl_event_receiver IMPLEMENTATION
