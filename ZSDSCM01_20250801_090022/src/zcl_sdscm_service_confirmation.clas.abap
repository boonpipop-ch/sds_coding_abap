CLASS ZCL_SDSCM_SERVICE_CONFIRMATION DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF TS_SRVCONF_HEAD,
        PO_NUMBER_SOLD      TYPE  CRMS4D_SERV_H-PO_NUMBER_SOLD,
        PROCESS_TYPE        TYPE  CRMS4D_SERV_H-PROCESS_TYPE,
        SERVICE_ORDER       TYPE  CRMS4D_SERV_H-OBJECT_ID,
        ZZ1_BREAK_REASON    TYPE  CRMS4D_SERV_H-ZZ1_BREAK_REASON,
        ZZ1_BREAK_POSITION  TYPE  CRMS4D_SERV_H-ZZ1_BREAK_POSITION,
        ZZ1_RESULT_PROGRESS TYPE  CRMS4D_SERV_H-ZZ1_RESULT_PROGRESS,
        ZZ1_ERROR_CODE      TYPE  CRMS4D_SERV_H-ZZ1_ERROR_CODE,
        ZZ1_MAIN_CAUSE      TYPE  CRMS4D_SERV_H-ZZ1_MAIN_CAUSE,
      END OF TS_SRVCONF_HEAD .
    TYPES:
      BEGIN OF TS_SRVCONF_PARTNER,
        PARTNER_FCT TYPE CRMT_PARTNER_COM-PARTNER_FCT,
        PARTNER_NO  TYPE CRMT_PARTNER_COM-PARTNER_NO,
      END OF TS_SRVCONF_PARTNER .
    TYPES:
      TT_SRVCONF_PARTNER TYPE STANDARD TABLE OF TS_SRVCONF_PARTNER
                                                    WITH DEFAULT KEY .
    TYPES:
      BEGIN OF TS_SRVCONF_ITEM,
        NUMBER_INT    TYPE  CRMS4D_SERV_I-NUMBER_INT,
        SERVICE_ITEM  TYPE  CRMS4D_SERV_I-NUMBER_INT,
        QUANTITY      TYPE  CRMS4D_SERV_I-ORDER_QTY,
        QTY_UNIT      TYPE  CRMS4D_SERV_I-PROCESS_QTY_UNIT,
        PLANT         TYPE  CRMS4D_SERV_I-PLANT,
        ZZ1_LGORT     TYPE  CRMS4D_SERV_I-ZZ1_LGORT,
        SRV_CUST_BEG  TYPE  CRMS4D_SERV_I-SRV_CUST_BEG,
        SRV_CUST_END  TYPE  CRMS4D_SERV_I-SRV_CUST_END,
        AC_ASSIGNMENT TYPE  CRMS4D_SERV_I-AC_ASSIGNMENT,    "+420000292
      END OF TS_SRVCONF_ITEM .
    TYPES:
      TT_SRVCONF_ITEM  TYPE  STANDARD TABLE OF TS_SRVCONF_ITEM
                                        WITH DEFAULT KEY .
    TYPES:
      BEGIN OF TS_SRVCONF_DATA,
        HEAD    TYPE TS_SRVCONF_HEAD,
        PARTNER TYPE  TT_SRVCONF_PARTNER,
        ITEM    TYPE  TT_SRVCONF_ITEM,
      END OF TS_SRVCONF_DATA .
    TYPES:
      TT_VKORG_RANGE TYPE RANGE OF CRMS4D_SERV_H-SALES_ORG_SD .

    CONSTANTS GC_MODE_CREATE TYPE CRMT_MODE VALUE 'A' ##NO_TEXT.
    CONSTANTS GC_MODE_CHANGE TYPE CRMT_MODE VALUE 'B' ##NO_TEXT.
    CONSTANTS GC_MODE_DELETE TYPE CRMT_MODE VALUE 'D' ##NO_TEXT.
    CONSTANTS GC_REFKIND_HEAD TYPE CRMT_OBJECT_KIND VALUE 'A' ##NO_TEXT.
    CONSTANTS GC_REFKIND_ITEM TYPE CRMT_OBJECT_KIND VALUE 'B' ##NO_TEXT.
    CONSTANTS GC_SRVORDER TYPE CRMS4D_SERV_H-OBJTYPE_H VALUE 'BUS2000116' ##NO_TEXT.
    CONSTANTS GC_VONAKIND_A TYPE CRMT_VONA_KIND VALUE 'A' ##NO_TEXT.
    CONSTANTS GC_RELTYPE_VONA TYPE BINRELTYP VALUE 'VONA' ##NO_TEXT.
    CONSTANTS GC_STATUS_COMPLETED TYPE CRM_J_STATUS VALUE 'I1005' ##NO_TEXT.
    CONSTANTS GC_RELEASED TYPE CRMS4_STAT_LIFECYCLE VALUE 'D' ##NO_TEXT.
    CONSTANTS GC_SRVCONF TYPE CRMS4D_SERV_H-OBJTYPE_H VALUE 'BUS2000117' ##NO_TEXT.

    CLASS-METHODS CREATE_SERVICE_CONFIRMATION
      IMPORTING
        !IS_SRVCONF   TYPE TS_SRVCONF_DATA
      EXPORTING
        !EF_OBJECT_ID TYPE CRMS4D_SERV_H-OBJECT_ID
        !ET_RETURN    TYPE BAPIRET2_TAB .
protected section.
private section.

  class-data GT_VKORG type TT_VKORG_RANGE .

  class-methods ASSIGN_ITEMS
    importing
      !IF_GUID type CRMT_OBJECT_GUID
      !IS_HEAD type TS_SRVCONF_HEAD
      !IT_ITEM type TT_SRVCONF_ITEM
    exporting
      !ET_RETURN type BAPIRET2_TAB
    changing
      !CT_ORDERADM_I type CRMT_ORDERADM_I_COMT
      !CT_PRODUCT_I type CRMT_PRODUCT_I_COMT
      !CT_SCHEDLIN_I type CRMT_SCHEDLIN_I_COMT
      !CT_CUSTOMER_I type CRMT_CUSTOMER_I_COMT
      !CT_APPOINTMENT type CRMT_APPOINTMENT_COMT
      !CT_AC_ASSIGN type CRMT_AC_ASSIGN_COMT
      !CT_DOC_FLOW type CRMT_DOC_FLOW_COMT
      !CT_INPUT_FIELDS type CRMT_INPUT_FIELD_TAB .
  class-methods ASSIGN_PARTNERS
    importing
      !IF_GUID type CRMT_OBJECT_GUID
      !IT_PARTNER type TT_SRVCONF_PARTNER
    exporting
      !ET_RETURN type BAPIRET2_TAB
    changing
      !CT_PARTNER type CRMT_PARTNER_COMT
      !CT_INPUT_FIELDS type CRMT_INPUT_FIELD_TAB .
  class-methods GET_GENC .
  class-methods VALIDATE_CRM_PARTNER
    importing
      !IF_PARTNER_FCT type CRMT_PARTNER_FCT
      !IF_PARTNER_NO type CRMT_PARTNER_NO
    exporting
      !EF_PARTNER_FCT type CRMT_PARTNER_FCT
      !EF_PARTNER_NO type CRMT_PARTNER_NO
      !EF_INVALID type FLAG .
  class-methods COLLECT_EXCEPTION
    importing
      !IT_EXCEPTION type CRMT_EXCEPTION_T
    changing
      !CT_RETURN type BAPIRET2_TAB .
  class-methods COLLECT_INPUT_FIELDS
    importing
      !IF_REF_GUID type CRMT_OBJECT_GUID
      !IF_REF_KIND type CRMT_OBJECT_KIND default ' '
      !IF_OBJECTNAME type CRMT_OBJECT_NAME
      !IF_LOGICAL_KEY type CRMT_LOGICAL_KEY default ' '
      !IF_FIELDNAME type CRMT_FIELDNAME
    changing
      !CT_INPUT_FIELDS type CRMT_INPUT_FIELD_TAB .
ENDCLASS.



CLASS ZCL_SDSCM_SERVICE_CONFIRMATION IMPLEMENTATION.


METHOD ASSIGN_ITEMS.

*<-- Start of Insertion 420000292 30.01.2025 (Data Declaration)
  CONSTANTS:
    BEGIN OF LC_OBJECT_TYPE_ITEM ##NEEDED,
      SERVICE   TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000140',
      SERVICE_M TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000146',
      SERVICE_E TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000159',
      SERVICE_T TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000153',
      RETURN    TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000161',
      SCRAPPING TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000185',
      LOANER    TYPE CRMT_SWO_OBJTYP_PROCESS VALUE 'BUS2000186',
    END OF LC_OBJECT_TYPE_ITEM,

    LC_ZC15 TYPE  CRMT_ORDERADM_I_COM-ITM_TYPE VALUE 'ZC15',
    LC_WBS  TYPE  CRMT_AC_ASSIGN_COM-AC_OBJECT_TYPE VALUE '03'.
*--> End of Insertion 420000292 30.01.2025

  DATA:
    LT_INPUT_FIELDS TYPE  CRMT_INPUT_FIELD_TAB.

  DATA:
    LF_MODE   TYPE  CRMT_MODE,
    LF_GUID   TYPE  CRMT_OBJECT_GUID,
    LF_MANUAL TYPE  XFLAG.                                  "+420000292

  DATA:
    LS_ORDERADM_I   TYPE  CRMT_ORDERADM_I_COM,
    LS_PRODUCT_I    TYPE  CRMT_PRODUCT_I_COM,
    LS_SCHEDLIN_I   TYPE  CRMT_SCHEDLIN_I_COM,
    LS_CUSTOMER_I   TYPE  CRMT_CUSTOMER_I_COM,
    LS_APPOINTMENT  TYPE  CRMT_APPOINTMENT_COM,
    LS_AC_ASSIGN    TYPE  CRMT_AC_ASSIGN_COM,               "+420000292
    LS_DOC_FLOW     TYPE  CRMT_DOC_FLOW_COM,
    LS_DOC_FLOW_EXT TYPE  CRMT_DOC_FLOW_EXTD.

  DATA:
    LF_TEXT1  TYPE  TEXT50.


* Initialize Output
  CLEAR: ET_RETURN.

* Get Service Order Items
  SELECT NUMBER_INT,
         ITEM_GUID,
         ITM_TYPE,
         OBJTYPE_I,
         PRODUCT,
         DESCRIPTION_I,
         ORDERED_PROD,
         PROCESS_QTY_UNIT,
         CURRENCY
    FROM CRMS4D_SERV_I
   WHERE OBJTYPE_H EQ @GC_SRVORDER
     AND OBJECT_ID EQ @IS_HEAD-SERVICE_ORDER
   ORDER BY NUMBER_INT ASCENDING
    INTO TABLE @DATA(LT_SERV_I).
  IF SY-SUBRC NE 0.
    CLEAR LT_SERV_I.
  ENDIF.

* Get List of Valid Service Order Item Cat
  SELECT IT_TYPE_FROM AS ITM_TYPE
    FROM CRMC_IT_COPY_IF
   WHERE PR_TYPE_TO EQ @IS_HEAD-PROCESS_TYPE
   ORDER BY IT_TYPE_FROM ASCENDING
    INTO TABLE @DATA(LT_COPY).
  IF SY-SUBRC NE 0.
    CLEAR LT_COPY.
  ENDIF.

  LOOP AT IT_ITEM ASSIGNING FIELD-SYMBOL(<L_ITEM>).

    CLEAR: LF_MODE,
           LF_GUID,
           LT_INPUT_FIELDS.

    READ TABLE LT_SERV_I ASSIGNING FIELD-SYMBOL(<L_SERV_I>)
                         WITH KEY NUMBER_INT = <L_ITEM>-SERVICE_ITEM
                         BINARY SEARCH.
    IF SY-SUBRC NE 0.
      WRITE <L_ITEM>-SERVICE_ITEM TO LF_TEXT1 NO-ZERO.
      CONDENSE LF_TEXT1 NO-GAPS.
*     Error: ItemNo &1 does not exist.
      INSERT VALUE #( TYPE       = 'E'
                      ID         = 'ZSDSCM01'
                      NUMBER     = '014'
                      MESSAGE_V1 = LF_TEXT1 )
              INTO TABLE ET_RETURN.
      EXIT.
    ENDIF.

*   Check Item Category valid for Confirmation?
    READ TABLE LT_COPY TRANSPORTING NO FIELDS
                       WITH KEY ITM_TYPE = <L_SERV_I>-ITM_TYPE
                       BINARY SEARCH.
    IF SY-SUBRC NE 0.
      WRITE <L_ITEM>-SERVICE_ITEM TO LF_TEXT1 NO-ZERO.
      CONDENSE LF_TEXT1 NO-GAPS.
*     Error: ItemNo &1 cannot copy to service confirmation type &2.
      INSERT VALUE #( TYPE       = 'E'
                      ID         = 'ZSDSCM01'
                      NUMBER     = '028'
                      MESSAGE_V1 = LF_TEXT1
                      MESSAGE_V2 = IS_HEAD-PROCESS_TYPE )
              INTO TABLE ET_RETURN.
      EXIT.
    ENDIF.

*<-- Start of Insertion 420000292 30.01.2025 (Check Manual Item?)
*   Based on logic in function CRM_CONF_SRV_I_BEFORE_COPY_EC, only
*   specified object types can be copied from service order. Therefore,
*   the object types out of scope, must maintain item data manualy without
*   reference to service order item.
    CLEAR LF_MANUAL.
    IF NOT (    <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-SERVICE
            OR  <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-SERVICE_M
            OR  <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-SERVICE_E
            OR  <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-SERVICE_T
            OR  <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-RETURN
            OR  <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-SCRAPPING
            OR  <L_SERV_I>-OBJTYPE_I EQ LC_OBJECT_TYPE_ITEM-LOANER ).
      LF_MANUAL = 'X'.
    ENDIF.
*--> End of Insertion 420000292 30.01.2025

*   Create New GUID
    LF_MODE = GC_MODE_CREATE.
    CALL FUNCTION 'CRM_GUID_CREATE'
      IMPORTING
        EV_GUID = LF_GUID.

*   --------------------------
*   ORDERADM_I Fields
*   --------------------------
    CLEAR LS_ORDERADM_I.
    LS_ORDERADM_I-HEADER       = IF_GUID.
    LS_ORDERADM_I-NUMBER_INT   = <L_ITEM>-NUMBER_INT.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'NUMBER_INT'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    LS_ORDERADM_I-DESCRIPTION  = <L_SERV_I>-DESCRIPTION_I.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'DESCRIPTION'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    LS_ORDERADM_I-GUID         = LF_GUID.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'GUID'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    LS_ORDERADM_I-MODE         = LF_MODE.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'MODE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    LS_ORDERADM_I-ORDERED_PROD = <L_SERV_I>-ORDERED_PROD.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'ORDERED_PROD'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    LS_ORDERADM_I-PRODUCT      = <L_SERV_I>-PRODUCT.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = ' '
        IF_OBJECTNAME   = 'ORDERADM_I'
        IF_FIELDNAME    = 'PRODUCT'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
*<-- Start of Insertion 420000292 30.01.2025 (Assign Item Cat)
*   In case of manually maintained, assign itemcat manually.
    IF LF_MANUAL EQ 'X'.
      LS_ORDERADM_I-ITM_TYPE      = LC_ZC15.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = ' '
          IF_OBJECTNAME   = 'ORDERADM_I'
          IF_FIELDNAME    = 'ITM_TYPE'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

    ENDIF.
*--> End of Insertion 420000292 30.01.2025

    INSERT LINES OF LT_INPUT_FIELDS INTO TABLE CT_INPUT_FIELDS.
    INSERT LS_ORDERADM_I INTO TABLE CT_ORDERADM_I.

*   --------------------------
*   PRODUCT_I Fields
*   --------------------------
    CLEAR LS_PRODUCT_I.
    LS_PRODUCT_I-REF_GUID	        = LF_GUID.
    LS_PRODUCT_I-PROCESS_QTY_UNIT	= <L_SERV_I>-PROCESS_QTY_UNIT.
    LS_PRODUCT_I-PLANT            = <L_ITEM>-PLANT.
    INSERT LS_PRODUCT_I INTO TABLE CT_PRODUCT_I.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_ITEM
        IF_OBJECTNAME   = 'PRODUCT_I'
        IF_FIELDNAME    = 'GUID'
      CHANGING
        CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_ITEM
        IF_OBJECTNAME   = 'PRODUCT_I'
        IF_FIELDNAME    = 'PROCESS_QTY_UNIT'
      CHANGING
        CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_ITEM
        IF_OBJECTNAME   = 'PRODUCT_I'
        IF_FIELDNAME    = 'PLANT'
      CHANGING
        CT_INPUT_FIELDS = CT_INPUT_FIELDS ).

*   --------------------------
*   SCHEDLIN_I Fields
*   --------------------------
    CLEAR: LS_SCHEDLIN_I.
    LS_SCHEDLIN_I-REF_GUID = LF_GUID.
    INSERT VALUE #( ITEM_GUID  = LF_GUID
                    QUANTITY  = <L_ITEM>-QUANTITY
                    MODE        = LF_MODE
                    )
           INTO TABLE LS_SCHEDLIN_I-SCHEDLINES.
    INSERT LS_SCHEDLIN_I INTO TABLE CT_SCHEDLIN_I.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_REF_KIND     = GC_REFKIND_ITEM
        IF_OBJECTNAME   = 'SCHEDLIN'
        IF_FIELDNAME    = 'QUANTITY'
      CHANGING
        CT_INPUT_FIELDS = CT_INPUT_FIELDS ).

*   --------------------------
*   CUSTOMER_I Fields
*   --------------------------
    IF <L_ITEM>-ZZ1_LGORT IS NOT INITIAL.
      CLEAR LS_CUSTOMER_I.
      LS_CUSTOMER_I-REF_GUID  = LF_GUID.
      LS_CUSTOMER_I-ZZ1_LGORT = <L_ITEM>-ZZ1_LGORT.
      INSERT LS_CUSTOMER_I INTO TABLE CT_CUSTOMER_I.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_OBJECTNAME   = 'CUSTOMER_I'
          IF_FIELDNAME    = 'ZZ1_LGORT'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    ENDIF.

*   --------------------------
*   APPOINTMENT Fields
*   --------------------------
    IF <L_ITEM>-SRV_CUST_BEG GT <L_ITEM>-SRV_CUST_END.
*     Error: Requested end date must be later than requested start date
      INSERT VALUE #( TYPE       = 'E'
                      ID         = 'ZSDSCM01'
                      NUMBER     = '029' )
              INTO TABLE ET_RETURN.
      EXIT.
    ENDIF.

    IF <L_ITEM>-SRV_CUST_BEG IS NOT INITIAL.
      CLEAR LS_APPOINTMENT.
      LS_APPOINTMENT-MODE           = LF_MODE.
      LS_APPOINTMENT-REF_GUID	      = LF_GUID.
      LS_APPOINTMENT-REF_KIND	      = GC_REFKIND_ITEM.
      LS_APPOINTMENT-APPT_TYPE      = 'SRV_CUST_BEG'.
      LS_APPOINTMENT-TIMESTAMP_FROM = <L_ITEM>-SRV_CUST_BEG.
      INSERT LS_APPOINTMENT INTO TABLE CT_APPOINTMENT.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'APPOINTMENT'
          IF_LOGICAL_KEY  = 'SRV_CUST_BEG'
          IF_FIELDNAME    = 'TIMESTAMP_FROM'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    ENDIF.
    IF <L_ITEM>-SRV_CUST_END IS NOT INITIAL.
      CLEAR LS_APPOINTMENT.
      LS_APPOINTMENT-MODE           = LF_MODE.
      LS_APPOINTMENT-REF_GUID	      = LF_GUID.
      LS_APPOINTMENT-REF_KIND	      = GC_REFKIND_ITEM.
      LS_APPOINTMENT-APPT_TYPE      = 'SRV_CUST_END'.
      LS_APPOINTMENT-TIMESTAMP_FROM = <L_ITEM>-SRV_CUST_END.
      INSERT LS_APPOINTMENT INTO TABLE CT_APPOINTMENT.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'APPOINTMENT'
          IF_LOGICAL_KEY  = 'SRV_CUST_END'
          IF_FIELDNAME    = 'TIMESTAMP_FROM'
        CHANGING
          CT_INPUT_FIELDS = CT_INPUT_FIELDS ).
    ENDIF.

*<-- Start of Insertion 420000292 30.01.2025 (Assign Item Cat)
*   In case of manually maintained, assign Account assignment manually and
*   ignore doc_flow relation.
    IF LF_MANUAL EQ 'X'.
*     --------------------------
*     AC_ASSIGN Fields for Item
*     --------------------------
      CLEAR: LS_AC_ASSIGN,
             LT_INPUT_FIELDS.
      LS_AC_ASSIGN-REF_GUID = LF_GUID.
      LS_AC_ASSIGN-REF_KIND = GC_REFKIND_ITEM.
      LS_AC_ASSIGN-AC_OBJECT_TYPE = LC_WBS.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'AC_ASSIGN'
          IF_FIELDNAME    = 'AC_OBJECT_TYPE'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_AC_ASSIGN-AC_ASSIGNMENT = <L_ITEM>-AC_ASSIGNMENT.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'AC_ASSIGN'
          IF_FIELDNAME    = 'AC_ASSIGNMENT'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

      INSERT LS_AC_ASSIGN INTO TABLE CT_AC_ASSIGN.
      INSERT LINES OF LT_INPUT_FIELDS INTO TABLE CT_INPUT_FIELDS.

    ELSE.
*--> End of Insertion 420000292 30.01.2025
*     --------------------------
*     DOC_FLOW Fields for Item
*     --------------------------
      CLEAR: LS_DOC_FLOW,
             LT_INPUT_FIELDS.
      LS_DOC_FLOW-REF_GUID = LF_GUID.
      LS_DOC_FLOW-REF_KIND = GC_REFKIND_ITEM.

      CLEAR LS_DOC_FLOW_EXT.
      LS_DOC_FLOW_EXT-OBJKEY_B  = LF_GUID.
      LS_DOC_FLOW_EXT-BREL_MODE	= LF_MODE.
      LS_DOC_FLOW_EXT-BREL_KIND	= GC_REFKIND_ITEM.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'BREL_KIND'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-CURRENCY  = <L_SERV_I>-CURRENCY.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'CURRENCY'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-OBJKEY_A  = <L_SERV_I>-ITEM_GUID.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'OBJKEY_A'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-OBJTYPE_A = <L_SERV_I>-OBJTYPE_I.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'OBJTYPE_A'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-QUANTITY  = <L_ITEM>-QUANTITY.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'QUANTITY'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-QUANTITY_UNIT  = <L_SERV_I>-PROCESS_QTY_UNIT.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'QUANTITY_UNIT'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'REF_GUID'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-RELTYPE	  = GC_RELTYPE_VONA.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'RELTYPE'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
      LS_DOC_FLOW_EXT-VONA_KIND = GC_VONAKIND_A.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = LF_GUID
          IF_REF_KIND     = GC_REFKIND_ITEM
          IF_OBJECTNAME   = 'DOC_FLOW'
          IF_FIELDNAME    = 'VONA_KIND'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

      INSERT LS_DOC_FLOW_EXT INTO TABLE LS_DOC_FLOW-DOC_LINK.
      INSERT LS_DOC_FLOW INTO TABLE CT_DOC_FLOW.
      INSERT LINES OF LT_INPUT_FIELDS INTO TABLE CT_INPUT_FIELDS.
    ENDIF.                                                  "+420000292

  ENDLOOP.
  IF ET_RETURN IS NOT INITIAL.
    RETURN.
  ENDIF.

ENDMETHOD.


METHOD ASSIGN_PARTNERS.

  DATA:
    LT_INPUT_FIELDS  TYPE  CRMT_INPUT_FIELD_TAB.

  DATA:
    LS_PARTNER             TYPE  CRMT_PARTNER_COM,
    LS_PARTNER_LOGICAL_KEY TYPE  CRMT_PARTNER_LOGIC_PARTNER_KEY.

  DATA:
    LF_INVALID       TYPE  FLAG,
    LF_KIND_OF_ENTRY TYPE  CRMT_PARTNER_COM-KIND_OF_ENTRY VALUE 'C',
    LF_DISPLAY_TYPE  TYPE  CRMT_PARTNER_COM-DISPLAY_TYPE  VALUE 'BP',
    LF_NO_TYPE       TYPE  CRMT_PARTNER_COM-NO_TYPE       VALUE 'BP',
    LF_LOGICAL_KEY   TYPE  CRMT_INPUT_FIELD-LOGICAL_KEY.


* Initialize Output
  CLEAR: ET_RETURN.

  LOOP AT IT_PARTNER ASSIGNING FIELD-SYMBOL(<L_PARTNER>).

    CLEAR: LS_PARTNER,
           LT_INPUT_FIELDS.

    VALIDATE_CRM_PARTNER(
      EXPORTING
        IF_PARTNER_FCT = <L_PARTNER>-PARTNER_FCT
        IF_PARTNER_NO  = <L_PARTNER>-PARTNER_NO
      IMPORTING
        EF_PARTNER_FCT = LS_PARTNER-PARTNER_FCT
        EF_PARTNER_NO  = LS_PARTNER-PARTNER_NO
        EF_INVALID     = LF_INVALID ).
    IF LF_INVALID EQ 'X'.
      INSERT VALUE #( TYPE       = 'E'
                      ID         = 'ZSDSCM01'
                      NUMBER     = '012'
                      MESSAGE_V1 = <L_PARTNER>-PARTNER_FCT
                      MESSAGE_V2 = <L_PARTNER>-PARTNER_NO )
      INTO TABLE ET_RETURN.
      EXIT.
    ENDIF.

    LS_PARTNER-REF_GUID         = IF_GUID.
    LS_PARTNER-REF_KIND	        = 'A'.
    LS_PARTNER-KIND_OF_ENTRY    = LF_KIND_OF_ENTRY.
    LS_PARTNER-DISPLAY_TYPE     = LF_DISPLAY_TYPE.
    LS_PARTNER-NO_TYPE          = LF_NO_TYPE.

    INSERT LS_PARTNER INTO TABLE CT_PARTNER.

    MOVE-CORRESPONDING LS_PARTNER TO LS_PARTNER_LOGICAL_KEY.
    LF_LOGICAL_KEY = LS_PARTNER_LOGICAL_KEY.

    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'DISPLAY_TYPE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'KIND_OF_ENTRY'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'NO_TYPE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    IF LS_PARTNER-REF_PARTNER_FCT IS INITIAL.
      COLLECT_INPUT_FIELDS(
        EXPORTING
          IF_REF_GUID     = IF_GUID
          IF_REF_KIND     = 'A'
          IF_OBJECTNAME   = 'PARTNER'
          IF_LOGICAL_KEY  = LF_LOGICAL_KEY
          IF_FIELDNAME    = 'PARTNER_FCT'
        CHANGING
          CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
    ENDIF.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = IF_GUID
        IF_REF_KIND     = 'A'
        IF_OBJECTNAME   = 'PARTNER'
        IF_LOGICAL_KEY  = LF_LOGICAL_KEY
        IF_FIELDNAME    = 'PARTNER_NO'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

    INSERT LINES OF LT_INPUT_FIELDS INTO TABLE CT_INPUT_FIELDS.

  ENDLOOP.

ENDMETHOD.


METHOD COLLECT_EXCEPTION.

  DATA:
    LS_MSG         TYPE BAL_S_MSG.


* Get Exception Message(s)
  LOOP AT IT_EXCEPTION ASSIGNING FIELD-SYMBOL(<L_EXCEPTION>).
    CLEAR  LS_MSG.
    CALL FUNCTION 'CRM_MESSAGES_GET_MSG_INFO'
      EXPORTING
        IS_MSG_HANDLE           = <L_EXCEPTION>-MSG_HANDLE
      IMPORTING
        ES_MSG                  = LS_MSG
      EXCEPTIONS
        NOT_FOUND               = 1
        WRONG_CONTEXT_STRUCTURE = 2
        DATA_ERROR              = 3
        OTHERS                  = 4.
    IF SY-SUBRC NE 0.
      CLEAR LS_MSG.
    ENDIF.

    INSERT VALUE #( TYPE       = LS_MSG-MSGTY
                    ID         = LS_MSG-MSGID
                    NUMBER     = LS_MSG-MSGNO
                    MESSAGE_V1 = LS_MSG-MSGV1
                    MESSAGE_V2 = LS_MSG-MSGV2
                    MESSAGE_V3 = LS_MSG-MSGV3
                    MESSAGE_V4 = LS_MSG-MSGV4 )
            INTO TABLE CT_RETURN.
  ENDLOOP.

ENDMETHOD.


METHOD COLLECT_INPUT_FIELDS.

  READ TABLE CT_INPUT_FIELDS ASSIGNING FIELD-SYMBOL(<L_INPUT_FIELDS>)
                             WITH KEY REF_GUID = IF_REF_GUID
                                      REF_KIND = IF_REF_KIND
                                      OBJECTNAME = IF_OBJECTNAME
                                      LOGICAL_KEY = IF_LOGICAL_KEY.
  IF SY-SUBRC NE 0.
    INSERT VALUE #( REF_GUID = IF_REF_GUID
                    REF_KIND = IF_REF_KIND
                    OBJECTNAME = IF_OBJECTNAME
                    LOGICAL_KEY = IF_LOGICAL_KEY )
           INTO TABLE CT_INPUT_FIELDS
           ASSIGNING <L_INPUT_FIELDS>.
  ENDIF.

  IF IF_FIELDNAME IS NOT INITIAL.
    READ TABLE <L_INPUT_FIELDS>-FIELD_NAMES TRANSPORTING NO FIELDS
                                            WITH KEY FIELDNAME = IF_FIELDNAME.
    IF SY-SUBRC NE 0.
      INSERT VALUE #( FIELDNAME = IF_FIELDNAME )
             INTO TABLE <L_INPUT_FIELDS>-FIELD_NAMES.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD CREATE_SERVICE_CONFIRMATION.
*-----------------------------------------------------------------------
*  Class              : ZCL_SDSCM_SERVICE_CONFIRMATION
*  Creation Date      : 17.06.2024
*  Author             : Wuthichai L.(Eviden)
*  Add-on ID          : CMI011
*  Description        : This is a Class to maintain SDS Service
*                       confirmation documents
*  Purpose            : To maintain Service Confirmation
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

  DATA:
    LT_PRODUCT_I    TYPE  CRMT_PRODUCT_I_COMT,
    LT_SCHEDLIN_I   TYPE  CRMT_SCHEDLIN_I_COMT,
    LT_APPOINTMENT  TYPE  CRMT_APPOINTMENT_COMT,
    LT_AC_ASSIGN    TYPE  CRMT_AC_ASSIGN_COMT,              "+420000292
    LT_CUSTOMER_I   TYPE  CRMT_CUSTOMER_I_COMT,
    LT_STATUS       TYPE  CRMT_STATUS_COMT,
    LT_PARTNER      TYPE  CRMT_PARTNER_COMT,
    LT_SALES        TYPE  CRMT_SALES_COMT,
    LT_EXCEPTION    TYPE  CRMT_EXCEPTION_T,
    LT_ORDERADM_H   TYPE  CRMT_ORDERADM_H_COMT,
    LT_ORDERADM_I   TYPE  CRMT_ORDERADM_I_COMT,
    LT_INPUT_FIELDS TYPE  CRMT_INPUT_FIELD_TAB,
    LT_DOC_FLOW     TYPE  CRMT_DOC_FLOW_COMT,
    LT_GUID         TYPE  CRMT_OBJECT_GUID_TAB,
    LT_SAVED        TYPE  CRMT_RETURN_OBJECTS,
    LT_CUSTOMER_H   TYPE  CRMT_CUSTOMER_H_COMT.

  DATA:
    LS_ORDERADM_H   TYPE  CRMT_ORDERADM_H_COM,
    LS_DOC_FLOW     TYPE  CRMT_DOC_FLOW_COM,
    LS_DOC_FLOW_EXT TYPE  CRMT_DOC_FLOW_EXTD,
    LS_STATUS       TYPE  CRMT_STATUS_COM,
    LS_SALES        TYPE  CRMT_SALES_COM,
    LS_CUSTOMER_H   TYPE  CRMT_CUSTOMER_H_COM.

  DATA:
    LF_MODE        TYPE  CRMT_MODE,
    LF_GUID        TYPE  CRMT_OBJECT_GUID,
    LF_LOGICAL_KEY TYPE  CRMT_LOGICAL_KEY,
    LF_TEXT1       TYPE  TEXT50.


* Initialize Output
  CLEAR: EF_OBJECT_ID,
         ET_RETURN.

* Get Constants
  GET_GENC( ).

* Check Reference SF Confirmation number exist?
  SELECT OBJECT_ID
    FROM CRMS4D_SERV_H
   WHERE OBJTYPE_H EQ @GC_SRVCONF
     AND SALES_ORG_SD IN  @GT_VKORG
     AND PO_NUMBER_SOLD EQ @IS_SRVCONF-HEAD-PO_NUMBER_SOLD
   ORDER BY PRIMARY KEY
    INTO @DATA(LF_OBJECT_ID)
      UP TO 1 ROWS.
  ENDSELECT.
  IF SY-SUBRC EQ 0.
    WRITE LF_OBJECT_ID TO LF_TEXT1.
*   Error: SF Confirmation no &1 was already created as Service confirmation &2.
    INSERT VALUE #( TYPE       = 'E'
                    ID         = 'ZSDSCM01'
                    NUMBER     = '025'
                    MESSAGE_V1 = IS_SRVCONF-HEAD-PO_NUMBER_SOLD
                    MESSAGE_V2 = LF_TEXT1 )
            INTO TABLE ET_RETURN.
    RETURN.
  ENDIF.

* Read Service Order
  SELECT SINGLE HEADER_GUID,
                STAT_LIFECYCLE,
                PROCESS_TYPE
    FROM CRMS4D_SERV_H
   WHERE OBJTYPE_H EQ @GC_SRVORDER
     AND OBJECT_ID EQ @IS_SRVCONF-HEAD-SERVICE_ORDER
    INTO @DATA(LS_SERV_H).
  IF SY-SUBRC NE 0.
*   Error: Invalid Service Order value &1.
    INSERT VALUE #( TYPE       = 'E'
                    ID         = 'ZSDSCM01'
                    NUMBER     = '001'
                    MESSAGE_V1 = IS_SRVCONF-HEAD-SERVICE_ORDER )
            INTO TABLE ET_RETURN.
    RETURN.
* Service Order not released
  ELSEIF LS_SERV_H-STAT_LIFECYCLE NE GC_RELEASED.
    WRITE IS_SRVCONF-HEAD-SERVICE_ORDER TO LF_TEXT1.
*   Error: Service Order &1 is not in released status.
    INSERT VALUE #( TYPE       = 'E'
                    ID         = 'ZSDSCM01'
                    NUMBER     = '027'
                    MESSAGE_V1 = LF_TEXT1 )
            INTO TABLE ET_RETURN.
    RETURN.
  ENDIF.

* Check SVO Type copy enable?
  SELECT SINGLE PR_TYPE_FROM,
                PR_TYPE_TO
    FROM CRMC_PR_COPY_MA
   WHERE PR_TYPE_FROM EQ @LS_SERV_H-PROCESS_TYPE
     AND PR_TYPE_TO   EQ @IS_SRVCONF-HEAD-PROCESS_TYPE
    INTO @DATA(LS_COPY) ##NEEDED.
  IF SY-SUBRC NE 0.
    WRITE IS_SRVCONF-HEAD-SERVICE_ORDER TO LF_TEXT1.
*   Error: Service Order &1 cannot copy to confirmation type &2.
    INSERT VALUE #( TYPE       = 'E'
                    ID         = 'ZSDSCM01'
                    NUMBER     = '030'
                    MESSAGE_V1 = LF_TEXT1
                    MESSAGE_V2 = IS_SRVCONF-HEAD-PROCESS_TYPE )
            INTO TABLE ET_RETURN.
    RETURN.
  ENDIF.

* Create New GUID
  LF_MODE = GC_MODE_CREATE.
  CALL FUNCTION 'CRM_GUID_CREATE'
    IMPORTING
      EV_GUID = LF_GUID.

* --------------------------
* ORDERADM_H Fields
* --------------------------
  CLEAR LS_ORDERADM_H.
  LS_ORDERADM_H-GUID = LF_GUID.
  LS_ORDERADM_H-MODE = LF_MODE.
  LS_ORDERADM_H-PROCESS_TYPE = IS_SRVCONF-HEAD-PROCESS_TYPE.
  INSERT LS_ORDERADM_H INTO TABLE LT_ORDERADM_H.
  COLLECT_INPUT_FIELDS(
    EXPORTING
      IF_REF_GUID     = LF_GUID
      IF_REF_KIND     = GC_REFKIND_HEAD
      IF_OBJECTNAME   = 'ORDERADM_H'
      IF_FIELDNAME    = 'PROCESS_TYPE'
    CHANGING
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  COLLECT_INPUT_FIELDS(
    EXPORTING
      IF_REF_GUID     = LF_GUID
      IF_REF_KIND     = GC_REFKIND_HEAD
      IF_OBJECTNAME   = 'ORDERADM_H'
      IF_FIELDNAME    = 'MODE'
    CHANGING
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

* --------------------------
* PARTNER Fields
* --------------------------
  ASSIGN_PARTNERS(
    EXPORTING
      IF_GUID         = LF_GUID
      IT_PARTNER      = IS_SRVCONF-PARTNER
    IMPORTING
      ET_RETURN       = ET_RETURN
    CHANGING
      CT_PARTNER      = LT_PARTNER
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  IF ET_RETURN IS NOT INITIAL.
    RETURN.
  ENDIF.

* --------------------------
* CUSTOMER_H Fields
* --------------------------
  CLEAR LS_CUSTOMER_H.
* Break Reason
  IF IS_SRVCONF-HEAD-ZZ1_BREAK_REASON IS NOT INITIAL.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_BREAK_REASON = IS_SRVCONF-HEAD-ZZ1_BREAK_REASON.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_BREAK_REASON'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Break Position
  IF IS_SRVCONF-HEAD-ZZ1_BREAK_POSITION IS NOT INITIAL.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_BREAK_POSITION = IS_SRVCONF-HEAD-ZZ1_BREAK_POSITION.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_BREAK_POSITION'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Result Progress
  IF IS_SRVCONF-HEAD-ZZ1_RESULT_PROGRESS IS NOT INITIAL.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_RESULT_PROGRESS = IS_SRVCONF-HEAD-ZZ1_RESULT_PROGRESS.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_RESULT_PROGRESS'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Error Code
  IF IS_SRVCONF-HEAD-ZZ1_ERROR_CODE IS NOT INITIAL.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_ERROR_CODE = IS_SRVCONF-HEAD-ZZ1_ERROR_CODE.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_ERROR_CODE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
* Error Code
  IF IS_SRVCONF-HEAD-ZZ1_MAIN_CAUSE IS NOT INITIAL.
    LS_CUSTOMER_H-REF_GUID  = LF_GUID.
    LS_CUSTOMER_H-ZZ1_MAIN_CAUSE = IS_SRVCONF-HEAD-ZZ1_MAIN_CAUSE.
    COLLECT_INPUT_FIELDS(
      EXPORTING
        IF_REF_GUID     = LF_GUID
        IF_OBJECTNAME   = 'CUSTOMER_H'
        IF_FIELDNAME    = 'ZZ1_MAIN_CAUSE'
      CHANGING
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  ENDIF.
  IF LS_CUSTOMER_H IS NOT INITIAL.
    INSERT LS_CUSTOMER_H INTO TABLE LT_CUSTOMER_H.
  ENDIF.

* --------------------------
* DOC_FLOW Fields for Header
* --------------------------
  CLEAR LS_DOC_FLOW.
  LS_DOC_FLOW-REF_GUID = LF_GUID.
  LS_DOC_FLOW-REF_KIND = GC_REFKIND_HEAD.

  CLEAR LS_DOC_FLOW_EXT.
  LS_DOC_FLOW_EXT-OBJKEY_A  = LS_SERV_H-HEADER_GUID.
  LS_DOC_FLOW_EXT-VONA_KIND = GC_VONAKIND_A.
  LS_DOC_FLOW_EXT-OBJKEY_B  = LF_GUID.
  LS_DOC_FLOW_EXT-BREL_KIND	= GC_REFKIND_HEAD.
  LS_DOC_FLOW_EXT-BREL_MODE	= LF_MODE.
  LS_DOC_FLOW_EXT-RELTYPE	  = GC_RELTYPE_VONA.
  INSERT LS_DOC_FLOW_EXT INTO TABLE LS_DOC_FLOW-DOC_LINK.
  INSERT LS_DOC_FLOW INTO TABLE LT_DOC_FLOW.

* --------------------------
* STATUS Fields
* --------------------------
  CLEAR LS_STATUS.
  LS_STATUS-REF_GUID = LF_GUID.
  LS_STATUS-REF_KIND  = GC_REFKIND_HEAD.
  LS_STATUS-STATUS    = GC_STATUS_COMPLETED.
  LS_STATUS-ACTIVATE  = 'X'.
  INSERT LS_STATUS INTO TABLE LT_STATUS.
  LF_LOGICAL_KEY = LS_STATUS-STATUS.
  COLLECT_INPUT_FIELDS(
    EXPORTING
      IF_REF_GUID     = LF_GUID
      IF_REF_KIND     = GC_REFKIND_HEAD
      IF_OBJECTNAME   = 'STATUS'
      IF_LOGICAL_KEY  = LF_LOGICAL_KEY
      IF_FIELDNAME    = 'ACTIVATE'
    CHANGING
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

* --------------------------
* SALES Fields
* --------------------------
  CLEAR LS_SALES.
  LS_SALES-REF_GUID = LF_GUID.
  LS_SALES-REF_KIND	= GC_REFKIND_HEAD.
  LS_SALES-PO_NUMBER_SOLD = IS_SRVCONF-HEAD-PO_NUMBER_SOLD.
  INSERT LS_SALES INTO TABLE LT_SALES.
  COLLECT_INPUT_FIELDS(
    EXPORTING
      IF_REF_GUID     = LF_GUID
      IF_REF_KIND     = GC_REFKIND_HEAD
      IF_OBJECTNAME   = 'SALES'
      IF_FIELDNAME    = 'PO_NUMBER_SOLD'
    CHANGING
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

* --------------------------
* ITEM Fields
* --------------------------
  ASSIGN_ITEMS(
    EXPORTING
      IF_GUID         = LF_GUID
      IS_HEAD         = IS_SRVCONF-HEAD
      IT_ITEM         = IS_SRVCONF-ITEM
    IMPORTING
      ET_RETURN       = ET_RETURN
    CHANGING
      CT_ORDERADM_I   = LT_ORDERADM_I
      CT_PRODUCT_I    = LT_PRODUCT_I
      CT_SCHEDLIN_I   = LT_SCHEDLIN_I
      CT_CUSTOMER_I   = LT_CUSTOMER_I
      CT_APPOINTMENT  = LT_APPOINTMENT
      CT_AC_ASSIGN    = LT_AC_ASSIGN          "+420000292
      CT_DOC_FLOW     = LT_DOC_FLOW
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).
  IF ET_RETURN IS NOT INITIAL.
    RETURN.
  ENDIF.

* --------------------------
* Call Function Maintain Service Confirmation
* --------------------------
  CALL FUNCTION 'CRM_ORDER_MAINTAIN'
    EXPORTING
      IT_SALES          = LT_SALES
      IT_PRODUCT_I      = LT_PRODUCT_I
      IT_CUSTOMER_H     = LT_CUSTOMER_H
      IT_CUSTOMER_I     = LT_CUSTOMER_I
      IT_SCHEDLIN_I     = LT_SCHEDLIN_I
      IT_APPOINTMENT    = LT_APPOINTMENT
      IT_AC_ASSIGN      = LT_AC_ASSIGN         "+420000292
      IT_STATUS         = LT_STATUS
      IT_PARTNER        = LT_PARTNER
    IMPORTING
      ET_EXCEPTION      = LT_EXCEPTION
    CHANGING
      CT_ORDERADM_H     = LT_ORDERADM_H
      CT_ORDERADM_I     = LT_ORDERADM_I
      CT_INPUT_FIELDS   = LT_INPUT_FIELDS
      CT_DOC_FLOW       = LT_DOC_FLOW
    EXCEPTIONS
      ERROR_OCCURRED    = 1
      DOCUMENT_LOCKED   = 2
      NO_CHANGE_ALLOWED = 3
      NO_AUTHORITY      = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0 OR
     LT_EXCEPTION IS NOT INITIAL.
    IF LT_EXCEPTION IS INITIAL.
      INSERT VALUE #( TYPE       = SY-MSGTY
                      ID         = SY-MSGID
                      NUMBER     = SY-MSGNO
                      MESSAGE_V1 = SY-MSGV1
                      MESSAGE_V2 = SY-MSGV2
                      MESSAGE_V3 = SY-MSGV3
                      MESSAGE_V4 = SY-MSGV4 )
              INTO TABLE ET_RETURN.
    ELSE.
      COLLECT_EXCEPTION(
        EXPORTING
          IT_EXCEPTION = LT_EXCEPTION
        CHANGING
          CT_RETURN    = ET_RETURN ).
    ENDIF.
    RETURN.
  ENDIF.

* Save Document
  INSERT LF_GUID INTO TABLE LT_GUID.
  CALL FUNCTION 'CRM_ORDER_SAVE'
    EXPORTING
      IT_OBJECTS_TO_SAVE   = LT_GUID
      IV_UPDATE_TASK_LOCAL = 'X'
*     IV_NO_BDOC_SEND      = 'X'
    IMPORTING
      ET_SAVED_OBJECTS     = LT_SAVED
      ET_EXCEPTION         = LT_EXCEPTION
    EXCEPTIONS
      DOCUMENT_NOT_SAVED   = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0 OR
     LT_EXCEPTION IS NOT INITIAL.
    IF LT_EXCEPTION IS INITIAL.
      INSERT VALUE #( TYPE       = SY-MSGTY
                      ID         = SY-MSGID
                      NUMBER     = SY-MSGNO
                      MESSAGE_V1 = SY-MSGV1
                      MESSAGE_V2 = SY-MSGV2
                      MESSAGE_V3 = SY-MSGV3
                      MESSAGE_V4 = SY-MSGV4 )
              INTO TABLE ET_RETURN.
    ELSE.
      COLLECT_EXCEPTION(
        EXPORTING
          IT_EXCEPTION = LT_EXCEPTION
        CHANGING
          CT_RETURN    = ET_RETURN ).
    ENDIF.
    RETURN.
  ENDIF.

* Return Object ID
  READ TABLE LT_SAVED ASSIGNING FIELD-SYMBOL(<L_SAVED>)
                      WITH KEY GUID = LF_GUID.
  IF SY-SUBRC NE 0.
*   Error: Error during processing GUID &1.
    INSERT VALUE #( TYPE       = 'E'
                    ID         = 'ZSDSCM01'
                    NUMBER     = '006'
                    MESSAGE_V1 = LF_GUID )
            INTO TABLE ET_RETURN.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

* Commit Work
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      WAIT = 'X'.

* Assign Result
  EF_OBJECT_ID = <L_SAVED>-OBJECT_ID.

ENDMETHOD.


METHOD GET_GENC.
  CONSTANTS:
    LC_VKORG  TYPE  ZSDSDE_PARAM_NAME VALUE 'SALES_ORG'.

  DATA:
    LT_GENC       TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

  DATA:
    LF_REPID   TYPE  PROGRAMM VALUE 'ZCL_SDSCM_SERVICE_CONFIRMATION'.


* Initialize Output
  CLEAR: GT_VKORG.

* Read All GenC constants for program
  CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
    EXPORTING
      IF_REPID = LF_REPID
    IMPORTING
      ET_GEN_C = LT_GENC.

* Assign GenC Constants
  LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<L_GENC>).

    CASE <L_GENC>-PARAM.
*     ------------------------------------
*     Sales Org in scope for processing
*     ------------------------------------
      WHEN LC_VKORG.
        INSERT VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                        OPTION = <L_GENC>-PARAM_OPTION
                        LOW    = <L_GENC>-VALUE_LOW
                        HIGH   = <L_GENC>-VALUE_HIGH )
               INTO TABLE GT_VKORG.

    ENDCASE.

  ENDLOOP.

ENDMETHOD.


METHOD VALIDATE_CRM_PARTNER.

  DATA:
    LF_PARTNER    TYPE  BUT000-PARTNER.


* Initialize Output
  CLEAR: EF_PARTNER_FCT,
         EF_PARTNER_NO,
         EF_INVALID.

* Validate Funcion
  SELECT A~PARTNER_FCT,
         A~PARTNER_PFT,
         B~NRART
    FROM CRMC_PARTNER_FCT AS A
           LEFT OUTER JOIN CRMC_PARTNER_2R3 AS B       "#EC CI_BUFFJOIN
             ON  B~PARTNER_FCT = A~PARTNER_FCT
   WHERE A~PARTNER_FCT EQ @IF_PARTNER_FCT
   ORDER BY A~PARTNER_FCT ASCENDING
    INTO @DATA(LS_PARTNER_FCT)
      UP TO 1 ROWS.
  ENDSELECT.
  IF SY-SUBRC NE 0.
    EF_INVALID = 'X'.
    RETURN.
  ENDIF.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = IF_PARTNER_NO
    IMPORTING
      OUTPUT = LF_PARTNER.

  SELECT SINGLE PARTNER
    FROM BUT000
   WHERE PARTNER EQ @LF_PARTNER
    INTO @LF_PARTNER.
  IF SY-SUBRC NE 0.
    EF_INVALID = 'X'.
    RETURN.
  ENDIF.

* Assign Result
  EF_PARTNER_FCT = LS_PARTNER_FCT-PARTNER_FCT.
  EF_PARTNER_NO  = LF_PARTNER.

ENDMETHOD.
ENDCLASS.
