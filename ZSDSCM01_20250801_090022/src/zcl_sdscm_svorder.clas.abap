class ZCL_SDSCM_SVORDER definition
  public
  final
  create public .

public section.

  types:
    TT_ORDER_TYPE TYPE RANGE OF CRMT_PROCESS_TYPE_DB .
  types:
    BEGIN OF TS_MAP_LOB,
        ORDER_TYPE TYPE  CRMT_PROCESS_TYPE_DB,
        LOB        TYPE  ZDSDE_LOB,
      END OF TS_MAP_LOB .
  types:
    TT_MAP_LOB TYPE SORTED TABLE OF TS_MAP_LOB
                                   WITH UNIQUE KEY ORDER_TYPE .
  types:
    BEGIN OF TS_MAP_PROACT,
        ORDER_TYPE TYPE  CRMT_PROCESS_TYPE_DB,
        PROACT     TYPE  ZSDSDE_PROACTIVITY,
      END OF TS_MAP_PROACT .
  types:
    TT_MAP_PROACT TYPE SORTED TABLE OF TS_MAP_PROACT
                                   WITH UNIQUE KEY ORDER_TYPE .
  types:
    BEGIN OF TS_T683S,
        STUNR TYPE  T683S-STUNR,
        ZAEHK TYPE  T683S-ZAEHK,
        KSCHL TYPE  T683S-KSCHL,
      END OF TS_T683S .
  types:
    TT_T683S TYPE SORTED TABLE OF TS_T683S
                              WITH UNIQUE KEY STUNR
                                              ZAEHK .

  constants GC_OBJTYPE_SVORDER type CRMT_SUBOBJECT_CATEGORY_DB value 'BUS2000116' ##NO_TEXT.
  constants GC_OBJTYPE_SVORDER_ITEM type CRMT_SUBOBJECT_CATEGORY_DB value 'BUS2000140' ##NO_TEXT.
  constants GC_OBJTYPE_SVCONTRACT type CRMT_SUBOBJECT_CATEGORY_DB value 'BUS2000112' ##NO_TEXT.
  constants GC_OBJTYPE_SVCONTRACT_ITEM type CRMT_SUBOBJECT_CATEGORY_DB value 'BUS2000137' ##NO_TEXT.
  constants GC_MODE_CREATE type CRMT_MODE value 'A' ##NO_TEXT.
  constants GC_MODE_CHANGE type CRMT_MODE value 'B' ##NO_TEXT.
  constants GC_MODE_DELETE type CRMT_MODE value 'D' ##NO_TEXT.
  constants GC_REFKIND_HEAD type CRMT_OBJECT_KIND value 'A' ##NO_TEXT.
  constants GC_REFKIND_ITEM type CRMT_OBJECT_KIND value 'B' ##NO_TEXT.
  constants GC_STATUS_DELETE type CRMS4_STAT_LIFECYCLE value 'Z' ##NO_TEXT.
  constants GC_SYSTEM_STATUS_BILL type CRM_JEST-STAT value 'I1072' ##NO_TEXT.

  class-methods GET_PRICE_PROCEDURE
    importing
      !IF_HEADER_GUID type CRMT_OBJECT_GUID
    exporting
      !ET_T683S type TT_T683S .
  class-methods VALIDATE_SVORDER
    changing
      !CS_REQUEST type ZSDSCMS001
      !CS_RESPONSE type ZSDSCMS001 .
  class-methods READ_LOGCRM
    importing
      !IF_OBJECT_ID type CRMT_OBJECT_ID
    exporting
      !CT_MESSAGE type ZSDSCAS006_TT .
  class-methods MAINTAIN_SVORDER
    importing
      !IS_REQUEST type ZSDSCMS001
    exporting
      !ES_RETURN type BAPIRETURN1
      !ET_RETURN type ZSDSCAS006_TT .
  class-methods DEFAULT_SVORDER
    changing
      !CS_REQUEST type ZSDSCMS001 .
protected section.
PRIVATE SECTION.

  CONSTANTS GC_PARTNER_SOLDTO TYPE CRMT_PARTNER_FCT VALUE '00000001' ##NO_TEXT.
  CONSTANTS GC_PARTNER_VENDOR TYPE CRMT_PARTNER_FCT VALUE '00000019' ##NO_TEXT.
  CONSTANTS GC_PARTNER_EMP_RESPONSE TYPE CRMT_PARTNER_FCT VALUE '00000014' ##NO_TEXT.
  CLASS-DATA GF_DEFT_CURRENCY TYPE CRMT_CURRENCY VALUE 'THB' ##NO_TEXT.
  CLASS-DATA GF_DEFT_DIS_CHANNEL_CHK TYPE CRMT_DISTRIBUTION_CHANNEL VALUE 'S0' ##NO_TEXT.
  CLASS-DATA GF_DEFT_DIS_CHANNEL TYPE CRMT_DISTRIBUTION_CHANNEL VALUE '00' ##NO_TEXT.
  CLASS-DATA GF_DEFT_DIVISION TYPE CRMT_DIVISION VALUE '30' ##NO_TEXT.
  CLASS-DATA GF_DEFT_SALES_ORG TYPE VKORG VALUE '1000' ##NO_TEXT.
  CLASS-DATA GF_DEFT_PLANT TYPE WERKS_D VALUE '1000' ##NO_TEXT.
  CLASS-DATA GF_DEFT_PRIORITY TYPE CRMT_PRIORITY VALUE '5' ##NO_TEXT.
  CLASS-DATA GF_DEFT_SERV_PRICE TYPE PRCT_COND_TYPE VALUE 'ZSR1' ##NO_TEXT ##NEEDED.
  CLASS-DATA GF_DEFT_PRICE_LIST TYPE PRCT_COND_TYPE VALUE 'ZPR0' ##NO_TEXT ##NEEDED.
  CLASS-DATA GF_DEFT_DISC_PER TYPE PRCT_COND_TYPE VALUE 'ZSI1' ##NO_TEXT.
  CLASS-DATA GF_DEFT_DISC_VAL TYPE PRCT_COND_TYPE VALUE 'ZSI2' ##NO_TEXT.
  CLASS-DATA GF_DEFT_STATUS_PROFILE TYPE J_STSMA VALUE 'ZCRMZSRO' ##NO_TEXT.
  CLASS-DATA GF_DEFT_PARTNER_ONETIME TYPE CRMT_PARTNER_NO VALUE 'OT01' ##NO_TEXT.
  CLASS-DATA GF_MAT_TYPE_SERVICE TYPE MTART VALUE 'ZSV' ##NO_TEXT ##NEEDED.
  CLASS-DATA GS_ITEM_SERVICE TYPE ZSDSCMS004  ##NEEDED.
  CLASS-DATA GF_WARRANTY_IN TYPE ZSDSDE_WARRANTY_CHECK VALUE 'IN' ##NO_TEXT.
  CLASS-DATA GF_WARRANTY_EXT TYPE ZSDSDE_WARRANTY_CHECK VALUE 'EXT' ##NO_TEXT.
  CLASS-DATA GF_WARRANTY_OUT TYPE ZSDSDE_WARRANTY_CHECK VALUE 'OUT' ##NO_TEXT.
  CLASS-DATA GF_DEFT_SUBJECT_PROFILE TYPE CRMT_SUBJECT_PROFILE VALUE 'SERVICE' ##NO_TEXT.
  CLASS-DATA GF_PROCESS_TYPE_ZRO5 TYPE CRMT_PROCESS_TYPE_DB VALUE 'ZRO5' ##NO_TEXT.
  CLASS-DATA GT_T683S TYPE TT_T683S .
  CLASS-DATA GT_MAP_LOB TYPE TT_MAP_LOB .
  CLASS-DATA GT_MAP_PROACT TYPE TT_MAP_PROACT .
  CLASS-DATA GT_STATUS_BILL TYPE TT_ORDER_TYPE .
  CLASS-DATA GT_NAMETAB TYPE CRMT_INPUT_FIELD_NAMES_TAB .

  CLASS-METHODS SYNC_PRICING_WITH_BP
    IMPORTING
      !IF_GUID       TYPE CRMT_OBJECT_GUID
      !IT_ORDERADM_I TYPE CRMT_ORDERADM_I_WRKT  ##NEEDED
      !IT_PARTNER    TYPE CRMT_PARTNER_EXTERNAL_WRKT
      !IT_ORGMAN     TYPE CRMT_ORGMAN_WRKT
    CHANGING
      !CT_PRICING    TYPE CRMT_PRICING_WRKT .
  CLASS-METHODS DETERMINE_COND_SEQNO
    IMPORTING
      !IT_T683S TYPE TT_T683S
      !IT_COND  TYPE PRCT_COND_DU_TAB
      !IF_STUNR TYPE PRCT_PP_STEP
      !IF_ZAEHK TYPE PRCT_PP_COUNTER
    EXPORTING
      !EF_ZAEHK TYPE PRCT_PP_COUNTER .
  CLASS-METHODS VALIDATE_PROCESS_TYPE
    IMPORTING
      !IF_PROCESS_TYPE TYPE CRMT_PROCESS_TYPE_DB
    CHANGING
      !CS_RESPONSE     TYPE ZSDSCMS001 .
  CLASS-METHODS VALIDATE_WBS
    IMPORTING
      !IF_FIELDNAME TYPE DOMNAME
      !IF_WBS       TYPE CRMT_AC_ASSIGN
    CHANGING
      !CS_RESPONSE  TYPE ZSDSCMS001 .
  CLASS-METHODS VALIDATE_PARTNER_FCT
    IMPORTING
      !IF_FIELDNAME   TYPE DOMNAME
      !IF_PARTNER_FCT TYPE COMT_PARTNER_FCT
    CHANGING
      !CS_RESPONSE    TYPE ZSDSCMS001 .
  CLASS-METHODS COLLECT_EXCEPTION
    IMPORTING
      !IT_EXCEPTION TYPE CRMT_EXCEPTION_T
    CHANGING
      !CT_RETURN    TYPE BAPIRET2_TAB OPTIONAL
      !CS_RETURN    TYPE BAPIRETURN1 OPTIONAL .
  CLASS-METHODS VALIDATE_BP
    IMPORTING
      !IF_FIELDNAME   TYPE DOMNAME
      !IF_PARTNER_FCT TYPE COMT_PARTNER_FCT
    CHANGING
      !CF_PARTNER_NO  TYPE CRMT_PARTNER_NO
      !CS_RESPONSE    TYPE ZSDSCMS001 .
  CLASS-METHODS VALIDATE_MATERIAL
    IMPORTING
      !IF_FIELDNAME TYPE DOMNAME
      !IF_MATNR     TYPE ANY
    CHANGING
      !CS_RESPONSE  TYPE ZSDSCMS001 .
  CLASS-METHODS VALIDATE_DOMAIN
    IMPORTING
      !IF_FIELDNAME TYPE DOMNAME
      !IF_DOMNAME   TYPE DOMNAME
      !IF_DOMVALUE  TYPE ANY
    CHANGING
      !CS_RESPONSE  TYPE ZSDSCMS001 .
  CLASS-METHODS VALIDATE_CRM_PARTNER
    IMPORTING
      !IF_PARTNER_FCT TYPE CRMT_PARTNER_FCT
      !IF_PARTNER_NO  TYPE CRMT_PARTNER_NO
    EXPORTING
      !EF_PARTNER_FCT TYPE CRMT_PARTNER_FCT
      !EF_PARTNER_NO  TYPE CRMT_PARTNER_NO
      !EF_INVALID     TYPE FLAG .
  CLASS-METHODS VALIDATE_SVO_NO   ##RELAX
    IMPORTING
      !IF_SVO_NO   TYPE CRMT_OBJECT_ID_DB
    CHANGING
      !CS_RESPONSE TYPE ZSDSCMS001 .
  CLASS-METHODS ASSIGN_MESSAGE
    IMPORTING
      !IF_STATUS   TYPE ZSDSDE_REST_STATUS
      !IF_MSGID    TYPE SY-MSGID DEFAULT 'ZSDSCM01'
      !IF_MSGNO    TYPE SY-MSGNO
      !IF_MSGV1    TYPE CLIKE OPTIONAL
      !IF_MSGV2    TYPE CLIKE OPTIONAL
      !IF_MSGV3    TYPE CLIKE OPTIONAL
      !IF_MSGV4    TYPE CLIKE OPTIONAL
    CHANGING
      !CS_RESPONSE TYPE ZSDSCMS001 .
  CLASS-METHODS GET_GENC .
  CLASS-METHODS MAP_STATUS
    IMPORTING
      !IF_STATUS TYPE CRMS4_STAT_LIFECYCLE
    EXPORTING
      !EF_ESTAT  TYPE J_ESTAT .
  CLASS-METHODS MAP_ITEM_TYPE
    IMPORTING
      !IF_SVO_TYPE       TYPE CRMT_PROCESS_TYPE_DB
      !IF_MATNR          TYPE CRMT_ORDERED_PROD_DB
      !IF_IS_BILLING     TYPE ZSDSDE_IS_BILLING
      !IF_IS_PR          TYPE ZSDSDE_IS_PR
      !IF_WARRANTY_CHECK TYPE ZSDSDE_WARRANTY_CHECK
    EXPORTING
      !EF_ITEM_TYPE      TYPE CRMT_ITEM_TYPE_DB .
  CLASS-METHODS GET_GUID_FROM_DB
    IMPORTING
      !IF_OBJTYPE_H TYPE CRMT_SUBOBJECT_CATEGORY_DB
      !IF_OBJECT_ID TYPE CRMT_OBJECT_ID_DB
    EXPORTING
      !EF_GUID      TYPE CRMT_OBJECT_GUID .
  CLASS-METHODS GET_ITEM_GUID_FROM_DB
    CHANGING
      !CS_ITEM_KEY TYPE CRMS4D_BTX_I .
  CLASS-METHODS PREPARE_PRICE
    IMPORTING
      !IF_COND_TYPE TYPE PRCT_COND_TYPE
      !IF_COND_RATE TYPE PRCT_COND_RATE
      !IF_COND_CURR TYPE PRCT_COND_CURR DEFAULT GF_DEFT_CURRENCY
      !IT_OLD_PRICE TYPE PRCT_COND_DU_TAB
    CHANGING
      !CS_PRICE     TYPE CRMT_PRIDOC_COM .
  CLASS-METHODS PREPARE_PARTNER
    IMPORTING
      !IF_GUID           TYPE GUID_16
      !IF_HANDLE         TYPE NUMC10 OPTIONAL
      !IF_PARTNER_HANDLE TYPE NUMC4 OPTIONAL
      !IF_REFKIND        TYPE CRMT_OBJECT_KIND
      !IF_PARTNER_FCT    TYPE CRMT_PARTNER_FCT
      !IF_PARTNER_NO     TYPE CRMT_PARTNER_NO
      !IT_OLD_PARTNER    TYPE CRMT_PARTNER_EXTERNAL_WRKT OPTIONAL
      !IS_ONETIME        TYPE ZSDSCMS003 OPTIONAL
    CHANGING
      !CT_PARTNER        TYPE CRMT_PARTNER_COMT
      !CT_INPUT_FIELDS   TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_CANCEL
    IMPORTING
      !IF_GUID          TYPE GUID_16
      !IF_REFKIND       TYPE CRMT_OBJECT_KIND
      !IF_HANDLE        TYPE NUMC10
      !IF_CANCEL_REASON TYPE CRMT_SRV_CANCEL_REASON
    CHANGING
      !CT_CANCEL        TYPE CRMT_CANCEL_COMT
      !CT_INPUT_FIELDS  TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_STATUS
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND
      !IF_HANDLE       TYPE NUMC10
      !IF_STATUS       TYPE CRMS4_STAT_LIFECYCLE
    CHANGING
      !CT_STATUS       TYPE CRMT_STATUS_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_SCHEDLIN
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND
      !IF_QUANTITY     TYPE CRMT_SCHEDLIN_QUAN
      !IT_OLD_SCHEDLIN TYPE CRMT_SCHEDLIN_WRKT OPTIONAL
    CHANGING
      !CT_SCHEDLIN_I   TYPE CRMT_SCHEDLIN_I_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_AC_ASSIGN
    IMPORTING
      !IF_GUID          TYPE GUID_16
      !IF_REFKIND       TYPE CRMT_OBJECT_KIND
      !IF_WBS           TYPE CRMT_AC_ASSIGN
      !IF_HANDLE        TYPE NUM10 OPTIONAL
      !IT_OLD_AC_ASSIGN TYPE CRMT_AC_ASSIGN_WRKT OPTIONAL
    CHANGING
      !CT_AC_ASSIGN     TYPE CRMT_AC_ASSIGN_COMT
      !CT_INPUT_FIELDS  TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_DELETE_REFER_OBJ
    IMPORTING
      !IF_GUID           TYPE GUID_16 OPTIONAL   ##NEEDED
      !IF_REFKIND        TYPE CRMT_OBJECT_KIND
      !IF_PRODUCT_ID     TYPE MATNR
      !IF_HANDLE         TYPE NUM10 OPTIONAL
      !IT_OLD_SERVICE_OS TYPE CRMT_SRV_OSSET_WRKT OPTIONAL
    CHANGING
      !CT_SERVICE_OS     TYPE CRMT_SRV_OSSET_COMT
      !CT_INPUT_FIELDS   TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_SERVICE_OS
    IMPORTING
      !IF_GUID           TYPE GUID_16
      !IF_REFKIND        TYPE CRMT_OBJECT_KIND
      !IF_PRODUCT_ID     TYPE MATNR
      !IF_EQUIPMENT_ID   TYPE EQUNR OPTIONAL   ##NEEDED
      !IF_HANDLE         TYPE NUM10 OPTIONAL
      !IT_EQUIPMENT_ID   TYPE ZSDSCMS003_TT OPTIONAL
      !IT_OLD_SERVICE_OS TYPE CRMT_SRV_OSSET_WRKT OPTIONAL
    CHANGING
      !CT_SERVICE_OS     TYPE CRMT_SRV_OSSET_COMT
      !CT_INPUT_FIELDS   TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_ORDERADM_I
    IMPORTING
      !IF_GUID_HEAD     TYPE GUID_16
      !IF_GUID_ITEM     TYPE GUID_16
      !IF_HANDLE        TYPE NUMC10
      !IF_ITEM_TYPE     TYPE CRMT_ITEM_TYPE_DB
      !IF_NUMBER_INT    TYPE CHAR6
      !IF_NUMBER_PARENT TYPE CRMT_OBJECT_ID_DB
      !IF_ORDERED_PROD  TYPE CRMT_ORDERED_PROD_DB
      !IF_MODE          TYPE CRMT_MODE
    CHANGING
      !CT_ORDERADM_I    TYPE CRMT_ORDERADM_I_COMT
      !CT_INPUT_FIELDS  TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_ORDERADM_H
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND   ##NEEDED
      !IF_HANDLE       TYPE NUMC10
      !IF_PROCESS_TYPE TYPE CRMT_PROCESS_TYPE_DB
      !IF_DESCRIPTION  TYPE CRMT_PROCESS_DESCRIPTION
      !IF_MODE         TYPE CRMT_MODE
    CHANGING
      !CT_ORDERADM_H   TYPE CRMT_ORDERADM_H_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_CUSTOMER_I
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND
      !IF_HANDLE       TYPE NUMC10
      !IF_VENDOR_TEAM  TYPE ZSDSDE_VENDOR_TEAM
      !IF_LGORT        TYPE LGORT_D
      !IF_POSID        TYPE ZSDSDE_POSID OPTIONAL
      !IF_MODE         TYPE CRMT_MODE
    CHANGING
      !CT_CUSTOMER_I   TYPE CRMT_CUSTOMER_I_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_CUSTOMER_H
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND
      !IF_HANDLE       TYPE NUMC10
      !IF_LOB          TYPE ZDSDE_LOB
      !IF_PROACTIVITY  TYPE ZSDSDE_PROACTIVITY
      !IF_EXT_REFNO    TYPE ZSDSDE_EXT_REFNO
      !IF_DO_NUMBER    TYPE ZSDSDE_CM_DELIVERY_ORD
      !IF_MODE         TYPE CRMT_MODE
    CHANGING
      !CT_CUSTOMER_H   TYPE CRMT_CUSTOMER_H_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_ORGMAN_H
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND
      !IF_HANDLE       TYPE NUMC10
      !IF_SALES_OFFICE TYPE CRMT_SALES_OFFICE
      !IF_SALES_GROUP  TYPE CRMT_SALES_GROUP
      !IF_MODE         TYPE CRMT_MODE
    CHANGING
      !CT_ORGMAN_H     TYPE CRMT_ORGMAN_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_APPOINTMENT
    IMPORTING
      !IF_GUID         TYPE GUID_16
      !IF_REFKIND      TYPE CRMT_OBJECT_KIND
      !IF_HANDLE       TYPE NUMC10
      !IF_APPTYPE      TYPE CRMT_APPTYPE
      !IF_DATE         TYPE ZSDSDE_REST_DATUM
      !IF_MODE         TYPE CRMT_MODE
    CHANGING
      !CT_APPOINTMENT  TYPE CRMT_APPOINTMENT_COMT
      !CT_INPUT_FIELDS TYPE CRMT_INPUT_FIELD_TAB .
  CLASS-METHODS PREPARE_DOCFLOW
    IMPORTING
      !IF_GUID     TYPE GUID_16
      !IF_REFKIND  TYPE CRMT_OBJECT_KIND
      !IF_HANDLE   TYPE NUMC10
      !IF_MODE     TYPE CRMT_MODE
      !IS_ITEM_KEY TYPE CRMS4D_BTX_I
    CHANGING
      !CT_DOC_FLOW TYPE CRMT_DOC_FLOW_COMT .
  CLASS-METHODS INIT_SUBJECT_PROFILE
    IMPORTING
      !IF_PROCESS_TYPE TYPE CRMT_PROCESS_TYPE .
  CLASS-METHODS UPDATE_TAX
    IMPORTING
      !IF_TAXJURCODE  TYPE AD_TXJCD
      !IT_OLD_PARTNER TYPE CRMT_PARTNER_EXTERNAL_WRKT .
ENDCLASS.



CLASS ZCL_SDSCM_SVORDER IMPLEMENTATION.


METHOD ASSIGN_MESSAGE.

* Update Status at header section
  CS_RESPONSE-RESP_STATUS = IF_STATUS.
  MESSAGE ID IF_MSGID TYPE 'I'
          NUMBER IF_MSGNO
          WITH IF_MSGV1 IF_MSGV2 IF_MSGV3 IF_MSGV4
          INTO CS_RESPONSE-RESP_MESSAGE.

* Assign Status in Response Table
  INSERT VALUE #( RESP_STATUS = IF_STATUS
                  RESP_MESSAGE = CS_RESPONSE-RESP_MESSAGE )
         INTO TABLE CS_RESPONSE-RESPONSE.

ENDMETHOD.


METHOD COLLECT_EXCEPTION.

  DATA:
    LS_MSG         TYPE BAL_S_MSG.

* Get Exception Message(s)
  LOOP AT IT_EXCEPTION ASSIGNING FIELD-SYMBOL(<L_EXCEPTION>).
    CLEAR  LS_MSG.
    CALL FUNCTION 'CRM_MESSAGES_GET_MSG_INFO'
      EXPORTING
        IS_MSG_HANDLE           = <L_EXCEPTION>-MSG_HANDLE
      IMPORTING
        ES_MSG                  = LS_MSG
      EXCEPTIONS
        NOT_FOUND               = 1
        WRONG_CONTEXT_STRUCTURE = 2
        DATA_ERROR              = 3
        OTHERS                  = 4.
    IF sy-subrc NE 0.
      CLEAR LS_MSG.
    ENDIF.

    INSERT VALUE #( TYPE       = LS_MSG-MSGTY
                    ID         = LS_MSG-MSGID
                    NUMBER     = LS_MSG-MSGNO
                    MESSAGE_V1 = LS_MSG-MSGV1
                    MESSAGE_V2 = LS_MSG-MSGV2
                    MESSAGE_V3 = LS_MSG-MSGV3
                    MESSAGE_V4 = LS_MSG-MSGV4 )
            INTO TABLE CT_RETURN.

    IF CS_RETURN IS INITIAL.
      CS_RETURN-TYPE          = LS_MSG-MSGTY.
      CS_RETURN-ID            = LS_MSG-MSGID.
      CS_RETURN-NUMBER        = LS_MSG-MSGNO.
      CS_RETURN-MESSAGE       = LS_MSG-MSGV1.
      CS_RETURN-MESSAGE_V1    = LS_MSG-MSGV1.
      CS_RETURN-MESSAGE_V2    = LS_MSG-MSGV2.
      CS_RETURN-MESSAGE_V3    = LS_MSG-MSGV3.
      CS_RETURN-MESSAGE_V4    = LS_MSG-MSGV4.

      CALL FUNCTION 'FORMAT_MESSAGE'
        EXPORTING
          ID              = LS_MSG-MSGID
          NO              = LS_MSG-MSGNO
          V1              = LS_MSG-MSGV1
          V2              = LS_MSG-MSGV2
          V3              = LS_MSG-MSGV3
          V4              = LS_MSG-MSGV4
        IMPORTING
          MSG             = CS_RETURN-MESSAGE
        EXCEPTIONS
          NOT_FOUND       = 1
          OTHERS          = 2   ##FM_SUBRC_OK.

    ENDIF.
  ENDLOOP.

ENDMETHOD.


METHOD DEFAULT_SVORDER.

  INIT_SUBJECT_PROFILE( IF_PROCESS_TYPE = CS_REQUEST-PROCESS_TYPE ).

  IF CS_REQUEST-IMPORTANCE IS INITIAL.
    CS_REQUEST-IMPORTANCE = GF_DEFT_PRIORITY.
  ENDIF.

  READ TABLE GT_MAP_LOB INTO DATA(LS_MAP_LOB)
    WITH KEY ORDER_TYPE = CS_REQUEST-PROCESS_TYPE.
  IF SY-SUBRC EQ 0.
    CS_REQUEST-ZZ1_LOB_SRI = LS_MAP_LOB-LOB.
  ENDIF.

  READ TABLE GT_MAP_PROACT INTO DATA(LS_MAP_PROACT)
    WITH KEY ORDER_TYPE = CS_REQUEST-PROCESS_TYPE.
  IF SY-SUBRC EQ 0.
    CS_REQUEST-ZZ1_PROACTIVITY = LS_MAP_PROACT-PROACT.
  ENDIF.

  IF CS_REQUEST-PROCESS_TYPE EQ GF_PROCESS_TYPE_ZRO5.
    CLEAR CS_REQUEST-WBS.
  ENDIF.

  CLEAR GS_ITEM_SERVICE.
*  DATA(LT_ITEM) = CS_REQUEST-ITEM[].
*  LOOP AT LT_ITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM_SERVICE>).
*    SELECT SINGLE FROM MARA
*      FIELDS MTART
*      WHERE MATNR EQ @<LFS_ITEM_SERVICE>-ORDERED_PROD
*      INTO @DATA(LF_MTART).
*    IF LF_MTART EQ GF_MAT_TYPE_SERVICE.
*      GS_ITEM_SERVICE = <LFS_ITEM_SERVICE>.
*      IF CS_REQUEST-PRODUCT_ID IS INITIAL.
*        CS_REQUEST-PRODUCT_ID = <LFS_ITEM_SERVICE>-ORDERED_PROD.
*      ENDIF.
*      EXIT.
*    ENDIF.
*  ENDLOOP.
*
*  IF GS_ITEM_SERVICE IS NOT INITIAL.
*    LOOP AT CS_REQUEST-ITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).
*      SELECT SINGLE FROM MARA
*        FIELDS MTART
*        WHERE MATNR EQ @<LFS_ITEM>-ORDERED_PROD
*        INTO @LF_MTART.
*      IF LF_MTART <> GF_MAT_TYPE_SERVICE.
*        <LFS_ITEM>-NUMBER_PARENT = GS_ITEM_SERVICE-NUMBER_INT.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.

ENDMETHOD.


METHOD DETERMINE_COND_SEQNO.

  DATA:
    LF_ZAEHK  TYPE  PRCT_PP_COUNTER.


* Initialize Output
  CLEAR: EF_ZAEHK.

* Count from Pricing Procedure
  LOOP AT IT_T683S ASSIGNING FIELD-SYMBOL(<L_T683S>)
                   WHERE STUNR LT IF_STUNR.             "#EC CI_SORTSEQ
    IF <L_T683S>-KSCHL IS NOT INITIAL.
*     Count condition
      LOOP AT IT_COND TRANSPORTING NO FIELDS
                      WHERE STUNR = <L_T683S>-STUNR
                        AND KSCHL = <L_T683S>-KSCHL.
        LF_ZAEHK = LF_ZAEHK + 1.
      ENDLOOP.
    ELSE.
      LF_ZAEHK = LF_ZAEHK + 1.
    ENDIF.
  ENDLOOP.

* Assign Result
  EF_ZAEHK = LF_ZAEHK + IF_ZAEHK.

ENDMETHOD.


METHOD GET_GENC.

  CONSTANTS:
    LC_MAP_LOB        TYPE  ZSDSDE_PARAM_NAME VALUE 'ORDERTYPE_TO_LOB',
    LC_MAP_PROACT     TYPE  ZSDSDE_PARAM_NAME VALUE 'ORDERTYPE_TO_PROACT',
    LC_STATUS_BILL    TYPE  ZSDSDE_PARAM_NAME VALUE 'ORDERTYPE_STATUS_BILL',
    LC_DEFT_PLANT     TYPE  ZSDSDE_PARAM_NAME VALUE 'PLANT',
    LC_DEFT_CURRENCY  TYPE  ZSDSDE_PARAM_NAME VALUE 'CURRENCY',
    LC_DEFT_PRIORITY  TYPE  ZSDSDE_PARAM_NAME VALUE 'PRIORITY',
    LC_DEFT_DIS_CHAN  TYPE  ZSDSDE_PARAM_NAME VALUE 'DIS_CHANNEL',
    LC_DEFT_DIVISION  TYPE  ZSDSDE_PARAM_NAME VALUE 'DIVISION',
    LC_DEFT_SALESORG  TYPE  ZSDSDE_PARAM_NAME VALUE 'SALES_ORG_SD',
    LC_DEFT_DISC_PER  TYPE  ZSDSDE_PARAM_NAME VALUE 'DISCOUNT_PER',
    LC_DEFT_DISC_VAL  TYPE  ZSDSDE_PARAM_NAME VALUE 'DISCOUNT_VAL'.

  DATA:
    LT_GENC       TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

  DATA:
    LF_REPID   TYPE  PROGRAMM VALUE 'ZCL_SDSCM_SVORDER_STRUC_SERV'.

* Initialize Output
  CLEAR:
    GT_MAP_LOB,
    GT_MAP_PROACT,
    GT_STATUS_BILL.

* Read All GenC constants for program
  CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
    EXPORTING
      IF_REPID = LF_REPID
    IMPORTING
      ET_GEN_C = LT_GENC.

* Assign GenC Constants
  LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<L_GENC>).

    CASE <L_GENC>-PARAM.
*     ------------------------------------
*     LOB Mapping
*     ------------------------------------
      WHEN LC_MAP_LOB.
        INSERT VALUE #( ORDER_TYPE = <L_GENC>-PARAM_EXT
                        LOB        = <L_GENC>-VALUE_LOW )
               INTO TABLE GT_MAP_LOB.

*     ------------------------------------
*     Pro Activity Mapping
*     ------------------------------------
      WHEN LC_MAP_PROACT.
        INSERT VALUE #( ORDER_TYPE = <L_GENC>-PARAM_EXT
                        PROACT     = <L_GENC>-VALUE_LOW )
               INTO TABLE GT_MAP_PROACT.

*     ------------------------------------
*     Order Type for Status 'Bill'
*     ------------------------------------
      WHEN LC_STATUS_BILL.
        INSERT VALUE #( SIGN    = <L_GENC>-PARAM_SIGN
                        OPTION  = <L_GENC>-PARAM_OPTION
                        LOW     = <L_GENC>-VALUE_LOW
                        HIGH    = <L_GENC>-VALUE_HIGH )
               INTO TABLE GT_STATUS_BILL.

*     ------------------------------------
*     Default Profit Center
*     ------------------------------------
      WHEN LC_DEFT_CURRENCY.
        GF_DEFT_CURRENCY = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Priotiry
*     ------------------------------------
      WHEN LC_DEFT_PRIORITY.
        GF_DEFT_PRIORITY = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Distribution Channel
*     ------------------------------------
      WHEN LC_DEFT_DIS_CHAN.
        GF_DEFT_DIS_CHANNEL = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Division
*     ------------------------------------
      WHEN LC_DEFT_DIVISION.
        GF_DEFT_DIVISION = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Plant
*     ------------------------------------
      WHEN LC_DEFT_PLANT.
        GF_DEFT_PLANT = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Sales Organization
*     ------------------------------------
      WHEN LC_DEFT_SALESORG.
        GF_DEFT_SALES_ORG = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Condition Type - Discount Per
*     ------------------------------------
      WHEN LC_DEFT_DISC_PER.
        GF_DEFT_DISC_PER = <L_GENC>-VALUE_LOW.

*     ------------------------------------
*     Default Condition Type - Discount Value
*     ------------------------------------
      WHEN LC_DEFT_DISC_VAL.
        GF_DEFT_DISC_VAL = <L_GENC>-VALUE_LOW.

    ENDCASE.

  ENDLOOP.

ENDMETHOD.


METHOD GET_GUID_FROM_DB.

  CLEAR EF_GUID.

  IF IF_OBJECT_ID IS NOT INITIAL.

    DATA(LF_SVO_NO) = |{ IF_OBJECT_ID ALPHA = IN }|.

    SELECT SINGLE FROM CRMS4D_BTX_H                         ##WARN_OK
      FIELDS GUID
      WHERE OBJTYPE_H EQ @IF_OBJTYPE_H
      AND   OBJECT_ID EQ @LF_SVO_NO
      INTO @EF_GUID.                                        "#EC WARNOK
  ENDIF.

ENDMETHOD.


METHOD GET_ITEM_GUID_FROM_DB.

  IF CS_ITEM_KEY-OBJECT_ID IS NOT INITIAL AND
     CS_ITEM_KEY-NUMBER_INT IS NOT INITIAL.
    DATA(LF_OBJECT_ID) = |{ CS_ITEM_KEY-OBJECT_ID ALPHA = IN }|.
    SELECT SINGLE FROM CRMS4D_BTX_I                         ##WARN_OK
      FIELDS HEADER_GUID , ITEM_GUID
      WHERE OBJTYPE_I EQ @CS_ITEM_KEY-OBJTYPE_I
      AND   OBJTYPE_H EQ @CS_ITEM_KEY-OBJTYPE_H
      AND   OBJECT_ID EQ @LF_OBJECT_ID
      AND   NUMBER_INT EQ @CS_ITEM_KEY-NUMBER_INT
      INTO  @DATA(LS_ITEM_KEY).                             "#EC WARNOK
    IF SY-SUBRC EQ 0.
      MOVE-CORRESPONDING LS_ITEM_KEY TO CS_ITEM_KEY.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD GET_PRICE_PROCEDURE.

  DATA:
    LS_ORDERADM_H_WRK TYPE CRMT_ORDERADM_H_WRK.


* Initialize Output
  CLEAR: ET_T683S.

  CALL FUNCTION 'CRM_ORDERADM_H_READ_OB'
    EXPORTING
      IV_GUID                       = IF_HEADER_GUID
    IMPORTING
      ES_ORDERADM_H_WRK             = LS_ORDERADM_H_WRK
    EXCEPTIONS
      PARAMETER_ERROR               = 1
      RECORD_NOT_FOUND              = 2
      AT_LEAST_ONE_RECORD_NOT_FOUND = 3
      OTHERS                        = 4.
  IF SY-SUBRC <> 0.
    RETURN.
  ENDIF.

  SELECT STUNR,
         ZAEHK,
         KSCHL
    FROM T683S
   WHERE KVEWE EQ 'A'
     AND KAPPL EQ 'V'
     AND KALSM EQ @LS_ORDERADM_H_WRK-KALSM
    INTO TABLE @ET_T683S.
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

ENDMETHOD.


METHOD INIT_SUBJECT_PROFILE.

  IF IF_PROCESS_TYPE IS NOT INITIAL.
    SELECT SINGLE FROM CRMC_SERVICE_H
      FIELDS SUBJECT_PROFILE
      WHERE PROCESS_TYPE EQ @IF_PROCESS_TYPE
      INTO @GF_DEFT_SUBJECT_PROFILE.
  ENDIF.

ENDMETHOD.


METHOD MAINTAIN_SVORDER.
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  31.07.2025  420000714   Wuthichai L. - Fix logic checking delete status
*-----------------------------------------------------------------------

  DATA:
    LT_DB_ORDERADM_H    TYPE  CRMT_ORDERADM_H_WRKT            ##NEEDED,
    LT_DB_ACTIVITY_H    TYPE  CRMT_ACTIVITY_H_WRKT            ##NEEDED,
    LT_DB_ORDERADM_I    TYPE  CRMT_ORDERADM_I_WRKT,
    LT_DB_PRICING       TYPE  CRMT_PRICING_WRKT               ##NEEDED,
    LT_DB_SCHEDLIN      TYPE  CRMT_SCHEDLIN_WRKT,
    LT_DB_PARTNER       TYPE  CRMT_PARTNER_EXTERNAL_WRKT,
    LT_DB_PARTNER2      TYPE  CRMT_PARTNER_EXTERNAL_WRKT,
    LT_DB_PRIDOC        TYPE  CRMT_PRIC_COND_T,
    LT_DB_PRICE_ITEM    TYPE PRCT_COND_DU_TAB,
    LT_DB_OPPORT_H      TYPE CRMT_OPPORT_H_WRKT               ##NEEDED,
    LT_DB_SALES_H       TYPE CRMT_SALES_WRKT                  ##NEEDED,
    LT_DB_ORGMAN_H      TYPE CRMT_ORGMAN_WRKT                 ##NEEDED,
    LT_DB_PRODUCT_I     TYPE CRMT_PRODUCT_I_WRKT              ##NEEDED,
    LT_DB_CUSTOMER_I    TYPE CRMT_CUSTOMER_I_WRKT             ##NEEDED,
    LT_DB_APPOINTMENT   TYPE CRMT_APPOINTMENT_WRKT            ##NEEDED,
    LT_DB_SCHEDLIN_I    TYPE CRMT_SCHEDLIN_I_WRKT             ##NEEDED,
    LT_DB_AC_ASSIGN     TYPE CRMT_AC_ASSIGN_WRKT,
    LT_DB_SERVICE_OS    TYPE CRMT_SRV_OSSET_WRKT,
    LT_DB_SERVICE_OS2   TYPE CRMT_SRV_OSSET_WRKT,
    LT_DB_CUSTOMER_H    TYPE CRMT_CUSTOMER_H_WRKT             ##NEEDED,
    LT_DB_STATUS        TYPE CRMT_STATUS_WRKT                 ##NEEDED,
    LT_DB_CANCEL        TYPE CRMT_CANCEL_WRKT                 ##NEEDED,
    LT_GUID             TYPE CRMT_OBJECT_GUID_TAB,
    LT_STATUS_BILL      TYPE CRMT_OBJECT_GUID_TAB,

    LT_ORDERADM_H	      TYPE CRMT_ORDERADM_H_COMT,
    LT_ACTIVITY_H       TYPE CRMT_ACTIVITY_H_COMT,
    LT_SALES_H          TYPE CRMT_SALES_COMT,
    LT_ORGMAN_H         TYPE CRMT_ORGMAN_COMT,
    LT_CUSTOMER_H       TYPE CRMT_CUSTOMER_H_COMT,
    LT_AC_ASSIGN        TYPE CRMT_AC_ASSIGN_COMT,
    LT_SERVICE_OS       TYPE CRMT_SRV_OSSET_COMT,
    LT_SERVICE_OS2      TYPE CRMT_SRV_OSSET_COMT,
    LT_STATUS           TYPE CRMT_STATUS_COMT,
    LT_STATUS2          TYPE CRMT_STATUS_COMT,
    LT_CANCEL           TYPE CRMT_CANCEL_COMT,
    LT_ORDERADM_I	      TYPE CRMT_ORDERADM_I_COMT,
    LT_PRODUCT_I        TYPE CRMT_PRODUCT_I_COMT,
    LT_PARTNER          TYPE CRMT_PARTNER_COMT,
    LT_PRICING          TYPE CRMT_PRICING_COMT,
    LT_APPOINTMENT      TYPE CRMT_APPOINTMENT_COMT,
    LT_PRIDOC_COM       TYPE CRMT_PRIDOC_COMT,
    LT_SCHEDLIN_EXTDT   TYPE CRMT_SCHEDLIN_EXTDT             ##NEEDED,
    LT_SCHEDLIN_I       TYPE CRMT_SCHEDLIN_I_COMT,
    LT_CUSTOMER_I       TYPE CRMT_CUSTOMER_I_COMT,
    LT_DOC_FLOW         TYPE CRMT_DOC_FLOW_COMT,

    LT_SAVE_GUID        TYPE CRMT_OBJECT_GUID_TAB,
    LT_SAVED_OBJECTS    TYPE CRMT_RETURN_OBJECTS,
    LT_EXCEPTION        TYPE CRMT_EXCEPTION_T                 ##NEEDED,
    LT_INPUT_FIELDS     TYPE CRMT_INPUT_FIELD_TAB,
    LT_INPUT_FIELDS2    TYPE CRMT_INPUT_FIELD_TAB,
    LT_INPUT_FIELDS3    TYPE CRMT_INPUT_FIELD_TAB,
    LS_INPUT_FIELD      TYPE CRMT_INPUT_FIELD                ##NEEDED,
    LT_FIELD_NAMES      TYPE CRMT_INPUT_FIELD_NAMES_TAB      ##NEEDED,
    LT_ITEM_NEW         TYPE ZSDSCMS002_TT                   ##NEEDED,

    LT_ORDERADM_I_TMP   TYPE CRMT_ORDERADM_I_COMT,
    LT_INPUT_FIELDS_TMP TYPE CRMT_INPUT_FIELD_TAB,

    LT_MSG_HANDLE       TYPE BAL_T_MSGH,

    LS_INFO             TYPE CRMT_MSG_INFO  ##NEEDED,
    LS_MSG              TYPE BAL_S_MSG,

    LS_PRIDOC_COM       TYPE CRMT_PRIDOC_COM,
    LS_ITEM_KEY         TYPE CRMS4D_BTX_I,


    LF_REF_OBJ          TYPE CRMT_REF_OBJ_TEXT,
    LF_MESSAGE          TYPE TEXT100,
    LF_ITEM_GUID        TYPE CRMT_OBJECT_GUID,
    LF_ITEM_TYPE        TYPE CRMT_ITEM_TYPE_DB,
    LF_POSID            TYPE ZSDSDE_POSID,
    LF_MODE             TYPE CRMT_MODE,
    LF_MODE_ITEM        TYPE CRMT_MODE,
    LF_MSG_PASS         TYPE BAPI_MSG,
    LF_MSG_ERROR        TYPE BAPI_MSG,
    LF_LOG_HANDLE       TYPE BALLOGHNDL,
    LF_ORDER_OBJECT_ID  TYPE CRMT_OBJECT_ID,
    LF_HANDLE           TYPE NUMC10,
    LF_PARTNER_HANDLE   TYPE NUM4,
    LF_GUID             TYPE GUID_16.

  LF_HANDLE = 1.
  LF_PARTNER_HANDLE = 1.

* Default Data
  CLEAR :
    LF_GUID,
    ES_RETURN,
    ET_RETURN,
    LT_ORDERADM_H.

  DATA(LS_REQUEST) = IS_REQUEST.

  GET_GUID_FROM_DB(
    EXPORTING
      IF_OBJTYPE_H = GC_OBJTYPE_SVORDER
      IF_OBJECT_ID = LS_REQUEST-SVO_NO
    IMPORTING
      EF_GUID      = LF_GUID ).

  IF LF_GUID IS NOT INITIAL.
    INSERT LF_GUID INTO TABLE LT_GUID.

    "Read Service Order
    CALL FUNCTION 'CRM_ORDER_READ'
      EXPORTING
        IT_HEADER_GUID       = LT_GUID
      IMPORTING
        ET_ORDERADM_H        = LT_DB_ORDERADM_H
        ET_ORDERADM_I        = LT_DB_ORDERADM_I
        ET_ACTIVITY_H        = LT_DB_ACTIVITY_H
        ET_PRICING           = LT_DB_PRICING
        ET_SCHEDLIN          = LT_DB_SCHEDLIN
        ET_PARTNER           = LT_DB_PARTNER
        ET_PRIDOC            = LT_DB_PRIDOC
        ET_OPPORT_H          = LT_DB_OPPORT_H
        ET_SALES             = LT_DB_SALES_H
        ET_ORGMAN            = LT_DB_ORGMAN_H
        ET_PRODUCT_I         = LT_DB_PRODUCT_I
        ET_CUSTOMER_I        = LT_DB_CUSTOMER_I
        ET_APPOINTMENT       = LT_DB_APPOINTMENT
        ET_SCHEDLIN_I        = LT_DB_SCHEDLIN_I
        ET_AC_ASSIGN         = LT_DB_AC_ASSIGN
        ET_SERVICE_OS        = LT_DB_SERVICE_OS
        ET_CUSTOMER_H        = LT_DB_CUSTOMER_H
        ET_STATUS            = LT_DB_STATUS
        ET_CANCEL            = LT_DB_CANCEL
      CHANGING
        CV_LOG_HANDLE        = LF_LOG_HANDLE
      EXCEPTIONS
        DOCUMENT_NOT_FOUND   = 1
        ERROR_OCCURRED       = 2
        DOCUMENT_LOCKED      = 3
        NO_CHANGE_AUTHORITY  = 4
        NO_DISPLAY_AUTHORITY = 5
        NO_CHANGE_ALLOWED    = 6
        OTHERS               = 7.
    IF SY-SUBRC <> 0.
      ES_RETURN-TYPE        = SY-MSGTY.
      ES_RETURN-ID          = SY-MSGID.
      ES_RETURN-NUMBER      = SY-MSGNO.
      ES_RETURN-MESSAGE_V1  = SY-MSGV1.
      ES_RETURN-MESSAGE_V2  = SY-MSGV2.
      ES_RETURN-MESSAGE_V3  = SY-MSGV3.
      ES_RETURN-MESSAGE_V4  = SY-MSGV4.

      MESSAGE ID SY-MSGID
            TYPE SY-MSGTY
          NUMBER SY-MSGNO
            WITH SY-MSGV1
                 SY-MSGV2
                 SY-MSGV3
                 SY-MSGV4
            INTO ES_RETURN-MESSAGE.
      RETURN.
    ENDIF.
  ENDIF.

  CASE LS_REQUEST-ZMODE.
    WHEN ''.
      LF_MODE = GC_MODE_CREATE.

      LF_MSG_PASS   = TEXT-T01.
      LF_MSG_ERROR  = TEXT-T02.

      CALL FUNCTION 'CRM_GUID_CREATE'
        IMPORTING
          EV_GUID = LF_GUID.

    WHEN 'U'.
      LF_MODE = GC_MODE_CHANGE.

      LF_MSG_PASS   = TEXT-T03.
      LF_MSG_ERROR  = TEXT-T04.

*     Get Pricing Procedure
      GET_PRICE_PROCEDURE(
        EXPORTING
          IF_HEADER_GUID = LF_GUID
        IMPORTING
          ET_T683S       = GT_T683S ).

    WHEN 'D'.
      LF_MSG_PASS   = TEXT-T05.
      LF_MSG_ERROR  = TEXT-T06.

      LS_REQUEST-STATUS = GC_STATUS_DELETE.

  ENDCASE.

  "Prepare ORDERADM_H
  PREPARE_ORDERADM_H(
    EXPORTING
      IF_GUID         = LF_GUID
      IF_REFKIND      = GC_REFKIND_HEAD
      IF_HANDLE       = LF_HANDLE
      IF_PROCESS_TYPE = LS_REQUEST-PROCESS_TYPE
      IF_DESCRIPTION  = LS_REQUEST-DESCRIPTION
      IF_MODE         = LF_MODE
    CHANGING
      CT_ORDERADM_H   = LT_ORDERADM_H
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).


  "Prepare ACTIVITY_H
  CLEAR: GT_NAMETAB[].
  MC_NAMETAB :
    'PRIORITY'.
  INSERT VALUE #( REF_GUID      = LF_GUID
                  REF_HANDLE    = LF_HANDLE
                  PRIORITY      = LS_REQUEST-IMPORTANCE ) INTO TABLE LT_ACTIVITY_H.


  INSERT VALUE #( REF_GUID      = LF_GUID
                  REF_HANDLE    = LF_HANDLE
                  REF_KIND      = GC_REFKIND_HEAD
                  OBJECTNAME    = 'ACTIVITY_H'
                  FIELD_NAMES   = GT_NAMETAB ) INTO TABLE LT_INPUT_FIELDS[].

  "Prepare SALES
  CLEAR: GT_NAMETAB[].
  MC_NAMETAB :
    'PO_NUMBER_SOLD'.

  INSERT VALUE #( REF_GUID        = LF_GUID
                  REF_HANDLE      = LF_HANDLE
                  REF_KIND        = GC_REFKIND_HEAD
                  PO_NUMBER_SOLD  = LS_REQUEST-SF_WORKORDER_NO ) INTO TABLE LT_SALES_H.


  INSERT VALUE #( REF_GUID        = LF_GUID
                  REF_HANDLE      = LF_HANDLE
                  REF_KIND        = GC_REFKIND_HEAD
                  OBJECTNAME      = 'SALES'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE LT_INPUT_FIELDS[].

  "Prepare PRICING
  CLEAR: GT_NAMETAB[].
  MC_NAMETAB :
    'CURRENCY',
    'PMNTTRMS'.
  INSERT VALUE #( REF_GUID        = LF_GUID
                  REF_HANDLE      = LF_HANDLE
                  REF_KIND        = GC_REFKIND_HEAD
                  CURRENCY        = GF_DEFT_CURRENCY
                  PMNTTRMS        = LS_REQUEST-PMNTTRMS ) INTO TABLE LT_PRICING.


  INSERT VALUE #( REF_GUID        = LF_GUID
                  REF_HANDLE      = LF_HANDLE
                  REF_KIND        = GC_REFKIND_HEAD
                  OBJECTNAME      = 'PRICING'
                  FIELD_NAMES     = GT_NAMETAB[] ) INTO TABLE LT_INPUT_FIELDS.

  "Prepare APPOINTMENT - LS_REQUEST-START_DATE
  PREPARE_APPOINTMENT(
    EXPORTING
      IF_GUID         = LF_GUID
      IF_REFKIND      = GC_REFKIND_HEAD
      IF_HANDLE       = LF_HANDLE
      IF_APPTYPE      = 'SRV_CUST_BEG'
      IF_DATE         = LS_REQUEST-START_DATE
      IF_MODE         = LF_MODE
    CHANGING
      CT_APPOINTMENT  = LT_APPOINTMENT
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

  "Prepare APPOINTMENT - LS_REQUEST-END_DATE
  PREPARE_APPOINTMENT(
    EXPORTING
      IF_GUID         = LF_GUID
      IF_REFKIND      = GC_REFKIND_HEAD
      IF_HANDLE       = LF_HANDLE
      IF_APPTYPE      = 'SRV_CUST_END'
      IF_DATE         = LS_REQUEST-END_DATE
      IF_MODE         = LF_MODE
    CHANGING
      CT_APPOINTMENT  = LT_APPOINTMENT
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

  "PREPARE DOC_FLOW - Header
  CLEAR LS_ITEM_KEY.
  LS_ITEM_KEY-OBJECT_ID = LS_REQUEST-REF_SERV_CONTRACT.
  PREPARE_DOCFLOW(
    EXPORTING
      IF_GUID     = LF_GUID
      IF_REFKIND  = GC_REFKIND_HEAD
      IF_HANDLE   = LF_HANDLE
      IF_MODE     = LF_MODE
      IS_ITEM_KEY = LS_ITEM_KEY
    CHANGING
      CT_DOC_FLOW = LT_DOC_FLOW ).

  "Prepare ORGMAN_H
  PREPARE_ORGMAN_H(
    EXPORTING
      IF_GUID         = LF_GUID
      IF_REFKIND      = GC_REFKIND_HEAD
      IF_HANDLE       = LF_HANDLE
      IF_SALES_OFFICE = LS_REQUEST-SALES_OFFICE
      IF_SALES_GROUP  = LS_REQUEST-SALES_GROUP
      IF_MODE         = LF_MODE
    CHANGING
      CT_ORGMAN_H     = LT_ORGMAN_H[]
      CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

  "Prepare AC_ASSIGN - Header
  PREPARE_AC_ASSIGN(
    EXPORTING
      IF_GUID          = LF_GUID
      IF_REFKIND       = GC_REFKIND_HEAD
      IF_WBS           = LS_REQUEST-WBS
      IF_HANDLE        = LF_HANDLE
      IT_OLD_AC_ASSIGN = LT_DB_AC_ASSIGN[]
    CHANGING
      CT_AC_ASSIGN     = LT_AC_ASSIGN[]
      CT_INPUT_FIELDS  = LT_INPUT_FIELDS ).

*<-- Start of Insertion 420000714 31.07.2025 (Delete Status)
* To set Header status to delete,
* need to reset its status to in progress first to be able
* to set delete status in header.
  IF LS_REQUEST-STATUS EQ GC_STATUS_DELETE.
*   Get Current Status
    READ TABLE LT_DB_STATUS ASSIGNING FIELD-SYMBOL(<L_DB_STATUS>)
                            WITH KEY GUID = LF_GUID
                                     USER_STAT_PROC = GF_DEFT_STATUS_PROFILE
                                     ACTIVE         = 'X'
                                     KIND           = GC_REFKIND_HEAD.
    IF SY-SUBRC EQ 0.
      DATA(LF_CURRENT_STATUS_H) = <L_DB_STATUS>-STATUS.
    ELSE.
      CLEAR LF_CURRENT_STATUS_H.
    ENDIF.
    IF LF_CURRENT_STATUS_H NE 'E0002' AND "In Process
       LF_CURRENT_STATUS_H NE 'E0005' .   "Deleted
*     Set Status to In Process
      CLEAR: GT_NAMETAB[].
      INSERT VALUE #( REF_HANDLE      = LF_HANDLE
                      REF_GUID        = LF_GUID
                      REF_KIND        = GC_REFKIND_HEAD
                      STATUS          = 'E0002' "In Process
                      USER_STAT_PROC  = GF_DEFT_STATUS_PROFILE
                      ACTIVATE        = 'X' ) INTO TABLE LT_STATUS.

      MC_NAMETAB :
        'STATUS',
        'USER_STAT_PROC',
        'ACTIVATE'.

      INSERT VALUE #( REF_GUID        = LF_GUID
                      REF_HANDLE      = LF_HANDLE
                      REF_KIND        = GC_REFKIND_HEAD
                      OBJECTNAME      = 'STATUS'
                      FIELD_NAMES     = GT_NAMETAB ) INTO TABLE LT_INPUT_FIELDS3[].

    ENDIF.

  ENDIF.
*--> End of Insertion 420000714 31.07.2025

*  "Prepare STATUS - Header
  PREPARE_STATUS(
    EXPORTING
      IF_GUID         = LF_GUID
      IF_REFKIND      = GC_REFKIND_HEAD
      IF_HANDLE       = LF_HANDLE
      IF_STATUS       = LS_REQUEST-STATUS
    CHANGING
      CT_STATUS       = LT_STATUS
      CT_INPUT_FIELDS = LT_INPUT_FIELDS3 ).

  "Prepare CANCEL - Header
  PREPARE_CANCEL(
    EXPORTING
      IF_GUID          = LF_GUID
      IF_REFKIND       = GC_REFKIND_HEAD
      IF_HANDLE        = LF_HANDLE
      IF_CANCEL_REASON = LS_REQUEST-CANC_REASON
    CHANGING
      CT_CANCEL        = LT_CANCEL
      CT_INPUT_FIELDS  = LT_INPUT_FIELDS ).

  "Prepare SERVICE_OS - Header
  PREPARE_SERVICE_OS(
    EXPORTING
      IF_GUID           = LF_GUID
      IF_REFKIND        = GC_REFKIND_HEAD
      IF_PRODUCT_ID     = LS_REQUEST-PRODUCT_ID
      IF_HANDLE         = LF_HANDLE
      IT_OLD_SERVICE_OS = LT_DB_SERVICE_OS
    CHANGING
      CT_SERVICE_OS     = LT_SERVICE_OS
      CT_INPUT_FIELDS   = LT_INPUT_FIELDS ).

  "Prepare CUSTOMER_H
  PREPARE_CUSTOMER_H(
    EXPORTING
      IF_GUID         = LF_GUID
      IF_REFKIND      = GC_REFKIND_HEAD
      IF_HANDLE       = LF_HANDLE
      IF_LOB          = LS_REQUEST-ZZ1_LOB_SRI
      IF_PROACTIVITY  = LS_REQUEST-ZZ1_PROACTIVITY
      IF_EXT_REFNO    = LS_REQUEST-ZZ1_EXT_REFNO
      IF_DO_NUMBER    = LS_REQUEST-ZZ1_DELIVERY_ORD
      IF_MODE         = LF_MODE
    CHANGING
      CT_CUSTOMER_H   = LT_CUSTOMER_H[]
      CT_INPUT_FIELDS = LT_INPUT_FIELDS[] ).

  "Prepare PARTNER - Header
  LOOP AT LS_REQUEST-PARTNER ASSIGNING FIELD-SYMBOL(<LFS_PARTNER>).

    PREPARE_PARTNER(
      EXPORTING
        IF_GUID           = LF_GUID
        IF_HANDLE         = LF_HANDLE
        IF_PARTNER_HANDLE = LF_PARTNER_HANDLE
        IF_REFKIND        = GC_REFKIND_HEAD
        IF_PARTNER_FCT    = <LFS_PARTNER>-PARTNER_FCT
        IF_PARTNER_NO     = <LFS_PARTNER>-PARTNER_NO
        IT_OLD_PARTNER    = LT_DB_PARTNER
        IS_ONETIME        = LS_REQUEST-ONETIME
      CHANGING
        CT_PARTNER        = LT_PARTNER
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS ).

  ENDLOOP.

  "Prepare PARTNER - One Time
  READ TABLE LS_REQUEST-PARTNER TRANSPORTING NO FIELDS
    WITH KEY PARTNER_NO = GF_DEFT_PARTNER_ONETIME.
  IF SY-SUBRC EQ 0.
    PREPARE_PARTNER(
      EXPORTING
        IF_GUID           = LF_GUID
        IF_HANDLE         = LF_HANDLE
        IF_PARTNER_HANDLE = LF_PARTNER_HANDLE
        IF_REFKIND        = GC_REFKIND_HEAD
        IF_PARTNER_FCT    = LS_REQUEST-ONETIME-PARTNER_FCT
        IF_PARTNER_NO     = LS_REQUEST-ONETIME-PARTNER_NO
        IT_OLD_PARTNER    = LT_DB_PARTNER
        IS_ONETIME        = LS_REQUEST-ONETIME
      CHANGING
        CT_PARTNER        = LT_PARTNER
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS ).
  ENDIF.

*  IF GS_ITEM_SERVICE IS NOT INITIAL.
*    APPEND GS_ITEM_SERVICE TO LT_ITEM_NEW.
*    DATA(LT_ITEM) = LS_REQUEST-ITEM[].
*    LOOP AT LT_ITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM_SERVICE>)
*                    WHERE NUMBER_INT <> GS_ITEM_SERVICE-NUMBER_INT.
*      APPEND <LFS_ITEM_SERVICE> TO LT_ITEM_NEW.
*    ENDLOOP.
*
*    LS_REQUEST-ITEM = LT_ITEM_NEW[].
*  ENDIF.

  LOOP AT LS_REQUEST-ITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).

    MAP_ITEM_TYPE(
      EXPORTING
        IF_SVO_TYPE       = LS_REQUEST-PROCESS_TYPE
        IF_MATNR          = <LFS_ITEM>-ORDERED_PROD
        IF_IS_BILLING     = <LFS_ITEM>-IS_BILLING
        IF_IS_PR          = <LFS_ITEM>-IS_PR
        IF_WARRANTY_CHECK = <LFS_ITEM>-WARRANTY_CHECK
      IMPORTING
        EF_ITEM_TYPE      = LF_ITEM_TYPE ).

    CLEAR LF_ITEM_GUID.
    READ TABLE LT_DB_ORDERADM_I ASSIGNING FIELD-SYMBOL(<LFS_DB_ORDERADM_I>) "#EC CI_SORTSEQ
      WITH KEY NUMBER_INT = <LFS_ITEM>-NUMBER_INT   ##WARN_OK.
    IF SY-SUBRC EQ 0.
      LF_ITEM_GUID = <LFS_DB_ORDERADM_I>-GUID.
    ELSE.
      CALL FUNCTION 'CRM_GUID_CREATE'
        IMPORTING
          EV_GUID = LF_ITEM_GUID.
    ENDIF.

    CASE <LFS_ITEM>-ZMODE.
      WHEN ''.
        LF_MODE_ITEM = GC_MODE_CREATE.

        IF LS_REQUEST-PROCESS_TYPE IN GT_STATUS_BILL.
          INSERT LF_ITEM_GUID INTO TABLE LT_STATUS_BILL.
        ENDIF.
      WHEN 'U'.
        LF_MODE_ITEM = GC_MODE_CHANGE.
      WHEN 'D'.
        <LFS_ITEM>-STATUS = GC_STATUS_DELETE.
    ENDCASE.

    CLEAR LF_POSID.
    IF LS_REQUEST-PROCESS_TYPE EQ GF_PROCESS_TYPE_ZRO5.
      IF <LFS_ITEM>-WARRANTY_CHECK EQ GF_WARRANTY_IN OR
         <LFS_ITEM>-WARRANTY_CHECK EQ GF_WARRANTY_EXT.
        LF_POSID = <LFS_ITEM>-WBS.
        <LFS_ITEM>-WBS = ''.
      ENDIF.
    ENDIF.

*    "Prepare STATUS - Item
    PREPARE_STATUS(
      EXPORTING
        IF_GUID         = LF_ITEM_GUID
        IF_REFKIND      = GC_REFKIND_ITEM
        IF_HANDLE       = LF_HANDLE
        IF_STATUS       = <LFS_ITEM>-STATUS
      CHANGING
        CT_STATUS       = LT_STATUS2
        CT_INPUT_FIELDS = LT_INPUT_FIELDS2 ).

    "Prepare CANCEL - Item
    PREPARE_CANCEL(
      EXPORTING
        IF_GUID          = LF_ITEM_GUID
        IF_REFKIND       = GC_REFKIND_ITEM
        IF_HANDLE        = LF_HANDLE
        IF_CANCEL_REASON = <LFS_ITEM>-CANC_REASON
      CHANGING
        CT_CANCEL        = LT_CANCEL
        CT_INPUT_FIELDS  = LT_INPUT_FIELDS ).

    CLEAR: LT_ORDERADM_I_TMP,
           LT_INPUT_FIELDS_TMP.
    "Prepare ORDERADM_I
    PREPARE_ORDERADM_I(
      EXPORTING
        IF_GUID_HEAD     = LF_GUID
        IF_GUID_ITEM     = LF_ITEM_GUID
        IF_HANDLE        = LF_HANDLE
        IF_ITEM_TYPE     = LF_ITEM_TYPE
        IF_NUMBER_INT    = <LFS_ITEM>-NUMBER_INT
        IF_NUMBER_PARENT = <LFS_ITEM>-NUMBER_PARENT
        IF_ORDERED_PROD  = <LFS_ITEM>-ORDERED_PROD
        IF_MODE          = LF_MODE_ITEM
      CHANGING
        CT_ORDERADM_I    = LT_ORDERADM_I_TMP[]
        CT_INPUT_FIELDS  = LT_INPUT_FIELDS_TMP[] ).

    INSERT LINES OF LT_ORDERADM_I_TMP INTO TABLE LT_ORDERADM_I.
    INSERT LINES OF LT_INPUT_FIELDS_TMP INTO TABLE LT_INPUT_FIELDS.

*   Call ORDER MAINTAIN when material is changed since
*   there is issue item type updated wrongly when material changed
    IF <LFS_ITEM>-ZMODE = 'U' AND <LFS_DB_ORDERADM_I> IS ASSIGNED.
      IF <LFS_DB_ORDERADM_I>-ORDERED_PROD NE <LFS_ITEM>-ORDERED_PROD.
*       Only ORDERED_PROD
        LOOP AT LT_INPUT_FIELDS_TMP ASSIGNING FIELD-SYMBOL(<L_INPUT_FIELDS_TMP>).
          DELETE <L_INPUT_FIELDS_TMP>-FIELD_NAMES WHERE FIELDNAME NE 'ORDERED_PROD'. "#EC CI_SORTSEQ
        ENDLOOP.

        CALL FUNCTION 'CRM_ORDER_MAINTAIN'
          IMPORTING
            ET_EXCEPTION      = LT_EXCEPTION
          CHANGING
            CT_ORDERADM_I     = LT_ORDERADM_I_TMP
            CT_INPUT_FIELDS   = LT_INPUT_FIELDS_TMP
          EXCEPTIONS
            ERROR_OCCURRED    = 1
            DOCUMENT_LOCKED   = 2
            NO_CHANGE_ALLOWED = 3
            NO_AUTHORITY      = 4
            OTHERS            = 5 ##FM_SUBRC_OK.
      ENDIF.
    ENDIF.

    "PREPARE DOC_FLOW - Item
    CLEAR LS_ITEM_KEY.
    LS_ITEM_KEY-OBJTYPE_I   = GC_OBJTYPE_SVCONTRACT_ITEM.
    LS_ITEM_KEY-OBJTYPE_H   = GC_OBJTYPE_SVCONTRACT.
    LS_ITEM_KEY-OBJECT_ID   = <LFS_ITEM>-REF_SERV_CONTRACT.
    LS_ITEM_KEY-NUMBER_INT  = <LFS_ITEM>-REF_SERV_CONTRACT_ITEM.

    PREPARE_DOCFLOW(
      EXPORTING
        IF_GUID     = LF_ITEM_GUID
        IF_REFKIND  = GC_REFKIND_ITEM
        IF_HANDLE   = LF_HANDLE
        IF_MODE     = LF_MODE
        IS_ITEM_KEY = LS_ITEM_KEY
      CHANGING
        CT_DOC_FLOW = LT_DOC_FLOW ).

    "Prepare AC_ASSIGN - Item
    PREPARE_AC_ASSIGN(
      EXPORTING
        IF_GUID          = LF_ITEM_GUID
        IF_REFKIND       = GC_REFKIND_ITEM
        IF_WBS           = <LFS_ITEM>-WBS
        IT_OLD_AC_ASSIGN = LT_DB_AC_ASSIGN[]
      CHANGING
        CT_AC_ASSIGN     = LT_AC_ASSIGN[]
        CT_INPUT_FIELDS  = LT_INPUT_FIELDS ).

    "Prepare SERVICE_OS - Item
    PREPARE_SERVICE_OS(
      EXPORTING
        IF_GUID           = LF_ITEM_GUID
        IF_REFKIND        = GC_REFKIND_ITEM
        IF_PRODUCT_ID     = <LFS_ITEM>-REF_PRODUCT_ID
        IF_EQUIPMENT_ID   = <LFS_ITEM>-EQUIPMENT_ID
        IF_HANDLE         = LF_HANDLE
        IT_OLD_SERVICE_OS = LT_DB_SERVICE_OS
        IT_EQUIPMENT_ID   = <LFS_ITEM>-REF_EQUIPMENT
      CHANGING
        CT_SERVICE_OS     = LT_SERVICE_OS
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS ).

    "Prepare SCHEDLIN - Item
    PREPARE_SCHEDLIN(
      EXPORTING
        IF_GUID         = LF_ITEM_GUID
        IF_REFKIND      = GC_REFKIND_ITEM
        IF_QUANTITY     = <LFS_ITEM>-QUANTITY
        IT_OLD_SCHEDLIN = LT_DB_SCHEDLIN[]
      CHANGING
        CT_SCHEDLIN_I   = LT_SCHEDLIN_I
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

    "Prepare PARTNER - Item Employee Response
    PREPARE_PARTNER(
      EXPORTING
        IF_GUID         = LF_ITEM_GUID
        IF_HANDLE       = LF_HANDLE
        IF_REFKIND      = GC_REFKIND_ITEM
        IF_PARTNER_FCT  = GC_PARTNER_EMP_RESPONSE
        IF_PARTNER_NO   = <LFS_ITEM>-PARTNER_BP
        IT_OLD_PARTNER  = LT_DB_PARTNER
        IS_ONETIME      = LS_REQUEST-ONETIME
      CHANGING
        CT_PARTNER      = LT_PARTNER
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

    "Prepare PARTNER - Item Vendor
    PREPARE_PARTNER(
      EXPORTING
        IF_GUID         = LF_ITEM_GUID
        IF_HANDLE       = LF_HANDLE
        IF_REFKIND      = GC_REFKIND_ITEM
        IF_PARTNER_FCT  = GC_PARTNER_VENDOR
        IF_PARTNER_NO   = <LFS_ITEM>-VENDOR_BP
        IT_OLD_PARTNER  = LT_DB_PARTNER
        IS_ONETIME      = LS_REQUEST-ONETIME
      CHANGING
        CT_PARTNER      = LT_PARTNER
        CT_INPUT_FIELDS = LT_INPUT_FIELDS ).

    "Prepare CUSTOMER_I
    PREPARE_CUSTOMER_I(
      EXPORTING
        IF_GUID         = LF_ITEM_GUID
        IF_REFKIND      = GC_REFKIND_ITEM
        IF_HANDLE       = LF_HANDLE
        IF_VENDOR_TEAM  = <LFS_ITEM>-ZZ1_VENDOR_TEAM
        IF_LGORT        = <LFS_ITEM>-STORAGE_LOCATION
        IF_POSID        = LF_POSID
        IF_MODE         = LF_MODE_ITEM
      CHANGING
        CT_CUSTOMER_I   = LT_CUSTOMER_I[]
        CT_INPUT_FIELDS = LT_INPUT_FIELDS[] ).

    CLEAR: GT_NAMETAB[].
    INSERT VALUE #( REF_GUID          = LF_ITEM_GUID
                    REF_HANDLE        = LF_HANDLE
                    MODE              = LF_MODE_ITEM
                    PLANT             = GF_DEFT_PLANT
                    PROCESS_QTY_UNIT  = <LFS_ITEM>-PROCESS_QTY_UNIT ) INTO TABLE LT_PRODUCT_I.

    MC_NAMETAB :
      'PLANT',
      'PROCESS_QTY_UNIT'.

    INSERT VALUE #( REF_GUID        = LF_ITEM_GUID
                    REF_HANDLE      = LF_HANDLE
                    REF_KIND        = GC_REFKIND_ITEM
                    OBJECTNAME      = 'PRODUCT_I'
                    FIELD_NAMES     = GT_NAMETAB ) INTO TABLE LT_INPUT_FIELDS[].

    READ TABLE LT_DB_PRIDOC ASSIGNING FIELD-SYMBOL(<LFS_DB_PRIDOC>) INDEX 1.
    IF SY-SUBRC EQ 0.
      LT_DB_PRICE_ITEM[] = <LFS_DB_PRIDOC>-PRIC_COND[].
      DELETE LT_DB_PRICE_ITEM WHERE KPOSN <> LF_ITEM_GUID.
    ELSE.
      CLEAR LT_DB_PRICE_ITEM.
    ENDIF.

    PREPARE_PRICE(
      EXPORTING
        IF_COND_TYPE = <LFS_ITEM>-KSCHL
        IF_COND_RATE = <LFS_ITEM>-KBETR
        IT_OLD_PRICE = LT_DB_PRICE_ITEM[]
      CHANGING
        CS_PRICE     = LS_PRIDOC_COM ).

    PREPARE_PRICE(
      EXPORTING
        IF_COND_TYPE = GF_DEFT_DISC_VAL
        IF_COND_RATE = <LFS_ITEM>-DISCOUNT_VAL
        IT_OLD_PRICE = LT_DB_PRICE_ITEM[]
      CHANGING
        CS_PRICE     = LS_PRIDOC_COM ).

    PREPARE_PRICE(
      EXPORTING
        IF_COND_TYPE = GF_DEFT_DISC_PER
        IF_COND_RATE = <LFS_ITEM>-DISCOUNT_PER
        IF_COND_CURR = ''
        IT_OLD_PRICE = LT_DB_PRICE_ITEM[]
      CHANGING
        CS_PRICE     = LS_PRIDOC_COM ).

    LS_PRIDOC_COM-REF_GUID   = LF_ITEM_GUID.
    LS_PRIDOC_COM-REF_HANDLE = LF_HANDLE.
    LS_PRIDOC_COM-REF_KIND   = GC_REFKIND_ITEM.

    INSERT LS_PRIDOC_COM INTO TABLE LT_PRIDOC_COM.
    CLEAR  LS_PRIDOC_COM.

    CLEAR: GT_NAMETAB[].
    MC_NAMETAB :
      'KBETR',
      'WAERS',
      'KSCHL',
      'KRECH'.

    INSERT VALUE #( REF_GUID    = LF_ITEM_GUID
                    REF_HANDLE  = LF_HANDLE
                    REF_KIND    = GC_REFKIND_ITEM
                    OBJECTNAME  = 'PRIDOC'
                    FIELD_NAMES = GT_NAMETAB ) INTO TABLE LT_INPUT_FIELDS[].

    LF_HANDLE = LF_HANDLE + 1.

  ENDLOOP."LOOP AT LS_REQUEST-ITEM

* Synchorize Pring data with Partner master
* - Incase of order created before pricing in BP master exist
*   the code below will help to sync data from master again.
  IF LT_DB_PRICING IS NOT INITIAL.
    SYNC_PRICING_WITH_BP(
      EXPORTING
        IF_GUID       = LF_GUID
        IT_ORDERADM_I = LT_DB_ORDERADM_I
        IT_PARTNER    = LT_DB_PARTNER
        IT_ORGMAN     = LT_DB_ORGMAN_H
      CHANGING
        CT_PRICING    = LT_DB_PRICING ).
  ENDIF.

* CALL CRM_ORDER_MAINTAIN NOW
  CALL FUNCTION 'CRM_ORDER_MAINTAIN'
    EXPORTING
      IT_ACTIVITY_H     = LT_ACTIVITY_H
      IT_SALES          = LT_SALES_H
      IT_PRICING        = LT_PRICING
      IT_ORGMAN         = LT_ORGMAN_H
      IT_PRODUCT_I      = LT_PRODUCT_I
      IT_PRIDOC         = LT_PRIDOC_COM
      IT_CUSTOMER_I     = LT_CUSTOMER_I
      IT_APPOINTMENT    = LT_APPOINTMENT
      IT_SCHEDLIN_I     = LT_SCHEDLIN_I
      IT_PARTNER        = LT_PARTNER
      IT_AC_ASSIGN      = LT_AC_ASSIGN
      IT_SERVICE_OS     = LT_SERVICE_OS
      IT_CUSTOMER_H     = LT_CUSTOMER_H
*     IT_STATUS         = LT_STATUS
      "IT_ORDPRP_OBJL_I_D = LT_ORDPRP_OBJL
      "IT_CANCEL         = LT_CANCEL
    IMPORTING
      ET_EXCEPTION      = LT_EXCEPTION
    CHANGING
      CT_ORDERADM_H     = LT_ORDERADM_H
      CT_ORDERADM_I     = LT_ORDERADM_I
      CT_INPUT_FIELDS   = LT_INPUT_FIELDS
      CT_DOC_FLOW       = LT_DOC_FLOW
    EXCEPTIONS
      ERROR_OCCURRED    = 1
      DOCUMENT_LOCKED   = 2
      NO_CHANGE_ALLOWED = 3
      NO_AUTHORITY      = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
    ES_RETURN-TYPE        = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
    ES_RETURN-ID          = SY-MSGID.
    ES_RETURN-NUMBER      = SY-MSGNO.
    ES_RETURN-MESSAGE_V1  = SY-MSGV1.
    ES_RETURN-MESSAGE_V2  = SY-MSGV2.
    ES_RETURN-MESSAGE_V3  = SY-MSGV3.
    ES_RETURN-MESSAGE_V4  = SY-MSGV4.
    ES_RETURN-MESSAGE     = LF_MSG_ERROR.
    RETURN.
  ENDIF.

  INSERT LF_GUID INTO TABLE LT_SAVE_GUID.

  "Read Refer Object from Service OS
  CALL FUNCTION 'CRM_ORDER_READ'
    EXPORTING
      IT_HEADER_GUID       = LT_SAVE_GUID
    IMPORTING
      ET_PARTNER           = LT_DB_PARTNER2
      ET_SERVICE_OS        = LT_DB_SERVICE_OS2
    CHANGING
      CV_LOG_HANDLE        = LF_LOG_HANDLE
    EXCEPTIONS
      DOCUMENT_NOT_FOUND   = 1
      ERROR_OCCURRED       = 2
      DOCUMENT_LOCKED      = 3
      NO_CHANGE_AUTHORITY  = 4
      NO_DISPLAY_AUTHORITY = 5
      NO_CHANGE_ALLOWED    = 6
      OTHERS               = 7 ##FM_SUBRC_OK.

  "Prepare SERVICE_OS - Delete Refer Object
  PREPARE_DELETE_REFER_OBJ(
    EXPORTING
      IF_REFKIND        = GC_REFKIND_ITEM
      IF_PRODUCT_ID     = IS_REQUEST-PRODUCT_ID
      IF_HANDLE         = LF_HANDLE
      IT_OLD_SERVICE_OS = LT_DB_SERVICE_OS2
    CHANGING
      CT_SERVICE_OS     = LT_SERVICE_OS2
      CT_INPUT_FIELDS   = LT_INPUT_FIELDS2 ).

*<-- Start of Deletion 420000714 31.07.2025 (Move to After Item Status)
** 3rd Maintain exist?
** - Status maintain may need to call separately
*  IF LT_INPUT_FIELDS3 IS NOT INITIAL.
*    CALL FUNCTION 'CRM_ORDER_MAINTAIN'
*      EXPORTING
*        IT_STATUS         = LT_STATUS
*      IMPORTING
*        ET_EXCEPTION      = LT_EXCEPTION
*      CHANGING
*        CT_INPUT_FIELDS   = LT_INPUT_FIELDS3
*      EXCEPTIONS
*        ERROR_OCCURRED    = 1
*        DOCUMENT_LOCKED   = 2
*        NO_CHANGE_ALLOWED = 3
*        NO_AUTHORITY      = 4
*        OTHERS            = 5.
*    IF SY-SUBRC <> 0.
*      ES_RETURN-TYPE        = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
*      ES_RETURN-ID          = SY-MSGID.
*      ES_RETURN-NUMBER      = SY-MSGNO.
*      ES_RETURN-MESSAGE_V1  = SY-MSGV1.
*      ES_RETURN-MESSAGE_V2  = SY-MSGV2.
*      ES_RETURN-MESSAGE_V3  = SY-MSGV3.
*      ES_RETURN-MESSAGE_V4  = SY-MSGV4.
*      ES_RETURN-MESSAGE     = LF_MSG_ERROR.
*      RETURN.
*    ENDIF.
*  ENDIF.
*--> End of Deletion 420000714 31.07.2025
* 2nd Maintain exist?
* - Item status has issue when update together with
*   header status in same CRM_ORDER_MAINTAIN calling
  IF LT_INPUT_FIELDS2 IS NOT INITIAL.
    CALL FUNCTION 'CRM_ORDER_MAINTAIN'
      EXPORTING
        IT_STATUS         = LT_STATUS2
        IT_SERVICE_OS     = LT_SERVICE_OS2
      IMPORTING
        ET_EXCEPTION      = LT_EXCEPTION
      CHANGING
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS2
      EXCEPTIONS
        ERROR_OCCURRED    = 1
        DOCUMENT_LOCKED   = 2
        NO_CHANGE_ALLOWED = 3
        NO_AUTHORITY      = 4
        OTHERS            = 5.
    IF SY-SUBRC <> 0.
      ES_RETURN-TYPE        = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      ES_RETURN-ID          = SY-MSGID.
      ES_RETURN-NUMBER      = SY-MSGNO.
      ES_RETURN-MESSAGE_V1  = SY-MSGV1.
      ES_RETURN-MESSAGE_V2  = SY-MSGV2.
      ES_RETURN-MESSAGE_V3  = SY-MSGV3.
      ES_RETURN-MESSAGE_V4  = SY-MSGV4.
      ES_RETURN-MESSAGE     = LF_MSG_ERROR.
      RETURN.
    ENDIF.
  ENDIF.

*<-- Start of Insertion 420000714 31.07.2025 (Move from Before Item Status)
* 3rd Maintain exist?
* - Status maintain may need to call separately
  IF LT_INPUT_FIELDS3 IS NOT INITIAL.
    CALL FUNCTION 'CRM_ORDER_MAINTAIN'
      EXPORTING
        IT_STATUS         = LT_STATUS
      IMPORTING
        ET_EXCEPTION      = LT_EXCEPTION
      CHANGING
        CT_INPUT_FIELDS   = LT_INPUT_FIELDS3
      EXCEPTIONS
        ERROR_OCCURRED    = 1
        DOCUMENT_LOCKED   = 2
        NO_CHANGE_ALLOWED = 3
        NO_AUTHORITY      = 4
        OTHERS            = 5.
    IF SY-SUBRC <> 0.
      ES_RETURN-TYPE        = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      ES_RETURN-ID          = SY-MSGID.
      ES_RETURN-NUMBER      = SY-MSGNO.
      ES_RETURN-MESSAGE_V1  = SY-MSGV1.
      ES_RETURN-MESSAGE_V2  = SY-MSGV2.
      ES_RETURN-MESSAGE_V3  = SY-MSGV3.
      ES_RETURN-MESSAGE_V4  = SY-MSGV4.
      ES_RETURN-MESSAGE     = LF_MSG_ERROR.
      RETURN.
    ENDIF.
  ENDIF.
*--> End of Insertion 420000714 31.07.2025

  "Add System Status Bill
  LOOP AT LT_STATUS_BILL ASSIGNING FIELD-SYMBOL(<LFS_STATUS_BILL>).
    CALL FUNCTION 'CRM_STATUS_SET_INTERN'
      EXPORTING
        IV_OBJNR            = <LFS_STATUS_BILL>
        IV_STATUS           = GC_SYSTEM_STATUS_BILL
      EXCEPTIONS
        OBJECT_NOT_FOUND    = 1
        STATUS_INCONSISTENT = 2
        STATUS_NOT_ALLOWED  = 3
        OTHERS              = 4 ##FM_SUBRC_OK.
  ENDLOOP.

  CALL FUNCTION 'CRM_ORDER_SAVE'
    EXPORTING
      IT_OBJECTS_TO_SAVE   = LT_SAVE_GUID
      IV_UPDATE_TASK_LOCAL = ABAP_TRUE
      IV_NO_BDOC_SEND      = ABAP_TRUE
    IMPORTING
      ET_SAVED_OBJECTS     = LT_SAVED_OBJECTS
    EXCEPTIONS
      DOCUMENT_NOT_SAVED   = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0.
    ES_RETURN-TYPE        = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
    ES_RETURN-ID          = SY-MSGID.
    ES_RETURN-NUMBER      = SY-MSGNO.
    ES_RETURN-MESSAGE_V1  = SY-MSGV1.
    ES_RETURN-MESSAGE_V2  = SY-MSGV2.
    ES_RETURN-MESSAGE_V3  = SY-MSGV3.
    ES_RETURN-MESSAGE_V4  = SY-MSGV4.
    ES_RETURN-MESSAGE     = LF_MSG_ERROR.

    CALL FUNCTION 'FORMAT_MESSAGE'
      EXPORTING
        ID        = ES_RETURN-ID
        NO        = ES_RETURN-NUMBER
        V1        = ES_RETURN-MESSAGE_V1
        V2        = ES_RETURN-MESSAGE_V2
        V3        = ES_RETURN-MESSAGE_V3
        V4        = ES_RETURN-MESSAGE_V4
      IMPORTING
        MSG       = ES_RETURN-MESSAGE
      EXCEPTIONS
        NOT_FOUND = 1
        OTHERS    = 2 ##FM_SUBRC_OK.

    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

  LF_ORDER_OBJECT_ID   = VALUE #( LT_SAVED_OBJECTS[ 1 ]-OBJECT_ID OPTIONAL ).
  IF LF_ORDER_OBJECT_ID IS INITIAL.
    COLLECT_EXCEPTION(
      EXPORTING
        IT_EXCEPTION = LT_EXCEPTION
      CHANGING
        CS_RETURN    = ES_RETURN ).

    "BOI-06.01.2025
    "Fix Status&Messsage Blank
    IF ES_RETURN IS INITIAL.
      ES_RETURN-TYPE        = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
      ES_RETURN-ID          = SY-MSGID.
      ES_RETURN-NUMBER      = SY-MSGNO.
      ES_RETURN-MESSAGE_V1  = SY-MSGV1.
      ES_RETURN-MESSAGE_V2  = SY-MSGV2.
      ES_RETURN-MESSAGE_V3  = SY-MSGV3.
      ES_RETURN-MESSAGE_V4  = SY-MSGV4.
      ES_RETURN-MESSAGE     = LF_MSG_ERROR.
    ENDIF.
    "EOI-06.01.2025

    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

  CALL FUNCTION 'CRM_MESSAGES_DISPLAY'
    EXPORTING
      IV_DOCUMENT_NUMBER = LF_GUID
      IV_SURPRESS_OUTPUT = ABAP_TRUE
      IV_IN_TRANSACTION  = ABAP_TRUE
    IMPORTING
      ET_MSG_HANDLE      = LT_MSG_HANDLE
    EXCEPTIONS
      OTHERS             = 0.
  IF LT_MSG_HANDLE IS NOT INITIAL.
    LOOP AT LT_MSG_HANDLE ASSIGNING FIELD-SYMBOL(<L_HANDLE>).
      CALL FUNCTION 'CRM_MESSAGES_GET_MSG_INFO'
        EXPORTING
          IS_MSG_HANDLE = <L_HANDLE>
        IMPORTING
          ES_INFO       = LS_INFO
          ES_MSG        = LS_MSG
          EV_REF_OBJECT = LF_REF_OBJ
        EXCEPTIONS
          OTHERS        = 99.
      IF SY-SUBRC EQ 0.
        MESSAGE ID LS_MSG-MSGID
                TYPE LS_MSG-MSGTY
                NUMBER LS_MSG-MSGNO
                WITH LS_MSG-MSGV1 LS_MSG-MSGV2 LS_MSG-MSGV3 LS_MSG-MSGV4
                INTO LF_MESSAGE.

        IF LS_MSG-MSGTY EQ ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR AND
           LS_MSG-MSGID EQ 'VM' AND
           LS_MSG-MSGNO EQ '010'.
          ES_RETURN-TYPE        = LS_MSG-MSGTY.
          ES_RETURN-ID          = LS_MSG-MSGID.
          ES_RETURN-NUMBER      = LS_MSG-MSGNO.
          ES_RETURN-MESSAGE_V1  = LS_MSG-MSGV1.
          ES_RETURN-MESSAGE_V2  = LS_MSG-MSGV2.
          ES_RETURN-MESSAGE_V3  = LS_MSG-MSGV3.
          ES_RETURN-MESSAGE_V4  = LS_MSG-MSGV4.
          ES_RETURN-MESSAGE     = LF_MESSAGE.

          CLEAR ET_RETURN.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          RETURN.
        ENDIF.

        APPEND INITIAL LINE TO ET_RETURN ASSIGNING FIELD-SYMBOL(<L_RETURN>).
        <L_RETURN>-RESP_STATUS  = LS_MSG-MSGTY.
        CONCATENATE LF_REF_OBJ LF_MESSAGE INTO
          <L_RETURN>-RESP_MESSAGE SEPARATED BY ' : '.
      ENDIF.
    ENDLOOP.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
  ES_RETURN = VALUE BAPIRETURN1( TYPE = ZCL_SDSCA_REST_INTF_UTILITY=>GC_SUCCESS
                                 MESSAGE = LF_MSG_PASS
                                 MESSAGE_V1 = LF_ORDER_OBJECT_ID ).

  UPDATE_TAX(
    EXPORTING
      IF_TAXJURCODE  = IS_REQUEST-ONETIME-TAXJURCODE
      IT_OLD_PARTNER = LT_DB_PARTNER2 ).

ENDMETHOD.


METHOD MAP_ITEM_TYPE.

  DATA :
    LF_MATNR       TYPE MATNR,
    LRT_MATKL      TYPE RANGE OF MATKL,
    LRT_IS_BILLING TYPE RANGE OF ZSDSDE_IS_BILLING,
    LRT_IS_PR      TYPE RANGE OF ZSDSDE_IS_PR,
    LRT_WARRANTY   TYPE RANGE OF ZSDSDE_WARRANTY_CHECK.

  CLEAR :
    LRT_IS_BILLING,
    LRT_IS_PR,
    LRT_WARRANTY,
    EF_ITEM_TYPE.

  IF IF_IS_BILLING IS NOT INITIAL.
    INSERT VALUE #( SIGN    = 'I'
                    OPTION  = 'EQ'
                    LOW     = IF_IS_BILLING
                    HIGH    = '') INTO TABLE LRT_IS_BILLING.
  ENDIF.

  IF IF_IS_PR IS NOT INITIAL.
    INSERT VALUE #( SIGN    = 'I'
                    OPTION  = 'EQ'
                    LOW     = IF_IS_PR
                    HIGH    = '') INTO TABLE LRT_IS_PR.
  ENDIF.

  IF IF_WARRANTY_CHECK IS NOT INITIAL.
    INSERT VALUE #( SIGN    = 'I'
                    OPTION  = 'EQ'
                    LOW     = IF_WARRANTY_CHECK
                    HIGH    = '') INTO TABLE LRT_WARRANTY.
  ENDIF.

  SELECT FROM ZSDSCMT001
    FIELDS *
    WHERE SVO_TYPE        EQ @IF_SVO_TYPE
    AND   IS_BILLING      IN @LRT_IS_BILLING
    AND   IS_PR           IN @LRT_IS_PR
    AND   WARRANTY_CHECK  IN @LRT_WARRANTY
    INTO TABLE @DATA(LT_MAPPING).
  IF SY-SUBRC <> 0.
    RETURN.
  ENDIF.

  LF_MATNR = IF_MATNR.
  SELECT SINGLE FROM MARA
    FIELDS MATKL
    WHERE MATNR EQ @LF_MATNR
    INTO @DATA(LF_MATKL).
  IF SY-SUBRC <> 0.
    RETURN.
  ENDIF.

  LOOP AT LT_MAPPING ASSIGNING FIELD-SYMBOL(<LFS_MAPPING>).

    IF IF_IS_BILLING IS NOT INITIAL.
      IF IF_IS_BILLING <> <LFS_MAPPING>-IS_BILLING.
        CONTINUE.
      ENDIF.
    ENDIF.

    IF IF_IS_PR IS NOT INITIAL.
      IF IF_IS_PR <> <LFS_MAPPING>-IS_PR.
        CONTINUE.
      ENDIF.
    ENDIF.

    IF IF_WARRANTY_CHECK IS NOT INITIAL.
      IF IF_WARRANTY_CHECK <> <LFS_MAPPING>-WARRANTY_CHECK.
        CONTINUE.
      ENDIF.
    ENDIF.

    INSERT VALUE #( SIGN    = 'I'
                    OPTION  = 'CP'
                    LOW     = <LFS_MAPPING>-MATKL
                    HIGH    = '') INTO TABLE LRT_MATKL.

    IF LF_MATKL IN LRT_MATKL.
      EF_ITEM_TYPE = <LFS_MAPPING>-ITM_TYPE.
      EXIT.                                             "#EC CI_NOORDER
    ENDIF.

    CLEAR LRT_MATKL.
  ENDLOOP.

ENDMETHOD.


METHOD MAP_STATUS.

  CASE IF_STATUS.
    WHEN 'A'."Open
      EF_ESTAT = 'E0001'.
    WHEN 'B'."In Process
      EF_ESTAT = 'E0002'.
    WHEN 'C'."Completed
      EF_ESTAT = 'E0004'.
    WHEN 'D'."Released
      EF_ESTAT = 'E0003'.
    WHEN GC_STATUS_DELETE."Deleted
      EF_ESTAT = 'E0005'.
    WHEN OTHERS.
      EF_ESTAT = 'E0001'.
  ENDCASE.

ENDMETHOD.


METHOD PREPARE_AC_ASSIGN.

  READ TABLE IT_OLD_AC_ASSIGN ASSIGNING FIELD-SYMBOL(<LFS_ASSIGN>)
    WITH KEY REF_KIND = IF_REFKIND
             GUID = IF_GUID.
  IF SY-SUBRC EQ 0.
    IF <LFS_ASSIGN>-AC_ASSIGNMENT EQ IF_WBS.
      RETURN.
    ENDIF.
  ELSE.
    IF IF_WBS IS INITIAL.
      RETURN.
    ENDIF.
  ENDIF.

  CLEAR: GT_NAMETAB[].
  MC_NAMETAB :
    'AC_OBJECT_TYPE',
    'AC_ASSIGNMENT'.
  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  AC_OBJECT_TYPE  = '03'
                  AC_ASSIGNMENT   = IF_WBS ) INTO TABLE CT_AC_ASSIGN.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'AC_ASSIGN'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].


ENDMETHOD.


METHOD PREPARE_APPOINTMENT.

  "PRAPARE APPOINTMENT
  CLEAR: GT_NAMETAB[].
  MC_NAMETAB :
    'TIMESTAMP_FROM',
    'TIMESTAMP_TO'.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  MODE            = IF_MODE
                  APPT_TYPE       = IF_APPTYPE
                  TIMESTAMP_FROM  = IF_DATE
                  TIMESTAMP_TO    = IF_DATE ) INTO TABLE CT_APPOINTMENT.


  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  LOGICAL_KEY     = IF_APPTYPE
                  OBJECTNAME      = 'APPOINTMENT'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

ENDMETHOD.


METHOD PREPARE_CANCEL.

  IF IF_CANCEL_REASON IS INITIAL.
    RETURN.
  ENDIF.

  CLEAR: GT_NAMETAB[].
  INSERT VALUE #( REF_HANDLE      = IF_HANDLE
                  REF_GUID        = IF_GUID
                  REF_KIND        = IF_REFKIND
                  CANCPROC        = '0001'
                  CANCPARTY       = 'CNCT'
                  CANC_REASON     = IF_CANCEL_REASON ) INTO TABLE CT_CANCEL.

  MC_NAMETAB :
    'CANCPROC',
    'CANCPARTY',
    'CANC_REASON'.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'CANCEL'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

ENDMETHOD.


METHOD PREPARE_CUSTOMER_H.

  DATA :
    LS_CUSTOMER_H TYPE CRMT_CUSTOMER_H_COM.

  CLEAR:
    LS_CUSTOMER_H,
    GT_NAMETAB[].

  MC_NAMETAB :
    'ZZ1_DELIVERY_ORD',
    'ZZ1_EXT_REFNO'.

  LS_CUSTOMER_H-REF_GUID          = IF_GUID.
  LS_CUSTOMER_H-REF_HANDLE        = IF_HANDLE.
  LS_CUSTOMER_H-ZZ1_EXT_REFNO     = IF_EXT_REFNO.
  LS_CUSTOMER_H-ZZ1_DELIVERY_ORD  = IF_DO_NUMBER.

  IF IF_MODE EQ GC_MODE_CREATE.
    MC_NAMETAB :
      'ZZ1_LOB_SRH',
      'ZZ1_PROACTIVITY'.

    LS_CUSTOMER_H-ZZ1_LOB_SRH     = IF_LOB.
    LS_CUSTOMER_H-ZZ1_PROACTIVITY = IF_PROACTIVITY.
  ENDIF.

  INSERT LS_CUSTOMER_H INTO TABLE CT_CUSTOMER_H.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'CUSTOMER_H'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].


ENDMETHOD.


METHOD PREPARE_CUSTOMER_I.

  DATA :
    LS_CUSTOMER_I TYPE CRMT_CUSTOMER_I_COM.

  CLEAR:
    LS_CUSTOMER_I,
    GT_NAMETAB[].

  MC_NAMETAB :
    'ZZ1_VENDOR_TEAM',
    'ZZ1_LGORT',
    'ZZ1_POSID'.

  LS_CUSTOMER_I-REF_GUID        = IF_GUID.
  LS_CUSTOMER_I-REF_HANDLE      = IF_HANDLE.
  LS_CUSTOMER_I-ZZ1_VENDOR_TEAM = IF_VENDOR_TEAM.
  LS_CUSTOMER_I-ZZ1_LGORT       = IF_LGORT.
  LS_CUSTOMER_I-ZZ1_POSID       = IF_POSID.

  IF IF_MODE EQ GC_MODE_CREATE.
    MC_NAMETAB :
      'ZZ1_WERKS'.

    LS_CUSTOMER_I-ZZ1_WERKS     = GF_DEFT_PLANT.
  ENDIF.

  INSERT LS_CUSTOMER_I INTO TABLE CT_CUSTOMER_I.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'CUSTOMER_I'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].


ENDMETHOD.


METHOD PREPARE_DELETE_REFER_OBJ.

  DATA :
    LT_REFOBJ_DEL  TYPE CRMT_SRV_REFOBJ_COMT,
    LS_SERVICE_OS  TYPE CRMT_SRV_OSSET_COM,
    LS_OS_COM      TYPE CRMT_SRV_OSSET_COM1,
    LF_MAIN_OBJECT TYPE CRMT_SRV_MAIN_OBJECT ##NEEDED,
    LF_MODE        TYPE CRMT_MODE.

  CLEAR:
    GT_NAMETAB[],
    LT_REFOBJ_DEL[],
    LS_SERVICE_OS,
    LS_OS_COM.

  IF IF_PRODUCT_ID IS INITIAL.
    RETURN.
  ENDIF.

  MC_NAMETAB :
    'MODE'.

  LF_MODE = 'D'.
  LOOP AT IT_OLD_SERVICE_OS ASSIGNING FIELD-SYMBOL(<LFS_OLD_SERVICE_OS>)
                            WHERE REF_KIND = IF_REFKIND. "#EC CI_SORTSEQ
    LOOP AT <LFS_OLD_SERVICE_OS>-OSSET ASSIGNING FIELD-SYMBOL(<LFS_OSSET>)
                                       WHERE SUBJECT_PROFILE = GF_DEFT_SUBJECT_PROFILE
                                       AND PROFILE_TYPE = 'A'.
      LOOP AT <LFS_OSSET>-REFOBJECT ASSIGNING FIELD-SYMBOL(<LFS_REFOBJECT>)
                                    WHERE PRODUCT_ID EQ IF_PRODUCT_ID.
        CLEAR :
          LT_REFOBJ_DEL,
          LS_OS_COM,
          LS_SERVICE_OS.

        INSERT VALUE #( REF_GUID        = <LFS_REFOBJECT>-GUID
                        MODE            = LF_MODE ) INTO TABLE LT_REFOBJ_DEL.

        LS_OS_COM-REF_GUID        = <LFS_OSSET>-GUID.
        LS_OS_COM-SUBJECT_PROFILE = GF_DEFT_SUBJECT_PROFILE.
        LS_OS_COM-PROFILE_TYPE    = 'A'.
        LS_OS_COM-REFOBJECT       = LT_REFOBJ_DEL[].

        APPEND LS_OS_COM TO LS_SERVICE_OS-OSSET.

        LS_SERVICE_OS-REF_GUID        = <LFS_OLD_SERVICE_OS>-REF_GUID.
        LS_SERVICE_OS-REF_KIND        = <LFS_OLD_SERVICE_OS>-REF_KIND.
        APPEND LS_SERVICE_OS TO CT_SERVICE_OS.

        INSERT VALUE #( REF_GUID        = LS_SERVICE_OS-REF_GUID
                        REF_HANDLE      = IF_HANDLE
                        REF_KIND        = LS_SERVICE_OS-REF_KIND
                        OBJECTNAME      = 'SERVICE_OS'
                        FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDMETHOD.


METHOD PREPARE_DOCFLOW.

  DATA :
    LF_GUID_REFER TYPE GUID_16,
    LS_DOC_FLOW   TYPE CRMT_DOC_FLOW_COM,
    LS_ITEM_KEY   TYPE CRMS4D_BTX_I.

  IF IF_MODE <> GC_MODE_CREATE.
    RETURN.
  ENDIF.

  LS_ITEM_KEY = IS_ITEM_KEY.

  IF IS_ITEM_KEY-NUMBER_INT IS NOT INITIAL.
    GET_ITEM_GUID_FROM_DB(
      CHANGING
        CS_ITEM_KEY = LS_ITEM_KEY ).
    LF_GUID_REFER = LS_ITEM_KEY-ITEM_GUID.
  ELSE.
    GET_GUID_FROM_DB(
      EXPORTING
        IF_OBJTYPE_H = GC_OBJTYPE_SVCONTRACT
        IF_OBJECT_ID = LS_ITEM_KEY-OBJECT_ID
      IMPORTING
        EF_GUID      = LF_GUID_REFER ).
  ENDIF.

  IF LF_GUID_REFER IS INITIAL.
    RETURN.
  ENDIF.

  CASE IF_REFKIND.
    WHEN GC_REFKIND_HEAD.
      CLEAR: LS_DOC_FLOW.
      INSERT VALUE #( OBJKEY_A        = LF_GUID_REFER
                      VONA_KIND       = 'A'
                      HANDLE_B        = '1'
                      BREL_KIND       = IF_REFKIND
                      BREL_MODE       = IF_MODE
                      RELTYPE         = 'VONA' ) INTO TABLE LS_DOC_FLOW-DOC_LINK.

      LS_DOC_FLOW-REF_HANDLE  = IF_HANDLE.
      LS_DOC_FLOW-REF_GUID    = IF_GUID.
      LS_DOC_FLOW-REF_KIND    = IF_REFKIND.
      APPEND LS_DOC_FLOW TO CT_DOC_FLOW.
    WHEN GC_REFKIND_ITEM.
      CLEAR: LS_DOC_FLOW.
      INSERT VALUE #( OBJKEY_A        = LF_GUID_REFER
                      OBJTYPE_A       = GC_OBJTYPE_SVCONTRACT_ITEM
                      VONA_KIND       = 'A'
                      BREL_KIND       = IF_REFKIND
                      BREL_MODE       = IF_MODE
                      RELTYPE         = 'VONA' ) INTO TABLE LS_DOC_FLOW-DOC_LINK.

      LS_DOC_FLOW-REF_HANDLE  = GC_MODE_CREATE.
      LS_DOC_FLOW-REF_GUID    = IF_GUID.
      LS_DOC_FLOW-REF_KIND    = IF_REFKIND.
      APPEND LS_DOC_FLOW TO CT_DOC_FLOW.

  ENDCASE.

ENDMETHOD.


METHOD PREPARE_ORDERADM_H.

  CLEAR: GT_NAMETAB[].

  CASE IF_MODE.
    WHEN GC_MODE_CREATE.
      MC_NAMETAB :
        'CREATED_AT',
        'CREATED_BY',
        'DESCRIPTION',
        'POSTING_DATE',
        'PROCESS_TYPE'.

      INSERT VALUE #( GUID          = IF_GUID
                      HANDLE        = IF_HANDLE
                      PROCESS_TYPE  = IF_PROCESS_TYPE
                      POSTING_DATE  = SY-DATLO
                      DESCRIPTION   = IF_DESCRIPTION
                      MODE          = IF_MODE
                      CREATED_BY    = SY-UNAME
                      CREATED_AT    = SY-DATLO ) INTO TABLE CT_ORDERADM_H.


      INSERT VALUE #( REF_GUID      = IF_GUID
                      REF_HANDLE    = IF_HANDLE
                      REF_KIND      = GC_REFKIND_HEAD
                      OBJECTNAME    = 'ORDERADM_H'
                      FIELD_NAMES   = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

    WHEN GC_MODE_CHANGE.
      MC_NAMETAB :
        'DESCRIPTION'.

      INSERT VALUE #( GUID          = IF_GUID
                      DESCRIPTION   = IF_DESCRIPTION ) INTO TABLE CT_ORDERADM_H.

      INSERT VALUE #( REF_GUID      = IF_GUID
                      REF_HANDLE    = IF_HANDLE
                      REF_KIND      = GC_REFKIND_HEAD
                      OBJECTNAME    = 'ORDERADM_H'
                      FIELD_NAMES   = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].
  ENDCASE.

ENDMETHOD.


METHOD PREPARE_ORDERADM_I.

  CLEAR: GT_NAMETAB[].

  CASE IF_MODE.
    WHEN GC_MODE_CREATE.
      MC_NAMETAB :
        'MODE',
        'NUMBER_INT',
        'ORDERED_PROD',
        'NUMBER_PARENT',
        'ITM_TYPE'.
      INSERT VALUE #( GUID          = IF_GUID_ITEM
                      HANDLE        = IF_HANDLE
                      HEADER_HANDLE = 1
                      HEADER        = IF_GUID_HEAD
                      MODE          = IF_MODE
                      NUMBER_INT    = IF_NUMBER_INT
                      NUMBER_PARENT = IF_NUMBER_PARENT
                      ORDERED_PROD  = IF_ORDERED_PROD
                      ITM_TYPE      = IF_ITEM_TYPE ) INTO TABLE CT_ORDERADM_I.

      INSERT VALUE #( FIELD_NAMES   = GT_NAMETAB
                      REF_GUID      = IF_GUID_ITEM
                      REF_HANDLE    = IF_HANDLE
                      REF_KIND      = GC_REFKIND_ITEM
                      OBJECTNAME    = 'ORDERADM_I' ) INTO TABLE CT_INPUT_FIELDS[].

    WHEN GC_MODE_CHANGE.
      MC_NAMETAB :
        'ORDERED_PROD',
        'NUMBER_PARENT',
        'ITM_TYPE'.
      INSERT VALUE #( GUID          = IF_GUID_ITEM
                      HANDLE        = IF_HANDLE
                      HEADER        = IF_GUID_HEAD
                      NUMBER_PARENT = IF_NUMBER_PARENT
                      ORDERED_PROD  = IF_ORDERED_PROD
                      ITM_TYPE      = IF_ITEM_TYPE ) INTO TABLE CT_ORDERADM_I.

      INSERT VALUE #( FIELD_NAMES   = GT_NAMETAB
                      REF_GUID      = IF_GUID_ITEM
                      REF_KIND      = GC_REFKIND_ITEM
                      OBJECTNAME    = 'ORDERADM_I' ) INTO TABLE CT_INPUT_FIELDS[].

  ENDCASE.

ENDMETHOD.


METHOD PREPARE_ORGMAN_H.

  DATA :
    LS_ORGMAN_H TYPE CRMT_ORGMAN_COM.

  CLEAR:
    LS_ORGMAN_H,
    GT_NAMETAB[].

  MC_NAMETAB :
    'SALES_OFFICE_SD',
    'SALES_GROUP_SD'.

  LS_ORGMAN_H-REF_GUID        = IF_GUID.
  LS_ORGMAN_H-REF_KIND        = IF_REFKIND.
  LS_ORGMAN_H-REF_HANDLE      = IF_HANDLE.
  LS_ORGMAN_H-SALES_OFFICE_SD = IF_SALES_OFFICE.
  LS_ORGMAN_H-SALES_GROUP_SD  = IF_SALES_GROUP.

  IF IF_MODE EQ GC_MODE_CREATE.
    MC_NAMETAB :
      'DIS_CHANNEL',
      'DIVISION',
      'SALES_ORG_SD'.

    LS_ORGMAN_H-DIS_CHANNEL     = GF_DEFT_DIS_CHANNEL.
    LS_ORGMAN_H-DIVISION        = GF_DEFT_DIVISION.
    LS_ORGMAN_H-SALES_ORG_SD    = GF_DEFT_SALES_ORG.
  ENDIF.

  INSERT LS_ORGMAN_H INTO TABLE CT_ORGMAN_H.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'ORGMAN'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].


ENDMETHOD.


METHOD PREPARE_PARTNER.

  DATA :
    LF_PARTNER_FCT TYPE CRMT_PARTNER_FCT,
    LF_PARTNER_PFT TYPE COMT_PARTNER_PFT       ##NEEDED,
    LF_PARTNER_NO  TYPE CRMT_PARTNER_NO,
    LF_LOGICAL_KEY TYPE CRMT_LOGICAL_KEY,
    LS_PARTNER     TYPE CRMT_PARTNER_COM.

  IF IF_PARTNER_FCT EQ '00000002'.
    LF_PARTNER_FCT = '00000055'.
  ELSE.
    LF_PARTNER_FCT = IF_PARTNER_FCT.
  ENDIF.

  IF IF_PARTNER_NO IS INITIAL.
    RETURN.
  ENDIF.

  LF_PARTNER_NO = IF_PARTNER_NO.

  CLEAR:
    GT_NAMETAB[],
    LS_PARTNER.

  IF LF_PARTNER_NO EQ GF_DEFT_PARTNER_ONETIME.
    LS_PARTNER-CITY             = IS_ONETIME-CITY.
    LS_PARTNER-COUNTRY          = IS_ONETIME-COUNTRY.
    LS_PARTNER-DISTRICT         = IS_ONETIME-DISTRICT.
    LS_PARTNER-E_MAIL           = IS_ONETIME-E_MAIL.
    LS_PARTNER-HOUSE_NO         = IS_ONETIME-HOUSE_NO.
    LS_PARTNER-TELEPHONEMOB     = IS_ONETIME-TELEPHONEMOB.
    LS_PARTNER-NAME_2           = IS_ONETIME-LASTNAME.
    LS_PARTNER-NAME             = IS_ONETIME-FIRSTNAME.
    LS_PARTNER-LASTNAME         = IS_ONETIME-LASTNAME.
    LS_PARTNER-FIRSTNAME        = IS_ONETIME-FIRSTNAME.
    LS_PARTNER-TEL1_NUMBR       = IS_ONETIME-TEL1_NUMBR.
    LS_PARTNER-POSTL_COD1       = IS_ONETIME-POSTL_COD1.
    LS_PARTNER-REGION           = IS_ONETIME-REGION.
    LS_PARTNER-STREET           = IS_ONETIME-STREET.
    LS_PARTNER-STR_SUPPL1       = IS_ONETIME-STR_SUPPL1.
    LS_PARTNER-STR_SUPPL2       = IS_ONETIME-STR_SUPPL2.
    LS_PARTNER-TAXJURCODE       = IS_ONETIME-TAXJURCODE.

    MC_NAMETAB :
      'CITY',
      'COUNTRY',
      'DISTRICT',
      'E_MAIL',
      'HOUSE_NO',
      'TELEPHONEMOB',
      'LASTNAME',
      'FIRSTNAME',
      'NAME_2',
      'NAME',
      'TEL1_NUMBR',
      'POSTL_COD1',
      'REGION',
      'STREET',
      'STR_SUPPL1',
      'STR_SUPPL2',
      'TAXJURCODE'.
  ENDIF.

  READ TABLE IT_OLD_PARTNER INTO DATA(LS_DB_PARTNER)    "#EC CI_SORTSEQ
    WITH KEY REF_GUID = IF_GUID
             REF_KIND = IF_REFKIND
             REF_PARTNER_FCT = LF_PARTNER_FCT.
  IF SY-SUBRC <> 0.

    MC_NAMETAB :
      'DISPLAY_TYPE',
      'KIND_OF_ENTRY',
      'NO_TYPE',
      'PARTNER_FCT',
      'PARTNER_NO'.

    LS_PARTNER-REF_GUID           = IF_GUID.
    LS_PARTNER-REF_HANDLE         = IF_HANDLE.
    LS_PARTNER-REF_KIND           = IF_REFKIND.
    LS_PARTNER-REF_PARTNER_HANDLE = IF_PARTNER_HANDLE.
    LS_PARTNER-KIND_OF_ENTRY      = 'C'.
    LS_PARTNER-DISPLAY_TYPE       = 'BP'.
    LS_PARTNER-NO_TYPE            = 'BP'.
    LS_PARTNER-PARTNER_FCT        = LF_PARTNER_FCT.
    LS_PARTNER-PARTNER_NO         = LF_PARTNER_NO.

    INSERT LS_PARTNER INTO TABLE CT_PARTNER.


*   ADD TO LT_INPUT FIELDS THE NEW TABLE YOU WANT TO CREATE.
    INSERT VALUE #( REF_GUID        = IF_GUID
                    REF_HANDLE      = IF_HANDLE
                    REF_KIND        = IF_REFKIND
                    LOGICAL_KEY     = IF_PARTNER_HANDLE
                    OBJECTNAME      = 'PARTNER'
                    FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

  ELSE.
    IF LS_DB_PARTNER-PARTNER_NO <> LF_PARTNER_NO OR
       LF_PARTNER_NO EQ GF_DEFT_PARTNER_ONETIME.

      MC_NAMETAB :
        'DISPLAY_TYPE',
        'KIND_OF_ENTRY',
        'NO_TYPE',
        'PARTNER_FCT',
        'PARTNER_NO'.

      LS_PARTNER-REF_GUID           = IF_GUID.
      LS_PARTNER-REF_HANDLE         = ''.
      LS_PARTNER-REF_KIND           = IF_REFKIND.
      LS_PARTNER-REF_PARTNER_HANDLE = ''.
      LS_PARTNER-KIND_OF_ENTRY      = 'C'.
      LS_PARTNER-DISPLAY_TYPE       = 'BP'.
      LS_PARTNER-NO_TYPE            = 'BP'.
      LS_PARTNER-REF_PARTNER_FCT  = LF_PARTNER_FCT.
      LS_PARTNER-REF_PARTNER_NO   = LS_DB_PARTNER-PARTNER_NO.
      LS_PARTNER-REF_NO_TYPE      = 'BP'.
      LS_PARTNER-REF_DISPLAY_TYPE = 'BP'.
      LS_PARTNER-PARTNER_GUID     = ''   ##LITERAL.
      LS_PARTNER-PARTNER_FCT      = LF_PARTNER_FCT.
      LS_PARTNER-PARTNER_NO       = LF_PARTNER_NO.

      INSERT LS_PARTNER INTO TABLE CT_PARTNER.

      LF_LOGICAL_KEY+0(4)   = LS_PARTNER-REF_PARTNER_HANDLE.
      LF_LOGICAL_KEY+4(8)   = LS_PARTNER-REF_PARTNER_FCT.
      LF_LOGICAL_KEY+12(20) = LS_PARTNER-REF_PARTNER_NO.
      LF_LOGICAL_KEY+32(2)  = LS_PARTNER-REF_NO_TYPE.
      LF_LOGICAL_KEY+34(2)  = LS_PARTNER-REF_DISPLAY_TYPE.

      INSERT VALUE #( REF_GUID        = IF_GUID
                      REF_HANDLE      = ''
                      REF_KIND        = IF_REFKIND
                      LOGICAL_KEY     = LF_LOGICAL_KEY
                      OBJECTNAME      = 'PARTNER'
                      FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD PREPARE_PRICE.

  DATA :
    LF_CAL_TYPE  TYPE PRCT_CALCULATION_TYPE,
    LF_COND_RATE TYPE PRCT_COND_RATE,
    LF_ZAEHK     TYPE  PRCT_PP_COUNTER,
    LS_COND      TYPE PRCT_COND_EXTERNAL_CHANGE.

  LF_COND_RATE = IF_COND_RATE.

  CASE IF_COND_TYPE.
    WHEN GF_DEFT_DISC_PER.
      LF_CAL_TYPE = 'A'.
    WHEN OTHERS.
      LF_CAL_TYPE = 'C'.
  ENDCASE.

  CASE IF_COND_TYPE.
    WHEN GF_DEFT_DISC_VAL
      OR GF_DEFT_DISC_PER.
      LF_COND_RATE = LF_COND_RATE * -1.
  ENDCASE.

  READ TABLE IT_OLD_PRICE INTO DATA(LS_OLD_PRICE)
    WITH KEY KSCHL = IF_COND_TYPE.
  IF SY-SUBRC EQ 0.

    DETERMINE_COND_SEQNO(
      EXPORTING
        IT_T683S = GT_T683S
        IT_COND  = IT_OLD_PRICE
        IF_STUNR = LS_OLD_PRICE-STUNR
        IF_ZAEHK = LS_OLD_PRICE-ZAEHK
      IMPORTING
        EF_ZAEHK = LF_ZAEHK ).

    LS_COND-STUNR = LS_OLD_PRICE-STUNR.
    LS_COND-ZAEHK = LF_ZAEHK.
    LS_COND-KBETR = LF_COND_RATE.
    LS_COND-WAERS = LS_OLD_PRICE-WAERS.

    INSERT LS_COND INTO TABLE CS_PRICE-COND_CHANGE.
    CLEAR LS_COND.
  ELSE.
    INSERT VALUE #( KSCHL       = IF_COND_TYPE
                    WAERS       = IF_COND_CURR
                    KRECH       = LF_CAL_TYPE
                    KBETR       = LF_COND_RATE )
                    INTO TABLE CS_PRICE-COND_ADD.
  ENDIF.


ENDMETHOD.


METHOD PREPARE_SCHEDLIN.

  DATA :
    LT_SCHEDLIN_EXTDT  TYPE CRMT_SCHEDLIN_EXTDT.

  CLEAR: GT_NAMETAB[],
         LT_SCHEDLIN_EXTDT[].

  MC_NAMETAB :
    'QUANTITY'.

  READ TABLE IT_OLD_SCHEDLIN ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULE>)
    WITH KEY ITEM_GUID = IF_GUID.
  IF SY-SUBRC EQ 0.
    INSERT VALUE #( GUID        = <LFS_SCHEDULE>-GUID
                    ITEM_GUID   = IF_GUID
                    QUANTITY    = IF_QUANTITY
                    LOGICAL_KEY = <LFS_SCHEDULE>-GUID
                    MODE        = 'B' ) INTO TABLE LT_SCHEDLIN_EXTDT.

    INSERT VALUE #( REF_GUID    = IF_GUID
                    SCHEDLINES  = LT_SCHEDLIN_EXTDT ) INTO TABLE CT_SCHEDLIN_I.


    INSERT VALUE #( REF_GUID    = IF_GUID
                    REF_KIND    = IF_REFKIND
                    OBJECTNAME  = 'SCHEDLIN'
                    LOGICAL_KEY = <LFS_SCHEDULE>-GUID
                    FIELD_NAMES = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].
  ELSE.
    INSERT VALUE #( QUANTITY    = IF_QUANTITY ) INTO TABLE LT_SCHEDLIN_EXTDT.

    INSERT VALUE #( REF_GUID    = IF_GUID
                    SCHEDLINES  = LT_SCHEDLIN_EXTDT ) INTO TABLE CT_SCHEDLIN_I.

    INSERT VALUE #( REF_GUID    = IF_GUID
                    REF_KIND    = IF_REFKIND
                    OBJECTNAME  = 'SCHEDLIN'
                    FIELD_NAMES = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].
  ENDIF.

ENDMETHOD.


METHOD PREPARE_SERVICE_OS.

  DATA :
    LT_REFOBJ_DEL    TYPE CRMT_SRV_REFOBJ_COMT,
    LS_SERVICE_OS    TYPE CRMT_SRV_OSSET_COM,
    LS_OS_COM        TYPE CRMT_SRV_OSSET_COM1,
    LF_MAIN_OBJECT   TYPE CRMT_SRV_MAIN_OBJECT ##NEEDED,
    LF_INDEX         TYPE SY-INDEX,
    LF_GUID          TYPE GUID_16,
    LF_EQUIPMENT_ID  TYPE EQUNR,
    LF_REFOBJECT     TYPE FLAG,
    LF_EQUIPMENT_CHG TYPE FLAG,
    LF_MODE          TYPE CRMT_MODE.

  CLEAR:
    GT_NAMETAB[],
    LT_REFOBJ_DEL[],
    LS_SERVICE_OS,
    LS_OS_COM,
    LF_REFOBJECT,
    LF_EQUIPMENT_CHG,
    LF_INDEX.

  LF_MODE = 'A'.
  READ TABLE IT_OLD_SERVICE_OS ASSIGNING FIELD-SYMBOL(<LFS_OLD_SERVICE_OS>)
    WITH KEY REF_KIND = IF_REFKIND
             GUID_SET = IF_GUID.
  IF SY-SUBRC EQ 0.
    READ TABLE <LFS_OLD_SERVICE_OS>-OSSET ASSIGNING FIELD-SYMBOL(<LFS_OSSET>)
      WITH KEY SUBJECT_PROFILE = GF_DEFT_SUBJECT_PROFILE
               PROFILE_TYPE = 'A'.
    IF SY-SUBRC EQ 0.
      READ TABLE <LFS_OSSET>-REFOBJECT ASSIGNING FIELD-SYMBOL(<LFS_REFOBJECT>)
        WITH KEY MAIN_OBJECT = 'X'.
      IF SY-SUBRC EQ 0.
        IF IF_PRODUCT_ID <> <LFS_REFOBJECT>-PRODUCT_ID.
          INSERT VALUE #( REF_GUID        = <LFS_REFOBJECT>-GUID
                          MODE            = 'D' ) INTO TABLE LT_REFOBJ_DEL.
        ENDIF.
      ENDIF.

      LOOP AT IT_EQUIPMENT_ID ASSIGNING FIELD-SYMBOL(<LFS_EQUIPMENT>).
        LF_INDEX = LF_INDEX + 1.
        READ TABLE <LFS_OSSET>-REFOBJECT ASSIGNING <LFS_REFOBJECT> INDEX LF_INDEX.
        IF SY-SUBRC <> 0.
          LF_EQUIPMENT_CHG = 'X'.
          EXIT.
        ELSE.
          LF_EQUIPMENT_ID = |{ <LFS_EQUIPMENT>-EQUIPMENT_ID ALPHA = IN }|.
          IF LF_EQUIPMENT_ID <> <LFS_REFOBJECT>-EQUIPMENT_ID.
            LF_EQUIPMENT_CHG = 'X'.
            EXIT.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF LF_EQUIPMENT_CHG EQ 'X'.
        LOOP AT <LFS_OSSET>-REFOBJECT ASSIGNING <LFS_REFOBJECT>.
          INSERT VALUE #( REF_GUID        = <LFS_REFOBJECT>-GUID
                          MODE            = 'D' ) INTO TABLE LT_REFOBJ_DEL.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.

  IF LF_REFOBJECT EQ 'X'.
    IF LT_REFOBJ_DEL[] IS INITIAL.
      RETURN.
    ELSE.
      LS_OS_COM-REFOBJECT = LT_REFOBJ_DEL[].
    ENDIF.
  ENDIF.

  IF IF_PRODUCT_ID IS NOT INITIAL.
    CALL FUNCTION 'CRM_GUID_CREATE'
      IMPORTING
        EV_GUID = LF_GUID.

    MC_NAMETAB :
      "'MAIN_OBJECT',
      'TYPE_OBJECT',
      'PRODUCT_ID'.

    INSERT VALUE #( REF_GUID        = LF_GUID
                    MODE            = 'A'
                    REF_HANDLE      = IF_HANDLE
                    TYPE_OBJECT     = 'A'
                    PRODUCT_ID      = IF_PRODUCT_ID
                    "MAIN_OBJECT     = 'X'
                    ) INTO TABLE LS_OS_COM-REFOBJECT.
  ELSE.
    MC_NAMETAB :
      "'MAIN_OBJECT',
      'TYPE_OBJECT',
      'EQUIPMENT_ID'.

    CLEAR LF_INDEX.
    LOOP AT IT_EQUIPMENT_ID ASSIGNING <LFS_EQUIPMENT>.
      LF_INDEX = LF_INDEX + 1.

      CALL FUNCTION 'CRM_GUID_CREATE'
        IMPORTING
          EV_GUID = LF_GUID.

      CASE LF_INDEX.
        WHEN 1.
          LF_MAIN_OBJECT = 'X'.
        WHEN OTHERS.
          LF_MAIN_OBJECT = ''.
      ENDCASE.

      INSERT VALUE #( REF_GUID        = LF_GUID
                      MODE            = 'A'
                      TYPE_OBJECT     = 'C'
                      REF_HANDLE      = IF_HANDLE
                      EQUIPMENT_ID    = <LFS_EQUIPMENT>-EQUIPMENT_ID
                      "MAIN_OBJECT     = LF_MAIN_OBJECT
                      ) INTO TABLE LS_OS_COM-REFOBJECT.
    ENDLOOP.
  ENDIF.

  LS_OS_COM-REF_HANDLE      = IF_HANDLE.
  LS_OS_COM-REF_GUID        = IF_GUID.
  LS_OS_COM-MODE            = LF_MODE.
  LS_OS_COM-SUBJECT_PROFILE = GF_DEFT_SUBJECT_PROFILE.
  LS_OS_COM-PROFILE_TYPE    = 'A'.
  APPEND LS_OS_COM TO LS_SERVICE_OS-OSSET.

  LS_SERVICE_OS-REF_HANDLE      = IF_HANDLE.
  LS_SERVICE_OS-REF_GUID        = IF_GUID.
  LS_SERVICE_OS-REF_KIND        = IF_REFKIND.
  LS_SERVICE_OS-MODE            = LF_MODE.

  APPEND LS_SERVICE_OS TO CT_SERVICE_OS.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'SERVICE_OS'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

ENDMETHOD.


METHOD PREPARE_STATUS.

  DATA :
    LF_ESTAT           TYPE J_ESTAT.

  MAP_STATUS(
    EXPORTING
      IF_STATUS = IF_STATUS
    IMPORTING
      EF_ESTAT  = LF_ESTAT ).

  CLEAR: GT_NAMETAB[].
  INSERT VALUE #( REF_HANDLE      = IF_HANDLE
                  REF_GUID        = IF_GUID
                  REF_KIND        = IF_REFKIND
                  STATUS          = LF_ESTAT
                  USER_STAT_PROC  = GF_DEFT_STATUS_PROFILE
                  ACTIVATE        = 'X' ) INTO TABLE CT_STATUS.

  MC_NAMETAB :
    'STATUS',
    'USER_STAT_PROC',
    'ACTIVATE'.

  INSERT VALUE #( REF_GUID        = IF_GUID
                  REF_HANDLE      = IF_HANDLE
                  REF_KIND        = IF_REFKIND
                  OBJECTNAME      = 'STATUS'
                  FIELD_NAMES     = GT_NAMETAB ) INTO TABLE CT_INPUT_FIELDS[].

ENDMETHOD.


METHOD READ_LOGCRM.

  DATA :
    LF_GUID    TYPE CRMT_OBJECT_GUID,
    LF_EXTGUID TYPE BALHDR-EXTNUMBER,
    LT_MESSAGE TYPE STANDARD TABLE OF BALM,
    LS_MESSAGE TYPE BALM.

  CLEAR CT_MESSAGE.

  IF IF_OBJECT_ID IS NOT INITIAL.

    GET_GUID_FROM_DB(
      EXPORTING
        IF_OBJTYPE_H = GC_OBJTYPE_SVORDER
        IF_OBJECT_ID = IF_OBJECT_ID
      IMPORTING
        EF_GUID      = LF_GUID ).

    LF_EXTGUID = LF_GUID.

    CALL FUNCTION 'APPL_LOG_READ_DB'
      EXPORTING
        OBJECT           = '*'
        SUBOBJECT        = '*'
        EXTERNAL_NUMBER  = LF_EXTGUID
        DATE_FROM        = '00000000'
        DATE_TO          = SY-DATUM
        TIME_FROM        = '000000'
        TIME_TO          = SY-UZEIT
        LOG_CLASS        = '4'
        PROGRAM_NAME     = '*'
        TRANSACTION_CODE = '*'
        USER_ID          = ' '
        MODE             = '+'
        PUT_INTO_MEMORY  = ' '
      TABLES
        MESSAGES         = LT_MESSAGE.

    LOOP AT LT_MESSAGE INTO LS_MESSAGE     ##INTO_OK.

      APPEND INITIAL LINE TO CT_MESSAGE ASSIGNING FIELD-SYMBOL(<LFS_MSG>).
      <LFS_MSG>-RESP_STATUS = LS_MESSAGE-MSGTY.

      CALL FUNCTION 'FORMAT_MESSAGE'
        EXPORTING
          ID        = LS_MESSAGE-MSGID
          LANG      = '-D'
          NO        = LS_MESSAGE-MSGNO
          V1        = LS_MESSAGE-MSGV1
          V2        = LS_MESSAGE-MSGV2
          V3        = LS_MESSAGE-MSGV3
          V4        = LS_MESSAGE-MSGV4
        IMPORTING
          MSG       = <LFS_MSG>-RESP_MESSAGE
        EXCEPTIONS
          NOT_FOUND = 1
          OTHERS    = 2 ##FM_SUBRC_OK.

    ENDLOOP.
  ENDIF.

  IF CT_MESSAGE IS INITIAL.
    APPEND INITIAL LINE TO CT_MESSAGE ASSIGNING <LFS_MSG>.
  ENDIF.

ENDMETHOD.


METHOD UPDATE_TAX.

  TYPES : BEGIN OF LTY_ADDRNO,
            ADDR_NR TYPE AD_ADDRNUM,
          END OF LTY_ADDRNO.

  DATA :
    LRT_ADDRNUMBER TYPE RANGE OF AD_ADDRNUM,
    LT_ADDRNO      TYPE STANDARD TABLE OF LTY_ADDRNO,
    LW_ADDRNO      TYPE LTY_ADDRNO,

    LT_ADRC_D      TYPE STANDARD TABLE OF  ADRC,
    LT_ADRC_U      TYPE STANDARD TABLE OF  ADRC,
    LT_ADRC_I      TYPE STANDARD TABLE OF  ADRC,
    LT_ADRCT_D     TYPE STANDARD TABLE OF  ADRCT,
    LT_ADRCT_U     TYPE STANDARD TABLE OF  ADRCT,
    LT_ADRCT_I     TYPE STANDARD TABLE OF  ADRCT,
    LT_ADRP_D      TYPE STANDARD TABLE OF  ADRP,
    LT_ADRP_U      TYPE STANDARD TABLE OF  ADRP,
    LT_ADRP_I      TYPE STANDARD TABLE OF  ADRP,
    LT_ADCP_D      TYPE STANDARD TABLE OF  ADCP,
    LT_ADCP_U      TYPE STANDARD TABLE OF  ADCP,
    LT_ADCP_I      TYPE STANDARD TABLE OF  ADCP,
    LT_ADRT_D      TYPE STANDARD TABLE OF  ADRT,
    LT_ADRT_U      TYPE STANDARD TABLE OF  ADRT,
    LT_ADRT_I      TYPE STANDARD TABLE OF  ADRT,
    LT_ADR2_D      TYPE STANDARD TABLE OF  ADR2,
    LT_ADR2_U      TYPE STANDARD TABLE OF  ADR2,
    LT_ADR2_I      TYPE STANDARD TABLE OF  ADR2,
    LT_ADR3_D      TYPE STANDARD TABLE OF  ADR3,
    LT_ADR3_U      TYPE STANDARD TABLE OF  ADR3,
    LT_ADR3_I      TYPE STANDARD TABLE OF  ADR3,
    LT_ADR4_D      TYPE STANDARD TABLE OF  ADR4,
    LT_ADR4_U      TYPE STANDARD TABLE OF  ADR4,
    LT_ADR4_I      TYPE STANDARD TABLE OF  ADR4,
    LT_ADR5_D      TYPE STANDARD TABLE OF  ADR5,
    LT_ADR5_U      TYPE STANDARD TABLE OF  ADR5,
    LT_ADR5_I      TYPE STANDARD TABLE OF  ADR5,
    LT_ADR6_D      TYPE STANDARD TABLE OF  ADR6,
    LT_ADR6_U      TYPE STANDARD TABLE OF  ADR6,
    LT_ADR6_I      TYPE STANDARD TABLE OF  ADR6,
    LT_ADR7_D      TYPE STANDARD TABLE OF  ADR7,
    LT_ADR7_U      TYPE STANDARD TABLE OF  ADR7,
    LT_ADR7_I      TYPE STANDARD TABLE OF  ADR7,
    LT_ADR8_D      TYPE STANDARD TABLE OF  ADR8,
    LT_ADR8_U      TYPE STANDARD TABLE OF  ADR8,
    LT_ADR8_I      TYPE STANDARD TABLE OF  ADR8,
    LT_ADR9_D      TYPE STANDARD TABLE OF  ADR9,
    LT_ADR9_U      TYPE STANDARD TABLE OF  ADR9,
    LT_ADR9_I      TYPE STANDARD TABLE OF  ADR9,
    LT_ADR10_D     TYPE STANDARD TABLE OF  ADR10,
    LT_ADR10_U     TYPE STANDARD TABLE OF  ADR10,
    LT_ADR10_I     TYPE STANDARD TABLE OF  ADR10,
    LT_ADR11_D     TYPE STANDARD TABLE OF  ADR11,
    LT_ADR11_U     TYPE STANDARD TABLE OF  ADR11,
    LT_ADR11_I     TYPE STANDARD TABLE OF  ADR11,
    LT_ADR12_D     TYPE STANDARD TABLE OF  ADR12,
    LT_ADR12_U     TYPE STANDARD TABLE OF  ADR12,
    LT_ADR12_I     TYPE STANDARD TABLE OF  ADR12,
    LT_ADR13_D     TYPE STANDARD TABLE OF  ADR13,
    LT_ADR13_U     TYPE STANDARD TABLE OF  ADR13,
    LT_ADR13_I     TYPE STANDARD TABLE OF  ADR13,
    LT_ADRCOMC_D   TYPE STANDARD TABLE OF  ADRCOMC,
    LT_ADRCOMC_U   TYPE STANDARD TABLE OF  ADRCOMC,
    LT_ADRCOMC_I   TYPE STANDARD TABLE OF  ADRCOMC,
    LT_ADRV_D      TYPE STANDARD TABLE OF  ADRV,
    LT_ADRV_U      TYPE STANDARD TABLE OF  ADRV,
    LT_ADRV_I      TYPE STANDARD TABLE OF  ADRV,
    LT_ADRVP_D     TYPE STANDARD TABLE OF  ADRVP,
    LT_ADRVP_U     TYPE STANDARD TABLE OF  ADRVP,
    LT_ADRVP_I     TYPE STANDARD TABLE OF  ADRVP.

  IF IF_TAXJURCODE IS INITIAL.
    RETURN.
  ENDIF.

  CLEAR :
    LRT_ADDRNUMBER,
    LT_ADDRNO.

  LOOP AT IT_OLD_PARTNER ASSIGNING FIELD-SYMBOL(<LFS_PARTNER>)
                         WHERE REF_PARTNER_NO = GF_DEFT_PARTNER_ONETIME "#EC CI_SORTSEQ
                         AND   ADDR_TYPE      = '1'
                         AND   ADDR_ORIGIN    = 'B'.
    LW_ADDRNO-ADDR_NR = <LFS_PARTNER>-ADDR_NR.
    COLLECT LW_ADDRNO INTO LT_ADDRNO.
  ENDLOOP.

  IF LT_ADDRNO IS INITIAL.
    RETURN.
  ENDIF.

  LRT_ADDRNUMBER = VALUE #( FOR LW_ADDRNO2 IN LT_ADDRNO
                  ( SIGN = 'I'
                    OPTION = 'EQ'
                    LOW = LW_ADDRNO2-ADDR_NR )
                  ).

  IF LRT_ADDRNUMBER IS INITIAL.
    RETURN.
  ENDIF.

  CLEAR :
    LT_ADRC_D,
    LT_ADRC_U,
    LT_ADRC_I,
    LT_ADRCT_D,
    LT_ADRCT_U,
    LT_ADRCT_I,
    LT_ADRP_D,
    LT_ADRP_U,
    LT_ADRP_I,
    LT_ADCP_D,
    LT_ADCP_U,
    LT_ADCP_I,
    LT_ADRT_D,
    LT_ADRT_U,
    LT_ADRT_I,
    LT_ADR2_D,
    LT_ADR2_U,
    LT_ADR2_I,
    LT_ADR3_D,
    LT_ADR3_U,
    LT_ADR3_I,
    LT_ADR4_D,
    LT_ADR4_U,
    LT_ADR4_I,
    LT_ADR5_D,
    LT_ADR5_U,
    LT_ADR5_I,
    LT_ADR6_D,
    LT_ADR6_U,
    LT_ADR6_I,
    LT_ADR7_D,
    LT_ADR7_U,
    LT_ADR7_I,
    LT_ADR8_D,
    LT_ADR8_U,
    LT_ADR8_I,
    LT_ADR9_D,
    LT_ADR9_U,
    LT_ADR9_I,
    LT_ADR10_D,
    LT_ADR10_U,
    LT_ADR10_I,
    LT_ADR11_D,
    LT_ADR11_U,
    LT_ADR11_I,
    LT_ADR12_D,
    LT_ADR12_U,
    LT_ADR12_I,
    LT_ADR13_D,
    LT_ADR13_U,
    LT_ADR13_I,
    LT_ADRCOMC_D,
    LT_ADRCOMC_U,
    LT_ADRCOMC_I,
    LT_ADRV_D,
    LT_ADRV_U,
    LT_ADRV_I,
    LT_ADRVP_D,
    LT_ADRVP_U,
    LT_ADRVP_I.

  WAIT UP TO 1 SECONDS.

  SELECT FROM ADRC
    FIELDS *
    WHERE ADDRNUMBER IN @LRT_ADDRNUMBER
    INTO TABLE @LT_ADRC_U.

  IF LT_ADRC_U IS INITIAL.
    RETURN.
  ENDIF.

  LOOP AT LT_ADRC_U ASSIGNING FIELD-SYMBOL(<LFS_ADRC>).
    <LFS_ADRC>-TAXJURCODE = IF_TAXJURCODE.
  ENDLOOP.

  CALL FUNCTION 'ADDR_SAVE_INTERN'
    TABLES
      ADRC_D         = LT_ADRC_D
      ADRC_U         = LT_ADRC_U
      ADRC_I         = LT_ADRC_I
      ADRCT_D        = LT_ADRCT_D
      ADRCT_U        = LT_ADRCT_U
      ADRCT_I        = LT_ADRCT_I
      ADRP_D         = LT_ADRP_D
      ADRP_U         = LT_ADRP_U
      ADRP_I         = LT_ADRP_I
      ADCP_D         = LT_ADCP_D
      ADCP_U         = LT_ADCP_U
      ADCP_I         = LT_ADCP_I
      ADRT_D         = LT_ADRT_D
      ADRT_U         = LT_ADRT_U
      ADRT_I         = LT_ADRT_I
      ADR2_D         = LT_ADR2_D
      ADR2_U         = LT_ADR2_U
      ADR2_I         = LT_ADR2_I
      ADR3_D         = LT_ADR3_D
      ADR3_U         = LT_ADR3_U
      ADR3_I         = LT_ADR3_I
      ADR4_D         = LT_ADR4_D
      ADR4_U         = LT_ADR4_U
      ADR4_I         = LT_ADR4_I
      ADR5_D         = LT_ADR5_D
      ADR5_U         = LT_ADR5_U
      ADR5_I         = LT_ADR5_I
      ADR6_D         = LT_ADR6_D
      ADR6_U         = LT_ADR6_U
      ADR6_I         = LT_ADR6_I
      ADR7_D         = LT_ADR7_D
      ADR7_U         = LT_ADR7_U
      ADR7_I         = LT_ADR7_I
      ADR8_D         = LT_ADR8_D
      ADR8_U         = LT_ADR8_U
      ADR8_I         = LT_ADR8_I
      ADR9_D         = LT_ADR9_D
      ADR9_U         = LT_ADR9_U
      ADR9_I         = LT_ADR9_I
      ADR10_D        = LT_ADR10_D
      ADR10_U        = LT_ADR10_U
      ADR10_I        = LT_ADR10_I
      ADR11_D        = LT_ADR11_D
      ADR11_U        = LT_ADR11_U
      ADR11_I        = LT_ADR11_I
      ADR12_D        = LT_ADR12_D
      ADR12_U        = LT_ADR12_U
      ADR12_I        = LT_ADR12_I
      ADR13_D        = LT_ADR13_D
      ADR13_U        = LT_ADR13_U
      ADR13_I        = LT_ADR13_I
      ADRCOMC_D      = LT_ADRCOMC_D
      ADRCOMC_U      = LT_ADRCOMC_U
      ADRCOMC_I      = LT_ADRCOMC_I
      ADRV_D         = LT_ADRV_D
      ADRV_U         = LT_ADRV_U
      ADRV_I         = LT_ADRV_I
      ADRVP_D        = LT_ADRVP_D
      ADRVP_U        = LT_ADRVP_U
      ADRVP_I        = LT_ADRVP_I
    EXCEPTIONS
      DATABASE_ERROR = 1
      INTERNAL_ERROR = 2
      OTHERS         = 3 ##FM_SUBRC_OK.

ENDMETHOD.


METHOD VALIDATE_BP.

  DATA:
    LF_PARTNER_FCT TYPE COMT_PARTNER_FCT ##NEEDED,
    LF_PARTNER_NO  TYPE CRMT_PARTNER_NO,
    LF_MSGV1       TYPE SY-MSGV1,
    LF_MSGV2       TYPE SY-MSGV2,
    LF_INVALID     TYPE FLAG.

  IF IF_PARTNER_FCT IS NOT INITIAL AND
     CF_PARTNER_NO IS NOT INITIAL.
    LF_PARTNER_NO = CF_PARTNER_NO.
    VALIDATE_CRM_PARTNER(
      EXPORTING
        IF_PARTNER_FCT = IF_PARTNER_FCT
        IF_PARTNER_NO  = LF_PARTNER_NO
      IMPORTING
        EF_PARTNER_FCT = LF_PARTNER_FCT
        EF_PARTNER_NO  = CF_PARTNER_NO
        EF_INVALID     = LF_INVALID ).

    IF LF_INVALID EQ 'X'.
      LF_MSGV1 = IF_FIELDNAME.
      LF_MSGV2 = LF_PARTNER_NO.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD VALIDATE_CRM_PARTNER.

  CONSTANTS:
    LC_EMP_RESP TYPE  CRMC_PARTNER_FCT-PARTNER_FCT VALUE '00000014',
    LC_TYPE     TYPE  BUT0ID-TYPE VALUE 'HCM001'.

  DATA:
    LF_PARTNER  TYPE  BUT000-PARTNER,
    LF_PERNR    TYPE  PA0001-PERNR,
    LF_IDNUMBER TYPE  BUT0ID-IDNUMBER.


* Initialize Output
  CLEAR: EF_PARTNER_FCT,
         EF_PARTNER_NO,
         EF_INVALID.

* Validate Funcion
  SELECT A~PARTNER_FCT,
         A~PARTNER_PFT,
         B~NRART
    FROM CRMC_PARTNER_FCT AS A
           LEFT OUTER JOIN CRMC_PARTNER_2R3 AS B       "#EC CI_BUFFJOIN
             ON  B~PARTNER_FCT = A~PARTNER_FCT
   WHERE A~PARTNER_FCT EQ @IF_PARTNER_FCT
   ORDER BY A~PARTNER_FCT ASCENDING
    INTO @DATA(LS_PARTNER_FCT)
      UP TO 1 ROWS.
  ENDSELECT.
  IF SY-SUBRC NE 0.
    EF_INVALID = 'X'.
    RETURN.
  ENDIF.

  CASE LS_PARTNER_FCT-PARTNER_FCT.

*   --------------------------
*   Employee Response --> Convert Employee code to partner number
*   --------------------------
    WHEN LC_EMP_RESP.
      IF IF_PARTNER_NO CO '0123456789 '.
        LF_PERNR    = IF_PARTNER_NO.
        LF_IDNUMBER = LF_PERNR.
        SELECT PARTNER
          FROM BUT0ID
         WHERE TYPE     EQ @LC_TYPE
           AND IDNUMBER EQ @LF_IDNUMBER
         ORDER BY PRIMARY KEY
          INTO @LF_PARTNER
            UP TO 1 ROWS.
        ENDSELECT.
        IF SY-SUBRC NE 0.
          EF_INVALID = 'X'.
          RETURN.
        ENDIF.
      ELSE.
        EF_INVALID = 'X'.
        RETURN.
      ENDIF.

*   --------------------------
*   Other Partner Functions
*   --------------------------
    WHEN OTHERS.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = IF_PARTNER_NO
        IMPORTING
          OUTPUT = LF_PARTNER.

      SELECT SINGLE PARTNER
        FROM BUT000
       WHERE PARTNER EQ @LF_PARTNER
        INTO @LF_PARTNER.
      IF SY-SUBRC NE 0.
        EF_INVALID = 'X'.
        RETURN.
      ENDIF.
  ENDCASE.

* Assign Result
  EF_PARTNER_FCT = LS_PARTNER_FCT-PARTNER_FCT.
  EF_PARTNER_NO  = LF_PARTNER.

ENDMETHOD.


METHOD VALIDATE_DOMAIN.

  DATA :
    LF_DOMVALUE TYPE DOMVALUE_L,
    LF_MSGV1    TYPE SY-MSGV1,
    LF_MSGV2    TYPE SY-MSGV2.

  IF IF_DOMVALUE IS NOT INITIAL.
    LF_DOMVALUE = IF_DOMVALUE.
    SELECT SINGLE FROM  ##WARN_OK  ##NEEDED
      DD07L
      FIELDS DOMVALUE_L
      WHERE DOMNAME EQ @IF_DOMNAME
      AND   DOMVALUE_L  EQ @LF_DOMVALUE
      INTO @DATA(LF_DOMVALUE_L).
    IF SY-SUBRC <> 0.
      LF_MSGV1 = IF_FIELDNAME.
      LF_MSGV2 = LF_DOMVALUE.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD VALIDATE_MATERIAL.

  DATA :
    LF_MATNR TYPE MARA-MATNR  ##NEEDED,
    LF_MSGV1 TYPE SY-MSGV1,
    LF_MSGV2 TYPE SY-MSGV2.

  IF IF_MATNR IS NOT INITIAL.
    LF_MATNR = IF_MATNR.
    SELECT SINGLE FROM   ##NEEDED
      MARA
      FIELDS MATNR
      WHERE MATNR EQ @IF_MATNR
      INTO @DATA(LF_MATNR2).
    IF SY-SUBRC <> 0.
      LF_MSGV1 = IF_FIELDNAME.
      LF_MSGV2 = IF_MATNR.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD VALIDATE_PARTNER_FCT.

  DATA :
    LF_MSGV1      TYPE SY-MSGV1,
    LF_MSGV2      TYPE SY-MSGV2.

  IF IF_PARTNER_FCT IS NOT INITIAL.
    SELECT SINGLE FROM  ##NEEDED
      CRMC_PARTNER_FCT
      FIELDS PARTNER_FCT
      WHERE PARTNER_FCT EQ @IF_PARTNER_FCT
      INTO @DATA(LF_PARTNER_FCT).
    IF SY-SUBRC <> 0.
      LF_MSGV1 = IF_FIELDNAME.
      LF_MSGV2 = IF_PARTNER_FCT.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD VALIDATE_PROCESS_TYPE.

  DATA LF_MSGV1 TYPE SY-MSGV1.

  SELECT FROM CRMC_PROC_TYPE
    FIELDS PROCESS_TYPE
    WHERE PROCESS_TYPE LIKE 'ZR%%'
    AND   PROCESS_BLOCKED <> 'X'
    INTO TABLE @DATA(LT_PROCESS_TYPE).
  IF SY-SUBRC EQ 0.
    SORT LT_PROCESS_TYPE BY PROCESS_TYPE.
  ENDIF.

  READ TABLE LT_PROCESS_TYPE TRANSPORTING NO FIELDS
    WITH KEY PROCESS_TYPE = IF_PROCESS_TYPE
    BINARY SEARCH.
  IF SY-SUBRC <> 0.
    LF_MSGV1 = IF_PROCESS_TYPE.
*   Error: Invalid Order Type value &1.
    ASSIGN_MESSAGE(
      EXPORTING
        IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
        IF_MSGNO    = '002'
        IF_MSGV1    = LF_MSGV1
      CHANGING
        CS_RESPONSE = CS_RESPONSE ).
    RETURN.
  ENDIF.

ENDMETHOD.


METHOD VALIDATE_SVORDER.

  DATA :
    LF_MSGV1         TYPE SY-MSGV1,
    LF_MSGV2         TYPE SY-MSGV2,
    LF_DATE          TYPE SY-DATLO,
    LF_TIME          TYPE SY-TIMLO,
    LF_GUID_REFER    TYPE GUID_16,
    LF_QUANTITY      TYPE CHAR20,
    LF_NUMBER_INIT   TYPE CRMT_ITEM_NO,
    LF_LOG_HANDLE    TYPE BALLOGHNDL,
    LF_GUID          TYPE GUID_16,
    LF_SOLDTO        TYPE KNVV-KUNNR,
    LF_SOLDTO_KEY    TYPE KNVV-KUNNR,
    LF_ITEM_TYPE     TYPE CRMT_ITEM_TYPE_DB,

    LT_DB_ORDERADM_H TYPE CRMT_ORDERADM_H_WRKT,
    LT_DB_ORDERADM_I TYPE CRMT_ORDERADM_I_WRKT,
    LT_GUID          TYPE CRMT_OBJECT_GUID_TAB,

    LRT_KSCHL        TYPE RANGE OF PRCT_COND_TYPE,
    LRT_ZMODE        TYPE RANGE OF ZSDSCMS001-ZMODE,
    LRT_STATUS       TYPE RANGE OF ZSDSCMS001-STATUS.

  DEFINE MC_KSCHL.
    INSERT VALUE #( SIGN  = 'I'
                    OPTION  = 'EQ'
                    LOW = &1 ) INTO TABLE LRT_KSCHL.
  END-OF-DEFINITION.

  DEFINE MC_ZMODE.
    INSERT VALUE #( SIGN  = 'I'
                    OPTION  = 'EQ'
                    LOW = &1 ) INTO TABLE LRT_ZMODE.
  END-OF-DEFINITION.

  DEFINE MC_STATUS.
    INSERT VALUE #( SIGN  = 'I'
                    OPTION  = 'EQ'
                    LOW = &1 ) INTO TABLE LRT_STATUS.
  END-OF-DEFINITION.

  MC_KSCHL :
    'ZSR1',
    'ZPR0'.

  MC_ZMODE :
    SPACE,
    'U',
    'D'.

  MC_STATUS :
    'A',
    'B',
    'C',
    'D'.

  GET_GENC( ).

  IF CS_REQUEST-ZMODE NOT IN LRT_ZMODE.
    LF_MSGV1 = CS_REQUEST-ZMODE.
*   Error: Invalid Mode value &1.
    ASSIGN_MESSAGE(
      EXPORTING
        IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
        IF_MSGNO    = '020'
        IF_MSGV1    = LF_MSGV1
      CHANGING
        CS_RESPONSE = CS_RESPONSE ).
    RETURN.
  ENDIF.

  IF CS_REQUEST-ZMODE EQ SPACE AND
     CS_REQUEST-SF_WORKORDER_NO IS NOT INITIAL.
    SELECT FROM CRMS4D_SERV_H
      FIELDS OBJECT_ID
      WHERE OBJTYPE_H       EQ @GC_OBJTYPE_SVORDER
      AND   PO_NUMBER_SOLD  EQ @CS_REQUEST-SF_WORKORDER_NO
     ORDER BY PRIMARY KEY
      INTO @DATA(LV_OBJECT_ID)
        UP TO 1 ROWS.
    ENDSELECT.
    IF SY-SUBRC EQ 0.
      LF_MSGV1 = CS_REQUEST-SF_WORKORDER_NO.
      LF_MSGV2 = LV_OBJECT_ID.
*     Error: SFWorkOrderNo &1 is already created with Service Order &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '039'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

  IF CS_REQUEST-STATUS NOT IN LRT_STATUS.
    LF_MSGV1 = 'Status' ##NO_TEXT.
    LF_MSGV2 = CS_REQUEST-STATUS.
*   Error: Invalid Field &1 value &2.
    ASSIGN_MESSAGE(
      EXPORTING
        IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
        IF_MSGNO    = '022'
        IF_MSGV1    = LF_MSGV1
        IF_MSGV2    = LF_MSGV2
      CHANGING
        CS_RESPONSE = CS_RESPONSE ).
    RETURN.
  ENDIF.

  IF CS_REQUEST-ZMODE EQ 'U' OR
     CS_REQUEST-ZMODE EQ 'D'.
    IF CS_REQUEST-SVO_NO IS INITIAL.
*     Error: Invalid Service Order value &1.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '001'
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

  VALIDATE_SVO_NO(
    EXPORTING
      IF_SVO_NO   = CS_REQUEST-SVO_NO
    CHANGING
      CS_RESPONSE = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  VALIDATE_PROCESS_TYPE(
    EXPORTING
      IF_PROCESS_TYPE = CS_REQUEST-PROCESS_TYPE
    CHANGING
      CS_RESPONSE     = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  VALIDATE_MATERIAL(
    EXPORTING
      IF_FIELDNAME = 'RefProduct'
      IF_MATNR     = CS_REQUEST-PRODUCT_ID
    CHANGING
      CS_RESPONSE  = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  IF CS_REQUEST-REF_SERV_CONTRACT IS NOT INITIAL.
    GET_GUID_FROM_DB(
      EXPORTING
        IF_OBJTYPE_H = GC_OBJTYPE_SVCONTRACT
        IF_OBJECT_ID = CS_REQUEST-REF_SERV_CONTRACT
      IMPORTING
        EF_GUID      = LF_GUID_REFER ).
    IF LF_GUID_REFER IS INITIAL.
*     Error: Invalid Format &1 value &2
      LF_MSGV1 = CS_REQUEST-REF_SERV_CONTRACT.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '021'
          IF_MSGV1    = LF_MSGV1
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

  IF CS_REQUEST-START_DATE IS NOT INITIAL.
    ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME(
      EXPORTING
        IF_INPUT         = CS_REQUEST-START_DATE
      IMPORTING
        EF_DATUM         = LF_DATE
        EF_UZEIT         = LF_TIME
      EXCEPTIONS
        CONVERSION_ERROR = 1
        OTHERS           = 2 ).
    IF SY-SUBRC EQ 0.
      CLEAR CS_REQUEST-START_DATE.
      CS_REQUEST-START_DATE+0(8) = LF_DATE.
      CS_REQUEST-START_DATE+8(6) = LF_TIME.
    ELSE.
*     Error: Invalid Format &1 value &2
      LF_MSGV1 = CS_REQUEST-START_DATE.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '003'
          IF_MSGV1    = 'StartDate'
          IF_MSGV2    = LF_MSGV1
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

  IF CS_REQUEST-END_DATE IS NOT INITIAL.
    ZCL_SDSCA_REST_INTF_UTILITY=>CONVERT_ISO_TO_DATE_TIME(
      EXPORTING
        IF_INPUT         = CS_REQUEST-END_DATE
      IMPORTING
        EF_DATUM         = LF_DATE
        EF_UZEIT         = LF_TIME
      EXCEPTIONS
        CONVERSION_ERROR = 1
        OTHERS           = 2 ).
    IF SY-SUBRC EQ 0.
      CLEAR CS_REQUEST-END_DATE.
      CS_REQUEST-END_DATE+0(8) = LF_DATE.
      CS_REQUEST-END_DATE+8(6) = LF_TIME.
    ELSE.
*     Error: Invalid Format &1 value &2
      LF_MSGV1 = CS_REQUEST-END_DATE.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '003'
          IF_MSGV1    = 'EndDate'
          IF_MSGV2    = LF_MSGV1
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

  VALIDATE_DOMAIN(
    EXPORTING
      IF_FIELDNAME = 'ProActivity'
      IF_DOMNAME   = 'ZSDSDM_PROACTIVITY'
      IF_DOMVALUE  = CS_REQUEST-ZZ1_PROACTIVITY
    CHANGING
      CS_RESPONSE  = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  VALIDATE_WBS(
    EXPORTING
      IF_FIELDNAME = 'WBS'
      IF_WBS       = CS_REQUEST-WBS
    CHANGING
      CS_RESPONSE  = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  VALIDATE_PARTNER_FCT(
    EXPORTING
      IF_FIELDNAME   = 'OneTime-Function' ##NO_TEXT
      IF_PARTNER_FCT = CS_REQUEST-ONETIME-PARTNER_FCT
    CHANGING
      CS_RESPONSE    = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  VALIDATE_BP(
    EXPORTING
      IF_FIELDNAME   = 'OneTime-BPNumber' ##NO_TEXT
      IF_PARTNER_FCT = CS_REQUEST-ONETIME-PARTNER_FCT
    CHANGING
      CF_PARTNER_NO  = CS_REQUEST-ONETIME-PARTNER_NO
      CS_RESPONSE    = CS_RESPONSE ).
  IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
    RETURN.
  ENDIF.

  CLEAR LF_SOLDTO.
  READ TABLE CS_REQUEST-PARTNER ASSIGNING FIELD-SYMBOL(<LFS_PARTNER>)
    WITH KEY PARTNER_FCT = GC_PARTNER_SOLDTO.
  IF SY-SUBRC EQ 0.
    LF_SOLDTO_KEY = |{ <LFS_PARTNER>-PARTNER_NO ALPHA = IN }|.
    SELECT SINGLE FROM KNVV                        ##WARN_OK "#EC WARNOK
      FIELDS KUNNR
      WHERE KUNNR EQ @LF_SOLDTO_KEY
      AND   VKORG EQ @GF_DEFT_SALES_ORG
      AND   VTWEG EQ @GF_DEFT_DIS_CHANNEL_CHK
      INTO @LF_SOLDTO.
  ENDIF.
  IF LF_SOLDTO IS INITIAL.
*   Error: No pricing procedure could be determined for distribution channel &1.
    LF_MSGV1 = GF_DEFT_DIS_CHANNEL_CHK.
    ASSIGN_MESSAGE(
      EXPORTING
        IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
        IF_MSGNO    = '043'
        IF_MSGV1    = LF_MSGV1
      CHANGING
        CS_RESPONSE = CS_RESPONSE ).
    RETURN.
  ENDIF.

  LOOP AT CS_REQUEST-PARTNER ASSIGNING <LFS_PARTNER>.
    VALIDATE_PARTNER_FCT(
      EXPORTING
        IF_FIELDNAME   = 'PARTNER-Function' ##NO_TEXT
        IF_PARTNER_FCT = <LFS_PARTNER>-PARTNER_FCT
      CHANGING
        CS_RESPONSE    = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    VALIDATE_BP(
      EXPORTING
        IF_FIELDNAME   = 'PARTNER-BPNumber' ##NO_TEXT
        IF_PARTNER_FCT = <LFS_PARTNER>-PARTNER_FCT
      CHANGING
        CF_PARTNER_NO  = <LFS_PARTNER>-PARTNER_NO
        CS_RESPONSE    = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.
  ENDLOOP.

  IF CS_REQUEST-ZMODE EQ 'U'.
    GET_GUID_FROM_DB(
      EXPORTING
        IF_OBJTYPE_H = GC_OBJTYPE_SVORDER
        IF_OBJECT_ID = CS_REQUEST-SVO_NO
      IMPORTING
        EF_GUID      = LF_GUID ).

    IF LF_GUID IS NOT INITIAL.
      INSERT LF_GUID INTO TABLE LT_GUID.

      "Read Service Order
      CALL FUNCTION 'CRM_ORDER_READ'
        EXPORTING
          IT_HEADER_GUID       = LT_GUID
        IMPORTING
          ET_ORDERADM_H        = LT_DB_ORDERADM_H
          ET_ORDERADM_I        = LT_DB_ORDERADM_I
        CHANGING
          CV_LOG_HANDLE        = LF_LOG_HANDLE
        EXCEPTIONS
          DOCUMENT_NOT_FOUND   = 1
          ERROR_OCCURRED       = 2
          DOCUMENT_LOCKED      = 3
          NO_CHANGE_AUTHORITY  = 4
          NO_DISPLAY_AUTHORITY = 5
          NO_CHANGE_ALLOWED    = 6
          OTHERS               = 7 ##FM_SUBRC_OK.

      READ TABLE LT_DB_ORDERADM_H TRANSPORTING NO FIELDS "#EC CI_SORTSEQ
        WITH KEY PROCESS_TYPE = CS_REQUEST-PROCESS_TYPE.
      IF SY-SUBRC <> 0.
*       Error Invalid Order Type &1 with Service Order &2.
        LF_MSGV1 = CS_REQUEST-PROCESS_TYPE.
        LF_MSGV2 = CS_REQUEST-SVO_NO.
        ASSIGN_MESSAGE(
          EXPORTING
            IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
            IF_MSGNO    = '041'
            IF_MSGV1    = LF_MSGV1
            IF_MSGV2    = LF_MSGV2
          CHANGING
            CS_RESPONSE = CS_RESPONSE ).
        RETURN.

      ENDIF.
    ENDIF.
  ENDIF.

  LOOP AT CS_REQUEST-ITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).

    IF <LFS_ITEM>-ZMODE NOT IN LRT_ZMODE.
      LF_MSGV1 = <LFS_ITEM>-ZMODE.
*     Error: Invalid Mode value &1.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '020'
          IF_MSGV1    = LF_MSGV1
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    IF <LFS_ITEM>-STATUS NOT IN LRT_STATUS.
      LF_MSGV1 = 'Status' ##NO_TEXT.
      LF_MSGV2 = <LFS_ITEM>-STATUS.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    IF NOT <LFS_ITEM>-NUMBER_INT CO ' 0123456789' OR
      <LFS_ITEM>-NUMBER_INT IS INITIAL.
      LF_MSGV1 = 'ItemNo' ##NO_TEXT.
      LF_MSGV2 = <LFS_ITEM>-NUMBER_INT.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    IF <LFS_ITEM>-ZMODE EQ 'U'.
      LF_NUMBER_INIT = <LFS_ITEM>-NUMBER_INT.
      READ TABLE LT_DB_ORDERADM_I TRANSPORTING NO FIELDS "#EC CI_SORTSEQ
        WITH KEY NUMBER_INT = LF_NUMBER_INIT.
      IF SY-SUBRC <> 0.
        LF_MSGV1 = <LFS_ITEM>-NUMBER_INT.
        LF_MSGV2 = <LFS_ITEM>-OBJECT_ID.
*       Error Not found Item &1 with Service Order &2.
        ASSIGN_MESSAGE(
          EXPORTING
            IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
            IF_MSGNO    = '040'
            IF_MSGV1    = LF_MSGV1
            IF_MSGV2    = LF_MSGV2
          CHANGING
            CS_RESPONSE = CS_RESPONSE ).
        RETURN.
      ENDIF.
    ENDIF.

    IF NOT <LFS_ITEM>-NUMBER_PARENT CO ' 0123456789'.
      LF_MSGV1 = 'ParentItemNo' ##NO_TEXT.
      LF_MSGV2 = <LFS_ITEM>-NUMBER_PARENT.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    MAP_ITEM_TYPE(
      EXPORTING
        IF_SVO_TYPE       = CS_REQUEST-PROCESS_TYPE
        IF_MATNR          = <LFS_ITEM>-ORDERED_PROD
        IF_IS_BILLING     = <LFS_ITEM>-IS_BILLING
        IF_IS_PR          = <LFS_ITEM>-IS_PR
        IF_WARRANTY_CHECK = <LFS_ITEM>-WARRANTY_CHECK
      IMPORTING
        EF_ITEM_TYPE      = LF_ITEM_TYPE ).
    IF LF_ITEM_TYPE IS INITIAL.
*     Error: No item category could be determined.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '044'
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    VALIDATE_MATERIAL(
      EXPORTING
        IF_FIELDNAME = 'Product' ##NO_TEXT
        IF_MATNR     = <LFS_ITEM>-ORDERED_PROD
      CHANGING
        CS_RESPONSE  = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    VALIDATE_MATERIAL(
      EXPORTING
        IF_FIELDNAME = 'RefProduct' ##NO_TEXT
        IF_MATNR     = <LFS_ITEM>-REF_PRODUCT_ID
      CHANGING
        CS_RESPONSE  = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    VALIDATE_WBS(
      EXPORTING
        IF_FIELDNAME = 'ITEM-WBS' ##NO_TEXT
        IF_WBS       = <LFS_ITEM>-WBS
      CHANGING
        CS_RESPONSE  = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    LF_QUANTITY = <LFS_ITEM>-QUANTITY.
    IF NOT LF_QUANTITY CO ' .0123456789'.
      LF_MSGV1 = 'Quantity' ##NO_TEXT.
      LF_MSGV2 = <LFS_ITEM>-QUANTITY.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
      EXPORTING
        INPUT          = <LFS_ITEM>-PROCESS_QTY_UNIT
      IMPORTING
        OUTPUT         = <LFS_ITEM>-PROCESS_QTY_UNIT
      EXCEPTIONS
        UNIT_NOT_FOUND = 1
        OTHERS         = 2.
    IF SY-SUBRC <> 0.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGID    = SY-MSGID
          IF_MSGNO    = SY-MSGNO
          IF_MSGV1    = SY-MSGV1
          IF_MSGV2    = SY-MSGV2
          IF_MSGV3    = SY-MSGV3
          IF_MSGV4    = SY-MSGV4
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    IF <LFS_ITEM>-KSCHL NOT IN LRT_KSCHL.
      LF_MSGV1 = 'ConditionType'.
      LF_MSGV2 = <LFS_ITEM>-KSCHL.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.

    VALIDATE_DOMAIN(
      EXPORTING
        IF_FIELDNAME = 'IsBilling'
        IF_DOMNAME   = 'ZSDSDM_IS01'
        IF_DOMVALUE  = <LFS_ITEM>-IS_BILLING
      CHANGING
        CS_RESPONSE  = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    VALIDATE_DOMAIN(
      EXPORTING
        IF_FIELDNAME = 'IsPR'
        IF_DOMNAME   = 'ZSDSDM_IS01'
        IF_DOMVALUE  = <LFS_ITEM>-IS_PR
      CHANGING
        CS_RESPONSE  = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    VALIDATE_DOMAIN(
      EXPORTING
        IF_FIELDNAME = 'WarrantyType'
        IF_DOMNAME   = 'ZSDSDM_WARRANTY_CHECK'
        IF_DOMVALUE  = <LFS_ITEM>-WARRANTY_CHECK
      CHANGING
        CS_RESPONSE  = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    IF <LFS_ITEM>-WARRANTY_CHECK EQ GF_WARRANTY_OUT.
      CLEAR <LFS_ITEM>-WBS.
    ENDIF.

    VALIDATE_BP(
      EXPORTING
        IF_FIELDNAME   = 'PartnerBPNumber'
        IF_PARTNER_FCT = GC_PARTNER_EMP_RESPONSE
      CHANGING
        CF_PARTNER_NO  = <LFS_ITEM>-PARTNER_BP
        CS_RESPONSE    = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

    VALIDATE_BP(
      EXPORTING
        IF_FIELDNAME   = 'VendorBPNumber'
        IF_PARTNER_FCT = GC_PARTNER_VENDOR
      CHANGING
        CF_PARTNER_NO  = <LFS_ITEM>-VENDOR_BP
        CS_RESPONSE    = CS_RESPONSE ).
    IF CS_RESPONSE-RESP_STATUS IS NOT INITIAL.
      RETURN.
    ENDIF.

  ENDLOOP.

ENDMETHOD.


METHOD VALIDATE_SVO_NO.

  DATA LF_MSGV1 TYPE SY-MSGV1.

  IF IF_SVO_NO IS NOT INITIAL.
    DATA(LF_SVO_NO) = |{ IF_SVO_NO ALPHA = IN }|.
    SELECT FROM CRMS4D_SERV_H      ##NEEDED
      FIELDS OBJECT_ID
      WHERE OBJTYPE_H EQ @ZCL_SDSCM_SVORDER=>GC_OBJTYPE_SVORDER
      AND   OBJECT_ID EQ @LF_SVO_NO
      INTO TABLE @DATA(LT_SVO_NO).
    IF SY-SUBRC <> 0.
      LF_MSGV1 = IF_SVO_NO.
*     Error: Invalid Service Order value &1.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '001'
          IF_MSGV1    = LF_MSGV1
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD VALIDATE_WBS.

  DATA :
    LF_POSID      TYPE PRPS-POSID,
    LF_MSGV1      TYPE SY-MSGV1,
    LF_MSGV2      TYPE SY-MSGV2.

  IF IF_WBS IS NOT INITIAL.
    LF_POSID = IF_WBS.
    SELECT SINGLE FROM  ##NEEDED
      PRPS
      FIELDS POSID
      WHERE POSID EQ @LF_POSID
      INTO @DATA(LF_POSID2).
    IF SY-SUBRC <> 0.
      LF_MSGV1 = IF_FIELDNAME.
      LF_MSGV2 = IF_WBS.
*     Error: Invalid Field &1 value &2.
      ASSIGN_MESSAGE(
        EXPORTING
          IF_STATUS   = ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR
          IF_MSGNO    = '022'
          IF_MSGV1    = LF_MSGV1
          IF_MSGV2    = LF_MSGV2
        CHANGING
          CS_RESPONSE = CS_RESPONSE ).
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD SYNC_PRICING_WITH_BP.

  TYPES: BEGIN OF TS_PRICING_CHECK,
           CUST_PRIC_PROC TYPE  CRMD_PRICING-CUST_PRIC_PROC,
           PRICE_GRP      TYPE  CRMD_PRICING-PRICE_GRP,
         END OF TS_PRICING_CHECK.

  DATA:
    LT_GUID  TYPE CRMT_GUIDS_TO_SAVE_TAB.

  DATA:
    LS_PRICING_BP TYPE  TS_PRICING_CHECK,
    LS_PRICING    TYPE  TS_PRICING_CHECK.

  DATA:
    LF_PARTNER  TYPE  BUT000-PARTNER.


* Get Soldto
  READ TABLE IT_PARTNER ASSIGNING FIELD-SYMBOL(<L_PARTNER>) "#EC CI_SORTSEQ
                        WITH KEY REF_KIND        = GC_REFKIND_HEAD
                                 REF_PARTNER_FCT = GC_PARTNER_SOLDTO.
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

* Get Org data
  READ TABLE IT_ORGMAN ASSIGNING FIELD-SYMBOL(<L_ORGMAN>)
                       WITH KEY GUID = IF_GUID.
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

* Assign Sold-to
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = <L_PARTNER>-PARTNER_NO
    IMPORTING
      OUTPUT = LF_PARTNER.

* Read Customer Master
  SELECT C~KALKS,
         C~KONDA
    FROM BUT000 AS A
           INNER JOIN CVI_CUST_LINK AS B
             ON  B~PARTNER_GUID = A~PARTNER_GUID
           INNER JOIN KNVV AS C
             ON  C~KUNNR = B~CUSTOMER
             AND C~VKORG = @<L_ORGMAN>-SALES_ORG_SD
             AND C~VTWEG = @<L_ORGMAN>-DIS_CHANNEL
             AND C~SPART = @<L_ORGMAN>-DIVISION
   WHERE A~PARTNER EQ @LF_PARTNER
   ORDER BY A~PARTNER ASCENDING
    INTO @LS_PRICING_BP
      UP TO 1 ROWS.
  ENDSELECT.
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

* Check and Update Pricing from BP Master
  CLEAR LT_GUID.
  LOOP AT CT_PRICING ASSIGNING FIELD-SYMBOL(<L_PRICING>).

    CLEAR LS_PRICING.
    MOVE-CORRESPONDING <L_PRICING> TO LS_PRICING.

*   Only when data different
    CHECK LS_PRICING NE LS_PRICING_BP.

*   Update data from BP
    MOVE-CORRESPONDING LS_PRICING_BP TO <L_PRICING>.

*   Update into Buffer
    CALL FUNCTION 'CRM_PRICING_PUT_OB'
      EXPORTING
        IS_PRICING_WRK = <L_PRICING>
      EXCEPTIONS
        ERROR_OCCURRED = 1
        OTHERS         = 2.
    IF SY-SUBRC <> 0.
      CONTINUE.
    ENDIF.

    INSERT VALUE #( HEADER = <L_PRICING>-GUID ) INTO TABLE LT_GUID.

  ENDLOOP.

* Save Into DB
  IF LT_GUID IS NOT INITIAL.
    CALL FUNCTION 'CRM_PRICING_SAVE_OB'
      EXPORTING
        IT_OBJECTS_TO_SAVE = LT_GUID
      EXCEPTIONS
        ERROR_OCCURRED     = 1
        OTHERS             = 2.
    IF SY-SUBRC <> 0.
      RETURN.
    ENDIF.
  ENDIF.

ENDMETHOD.
ENDCLASS.
