*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations

CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS:
      GEN_FILE_FIX_LEN IMPORTING I_HEADER          TYPE ANY TABLE
                                 I_ITEM            TYPE ANY TABLE
                                 I_FOOTER          TYPE ANY TABLE OPTIONAL
                                 I_START_END_VALUE TYPE ANY
                                 I_len             TYPE ANY OPTIONAL
                       RETURNING VALUE(R)          TYPE EREC_T_STRING,
      GEN_FILE IMPORTING I_HEADER          TYPE ANY TABLE
                         I_ITEM            TYPE ANY TABLE
                         I_FOOTER          TYPE ANY TABLE OPTIONAL
                         I_SEPARATOR       TYPE ANY
                         I_START_END_VALUE TYPE ANY
               RETURNING VALUE(R)          TYPE EREC_T_STRING,
      GEN_FILEGROUP IMPORTING I_HEADER          TYPE ANY TABLE
                              I_ITEM            TYPE ANY TABLE
                              I_FOOTER          TYPE ANY TABLE OPTIONAL
                              I_SEPARATOR       TYPE ANY
                              I_START_END_VALUE TYPE ANY
                    RETURNING VALUE(R)          TYPE EREC_T_STRING,
      GET_PATH IMPORTING I_PATH   TYPE ANY
                         I_FILE   TYPE ANY
               RETURNING VALUE(R) TYPE EVE_TT_STRING.

    CLASS-DATA:
     LCL_UTIL TYPE REF TO ZCL_SDSCA_UTIL_SDS.
ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD GEN_FILE_FIX_LEN.
    FIELD-SYMBOLS : <LFS_HEADER> TYPE ANY,
                    <LFS_ITEM>   TYPE ANY,
                    <LFS_FOOTER> TYPE ANY.

    FIELD-SYMBOLS : <LFS_COMP> TYPE ANY.

    DATA : LV_STRING TYPE STRING.

    DATA : LV_COMP_COUNT TYPE I.

    DATA : LV_STRING_VALUE TYPE STRING.

    DATA : LV_LEN TYPE I,
           LV_POS TYPE I.

    DATA : LV_SPACE TYPE STRING.

    CONSTANTS :  LC_SPACE   TYPE SYHEX02 VALUE '0x20'.

    LV_SPACE = CL_ABAP_CONV_IN_CE=>UCCP( LC_SPACE ).

    LOOP AT I_HEADER ASSIGNING <LFS_HEADER>.
      CLEAR : LV_STRING.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_HEADER> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          DESCRIBE FIELD <LFS_COMP> LENGTH LV_LEN IN CHARACTER MODE.
          LV_POS = STRLEN( LV_STRING_VALUE  ).
          WHILE LV_POS < LV_LEN.
            CONCATENATE LV_STRING_VALUE LV_SPACE INTO LV_STRING_VALUE.
            LV_POS = LV_POS + 1.
          ENDWHILE.

          IF LV_STRING IS INITIAL.
            IF I_START_END_VALUE IS NOT INITIAL.
              CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
            ELSE.
              LV_STRING =  LV_STRING_VALUE.
            ENDIF.
          ELSE.
            CONCATENATE LV_STRING LV_STRING_VALUE INTO LV_STRING RESPECTING BLANKS.
          ENDIF.
        ENDIF.
      ENDDO.
      IF I_START_END_VALUE IS NOT INITIAL.
        CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      ENDIF.
      APPEND LV_STRING TO R.
    ENDLOOP.

    IF <LFS_COMP> IS ASSIGNED.
      UNASSIGN <LFS_COMP>.
    ENDIF.


    LOOP AT I_ITEM ASSIGNING <LFS_ITEM> .
      CLEAR : LV_STRING,LV_COMP_COUNT.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_ITEM> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          DESCRIBE FIELD <LFS_COMP> LENGTH LV_LEN IN CHARACTER MODE.
          LV_POS = STRLEN( LV_STRING_VALUE  ).
          WHILE LV_POS < LV_LEN.
            CONCATENATE LV_STRING_VALUE LV_SPACE INTO LV_STRING_VALUE.
            LV_POS = LV_POS + 1.
          ENDWHILE.

          IF LV_STRING IS INITIAL.
            IF I_START_END_VALUE IS NOT INITIAL.
              CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
            ELSE.
              LV_STRING =  LV_STRING_VALUE.
            ENDIF.
          ELSE.
            CONCATENATE LV_STRING LV_STRING_VALUE  INTO LV_STRING RESPECTING BLANKS.
          ENDIF.
        ENDIF.
      ENDDO.

      LV_POS = STRLEN( LV_STRING ).
      WHILE LV_POS < I_LEN.
        CONCATENATE LV_STRING_VALUE LV_SPACE INTO LV_STRING_VALUE.
        LV_POS = LV_POS + 1.
      ENDWHILE.

      IF I_START_END_VALUE IS NOT INITIAL.
        CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      ENDIF.

      APPEND LV_STRING TO R.
    ENDLOOP.

    IF <LFS_COMP> IS ASSIGNED.
      UNASSIGN <LFS_COMP>.
    ENDIF.
    LOOP AT I_FOOTER ASSIGNING <LFS_FOOTER>.
      CLEAR : LV_STRING,LV_COMP_COUNT.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_FOOTER> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          DESCRIBE FIELD <LFS_COMP> LENGTH LV_LEN IN CHARACTER MODE.
          LV_POS = STRLEN( LV_STRING_VALUE  ).
          WHILE LV_POS < LV_LEN.
            CONCATENATE LV_STRING_VALUE LV_SPACE INTO LV_STRING_VALUE.
            LV_POS = LV_POS + 1.
          ENDWHILE.

          IF LV_STRING IS INITIAL.
            IF I_START_END_VALUE IS NOT INITIAL.
              CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
            ELSE.
              LV_STRING =  LV_STRING_VALUE.
            ENDIF.
          ELSE.
            CONCATENATE LV_STRING LV_STRING_VALUE  INTO LV_STRING RESPECTING BLANKS.
          ENDIF.
        ENDIF.
      ENDDO.

      LV_POS = STRLEN( LV_STRING ).
      WHILE LV_POS < I_LEN.
        CONCATENATE LV_STRING_VALUE LV_SPACE INTO LV_STRING_VALUE.
        LV_POS = LV_POS + 1.
      ENDWHILE.

      IF I_START_END_VALUE IS NOT INITIAL.
        CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      ENDIF.

      APPEND LV_STRING TO R.
    ENDLOOP.

  ENDMETHOD.
  METHOD GEN_FILE.

    FIELD-SYMBOLS : <LFS_HEADER> TYPE ANY,
                    <LFS_ITEM>   TYPE ANY,
                    <LFS_FOOTER> TYPE ANY.

    FIELD-SYMBOLS : <LFS_COMP> TYPE ANY.

    DATA : LV_STRING TYPE STRING.

    DATA : LV_COMP_COUNT TYPE I.

    DATA : LV_SEPARATOR TYPE CHAR10.

    DATA : LV_STRING_VALUE TYPE STRING.

    LV_SEPARATOR = I_SEPARATOR.

    REPLACE ALL OCCURRENCES OF PCRE '[ ]+' IN LV_SEPARATOR WITH ''.

    LOOP AT I_HEADER ASSIGNING <LFS_HEADER>.
      CLEAR : LV_STRING.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_HEADER> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          IF LV_STRING IS INITIAL.
            CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
          ELSE.
            CONCATENATE LV_STRING LV_SEPARATOR  LV_STRING_VALUE INTO LV_STRING.
          ENDIF.
        ENDIF.
      ENDDO.
      CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      APPEND LV_STRING TO R.
    ENDLOOP.

    IF <LFS_COMP> IS ASSIGNED.
      UNASSIGN <LFS_COMP>.
    ENDIF.


    LOOP AT I_ITEM ASSIGNING <LFS_ITEM> .
      CLEAR : LV_STRING,LV_COMP_COUNT.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_ITEM> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          IF LV_STRING IS INITIAL.
*            LV_STRING =  <LFS_COMP>.
            CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
          ELSE.
            CONCATENATE LV_STRING LV_SEPARATOR LV_STRING_VALUE INTO LV_STRING.
          ENDIF.
        ENDIF.
      ENDDO.
      CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      APPEND LV_STRING TO R.
    ENDLOOP.


*    LOOP AT I_ITEM ASSIGNING <LFS_ITEM> .
*      CLEAR : LV_STRING,LV_COMP_COUNT.
*      DO.
*        ADD 1 TO LV_COMP_COUNT.
*        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_ITEM> TO <LFS_COMP>.
*        IF SY-SUBRC NE 0.
*          EXIT.
*        ELSE.
*          LV_STRING_VALUE = <LFS_COMP>.
*          IF LV_STRING IS INITIAL.
**            LV_STRING =  <LFS_COMP>.
*            CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
*          ELSE.
*            CONCATENATE LV_STRING LV_SEPARATOR LV_STRING_VALUE INTO LV_STRING.
*          ENDIF.
*        ENDIF.
*      ENDDO.
*      CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
*      APPEND LV_STRING TO R.
*    ENDLOOP.

    LOOP AT I_FOOTER ASSIGNING <LFS_FOOTER> .
      CLEAR : LV_STRING,LV_COMP_COUNT.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_FOOTER> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          IF LV_STRING IS INITIAL.
*            LV_STRING =  <LFS_COMP>.
            CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
          ELSE.
            CONCATENATE LV_STRING LV_SEPARATOR LV_STRING_VALUE INTO LV_STRING.
          ENDIF.
        ENDIF.
      ENDDO.
      CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      APPEND LV_STRING TO R.
    ENDLOOP.

  ENDMETHOD.
  METHOD GEN_FILEGROUP.
    FIELD-SYMBOLS : <LFS_HEADER> TYPE ANY,
                    <LFS_ITEM>   TYPE ANY,
                    <LFS_FOOTER> TYPE ANY.

    FIELD-SYMBOLS : <LFS_COMP>      TYPE ANY,
                    <LFS_COMP_ITEM> TYPE ANY.

    DATA : LV_STRING TYPE STRING.

    DATA : LV_COMP_COUNT TYPE I.

    DATA : LV_SEPARATOR TYPE CHAR10.

    DATA : LV_STRING_VALUE TYPE STRING.

    DATA : LV_GROUP      TYPE CHAR255,
           LV_GROUP_ITEM TYPE CHAR255.

    LV_SEPARATOR = I_SEPARATOR.

    REPLACE ALL OCCURRENCES OF PCRE '[ ]+' IN LV_SEPARATOR WITH ''.

    LOOP AT I_HEADER ASSIGNING <LFS_HEADER>.
      CLEAR : LV_STRING,LV_COMP_COUNT.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_HEADER> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          IF LV_COMP_COUNT NE 1.
            LV_STRING_VALUE = <LFS_COMP>.
            IF LV_STRING IS INITIAL.
              CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
            ELSE.
              CONCATENATE LV_STRING LV_SEPARATOR  LV_STRING_VALUE INTO LV_STRING.
            ENDIF.
          ELSE.
            LV_GROUP = <LFS_COMP>.
          ENDIF.
        ENDIF.
      ENDDO.
      CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      APPEND LV_STRING TO R.

      LOOP AT I_ITEM ASSIGNING <LFS_ITEM> .
        CLEAR : LV_STRING,LV_COMP_COUNT.
        DO.
          ADD 1 TO LV_COMP_COUNT.
          ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_ITEM> TO <LFS_COMP_ITEM>.
          IF SY-SUBRC NE 0.
            EXIT.
          ELSE.
            IF LV_COMP_COUNT NE 1.
              LV_STRING_VALUE = <LFS_COMP_ITEM>.
              IF LV_STRING IS INITIAL.
*            LV_STRING =  <LFS_COMP>.
                CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
              ELSE.
                CONCATENATE LV_STRING LV_SEPARATOR LV_STRING_VALUE INTO LV_STRING.
              ENDIF.
            ELSE.
              LV_GROUP_ITEM = <LFS_COMP_ITEM>.
            ENDIF.
          ENDIF.
        ENDDO.
        IF LV_GROUP_ITEM EQ LV_GROUP.
          CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
          APPEND LV_STRING TO R.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    LOOP AT I_FOOTER ASSIGNING <LFS_FOOTER>.
      CLEAR : LV_STRING,LV_COMP_COUNT.
      DO.
        ADD 1 TO LV_COMP_COUNT.
        ASSIGN COMPONENT LV_COMP_COUNT OF STRUCTURE <LFS_FOOTER> TO <LFS_COMP>.
        IF SY-SUBRC NE 0.
          EXIT.
        ELSE.
          LV_STRING_VALUE = <LFS_COMP>.
          IF LV_STRING IS INITIAL.
*            LV_STRING =  <LFS_COMP>.
            CONCATENATE I_START_END_VALUE LV_STRING_VALUE INTO LV_STRING.
          ELSE.
            CONCATENATE LV_STRING LV_SEPARATOR LV_STRING_VALUE INTO LV_STRING.
          ENDIF.
        ENDIF.
      ENDDO.
      CONCATENATE LV_STRING I_START_END_VALUE INTO LV_STRING.
      APPEND LV_STRING TO R.
    ENDLOOP.

  ENDMETHOD.
  METHOD GET_PATH.

    DATA : LV_DIRNAME	TYPE 	RSMRGSTR-PATH,
           LV_FILENM  TYPE  RSMRGSTR-NAME,
           LV_PATTERN	TYPE 	RSMRGSTR-NAME.

    DATA : LT_FILE_LIST TYPE TABLE OF RSFILLST,
           LS_FILE_LIST TYPE RSFILLST.

    DATA : LS_TMP LIKE LINE OF R.

    LV_DIRNAME = I_PATH.
    LV_FILENM  = I_FILE.

    CALL FUNCTION 'SUBST_GET_FILE_LIST'
      EXPORTING
        DIRNAME      = LV_DIRNAME
        FILENM       = LV_FILENM
      TABLES
        FILE_LIST    = LT_FILE_LIST
      EXCEPTIONS
        ACCESS_ERROR = 1
        OTHERS       = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    LOOP AT LT_FILE_LIST INTO LS_FILE_LIST.
      LS_TMP = LS_FILE_LIST-NAME.
      APPEND LS_TMP TO R.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.
