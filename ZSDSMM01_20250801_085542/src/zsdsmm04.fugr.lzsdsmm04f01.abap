*----------------------------------------------------------------------*
***INCLUDE LZSDSMM04F01.
*----------------------------------------------------------------------*
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    TYPES : BEGIN OF GY_PO,
              BANFN TYPE EBAN-BANFN,
            END OF GY_PO.
    TYPES : GTY_PO TYPE STANDARD TABLE OF GY_PO WITH EMPTY KEY.

    METHODS :
      CONSTRUCTOR,
      START_PROCESS IMPORTING I_TEST TYPE FLAG.
    CLASS-METHODS :
      CREATE_PR IMPORTING I_TEST TYPE FLAG,
      PR_LINE_NORMAL IMPORTING I_DATA  TYPE ZSDSMMS003
                     CHANGING  C_LINE  TYPE BNFPO
                               C_DATA  TYPE TY_BAPIMEREQITEMIMP
                               C_DATAX TYPE TY_BAPIMEREQITEMX
                               C_TEXT  TYPE TY_BAPIMEREQITEMTEXT,
      PR_LINE_FG     IMPORTING I_DATA   TYPE ZSDSMMS003
                               I_BRANCH TYPE ANY
                     CHANGING  C_LINE   TYPE BNFPO
                               C_DATA   TYPE TY_BAPIMEREQITEMIMP
                               C_DATAX  TYPE TY_BAPIMEREQITEMX
                               C_TEXT   TYPE TY_BAPIMEREQITEMTEXT,
      PR_LINE_SP     IMPORTING I_DATA   TYPE ZSDSMMS003
                               I_BRANCH TYPE ANY
                     CHANGING  C_LINE   TYPE BNFPO
                               C_DATA   TYPE TY_BAPIMEREQITEMIMP
                               C_DATAX  TYPE TY_BAPIMEREQITEMX
                               C_TEXT   TYPE TY_BAPIMEREQITEMTEXT,
      PR_LINE_MK     IMPORTING I_DATA  TYPE ZSDSMMS003
                     CHANGING  C_LINE  TYPE BNFPO
                               C_DATA  TYPE TY_BAPIMEREQITEMIMP
                               C_DATAX TYPE TY_BAPIMEREQITEMX
                               C_TEXT  TYPE TY_BAPIMEREQITEMTEXT,
      PR_LINE_ACC IMPORTING I_DATA TYPE ZSDSMMS003
                  CHANGING  C_LINE TYPE BNFPO
                            C_ACC  TYPE TY_BAPIMEREQACCOUNT
                            C_ACCX TYPE TY_BAPIMEREQACCOUNTX,
      PR_LINE_ACC_MK IMPORTING I_DATA TYPE ZSDSMMS003
                     CHANGING  C_LINE TYPE BNFPO
                               C_ACC  TYPE TY_BAPIMEREQACCOUNT
                               C_ACCX TYPE TY_BAPIMEREQACCOUNTX,
      PR_LINE_ASSET IMPORTING I_DATA  TYPE ZSDSMMS003
                    CHANGING  C_LINE  TYPE BNFPO
                              C_DATA  TYPE TY_BAPIMEREQITEMIMP
                              C_DATAX TYPE TY_BAPIMEREQITEMX
                              C_ACC   TYPE TY_BAPIMEREQACCOUNT
                              C_ACCX  TYPE TY_BAPIMEREQACCOUNTX
                              C_TEXT  TYPE TY_BAPIMEREQITEMTEXT,
      PR_LINE_ACC_ASSET IMPORTING I_DATA         TYPE ZSDSMMS003
                                  I_ASSET_NO     TYPE ANLN1
                                  I_ASSET_SUB_NO TYPE ANLN2
                        CHANGING  C_LINE         TYPE BNFPO
                                  C_ACC          TYPE TY_BAPIMEREQACCOUNT
                                  C_ACCX         TYPE TY_BAPIMEREQACCOUNTX,
      GET_DATA_FROM_K2 IMPORTING I_WEB_NO    TYPE CHAR20
                       EXPORTING E_HEADER_PR TYPE ZSDSMMS002
                                 ET_ITEM     TYPE ZSDSMMS003_TT,
      CREATE_FIX_ASSET IMPORTING IT_ITEM  TYPE ZSDSMMS003_TT
                       RETURNING VALUE(R) TYPE ZSDSFIS012_TT,
      GET_HEADER_API_K2 IMPORTING I_WEB_NO TYPE CHAR20
                        CHANGING  C_HEADER TYPE ANY,
      GET_DETAIL_API_K2 IMPORTING I_WEB_NO TYPE CHAR20
                        CHANGING  C_DETAIL TYPE ANY,
      GET_BUDGET_API_K2 IMPORTING I_BUDGET TYPE ANY
                        CHANGING  C_BUDGET TYPE ANY,
      GET_URL_HEADER        IMPORTING I_WEB_NO TYPE ANY
                            CHANGING  C_URL    TYPE ANY,
      GET_HEADER_API_HEADER CHANGING C_HEADER TYPE ZSDSCAS001_TT,
      GET_DETAIL_API_HEADER CHANGING C_BODY TYPE ANY
                                     C_LEN  TYPE ANY,
      GET_URL_DETAIL        IMPORTING I_WEB_NO TYPE ANY
                            CHANGING  C_URL    TYPE ANY,
      GET_URL_BUDGET        IMPORTING I_WBS_NO TYPE ANY
                            CHANGING  C_URL    TYPE ANY,
      GET_HEADER_API_DETAIL CHANGING C_HEADER TYPE ZSDSCAS001_TT,
      GET_DETAIL_API_DETAIL CHANGING C_BODY TYPE ANY
                                     C_LEN  TYPE ANY,
      GET_HEADER_API_BUDGET CHANGING C_HEADER TYPE ZSDSCAS001_TT,
      GET_DETAIL_API_BUDGET CHANGING C_BODY TYPE ANY
                                     C_LEN  TYPE ANY,
      GET_USER_PASS         CHANGING I_USER TYPE STRING
                                     I_PASS TYPE STRING,
      SDSMMT006             IMPORTING I_WEB_NO TYPE ANY
                                      I_PR_NO  TYPE ANY,
      UPDATE_ZSDSMMT006_REJECT IMPORTING I_PR TYPE ANY,
      DELETE_ITEM_PR IMPORTING LT_DATA  TYPE GTY_PO
                     RETURNING VALUE(R) TYPE GTY_PO,
      DELETE_PR      IMPORTING I_PR     TYPE EBAN-BANFN
                     RETURNING VALUE(R) TYPE GTY_PO,
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      COMMIT,
      RELEASE_PR IMPORTING I_PR TYPE ANY,
      SEND_EMAIL_PR IMPORTING I_PR TYPE ANY,
      UPDATE_ZSDSMMT022 IMPORTING I_DATA TYPE EBAN-EBELN,
      LOCK_TABLE_ZSDSMMT022,
      UNLOCK_TABLE_ZSDSMMT022,
      CHECK_LOCK_ZSDSMMT022 RETURNING VALUE(R) TYPE FLAG,
      UPDATE_TEXT IMPORTING I_PR      TYPE ANY OPTIONAL
                            I_PR_LINE TYPE ANY
                            I_TEXT    TYPE ANY
                            I_ID      TYPE CHAR3
                  CHANGING  CT_DATA   TYPE TY_BAPIMEREQITEMTEXT,
      GET_BUDGET_TYPE IMPORTING I_DATA   TYPE STRING
                      RETURNING VALUE(R) TYPE STRING,
      COLLECT_MAT IMPORTING I_DATA TYPE MATNR,
      GET_DATA_BOM,
      GET_DATA_BY_BOM IMPORTING I_DATA   TYPE ZSDSMMS003
                                I_BRANCH TYPE ANY
                      CHANGING  C_LINE   TYPE BNFPO
                                C_DATA   TYPE TY_BAPIMEREQITEMIMP
                                C_DATAX  TYPE TY_BAPIMEREQITEMX
                                C_TEXT   TYPE TY_BAPIMEREQITEMTEXT,
      GET_CONFIG.

    CLASS-DATA :
    LO      TYPE REF TO LCL_DATA
    .

ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    SELECT MATKL
           SAKNR
      FROM ZSDSMMT019
      INTO TABLE GT_MAP_GL.
  ENDMETHOD.
  METHOD CREATE_PR.
    IF LO IS INITIAL.
      CREATE OBJECT LO.
    ENDIF.

    LO->START_PROCESS( I_TEST ).
  ENDMETHOD.
  METHOD START_PROCESS.
    DATA : i_PRHEADER  TYPE BAPIMEREQHEADER,
           i_PRHEADERX TYPE BAPIMEREQHEADERX,
           i_TESTRUN   TYPE BAPIFLAG-BAPIFLAG.

    DATA : e_NUMBER	     TYPE BAPIMEREQHEADER-PREQ_NO,
           e_PRHEADEREXP TYPE	BAPIMEREQHEADER.

*    DATA : BEGIN OF LS_TEXT

    DATA : lt_RETURN                 TYPE TABLE OF BAPIRET2,
           lt_PRITEM                 TYPE TABLE OF BAPIMEREQITEMIMP,
           lt_PRITEMX                TYPE TABLE OF BAPIMEREQITEMX,
           lt_PRITEMEXP              TYPE TABLE OF BAPIMEREQITEM,
           lt_PRITEMSOURCE           TYPE TABLE OF BAPIMEREQSOURCE,
           lt_PRACCOUNT              TYPE TABLE OF BAPIMEREQACCOUNT,
           lt_PRACCOUNTPROITSEGMENT  TYPE TABLE OF BAPIMEREQACCOUNTPROFITSEG,
           lt_PRACCOUNTX             TYPE TABLE OF BAPIMEREQACCOUNTX,
           lt_PRADDRDELIVERY         TYPE TABLE OF BAPIMERQADDRDELIVERY,
           lt_PRITEMTEXT             TYPE TABLE OF BAPIMEREQITEMTEXT,
           lt_PRHEADERTEXT           TYPE TABLE OF BAPIMEREQHEADTEXT,
           lt_EXTENSIONIN            TYPE TABLE OF BAPIPAREX,
           lt_EXTENSIONOUT           TYPE TABLE OF BAPIPAREX,
           lt_PRVERSION              TYPE TABLE OF BAPIMEREQDCM,
           lt_PRVERSIONX             TYPE TABLE OF BAPIMEREQDCMX,
           lt_ALLVERSIONS            TYPE TABLE OF BAPIMEDCM_ALLVERSIONS,
           lt_PRCOMPONENTS           TYPE TABLE OF BAPIMEREQCOMPONENT,
           lt_PRCOMPONENTSX          TYPE TABLE OF BAPIMEREQCOMPONENTX,
           lt_SERVICEOUTLINE         TYPE TABLE OF BAPI_SRV_OUTLINE,
           lt_SERVICEOUTLINEX        TYPE TABLE OF BAPI_SRV_OUTLINEX,
           lt_SERVICELINES           TYPE TABLE OF BAPI_SRV_SERVICE_LINE,
           lt_SERVICELINESX          TYPE TABLE OF BAPI_SRV_SERVICE_LINEX,
           lt_SERVICELIMIT           TYPE TABLE OF BAPI_SRV_LIMIT_DATA,
           lt_SERVICELIMITX          TYPE TABLE OF BAPI_SRV_LIMIT_DATAX,
           lt_SERVICECONTRACTLIMITS  TYPE TABLE OF BAPI_SRV_CONTRACT_LIMITS,
           lt_SERVICECONTRACTLIMITSX TYPE TABLE OF BAPI_SRV_CONTRACT_LIMITSX,
           lt_SERVICEACCOUNT         TYPE TABLE OF BAPI_SRV_ACC_DATA,
           lt_SERVICEACCOUNTX        TYPE TABLE OF BAPI_SRV_ACC_DATAX,
           lt_SERVICELONGTEXTS       TYPE TABLE OF BAPI_SRV_LONGTEXTS,
           lt_SERIALNUMBER           TYPE TABLE OF BAPIMEREQSERIALNO,
           lt_SERIALNUMBERX          TYPE TABLE OF BAPIMEREQSERIALNOX.

    DATA : ls_RETURN                 TYPE BAPIRET2,
           ls_PRITEM                 TYPE BAPIMEREQITEMIMP,
           ls_PRITEMX                TYPE BAPIMEREQITEMX,
           ls_PRITEMEXP              TYPE BAPIMEREQITEM,
           ls_PRITEMSOURCE           TYPE BAPIMEREQSOURCE,
           ls_PRACCOUNT              TYPE BAPIMEREQACCOUNT,
           ls_PRACCOUNTPROITSEGMENT  TYPE BAPIMEREQACCOUNTPROFITSEG,
           ls_PRACCOUNTX             TYPE BAPIMEREQACCOUNTX,
           ls_PRADDRDELIVERY         TYPE BAPIMERQADDRDELIVERY,
           ls_PRITEMTEXT             TYPE BAPIMEREQITEMTEXT,
           ls_PRHEADERTEXT           TYPE BAPIMEREQHEADTEXT,
           ls_EXTENSIONIN            TYPE BAPIPAREX,
           ls_EXTENSIONOUT           TYPE BAPIPAREX,
           ls_PRVERSION              TYPE BAPIMEREQDCM,
           ls_PRVERSIONX             TYPE BAPIMEREQDCMX,
           ls_ALLVERSIONS            TYPE BAPIMEDCM_ALLVERSIONS,
           ls_PRCOMPONENTS           TYPE BAPIMEREQCOMPONENT,
           ls_PRCOMPONENTSX          TYPE BAPIMEREQCOMPONENTX,
           ls_SERVICEOUTLINE         TYPE BAPI_SRV_OUTLINE,
           ls_SERVICEOUTLINEX        TYPE BAPI_SRV_OUTLINEX,
           ls_SERVICELINES           TYPE BAPI_SRV_SERVICE_LINE,
           ls_SERVICELINESX          TYPE BAPI_SRV_SERVICE_LINEX,
           ls_SERVICELIMIT           TYPE BAPI_SRV_LIMIT_DATA,
           ls_SERVICELIMITX          TYPE BAPI_SRV_LIMIT_DATAX,
           ls_SERVICECONTRACTLIMITS  TYPE BAPI_SRV_CONTRACT_LIMITS,
           ls_SERVICECONTRACTLIMITSX TYPE BAPI_SRV_CONTRACT_LIMITSX,
           ls_SERVICEACCOUNT         TYPE BAPI_SRV_ACC_DATA,
           ls_SERVICEACCOUNTX        TYPE BAPI_SRV_ACC_DATAX,
           ls_SERVICELONGTEXTS       TYPE BAPI_SRV_LONGTEXTS,
           ls_SERIALNUMBER           TYPE BAPIMEREQSERIALNO,
           ls_SERIALNUMBERX          TYPE BAPIMEREQSERIALNOX.

    DATA : LS_item LIKE LINE OF GS_DATA-GT_ITEM.

    DATA : LV_LINE TYPE BNFPO.

    i_PRHEADER-PREQ_NO  = GS_DATA-GS_HEADER-BANFN.
    i_PRHEADER-PR_TYPE  = GS_DATA-GS_HEADER-PR_TYPE.
    i_PRHEADER-CTRL_IND = GS_DATA-GS_HEADER-CTRL_IND.

    i_PRHEADERX-PR_TYPE    = ABAP_TRUE.
    i_PRHEADERX-CTRL_IND   = ABAP_TRUE.
    i_PRHEADERX-ITEM_INTVL = ABAP_TRUE.
    i_PRHEADERX-LAST_ITEM  = ABAP_TRUE.

    LOOP AT GS_DATA-GT_ITEM INTO LS_ITEM.
      ADD 1 TO LV_LINE.

      IF LS_ITEM-KNTTP EQ GC_CONSTANT-A.
        PR_LINE_ASSET( EXPORTING I_DATA  = LS_ITEM
                        CHANGING C_LINE  = LV_LINE
                                 C_DATA  = LT_PRITEM
                                 C_DATAX = LT_PRITEMX
                                 C_ACC   = lt_PRACCOUNT
                                 C_ACCX  = lt_PRACCOUNTX
                                 C_TEXT  = lt_PRITEMTEXT ).
      ELSEIF LS_ITEM-KNTTP EQ GC_CONSTANT-G.
        CLEAR : LS_ITEM-KNTTP.
        PR_LINE_FG( EXPORTING I_DATA   = LS_ITEM
                              I_BRANCH = GS_DATA-GS_HEADER-BRANCH
                     CHANGING C_LINE   = LV_LINE
                              C_DATA   = LT_PRITEM
                              C_DATAX  = LT_PRITEMX
                              C_TEXT  = lt_PRITEMTEXT ).
      ELSEIF LS_ITEM-KNTTP EQ GC_CONSTANT-P.
        CLEAR : LS_ITEM-KNTTP.
        PR_LINE_SP( EXPORTING I_DATA   = LS_ITEM
                              I_BRANCH = GS_DATA-GS_HEADER-BRANCH
                     CHANGING C_LINE   = LV_LINE
                              C_DATA   = LT_PRITEM
                              C_DATAX  = LT_PRITEMX
                              C_TEXT  = lt_PRITEMTEXT ).
      ELSEIF LS_ITEM-KNTTP EQ GC_CONSTANT-H. " Marketing Process

        IF LS_ITEM-MATNR IS INITIAL.
          LS_ITEM-KNTTP = GC_CONSTANT-K.
        ELSE.
          CLEAR : LS_ITEM-KNTTP.
        ENDIF.

        PR_LINE_MK( EXPORTING I_DATA   = LS_ITEM
                     CHANGING C_LINE   = LV_LINE
                              C_DATA   = LT_PRITEM
                              C_DATAX  = LT_PRITEMX
                              C_TEXT  = lt_PRITEMTEXT ).

        IF LS_ITEM-MATNR IS INITIAL.
          PR_LINE_ACC( EXPORTING I_DATA = LS_ITEM
                      CHANGING C_LINE = LV_LINE
                               C_ACC  = lt_PRACCOUNT
                               C_ACCX = lt_PRACCOUNTX ).
*          PR_LINE_ACC_MK( EXPORTING I_DATA = LS_ITEM
*                           CHANGING C_LINE = LV_LINE
*                                    C_ACC  = lt_PRACCOUNT
*                                    C_ACCX = lt_PRACCOUNTX ).
        ENDIF.
      ELSE.
        PR_LINE_NORMAL( EXPORTING I_DATA  = LS_ITEM
                         CHANGING C_LINE  = LV_LINE
                                  C_DATA  = LT_PRITEM
                                  C_DATAX = LT_PRITEMX
                                  C_TEXT  = lt_PRITEMTEXT ).

        PR_LINE_ACC( EXPORTING I_DATA = LS_ITEM
                      CHANGING C_LINE = LV_LINE
                               C_ACC  = lt_PRACCOUNT
                               C_ACCX = lt_PRACCOUNTX ).
      ENDIF.
    ENDLOOP.

    i_TESTRUN = I_TEST.

    CALL FUNCTION 'BAPI_PR_CREATE'
      EXPORTING
        PRHEADER               = i_PRHEADER
        PRHEADERX              = i_PRHEADERX
        TESTRUN                = i_TESTRUN
      IMPORTING
        NUMBER                 = e_NUMBER
        PRHEADEREXP            = e_PRHEADEREXP
      TABLES
        RETURN                 = lt_RETURN
        PRITEM                 = lt_PRITEM
        PRITEMX                = lt_PRITEMX
        PRITEMEXP              = lt_PRITEMEXP
        PRITEMSOURCE           = lt_PRITEMSOURCE
        PRACCOUNT              = lt_PRACCOUNT
        PRACCOUNTPROITSEGMENT  = lt_PRACCOUNTPROITSEGMENT
        PRACCOUNTX             = lt_PRACCOUNTX
        PRADDRDELIVERY         = lt_PRADDRDELIVERY
        PRITEMTEXT             = lt_PRITEMTEXT
        PRHEADERTEXT           = lt_PRHEADERTEXT
        EXTENSIONIN            = lt_EXTENSIONIN
        EXTENSIONOUT           = lt_EXTENSIONOUT
        PRVERSION              = lt_PRVERSION
        PRVERSIONX             = lt_PRVERSIONX
        ALLVERSIONS            = lt_ALLVERSIONS
        PRCOMPONENTS           = lt_PRCOMPONENTS
        PRCOMPONENTSX          = lt_PRCOMPONENTSX
        SERVICEOUTLINE         = lt_SERVICEOUTLINE
        SERVICEOUTLINEX        = lt_SERVICEOUTLINEX
        SERVICELINES           = lt_SERVICELINES
        SERVICELINESX          = lt_SERVICELINESX
        SERVICELIMIT           = lt_SERVICELIMIT
        SERVICELIMITX          = lt_SERVICELIMITX
        SERVICECONTRACTLIMITS  = lt_SERVICECONTRACTLIMITS
        SERVICECONTRACTLIMITSX = lt_SERVICECONTRACTLIMITSX
        SERVICEACCOUNT         = lt_SERVICEACCOUNT
        SERVICEACCOUNTX        = lt_SERVICEACCOUNTX
        SERVICELONGTEXTS       = lt_SERVICELONGTEXTS
        SERIALNUMBER           = lt_SERIALNUMBER
        SERIALNUMBERX          = lt_SERIALNUMBERX.

    DELETE LT_RETURN WHERE TYPE   EQ 'E'    AND
                           ID     EQ 'BAPI' AND
                           NUMBER EQ '001'.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_CONSTANT-S.
    IF SY-SUBRC EQ 0.
      GS_DATA-GV_MESSAGE = LS_RETURN-MESSAGE.
      GS_DATA-GV_PR_SAP  = LS_RETURN-MESSAGE_V1.
      COMMIT( ).
      RELEASE_PR( GS_DATA-GV_PR_SAP ).
    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_CONSTANT-E.
    IF SY-SUBRC EQ 0.
      GS_DATA-GV_MESSAGE = LS_RETURN-MESSAGE.
*      GS_DATA-GV_PR_SAP  = LS_RETURN-MESSAGE_V1.
    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_CONSTANT-A.
    IF SY-SUBRC EQ 0.
      GS_DATA-GV_MESSAGE = LS_RETURN-MESSAGE.
*      GS_DATA-GV_PR_SAP  = LS_RETURN-MESSAGE_V1.
    ENDIF.
  ENDMETHOD.
  METHOD PR_LINE_NORMAL.

    DATA : LS_PRITEM  TYPE BAPIMEREQITEMIMP,
           LS_PRITEMX TYPE BAPIMEREQITEMX.

    DATA : LV_LEN TYPE I.

    DATA : LV_MAT      TYPE FLAG,
           LV_LONG_MAT TYPE FLAG.

    LS_PRITEM-CTRL_IND   = GC_CONSTANT-R.
    LS_PRITEM-ACCTASSCAT = I_DATA-KNTTP.
    IF GS_DATA-GV_COATING EQ ABAP_TRUE.
      LS_PRITEM-PUR_GROUP  = 'LO1'.
    ELSE.
      LS_PRITEM-PUR_GROUP  = 'G01'.
    ENDIF.
    LS_PRITEM-PREQ_NAME  = SY-UNAME.
    LS_PRITEM-PREQ_DATE  = SY-DATUM.
    LS_PRITEM-PLANT      = '1000'.
    LS_PRITEM-TRACKINGNO = I_DATA-COSTCENTER.
    LS_PRITEM-MATL_GROUP = I_DATA-ANLKL.


    ls_PRITEM-PREQ_ITEM   = C_LINE.

    LV_LEN = STRLEN( I_DATA-MATNR ).
    IF LV_LEN GT 18.
      LS_PRITEM-MATERIAL_LONG  = I_DATA-MATNR.
      CLEAR : LV_MAT.
      LV_LONG_MAT = ABAP_TRUE.
    ELSE.
      LS_PRITEM-MATERIAL       = I_DATA-MATNR.
      CLEAR : LV_LONG_MAT.
      LV_MAT = ABAP_TRUE.
    ENDIF.

    LS_PRITEM-SHORT_TEXT  = I_DATA-DESCP.
    LS_PRITEM-QUANTITY    = I_DATA-QTY.
    LS_PRITEM-UNIT        = I_DATA-MEINS.

    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
      EXPORTING
        INPUT          = LS_PRITEM-UNIT
        LANGUAGE       = SY-LANGU
      IMPORTING
        OUTPUT         = LS_PRITEM-UNIT
      EXCEPTIONS
        UNIT_NOT_FOUND = 1
        OTHERS         = 2.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

    LS_PRITEM-PREQ_PRICE  = I_DATA-AMT / I_DATA-QTY.
    LS_PRITEM-CURRENCY    = I_DATA-WAERS.
    LS_PRITEM-DELIV_DATE  = I_DATA-DELIVERY.

    IF     I_DATA-BUDGET_TYPE EQ GC_CONSTANT-CO.
      LS_PRITEM-ACCTASSCAT = 'K'.
*      LS_DATA-BUDGET_NO
    ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-IO.
      LS_PRITEM-ACCTASSCAT = 'F'.
*      LS_DATA-BUDGET_NO
    ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-WBS.
      LS_PRITEM-ACCTASSCAT = 'P'.
*      LS_DATA-BUDGET_NO
    ENDIF.

    LS_PRITEM-STORE_LOC   = I_DATA-STORAGE_LOCATION.

    LS_PRITEMX-PREQ_ITEM     = C_LINE.
    LS_PRITEMX-PREQ_ITEMX    = ABAP_TRUE.
    LS_PRITEMX-MATERIAL_LONG = LV_LONG_MAT.
    LS_PRITEMX-MATERIAL      = LV_MAT.
    LS_PRITEMX-SHORT_TEXT    = ABAP_TRUE.
    LS_PRITEMX-QUANTITY      = ABAP_TRUE.
    LS_PRITEMX-UNIT          = ABAP_TRUE.
    LS_PRITEMX-PREQ_PRICE    = ABAP_TRUE.
    LS_PRITEMX-CURRENCY      = ABAP_TRUE.
    LS_PRITEMX-STORE_LOC     = ABAP_TRUE.

    LS_PRITEMX-CTRL_IND      = ABAP_TRUE.
    LS_PRITEMX-PUR_GROUP     = ABAP_TRUE.
    LS_PRITEMX-PREQ_NAME     = ABAP_TRUE.
    LS_PRITEMX-PLANT         = ABAP_TRUE.
    LS_PRITEMX-TRACKINGNO    = ABAP_TRUE.
    LS_PRITEMX-MATL_GROUP    = ABAP_TRUE.
    LS_PRITEMX-DELIV_DATE    = ABAP_TRUE.
    LS_PRITEMX-PREQ_DATE     = ABAP_TRUE.
    LS_PRITEMX-ACCTASSCAT    = ABAP_TRUE.

    UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                           I_TEXT    = I_DATA-REMARK
                           I_ID      = GC_CONSTANT-ITEM_TEXT
                 CHANGING CT_DATA    = C_TEXT ).

    IF I_DATA-BUDGET_NO IS NOT INITIAL.
      UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                             I_TEXT    = I_DATA-BUDGET_NO
                             I_ID      = GC_CONSTANT-MEMO
                   CHANGING CT_DATA    = C_TEXT ).
    ENDIF.

    GS_DATA-GV_EKGRP = LS_PRITEM-PUR_GROUP.

    APPEND LS_PRITEM  TO C_DATA.
    APPEND LS_PRITEMX TO C_DATAX.

  ENDMETHOD.
  METHOD PR_LINE_FG.
    DATA : LS_PRITEM  TYPE BAPIMEREQITEMIMP,
           LS_PRITEMX TYPE BAPIMEREQITEMX.

    DATA : LV_LEN TYPE I.

    DATA : LV_MAT      TYPE FLAG,
           LV_LONG_MAT TYPE FLAG.

    LS_PRITEM-CTRL_IND   = GC_CONSTANT-R.
    LS_PRITEM-ACCTASSCAT = I_DATA-KNTTP.
    LS_PRITEM-PUR_GROUP  = I_BRANCH.
    LS_PRITEM-PREQ_NAME  = SY-UNAME.
    LS_PRITEM-PREQ_DATE  = SY-DATUM.
    LS_PRITEM-PLANT      = '1000'.
*      LS_PRITEM-TRACKINGNO
    LS_PRITEM-TRACKINGNO = I_DATA-COSTCENTER.
    LS_PRITEM-MATL_GROUP = I_DATA-ANLKL.


    ls_PRITEM-PREQ_ITEM   = C_LINE.

    LV_LEN = STRLEN( I_DATA-MATNR ).
    IF LV_LEN GT 18.
      LS_PRITEM-MATERIAL_LONG  = I_DATA-MATNR.
      CLEAR : LV_MAT.
      LV_LONG_MAT = ABAP_TRUE.
    ELSE.
      LS_PRITEM-MATERIAL       = I_DATA-MATNR.
      CLEAR : LV_LONG_MAT.
      LV_MAT = ABAP_TRUE.
    ENDIF.

    LS_PRITEM-SHORT_TEXT  = I_DATA-DESCP.
    LS_PRITEM-QUANTITY    = I_DATA-QTY.
    LS_PRITEM-UNIT        = I_DATA-MEINS.
    LS_PRITEM-PREQ_PRICE  = I_DATA-AMT / I_DATA-QTY.
    LS_PRITEM-CURRENCY    = I_DATA-WAERS.
    LS_PRITEM-DELIV_DATE  = I_DATA-DELIVERY.
    LS_PRITEM-STORE_LOC   = I_DATA-STORAGE_LOCATION.


    LS_PRITEMX-PREQ_ITEM     = C_LINE.
    LS_PRITEMX-PREQ_ITEMX    = ABAP_TRUE.
    LS_PRITEMX-MATERIAL_LONG = LV_LONG_MAT.
    LS_PRITEMX-MATERIAL      = LV_MAT.
    LS_PRITEMX-SHORT_TEXT    = ABAP_TRUE.
    LS_PRITEMX-QUANTITY      = ABAP_TRUE.
    LS_PRITEMX-UNIT          = ABAP_TRUE.
    LS_PRITEMX-PREQ_PRICE    = ABAP_TRUE.
    LS_PRITEMX-CURRENCY      = ABAP_TRUE.
    LS_PRITEMX-STORE_LOC     = ABAP_TRUE.

    LS_PRITEMX-CTRL_IND      = ABAP_TRUE.
    LS_PRITEMX-PUR_GROUP     = ABAP_TRUE.
    LS_PRITEMX-PREQ_NAME     = ABAP_TRUE.
    LS_PRITEMX-PLANT         = ABAP_TRUE.
    LS_PRITEMX-TRACKINGNO    = ABAP_TRUE.
    LS_PRITEMX-MATL_GROUP    = ABAP_TRUE.
    LS_PRITEMX-DELIV_DATE    = ABAP_TRUE.
    LS_PRITEMX-PREQ_DATE     = ABAP_TRUE.
    LS_PRITEMX-ACCTASSCAT    = ABAP_TRUE.

    UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                           I_TEXT    = I_DATA-REMARK
                           I_ID      = GC_CONSTANT-ITEM_TEXT
                 CHANGING CT_DATA    = C_TEXT ).

    GS_DATA-GV_EKGRP = LS_PRITEM-PUR_GROUP.

    APPEND LS_PRITEM  TO C_DATA.
    APPEND LS_PRITEMX TO C_DATAX.
  ENDMETHOD.
  METHOD PR_LINE_SP.
    DATA : LS_PRITEM  TYPE BAPIMEREQITEMIMP,
           LS_PRITEMX TYPE BAPIMEREQITEMX.

    DATA : LV_LEN TYPE I.

    DATA : LV_MAT      TYPE FLAG,
           LV_LONG_MAT TYPE FLAG.

    READ TABLE GS_DATA-GT_BOM
    WITH KEY BOM = I_DATA-MATNR TRANSPORTING NO FIELDS.
    IF SY-SUBRC EQ 0.
      GET_DATA_BY_BOM( EXPORTING I_DATA   = I_DATA
                                 I_BRANCH = I_BRANCH
                        CHANGING C_LINE   = C_LINE
                                 C_DATA   = C_DATA
                                 C_DATAX  = C_DATAX
                                 C_TEXT   = C_TEXT  ).
    ELSE.
      LS_PRITEM-CTRL_IND   = GC_CONSTANT-R.
      LS_PRITEM-ACCTASSCAT = I_DATA-KNTTP.
      LS_PRITEM-PUR_GROUP  = I_BRANCH.
      LS_PRITEM-PREQ_NAME  = SY-UNAME.
      LS_PRITEM-PREQ_DATE  = SY-DATUM.
      LS_PRITEM-PLANT      = '1000'.
      LS_PRITEM-TRACKINGNO = I_DATA-COSTCENTER.
      LS_PRITEM-MATL_GROUP = I_DATA-ANLKL.


      ls_PRITEM-PREQ_ITEM   = C_LINE.

      LV_LEN = STRLEN( I_DATA-MATNR ).
      IF LV_LEN GT 18.
        LS_PRITEM-MATERIAL_LONG  = I_DATA-MATNR.
        CLEAR : LV_MAT.
        LV_LONG_MAT = ABAP_TRUE.
      ELSE.
        LS_PRITEM-MATERIAL       = I_DATA-MATNR.
        CLEAR : LV_LONG_MAT.
        LV_MAT = ABAP_TRUE.
      ENDIF.

      LS_PRITEM-SHORT_TEXT  = I_DATA-DESCP.
      LS_PRITEM-QUANTITY    = I_DATA-QTY.
      LS_PRITEM-UNIT        = I_DATA-MEINS.
      LS_PRITEM-PREQ_PRICE  = I_DATA-AMT / I_DATA-QTY.
      LS_PRITEM-CURRENCY    = I_DATA-WAERS.
      LS_PRITEM-DELIV_DATE  = I_DATA-DELIVERY.
      LS_PRITEM-STORE_LOC   = I_DATA-STORAGE_LOCATION.

      LS_PRITEMX-PREQ_ITEM     = C_LINE.
      LS_PRITEMX-PREQ_ITEMX    = ABAP_TRUE.
      LS_PRITEMX-MATERIAL_LONG = LV_LONG_MAT.
      LS_PRITEMX-MATERIAL      = LV_MAT.
      LS_PRITEMX-SHORT_TEXT    = ABAP_TRUE.
      LS_PRITEMX-QUANTITY      = ABAP_TRUE.
      LS_PRITEMX-UNIT          = ABAP_TRUE.
      LS_PRITEMX-PREQ_PRICE    = ABAP_TRUE.
      LS_PRITEMX-CURRENCY      = ABAP_TRUE.
      LS_PRITEMX-STORE_LOC     = ABAP_TRUE.

      LS_PRITEMX-CTRL_IND      = ABAP_TRUE.
      LS_PRITEMX-PUR_GROUP     = ABAP_TRUE.
      LS_PRITEMX-PREQ_NAME     = ABAP_TRUE.
      LS_PRITEMX-PLANT         = ABAP_TRUE.
      LS_PRITEMX-TRACKINGNO    = ABAP_TRUE.
      LS_PRITEMX-MATL_GROUP    = ABAP_TRUE.
      LS_PRITEMX-DELIV_DATE    = ABAP_TRUE.
      LS_PRITEMX-PREQ_DATE     = ABAP_TRUE.
      LS_PRITEMX-ACCTASSCAT    = ABAP_TRUE.

      UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                             I_TEXT    = I_DATA-REMARK
                             I_ID      = GC_CONSTANT-ITEM_TEXT
                   CHANGING CT_DATA    = C_TEXT ).

      GS_DATA-GV_EKGRP = LS_PRITEM-PUR_GROUP.
      APPEND LS_PRITEM  TO C_DATA.
      APPEND LS_PRITEMX TO C_DATAX.
    ENDIF.
  ENDMETHOD.
  METHOD PR_LINE_ACC.
    DATA : LS_ACC  LIKE LINE OF C_ACC,
           LS_ACCX LIKE LINE OF C_ACCX.

*    READ TABLE GT_MAP_GL INTO GS_MAP_GL
*    WITH KEY MATKL = I_DATA-ANLKL.
*    IF SY-SUBRC NE 0.
*      CLEAR : GS_MAP_GL-SAKNR.
*    ENDIF.

    IF     I_DATA-BUDGET_TYPE EQ GC_CONSTANT-CO.
      LS_ACC-PREQ_ITEM   = C_LINE.
      LS_ACC-GL_ACCOUNT  = GS_MAP_GL-SAKNR.
      LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
      LS_ACC-COSTCENTER  = I_DATA-BUDGET_NO.

      CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACC-COSTCENTER
                        IMPORTING E_DATA = LS_ACC-COSTCENTER ).

      LS_ACCX-PREQ_ITEM   = C_LINE.
      LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
      LS_ACCX-CO_AREA     = ABAP_TRUE.
      LS_ACCX-COSTCENTER  = ABAP_TRUE.
    ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-IO.
      LS_ACC-PREQ_ITEM   = C_LINE.
      LS_ACC-GL_ACCOUNT  = I_DATA-GL."GS_MAP_GL-SAKNR.
      LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
      LS_ACC-COSTCENTER  = I_DATA-COSTCENTER.
      LS_ACC-ORDERID     = I_DATA-BUDGET_NO.

      CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACC-COSTCENTER
                        IMPORTING E_DATA = LS_ACC-COSTCENTER ).

      LS_ACCX-PREQ_ITEM   = C_LINE.
      LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
      LS_ACCX-CO_AREA     = ABAP_TRUE.
      LS_ACCX-COSTCENTER  = ABAP_TRUE.
      LS_ACCX-ORDERID     = ABAP_TRUE.
    ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-WBS.
      LS_ACC-PREQ_ITEM   = C_LINE.
      LS_ACC-GL_ACCOUNT  = I_DATA-GL."GS_MAP_GL-SAKNR.
      LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
      LS_ACC-WBS_ELEMENT = I_DATA-BUDGET_NO.

      LS_ACCX-PREQ_ITEM   = C_LINE.
      LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
      LS_ACCX-CO_AREA     = ABAP_TRUE.
      LS_ACCX-WBS_ELEMENT = ABAP_TRUE.
    ENDIF.

    IF LS_ACC-GL_ACCOUNT IS INITIAL.
      LS_ACCX-GL_ACCOUNT  = ABAP_FALSE.
    ENDIF.

    IF I_DATA-ANLKL = GC_CONSTANT-AUC.
      LS_ACC-GL_ACCOUNT = I_DATA-GL.
    ENDIF.

    IF LS_ACC IS NOT INITIAL.
      LS_ACC-SERIAL_NO    = 1.
      LS_ACC-QUANTITY     = I_DATA-QTY.
      LS_ACC-CREAT_DATE   = SY-DATUM.
      APPEND LS_ACC  TO C_ACC.

      LS_ACCX-SERIAL_NO   = 1.
      LS_ACCX-QUANTITY    = ABAP_TRUE.
      LS_ACCX-CREAT_DATE  = ABAP_TRUE.
      APPEND LS_ACCX TO C_ACCX.
    ENDIF.
  ENDMETHOD.
  METHOD PR_LINE_ACC_MK.
    DATA : LS_ACC  LIKE LINE OF C_ACC,
           LS_ACCX LIKE LINE OF C_ACCX.

    LS_ACC-PREQ_ITEM   = C_LINE.
    LS_ACC-GL_ACCOUNT  = I_DATA-GL.
    LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
    LS_ACC-COSTCENTER  = I_DATA-COSTCENTER.

    CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACC-COSTCENTER
                      IMPORTING E_DATA = LS_ACC-COSTCENTER ).

    LS_ACCX-PREQ_ITEM   = C_LINE.
    LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
    LS_ACCX-CO_AREA     = ABAP_TRUE.
    LS_ACCX-COSTCENTER  = ABAP_TRUE.

    IF LS_ACC-GL_ACCOUNT IS INITIAL.
      LS_ACCX-GL_ACCOUNT  = ABAP_FALSE.
    ENDIF.

    IF LS_ACC IS NOT INITIAL.
      LS_ACC-SERIAL_NO    = 1.
      LS_ACC-QUANTITY     = I_DATA-QTY.
      LS_ACC-CREAT_DATE   = SY-DATUM.
      APPEND LS_ACC  TO C_ACC.

      LS_ACCX-SERIAL_NO   = 1.
      LS_ACCX-QUANTITY    = ABAP_TRUE.
      LS_ACCX-CREAT_DATE  = ABAP_TRUE.
      APPEND LS_ACCX TO C_ACCX.
    ENDIF.
  ENDMETHOD.
  METHOD PR_LINE_ASSET.
    DATA LS_ASSET LIKE LINE OF GS_DATA-GT_ASSET.

    DATA : LS_PRITEM  TYPE BAPIMEREQITEMIMP,
           LS_PRITEMX TYPE BAPIMEREQITEMX.

    DATA : LT_ASSET LIKE GS_DATA-GT_ASSET.

*    LT_ASSET = GS_DATA-GT_ASSET.
    DATA : LV_QTY    LIKE I_DATA-QTY,
           LV_PR_QTY LIKE I_DATA-QTY.

    LV_QTY = I_DATA-QTY.
    IF GS_DATA-GR_UOM[] IS NOT INITIAL.
      IF I_DATA-MEINS IN GS_DATA-GR_UOM[].
        LV_QTY    = 1.
        LV_PR_QTY = I_DATA-QTY.
      ELSE.
        LV_PR_QTY = 1.
      ENDIF.
    ELSE.
      LV_PR_QTY   = 1.
    ENDIF.

    DO LV_QTY TIMES.
*      READ TABLE LT_ASSET INTO LS_ASSET
      READ TABLE GS_DATA-GT_ASSET_TMP INTO LS_ASSET
      WITH KEY MATGROUP = I_DATA-ANLKL.
      IF SY-SUBRC EQ 0.
        DELETE GS_DATA-GT_ASSET_TMP INDEX SY-TABIX.

        LS_PRITEM-CTRL_IND   = GC_CONSTANT-R.
        LS_PRITEM-PUR_GROUP  = 'G02'.
        LS_PRITEM-PREQ_NAME  = SY-UNAME.
        LS_PRITEM-PLANT      = '1000'.
*      LS_PRITEM-TRACKINGNO
        LS_PRITEM-MATL_GROUP = I_DATA-ANLKL.
        LS_PRITEM-PREQ_DATE  = SY-DATUM.

        ls_PRITEM-PREQ_ITEM   = C_LINE.
        LS_PRITEM-SHORT_TEXT  = I_DATA-DESCP.
        LS_PRITEM-QUANTITY    = LV_PR_QTY.
        LS_PRITEM-UNIT        = I_DATA-MEINS.

        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            INPUT          = LS_PRITEM-UNIT
            LANGUAGE       = SY-LANGU
          IMPORTING
            OUTPUT         = LS_PRITEM-UNIT
          EXCEPTIONS
            UNIT_NOT_FOUND = 1
            OTHERS         = 2.
        IF SY-SUBRC <> 0.
* Implement suitable error handling here
        ENDIF.

        LS_PRITEM-PREQ_PRICE  = I_DATA-AMT / I_DATA-QTY.
        LS_PRITEM-CURRENCY    = I_DATA-WAERS.
        LS_PRITEM-DELIV_DATE  = I_DATA-DELIVERY.
        LS_PRITEM-TRACKINGNO  = I_DATA-COSTCENTER.
        LS_PRITEM-ACCTASSCAT  = GC_CONSTANT-A.
        LS_PRITEM-STORE_LOC   = I_DATA-STORAGE_LOCATION.

        LS_PRITEMX-PREQ_ITEM     = C_LINE.
        LS_PRITEMX-PREQ_ITEMX    = ABAP_TRUE.
        LS_PRITEMX-SHORT_TEXT    = ABAP_TRUE.
        LS_PRITEMX-QUANTITY      = ABAP_TRUE.
        LS_PRITEMX-UNIT          = ABAP_TRUE.
        LS_PRITEMX-PREQ_PRICE    = ABAP_TRUE.
        LS_PRITEMX-CURRENCY      = ABAP_TRUE.
        LS_PRITEMX-TRACKINGNO    = ABAP_TRUE.
        LS_PRITEMX-ACCTASSCAT    = ABAP_TRUE.
        LS_PRITEMX-STORE_LOC     = ABAP_TRUE.

        LS_PRITEMX-CTRL_IND       = ABAP_TRUE.
        LS_PRITEMX-PUR_GROUP      = ABAP_TRUE.
        LS_PRITEMX-PREQ_NAME      = ABAP_TRUE.
        LS_PRITEMX-PLANT          = ABAP_TRUE.
*        LS_PRITEMX-TRACKINGNO     = ABAP_TRUE.
        LS_PRITEMX-MATL_GROUP     = ABAP_TRUE.
        LS_PRITEMX-DELIV_DATE     = ABAP_TRUE.
        LS_PRITEMX-PREQ_DATE      = ABAP_TRUE.

        UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                               I_TEXT    = I_DATA-REMARK
                               I_ID      = GC_CONSTANT-ITEM_TEXT
                     CHANGING CT_DATA    = C_TEXT ).

        IF I_DATA-BUDGET_NO IS NOT INITIAL.
          UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                                 I_TEXT    = I_DATA-BUDGET_NO
                                 I_ID      = GC_CONSTANT-MEMO
                       CHANGING CT_DATA    = C_TEXT ).
        ENDIF.

        GS_DATA-GV_EKGRP = LS_PRITEM-PUR_GROUP.

        APPEND LS_PRITEM  TO C_DATA.
        APPEND LS_PRITEMX TO C_DATAX.

        PR_LINE_ACC_ASSET( EXPORTING I_DATA         = I_DATA
                                     I_ASSET_NO     = LS_ASSET-ANLN1
                                     I_ASSET_SUB_NO = LS_ASSET-ANLN2
                            CHANGING C_LINE         = C_LINE
                                     C_ACC          = C_ACC
                                     C_ACCX         = C_ACCX ).
        ADD 1 TO C_LINE.
      ENDIF.
    ENDDO.
    SUBTRACT 1 FROM C_LINE.
  ENDMETHOD.
  METHOD PR_LINE_ACC_ASSET.
    DATA : LS_ACC  LIKE LINE OF C_ACC,
           LS_ACCX LIKE LINE OF C_ACCX.

    READ TABLE GT_MAP_GL INTO GS_MAP_GL
    WITH KEY MATKL = I_DATA-ANLKL.
    IF SY-SUBRC NE 0.
      CLEAR : GS_MAP_GL-SAKNR.
    ENDIF.

    IF     I_DATA-BUDGET_TYPE EQ GC_CONSTANT-CO.
      LS_ACC-PREQ_ITEM   = C_LINE.
      LS_ACC-GL_ACCOUNT  = GS_MAP_GL-SAKNR.
      LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
      LS_ACC-COSTCENTER  = I_DATA-BUDGET_NO.

      CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACC-COSTCENTER
                        IMPORTING E_DATA = LS_ACC-COSTCENTER ).

      LS_ACCX-PREQ_ITEM   = C_LINE.
      LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
      LS_ACCX-CO_AREA     = ABAP_TRUE.
      LS_ACCX-COSTCENTER  = ABAP_TRUE.
    ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-IO.
      LS_ACC-PREQ_ITEM   = C_LINE.
      LS_ACC-GL_ACCOUNT  = I_DATA-GL."GS_MAP_GL-SAKNR.
      LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
      LS_ACC-COSTCENTER  = I_DATA-COSTCENTER.
      LS_ACC-ORDERID     = I_DATA-BUDGET_NO.

      CONVERT_ALPHA_IN( EXPORTING I_DATA = LS_ACC-COSTCENTER
                        IMPORTING E_DATA = LS_ACC-COSTCENTER ).

      LS_ACCX-PREQ_ITEM   = C_LINE.
      LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
      LS_ACCX-CO_AREA     = ABAP_TRUE.
      LS_ACCX-COSTCENTER  = ABAP_TRUE.
      LS_ACCX-ORDERID     = ABAP_TRUE.
    ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-WBS.
      LS_ACC-PREQ_ITEM   = C_LINE.
      LS_ACC-GL_ACCOUNT  = I_DATA-GL."GS_MAP_GL-SAKNR.
      LS_ACC-CO_AREA     = GC_CONSTANT-COAR.
      LS_ACC-WBS_ELEMENT = I_DATA-BUDGET_NO.

      LS_ACCX-PREQ_ITEM   = C_LINE.
      LS_ACCX-GL_ACCOUNT  = ABAP_TRUE.
      LS_ACCX-CO_AREA     = ABAP_TRUE.
      LS_ACCX-WBS_ELEMENT = ABAP_TRUE.
    ENDIF.

    IF LS_ACC IS NOT INITIAL.
      LS_ACC-SERIAL_NO    = 1.
      LS_ACC-QUANTITY     = 1.
      LS_ACC-CREAT_DATE   = SY-DATUM.
      LS_ACC-ASSET_NO     = I_ASSET_NO.
      LS_ACC-SUB_NUMBER   = I_ASSET_SUB_NO.
      APPEND LS_ACC  TO C_ACC.

      LS_ACCX-SERIAL_NO   = 1.
      LS_ACCX-ASSET_NO    = I_ASSET_NO.
      LS_ACCX-SUB_NUMBER  = I_ASSET_SUB_NO.
      LS_ACCX-QUANTITY    = ABAP_TRUE.
      LS_ACCX-CREAT_DATE  = ABAP_TRUE.
      APPEND LS_ACCX TO C_ACCX.
    ENDIF.
  ENDMETHOD.
  METHOD GET_DATA_FROM_K2.

    DATA : BEGIN OF LS_BUDGET_API_K2,
             MEMO_DOCID                   TYPE STRING,
             CREATE_DATE                  TYPE STRING,
             CREATE_BY                    TYPE STRING,
             CREATE_BY_NAME               TYPE STRING,
             MEMO_STATUS                  TYPE STRING,
             MEMO_STATUS_NAME             TYPE STRING,
             REQUEST_BY                   TYPE STRING,
             REQUEST_BY_NAME              TYPE STRING,
             REQUEST_DATE                 TYPE STRING,
             DEPARTMENT_ID                TYPE STRING,
             DEPARTMENT_NAME              TYPE STRING,
             MEMO_TYPE_ID                 TYPE STRING,
             MEMO_ACTIVITY_ID             TYPE STRING,
             MEMO_ACTIVITY_NAME           TYPE STRING,
             MEMO_SUBTYPE_ID              TYPE STRING,
             MEMO_SUBTYPE_NAME            TYPE STRING,
             MEMO_TYPE_NAME               TYPE STRING,
             MEMO_TYPE_OTHERTEXT          TYPE STRING,
             MEMO_SUBJECT                 TYPE STRING,
             MEMO_CONTENT                 TYPE STRING,
             MEMO_PURPOSE                 TYPE STRING,
             MEMO_EXPECTED_RESULT         TYPE STRING,
             MEMO_PERSONINCHARGE          TYPE STRING,
             MEMO_BUDGET                  TYPE STRING,
             MEMO_PERIOD                  TYPE STRING,
             MEMO_COMMENT                 TYPE STRING,
             MEMO_REMARK                  TYPE STRING,
             CREDITCONTROL_COMMENT        TYPE STRING,
             IO_DOCID                     TYPE STRING,
             IS_DISPLAY_CUSTOMERDATA      TYPE STRING,
             IS_DISPLAY_IO_DOCID          TYPE STRING,
             IS_MEMO_SUBTYPE              TYPE STRING,
             SALERESULT_DATE              TYPE STRING,
             DEALER_ID                    TYPE STRING,
             DEALER_NAME                  TYPE STRING,
             IS_VERSION_OLD               TYPE STRING,
             REVISE_VESION                TYPE STRING,
             MEMO_REFDOCID                TYPE STRING,
             PREMIUM_REF_MEMO_DOCID       TYPE STRING,
             PREMIUM_TYPE_ID              TYPE STRING,
             PAYMENT_VALUE_DATE           TYPE STRING,
             PAYMENT_TOTAL                TYPE STRING,
             PAYMENT_ITEMS                TYPE STRING,
             PAYMENT_FROM                 TYPE STRING,
             PAYMENT_TO                   TYPE STRING,
             PAYMENT_BY                   TYPE STRING,
             PAYMENT_REMARK               TYPE STRING,
             PAYMENT_BY_NAME              TYPE STRING,
             CURRENCY_CODE                TYPE STRING,
             PAYMENT_TYPE_ID              TYPE STRING,
             PAYMENT_TYPE_NAME            TYPE STRING,
             BANK_IMAGE_URL               TYPE STRING,
             PUBLIC_OFFICIAL_NAME         TYPE STRING,
             PUBLIC_OFFICIAL_POSITION     TYPE STRING,
             PUBLIC_OFFICIAL_ORGANIZATION TYPE STRING,
             LOCATION                     TYPE STRING,
             TOTAL_VALUE                  TYPE STRING,
             ESTIMATED_EXPENSE            TYPE STRING,
             SCHEDULED_DATE               TYPE STRING,
             REF_DOCID                    TYPE STRING,
             ACTUAL_DATE                  TYPE STRING,
             ACTUAL_EXPENSE               TYPE STRING,
             INVITATION_DATE              TYPE STRING,
             INVITATION_ORGANIZATION      TYPE STRING,
             INVITATION_LOCATION          TYPE STRING,
             INVITATION_CONTENTS          TYPE STRING,
             IS_ENTERTAINMENT_GIFTS       TYPE STRING,
             LEDGER_NO                    TYPE STRING,
             INVITATION_ACTUAL_EXPENSE    TYPE STRING,
             USAAGE_DEPARTMENT_NAME       TYPE STRING,
             USAAGE_DEPARTMENT_ID         TYPE STRING,
             PROFITCENTER_ID              TYPE STRING,
             MEMO_ACCOUNT_ID              TYPE STRING,
             MEMO_ACCOUNT_CODE            TYPE STRING,
             MEMO_ACCOUNT_NAME            TYPE STRING,
             MEMO_ACTIVITY_TYPE_ID        TYPE STRING,
             MEMO_ACTIVITY_TYPE_NAME      TYPE STRING,
             MEMO_ACTIVITY_SUBTYPE_ID     TYPE STRING,
             MEMO_ACTIVITY_SUBTYPE_NAME   TYPE STRING,
             ACTIVITYPE_TYPE_CODE         TYPE STRING,
             BUDGET_YEAR                  TYPE STRING,
             BUDGET_DOCID                 TYPE STRING,
             IS_MEMO_ACTIVITY_TYPE        TYPE STRING,
             IS_MEMO_ACTIVITY_SUBTYPE     TYPE STRING,
             IS_MEMO_ACCOUNT_CODE         TYPE STRING,
             MEMO_GROSS_PROFIT            TYPE STRING,
             MEMO_STARTDATE               TYPE STRING,
             MEMO_ENDDATE                 TYPE STRING,
             IS_DISPLAY_GROSS_PROFIT      TYPE STRING,
             IS_DISPLAY_STARTDATE         TYPE STRING,
             IS_DISPLAY_ENDDATE           TYPE STRING,
             IS_BUDGET_ALLCOMPANY         TYPE STRING,
             IS_ADDITAIONAL_BUDGET        TYPE STRING,
             QUOTATION_NO                 TYPE STRING,
             PROJECT_NAME                 TYPE STRING,
             OWNER_NAME                   TYPE STRING,
             VALIDITY                     TYPE STRING,
             DELIVERY_START               TYPE STRING,
             DELIVERY_END                 TYPE STRING,
             REQUESTED_PRICE              TYPE STRING,
             GP2_AMOUNT                   TYPE STRING,
             GP2_NEGATIVE                 TYPE STRING,
             IS_EDIT_GP2                  TYPE STRING,
             GP2_PERCENT                  TYPE STRING,
             RA_QTY                       TYPE STRING,
             SK_QTY                       TYPE STRING,
             VRV_QTY                      TYPE STRING,
             PA_QTY                       TYPE STRING,
             AC_QTY                       TYPE STRING,
             AH_QTY                       TYPE STRING,
             CH_QTY                       TYPE STRING,
             SB_QTY                       TYPE STRING,
             ACC_QTY                      TYPE STRING,
             FCU_QTY                      TYPE STRING,
             AHUR_QTY                     TYPE STRING,
             MODEL_TYPE_ID                TYPE STRING,
             MODEL_TYPE_NAME              TYPE STRING,
             COMPETITOR                   TYPE STRING,
             COMPETITOR_PRICE             TYPE STRING,
             FORM_NAME                    TYPE STRING,
             BUDGET_TYPE_ID               TYPE STRING,
             BUDGET_SAP_ID                TYPE STRING,
             GROUP_CODE                   TYPE STRING,
           END OF LS_BUDGET_API_K2.


    DATA : BEGIN OF LS_HEADER_API_K2,
             PR_REQUEST_DOCID         TYPE STRING,
             PR_REQUEST_DOCID_ENCRYPT TYPE STRING,
             PR_REQUEST_STATUS_ID     TYPE STRING,
             REQUEST_DATE             TYPE STRING,
             DEPARTMENT_ID            TYPE STRING,
             DEPARTMENT_NAME          TYPE STRING,
             REQUEST_BY               TYPE STRING,
             REQUEST_BY_NAME          TYPE STRING,
             PR_SUBJECT               TYPE STRING,
             PR_PERSONINCHARGE        TYPE STRING,
             PR_DESCRIPTION           TYPE STRING,
             PR_REQUEST_TOTAL         TYPE STRING,
             SAP_NO                   TYPE STRING,
             POSTING_DATE             TYPE STRING,
             UPDATED_FROM_SAP         TYPE STRING,
             PLANT                    TYPE STRING,
             BRANCH                   TYPE STRING,
             REQUEST_BY_COST_CENTER   TYPE STRING,
             IS_ACTIVE                TYPE STRING,
             CREATE_DATE              TYPE STRING,
             CREATE_BY                TYPE STRING,
             CREATE_BY_NAME           TYPE STRING,
             UPDATE_DATE              TYPE STRING,
             UPDATE_BY                TYPE STRING,
             UPDATE_BY_NAME           TYPE STRING,
             SERIAL_NO                TYPE STRING,
           END OF LS_HEADER_API_K2.

    DATA : BEGIN OF LS_DETAIL_API_K2,
             PR_REQUEST_DETAIL_SEQ TYPE STRING,
             PR_REQUEST_DOCID      TYPE STRING,
             PURCHASE_TYPE         TYPE STRING,
             MATERIAL_GROUP        TYPE STRING,
             BUDGET_ID             TYPE STRING,
             BUDGET_TYPE           TYPE STRING,
             MATERIAL_CODE         TYPE STRING,
             DESCRIPTION           TYPE STRING,
             QTY                   TYPE STRING,
             BASE_UNIT             TYPE STRING,
             AMOUNT                TYPE STRING,
             CURRENCY              TYPE STRING,
             DELIVERY_DATE         TYPE STRING,
             SAP_NO                TYPE STRING,
             SAP_ITEM              TYPE STRING,
             PO_QTY                TYPE STRING,
             STORAGE_LOCATION      TYPE STRING,
             REQUEST_FOR           TYPE STRING,
             ITEM_REMARK           TYPE STRING,
             MEMO_ID               TYPE STRING,
             GL                    TYPE STRING,
             REF_EXPENSE           TYPE STRING,
             IS_ACTIVE             TYPE STRING,
             COST_CENTER           TYPE STRING,
             CREATE_DATE           TYPE STRING,
             CREATE_BY             TYPE STRING,
             CREATE_BY_NAME        TYPE STRING,
             UPDATE_DATE           TYPE STRING,
             UPDATE_BY             TYPE STRING,
             UPDATE_BY_NAME        TYPE STRING,
             LINE_ITEM             TYPE I,
           END OF LS_DETAIL_API_K2.

    DATA : BEGIN OF LS_DATA_BUDGET,
             VALUE LIKE TABLE OF LS_BUDGET_API_K2,
           END OF LS_DATA_BUDGET.

    DATA : BEGIN OF LS_DATA_HEADER,
             VALUE LIKE TABLE OF LS_HEADER_API_K2,
           END OF LS_DATA_HEADER.

    DATA : BEGIN OF LS_DATA_DETAIL,
             VALUE LIKE TABLE OF LS_DETAIL_API_K2,
           END OF LS_DATA_DETAIL.

    DATA : LS_ITEM TYPE ZSDSMMS003.

    DATA : LV_LINE TYPE I.

    DATA : BEGIN OF LS_SUM,
             EXPENSE_LINE    TYPE I,
             FIX_ASSET_VALUE TYPE P DECIMALS 2,
           END OF LS_SUM.
    DATA : LT_SUM LIKE SORTED TABLE OF LS_SUM WITH UNIQUE KEY EXPENSE_LINE.

    DATA : LCL_UTIL TYPE REF TO ZCL_SDSCA_UTIL_SDS.

    DATA : LV_WBS TYPE PS_POSID.

    CONSTANTS : BEGIN OF LC_CON,
                  FA TYPE C LENGTH 2 VALUE 'FA',
                END OF LC_CON.

    IF LCL_UTIL IS NOT BOUND.
      CREATE OBJECT LCL_UTIL.
    ENDIF.

    GET_HEADER_API_K2( EXPORTING I_WEB_NO = I_WEB_NO
                        CHANGING C_HEADER = LS_DATA_HEADER ).

    GET_DETAIL_API_K2( EXPORTING I_WEB_NO = I_WEB_NO
                        CHANGING C_DETAIL = LS_DATA_DETAIL ).

    LOOP AT LS_DATA_HEADER-VALUE INTO LS_HEADER_API_K2 .
      E_HEADER_PR-RAMARK                 = LS_HEADER_API_K2-PR_DESCRIPTION.
      E_HEADER_PR-PLANT                  = LS_HEADER_API_K2-PLANT.
      E_HEADER_PR-BRANCH                 = LS_HEADER_API_K2-BRANCH.
      E_HEADER_PR-REQUEST_BY_COST_CENTER = LS_HEADER_API_K2-REQUEST_BY_COST_CENTER.
    ENDLOOP.

    LOOP AT LS_DATA_DETAIL-VALUE ASSIGNING FIELD-SYMBOL(<LFS_DATA>)." WHERE PURCHASE_TYPE EQ GC_CONSTANT-A_L
      " AND REF_EXPENSE   IS NOT INITIAL.
      ADD 1 TO LV_LINE.

      <LFS_DATA>-LINE_ITEM   = LV_LINE.

      GS_DATA-GS_REF_EXP-ASSET_LINE   = LV_LINE.
      GS_DATA-GS_REF_EXP-EXPENSE_LINE = <LFS_DATA>-REF_EXPENSE.
      APPEND GS_DATA-GS_REF_EXP TO GS_DATA-GT_REF_EXP.

      LS_SUM-EXPENSE_LINE    = <LFS_DATA>-REF_EXPENSE.
      LS_SUM-FIX_ASSET_VALUE = <LFS_DATA>-AMOUNT.
      COLLECT LS_SUM INTO LT_SUM.
    ENDLOOP.

    LOOP AT LS_DATA_DETAIL-VALUE INTO LS_DETAIL_API_K2.

      IF LS_DETAIL_API_K2-BUDGET_TYPE IS INITIAL.
        LS_DETAIL_API_K2-BUDGET_TYPE = GET_BUDGET_TYPE( LS_DETAIL_API_K2-BUDGET_ID ).
      ENDIF.

      READ TABLE LT_SUM
      WITH TABLE KEY EXPENSE_LINE = LS_DETAIL_API_K2-LINE_ITEM TRANSPORTING NO FIELDS.
      IF SY-SUBRC EQ 0.
        CONTINUE.
      ENDIF.

*      GS_DATA-GS_REF_EXP-ASSET_LINE   = LV_LINE.
*      GS_DATA-GS_REF_EXP-EXPENSE_LINE = LS_DETAIL_API_K2-REF_EXPENSE.
*      APPEND GS_DATA-GS_REF_EXP TO GS_DATA-GT_REF_EXP.
*      IF LS_DETAIL_API_K2-MATERIAL_GROUP = GC_CONSTANT-AUC AND
*         GS_DATA-GV_GL_AUC IS INITIAL.
*        GET_BUDGET_API_K2( EXPORTING I_BUDGET = LS_DETAIL_API_K2-BUDGET_ID
*                            CHANGING C_BUDGET = LS_DATA_BUDGET ).
*        READ TABLE LS_DATA_BUDGET-VALUE INTO DATA(LS_TMP) INDEX 1.
*        IF SY-SUBRC EQ 0.
*          GS_DATA-GV_GL_AUC = LS_TMP-MEMO_ACCOUNT_CODE.
*        ELSE.
*          CLEAR : GS_DATA-GV_GL_AUC.
*        ENDIF.
*        IF GS_DATA-GV_GL_AUC IS INITIAL.
*          CLEAR : ET_ITEM.
*          GS_DATA-GV_MESSAGE = TEXT-E01.
*          EXIT.
*        ENDIF.
*      ENDIF.
      LS_ITEM-LINE_ITEM   = LS_DETAIL_API_K2-LINE_ITEM.
      LS_ITEM-BANFN       = SPACE.
      LS_ITEM-BNFPO       = SPACE.
      IF LS_DETAIL_API_K2-PURCHASE_TYPE EQ GC_CONSTANT-A_L.
        IF LS_DETAIL_API_K2-MATERIAL_GROUP+0(2) EQ LC_CON-FA.
          LS_ITEM-KNTTP       = GC_CONSTANT-A. "Asset
        ELSE.
          LS_ITEM-KNTTP       = SPACE.
        ENDIF.
        E_HEADER_PR-PR_TYPE = GC_CONSTANT-ZPR.
        LS_ITEM-ANLKL       = LS_DETAIL_API_K2-MATERIAL_GROUP.
      ELSEIF LS_DETAIL_API_K2-PURCHASE_TYPE EQ GC_CONSTANT-B_L.
        LS_ITEM-KNTTP       = GC_CONSTANT-G. "FG
        E_HEADER_PR-PR_TYPE = GC_CONSTANT-ZPR.
      ELSEIF LS_DETAIL_API_K2-PURCHASE_TYPE EQ GC_CONSTANT-C_L. "OR
*             LS_DETAIL_API_K2-PURCHASE_TYPE EQ GC_CONSTANT-D_L.
        LS_ITEM-KNTTP       = GC_CONSTANT-P. "Space part
        E_HEADER_PR-PR_TYPE = GC_CONSTANT-ZPR.
      ELSEIF LS_DETAIL_API_K2-PURCHASE_TYPE EQ GC_CONSTANT-H_L.
        LS_ITEM-KNTTP       = GC_CONSTANT-H. " other purchase
        E_HEADER_PR-PR_TYPE = GC_CONSTANT-ZPR.
        LS_ITEM-ANLKL       = LS_DETAIL_API_K2-MATERIAL_GROUP.
      ELSE.
        LS_ITEM-KNTTP       = SPACE. " other purchase
        E_HEADER_PR-PR_TYPE = GC_CONSTANT-ZPR.
        LS_ITEM-ANLKL       = LS_DETAIL_API_K2-MATERIAL_GROUP.
      ENDIF.

      IF LS_DETAIL_API_K2-PURCHASE_TYPE EQ GC_CONSTANT-E_L.
        GS_DATA-GV_COATING  = ABAP_TRUE.
        LS_DETAIL_API_K2-GL = '4131000500'.
      ELSE.
        CLEAR : GS_DATA-GV_COATING.
      ENDIF.

      LS_ITEM-BUDGET_NO   = LS_DETAIL_API_K2-BUDGET_ID.
      LS_ITEM-BUDGET_TYPE = LS_DETAIL_API_K2-BUDGET_TYPE.

      IF LS_ITEM-BUDGET_TYPE    EQ GC_CONSTANT-WBS AND
         LS_ITEM-BUDGET_NO+0(1) EQ GC_CONSTANT-P.
        LV_WBS = LS_DETAIL_API_K2-BUDGET_ID.
        LS_ITEM-BUDGET_NO = LCL_UTIL->GET_WBS_LV_FOR_PROJECT( LV_WBS ).
      ENDIF.

      LS_ITEM-MATNR       = LS_DETAIL_API_K2-MATERIAL_CODE .
      IF LS_ITEM-MATNR IS NOT INITIAL.
        COLLECT_MAT( LS_ITEM-MATNR ).
      ENDIF.
      LS_ITEM-DESCP       = LS_DETAIL_API_K2-DESCRIPTION.
      LS_ITEM-QTY         = LS_DETAIL_API_K2-QTY.
      LS_ITEM-MEINS       = LS_DETAIL_API_K2-BASE_UNIT.
      READ TABLE LT_SUM INTO LS_SUM
      WITH TABLE KEY EXPENSE_LINE = LS_DETAIL_API_K2-REF_EXPENSE.
      IF SY-SUBRC EQ 0.
        READ TABLE LS_DATA_DETAIL-VALUE INTO DATA(LS_EXP)
        WITH KEY LINE_ITEM = LS_DETAIL_API_K2-REF_EXPENSE.
        IF SY-SUBRC EQ 0.
          LS_ITEM-AMT  = LS_DETAIL_API_K2-AMOUNT + ( ( LS_EXP-AMOUNT *  LS_DETAIL_API_K2-AMOUNT ) / LS_SUM-FIX_ASSET_VALUE ).
        ELSE.
          LS_ITEM-AMT    = LS_DETAIL_API_K2-AMOUNT.
        ENDIF.
      ELSE.
        LS_ITEM-AMT    = LS_DETAIL_API_K2-AMOUNT.
      ENDIF.

      LS_ITEM-WAERS       = LS_DETAIL_API_K2-CURRENCY.
      REPLACE ALL OCCURRENCES OF PCRE '-' IN LS_DETAIL_API_K2-DELIVERY_DATE WITH SPACE.
      LS_ITEM-DELIVERY    = LS_DETAIL_API_K2-DELIVERY_DATE.
      LS_ITEM-COSTCENTER  = LS_DETAIL_API_K2-COST_CENTER.
      LS_ITEM-STORAGE_LOCATION = LS_DETAIL_API_K2-STORAGE_LOCATION.
      LS_ITEM-REQUEST_FOR      = LS_DETAIL_API_K2-REQUEST_FOR.
      LS_ITEM-GL               = LS_DETAIL_API_K2-GL.
      LS_ITEM-REMARK           = LS_DETAIL_API_K2-ITEM_REMARK.

      APPEND LS_ITEM TO ET_ITEM.
      CLEAR : LS_ITEM.
    ENDLOOP.

    GET_DATA_BOM( ).

  ENDMETHOD.
  METHOD CREATE_FIX_ASSET.

    DATA : LS_DATA TYPE ZSDSMMS003.

    DATA : LS_ASSET TYPE ZSDSFIS011,
           LT_ASSET TYPE TABLE OF ZSDSFIS011.

    DATA : lV_ERROR TYPE C.

    DATA : LT_RETURN  TYPE  ZSDSFIS012_TT,
           LS_RETURN  TYPE  ZSDSFIS012,
           LV_MESSAGE TYPE  CHAR255,
           LV_MESTYPE TYPE  CHAR1.

    DATA : BEGIN OF LS_T023,
             MATKL TYPE T023-MATKL,
             ANLKL TYPE T023-ANLKL,
           END OF LS_T023.

    DATA : LV_QTY LIKE LS_DATA-QTY.

    DATA LT_T023 LIKE TABLE OF LS_T023.

    CONSTANTS : BEGIN OF LC_CON,
                  A       TYPE C LENGTH 1 VALUE 'A',
                  COMCODE TYPE C LENGTH 4 VALUE '1000',
                END OF LC_CON.

    DATA : LT_TMP TYPE TABLE OF ZSDSMMS003 WITH EMPTY KEY.
    DATA(LV_CHECK) = CHECK_LOCK_ZSDSMMT022( ).
    IF LV_CHECK IS INITIAL.
      LOCK_TABLE_ZSDSMMT022( ).
      IF GS_DATA-GV_LOCK IS NOT INITIAL.
        SELECT BUKRS,
               ANLN1,
               ANLN2,
               ANLKL
          FROM ZSDSMMT022
          INTO TABLE @DATA(LT_ZSDSMMT022).
      ENDIF.
    ENDIF.

    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

    DATA : LR_CONFIG TYPE RANGE OF ZSDSCAC001.

    LT_TMP = IT_ITEM.

    SELECT T023~MATKL,
           T023~ANLKL
      FROM T023
      INNER JOIN @LT_TMP AS A ON T023~MATKL EQ A~ANLKL
      INTO TABLE @LT_T023.

    LOOP AT IT_ITEM INTO LS_DATA WHERE KNTTP EQ LC_CON-A.

      READ TABLE GS_DATA-GT_REF_EXP
      WITH KEY EXPENSE_LINE = LS_DATA-LINE_ITEM TRANSPORTING NO FIELDS.
      IF SY-SUBRC EQ 0.
        CONTINUE.
      ENDIF.

      LV_QTY = LS_DATA-QTY.

      IF GS_DATA-GR_UOM[] IS NOT INITIAL.
        IF LS_DATA-MEINS IN GS_DATA-GR_UOM[].
          LV_QTY = 1.
        ENDIF.
      ENDIF.

      DO LV_QTY TIMES.
        READ TABLE LT_T023 INTO LS_T023
        WITH KEY MATKL = LS_DATA-ANLKL.
        IF SY-SUBRC EQ 0.
          LS_ASSET-ASSET_CLASS  = LS_T023-ANLKL.
        ELSE.
          lV_ERROR = ABAP_TRUE.
          EXIT.
        ENDIF.

        LS_ASSET-COMPANY_CODE = LC_CON-COMCODE.
        LS_ASSET-DESCRIPTION1 = LS_DATA-DESCP.
        LS_ASSET-QTY          = 1.
        LS_ASSET-MATGROUP     = LS_DATA-ANLKL.
        LS_ASSET-COST_CENTER  = LS_DATA-COSTCENTER.
        LS_ASSET-OWNER        = LS_DATA-REQUEST_FOR.

        IF LS_DATA-BUDGET_TYPE EQ GC_CONSTANT-WBS.
          LS_ASSET-WBSNO = LS_DATA-BUDGET_NO.
        ELSE.
          lV_ERROR = ABAP_TRUE.
          EXIT.
        ENDIF.
        APPEND LS_ASSET TO LT_ASSET.
      ENDDO.
    ENDLOOP.

    IF lV_ERROR NE ABAP_TRUE.
      LOOP AT LT_ASSET INTO LS_ASSET.
        READ TABLE LT_ZSDSMMT022 INTO DATA(LS_ZSDSMMT022)
        WITH KEY ANLKL = LS_ASSET-ASSET_CLASS.
        IF SY-SUBRC EQ 0.
          DELETE LT_ZSDSMMT022 INDEX SY-TABIX.
          DELETE FROM ZSDSMMT022 WHERE BUKRS = LS_ZSDSMMT022-BUKRS AND
                                       ANLN1 = LS_ZSDSMMT022-ANLN1 AND
                                       ANLN2 = LS_ZSDSMMT022-ANLN2.
          COMMIT( ).

          CALL FUNCTION 'ME_CHECK_DOCUMENT_FOR_ASSET'
            EXPORTING
              I_ANLN1           = LS_ZSDSMMT022-ANLN1
              I_ANLN2           = LS_ZSDSMMT022-ANLN2
              I_BUKRS           = LS_ZSDSMMT022-BUKRS
            EXCEPTIONS
              ORDER_FOUND       = 01
              REQUISITION_FOUND = 02.
          IF SY-SUBRC EQ 0.
            LS_RETURN-BUKRS    = LS_ZSDSMMT022-BUKRS.
            LS_RETURN-ANLKL    = LS_ZSDSMMT022-ANLKL.
            LS_RETURN-ANLN1    = LS_ZSDSMMT022-ANLN1.
            LS_RETURN-ANLN2    = LS_ZSDSMMT022-ANLN2.
            LS_RETURN-MATGROUP = LS_ASSET-MATGROUP.
            APPEND LS_RETURN TO R.
          ELSE.
            CALL FUNCTION 'Z_SDSFI_ASSET_CREATE'
              EXPORTING
                IS_INPUT  = LS_ASSET
              IMPORTING
                ET_RETURN = LT_RETURN
                E_MESSAGE = LV_MESSAGE
                E_MESTYPE = LV_MESTYPE.
            APPEND LINES OF LT_RETURN TO R.
          ENDIF.
        ELSE.
          CALL FUNCTION 'Z_SDSFI_ASSET_CREATE'
            EXPORTING
              IS_INPUT  = LS_ASSET
            IMPORTING
              ET_RETURN = LT_RETURN
              E_MESSAGE = LV_MESSAGE
              E_MESTYPE = LV_MESTYPE.

          APPEND LINES OF LT_RETURN TO R.
        ENDIF.
        CLEAR : LT_RETURN,LV_MESSAGE,LV_MESTYPE,LS_ASSET.
      ENDLOOP.
    ELSE.
      GS_DATA-GV_MESSAGE = TEXT-E02.
    ENDIF.

    SORT R.
    DELETE ADJACENT DUPLICATES FROM R.
  ENDMETHOD.
  METHOD GET_HEADER_API_K2.

    DATA : I_URL              TYPE STRING,
           I_METHOD           TYPE STRING,
           I_HEADER           TYPE ZSDSCAS001_TT,
           I_BODY_TEXT        TYPE STRING,
           I_BODY_BIN         TYPE XSTRING,
           I_LEN              TYPE I,
           I_LEN_BIN          TYPE I,
           I_FROM             TYPE ZSDSCAS001_TT,
           I_USER             TYPE STRING,
           I_PASS             TYPE STRING,
           E_RETURN_BODY_TEXT TYPE STRING,
           E_RETURN_BODY_BIN  TYPE XSTRING,
           E_MESSAGE          TYPE STRING,
           E_STATUS           TYPE C.

    I_METHOD = GC_CONSTANT-GET.

    LCL_DATA=>GET_URL_HEADER( EXPORTING I_WEB_NO = I_WEB_NO
                               CHANGING C_URL    = I_URL ).
    LCL_DATA=>GET_HEADER_API_HEADER( CHANGING C_HEADER = I_HEADER ).
    LCL_DATA=>GET_DETAIL_API_HEADER( CHANGING C_BODY = I_BODY_TEXT
                                              C_LEN  = I_LEN ).

    LCL_DATA=>GET_USER_PASS( CHANGING I_USER = I_USER
                                      I_PASS = I_PASS ).


    CALL METHOD ZCL_SDSCA_CAL_API=>CALL_API
      EXPORTING
        I_URL              = I_URL
        I_METHOD           = I_METHOD
        I_HEADER           = I_HEADER
        I_BODY_TEXT        = I_BODY_TEXT
        I_BODY_BIN         = I_BODY_BIN
        I_LEN              = I_LEN
        I_LEN_BIN          = I_LEN_BIN
        I_FROM             = I_FROM
        I_USER             = I_USER
        I_PASS             = I_PASS
      IMPORTING
        E_RETURN           = C_HEADER
        E_RETURN_BODY_TEXT = E_RETURN_BODY_TEXT
        E_RETURN_BODY_BIN  = E_RETURN_BODY_BIN
        E_MESSAGE          = E_MESSAGE
        E_STATUS           = E_STATUS.
    IF SY-SUBRC EQ 0.
      MESSAGE S000(ZSDSDMM01) WITH E_RETURN_BODY_TEXT.
    ENDIF.

  ENDMETHOD.
  METHOD GET_DETAIL_API_K2.

    DATA : I_URL              TYPE STRING,
           I_METHOD           TYPE STRING,
           I_HEADER           TYPE ZSDSCAS001_TT,
           I_BODY_TEXT        TYPE STRING,
           I_BODY_BIN         TYPE XSTRING,
           I_LEN              TYPE I,
           I_LEN_BIN          TYPE I,
           I_FROM             TYPE ZSDSCAS001_TT,
           I_USER             TYPE STRING,
           I_PASS             TYPE STRING,
           E_RETURN_BODY_TEXT TYPE STRING,
           E_RETURN_BODY_BIN  TYPE XSTRING,
           E_MESSAGE          TYPE STRING,
           E_STATUS           TYPE C.

    I_METHOD = GC_CONSTANT-GET.

    LCL_DATA=>GET_URL_DETAIL( EXPORTING I_WEB_NO =  I_WEB_NO
                               CHANGING C_URL    = I_URL ).
    LCL_DATA=>GET_HEADER_API_DETAIL( CHANGING C_HEADER = I_HEADER ).
    LCL_DATA=>GET_DETAIL_API_DETAIL( CHANGING C_BODY = I_BODY_TEXT
                                              C_LEN  = I_LEN ).

    LCL_DATA=>GET_USER_PASS( CHANGING I_USER = I_USER
                                      I_PASS = I_PASS ).

    CALL METHOD ZCL_SDSCA_CAL_API=>CALL_API
      EXPORTING
        I_URL              = I_URL
        I_METHOD           = I_METHOD
        I_HEADER           = I_HEADER
        I_BODY_TEXT        = I_BODY_TEXT
        I_BODY_BIN         = I_BODY_BIN
        I_LEN              = I_LEN
        I_LEN_BIN          = I_LEN_BIN
        I_FROM             = I_FROM
        I_USER             = I_USER
        I_PASS             = I_PASS
      IMPORTING
        E_RETURN           = C_DETAIL
        E_RETURN_BODY_TEXT = E_RETURN_BODY_TEXT
        E_RETURN_BODY_BIN  = E_RETURN_BODY_BIN
        E_MESSAGE          = E_MESSAGE
        E_STATUS           = E_STATUS.
    IF SY-SUBRC EQ 0.
      MESSAGE S000(ZSDSDMM01) WITH E_RETURN_BODY_TEXT.
    ENDIF.
  ENDMETHOD.
  METHOD GET_URL_HEADER.

    CONSTANTS : BEGIN OF LC_CON,
                  SQ TYPE C LENGTH 1 VALUE '''',
                END OF LC_CON.

    DATA : LV_DOC TYPE STRING.

    DATA : LV_END_POINT TYPE STRING.

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID             = 'ZSDSCAR0010'
                                                  I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                  I_PARAM_EXT         = 'URL_K2'
                                        CHANGING  C_RETURN            = LV_END_POINT ).

    CONCATENATE LV_END_POINT
                'prHeaders?$filter=pr_request_docid eq'
           INTO LV_END_POINT.

    CONCATENATE LC_CON-SQ I_WEB_NO LC_CON-SQ INTO LV_DOC.

    CONCATENATE LV_END_POINT
                LV_DOC
           INTO C_URL SEPARATED BY SPACE.

  ENDMETHOD.
  METHOD GET_HEADER_API_HEADER.
    DATA LS_HEADER LIKE LINE OF C_HEADER.

    LS_HEADER-NAME  = 'Accept'.
    LS_HEADER-VALUE = 'application/json'.
    APPEND LS_HEADER TO C_HEADER.

  ENDMETHOD.
  METHOD GET_DETAIL_API_HEADER.


  ENDMETHOD.
  METHOD GET_URL_BUDGET.
    CONSTANTS : BEGIN OF LC_CON,
                  SQ TYPE C LENGTH 1 VALUE '''',
                END OF LC_CON.

    DATA : LV_DOC TYPE STRING.

    DATA : LV_END_POINT TYPE STRING.

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID             = 'ZSDSCAR0010'
                                                  I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                  I_PARAM_EXT         = 'URL_K2'
                                        CHANGING  C_RETURN            = LV_END_POINT ).

    CONCATENATE LV_END_POINT
                'budgetDetails?$filter=budget_sap_id eq'
           INTO LV_END_POINT.

    CONCATENATE LC_CON-SQ I_WBS_NO LC_CON-SQ INTO LV_DOC.

    CONCATENATE LV_END_POINT
                LV_DOC
           INTO C_URL SEPARATED BY SPACE.
  ENDMETHOD.
  METHOD GET_HEADER_API_BUDGET.
    DATA LS_HEADER LIKE LINE OF C_HEADER.

    LS_HEADER-NAME  = 'Accept'.
    LS_HEADER-VALUE = 'application/json'.
    APPEND LS_HEADER TO C_HEADER.

  ENDMETHOD.
  METHOD GET_DETAIL_API_BUDGET.

  ENDMETHOD.
  METHOD GET_URL_DETAIL.
    CONSTANTS : BEGIN OF LC_CON,
                  SQ TYPE C LENGTH 1 VALUE '''',
                END OF LC_CON.

    DATA : LV_DOC TYPE STRING.

    DATA : LV_END_POINT TYPE STRING.

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID             = 'ZSDSCAR0010'
                                                  I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                  I_PARAM_EXT         = 'URL_K2'
                                        CHANGING  C_RETURN            = LV_END_POINT ).

    CONCATENATE LV_END_POINT
                'prDetails?$filter=pr_request_docid eq'
           INTO LV_END_POINT.

    CONCATENATE LC_CON-SQ I_WEB_NO LC_CON-SQ INTO LV_DOC.

    CONCATENATE LV_END_POINT
                LV_DOC
           INTO C_URL SEPARATED BY SPACE.

  ENDMETHOD.
  METHOD GET_HEADER_API_DETAIL.
    DATA LS_HEADER LIKE LINE OF C_HEADER.

    LS_HEADER-NAME  = 'Accept'.
    LS_HEADER-VALUE = 'application/json'.
    APPEND LS_HEADER TO C_HEADER.

  ENDMETHOD.
  METHOD GET_DETAIL_API_DETAIL.

  ENDMETHOD.
  METHOD GET_USER_PASS.

    CONSTANTS : BEGIN OF LC_CON,
                  RAPID TYPE STRING VALUE 'ZSDSCAR0010',
                  PARAM TYPE STRING VALUE '1',
                  USER  TYPE STRING VALUE 'USER',
                  PASS  TYPE STRING VALUE 'PASS',
                END OF LC_CON.

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID             = LC_CON-RAPID
                                                  I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                  I_PARAM             = LC_CON-PARAM
                                                  I_PARAM_EXT         = LC_CON-USER
                                         CHANGING C_RETURN            = I_USER ).

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID             = LC_CON-RAPID
                                                  I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                  I_PARAM             = LC_CON-PARAM
                                                  I_PARAM_EXT         = LC_CON-PASS
                                         CHANGING C_RETURN            = I_PASS ).

  ENDMETHOD.
  METHOD SDSMMT006.
    DATA : LS_ZSDSMMT006 TYPE ZSDSMMT006.

    IF I_PR_NO IS NOT INITIAL.
      LS_ZSDSMMT006-BANFN = I_PR_NO.
      LS_ZSDSMMT006-WEBNO = I_WEB_NO.
      LS_ZSDSMMT006-ERNAM = SY-UNAME.
      LS_ZSDSMMT006-ERDAT = SY-DATUM.
      LS_ZSDSMMT006-ERZET = SY-UZEIT.
      LS_ZSDSMMT006-AENAM = SY-UNAME.
      LS_ZSDSMMT006-AEDAT = SY-DATUM.
      LS_ZSDSMMT006-AETIM = SY-UZEIT.

      SELECT COUNT(*)
        FROM ZSDSMMT006
        WHERE BANFN EQ SPACE
          AND WEBNO EQ I_WEB_NO.
      IF SY-SUBRC EQ 0.
        DELETE FROM ZSDSMMT006 WHERE BANFN EQ SPACE
                                 AND WEBNO EQ I_WEB_NO.
        COMMIT( ).
      ENDIF.
      MODIFY ZSDSMMT006 FROM LS_ZSDSMMT006.
      COMMIT( ).
    ENDIF.

  ENDMETHOD.
  METHOD UPDATE_ZSDSMMT006_REJECT.
    SELECT COUNT( * )
      FROM ZSDSMMT006
      WHERE BANFN EQ I_PR
        AND FLAGD EQ SPACE.
    IF SY-SUBRC EQ 0.
      UPDATE ZSDSMMT006 SET FLAGD = ABAP_TRUE
                      WHERE BANFN EQ I_PR
                        AND FLAGD EQ SPACE.
    ENDIF.
  ENDMETHOD.
  METHOD DELETE_ITEM_PR.
    DATA LS_DATA LIKE LINE OF LT_DATA.

    LOOP AT LT_DATA INTO LS_DATA.
      R = DELETE_PR( LS_DATA-BANFN ).
    ENDLOOP.
  ENDMETHOD.
  METHOD DELETE_PR.
    DATA : i_PRHEADER  TYPE BAPIMEREQHEADER,
           i_PRHEADERX TYPE BAPIMEREQHEADERX,
           i_TESTRUN   TYPE BAPIFLAG-BAPIFLAG.

    DATA : e_NUMBER	     TYPE BAPIMEREQHEADER-PREQ_NO,
           e_PRHEADEREXP TYPE	BAPIMEREQHEADER.

    DATA : lt_RETURN                 TYPE TABLE OF BAPIRET2,
           lt_PRITEM                 TYPE TABLE OF BAPIMEREQITEMIMP,
           lt_PRITEMX                TYPE TABLE OF BAPIMEREQITEMX,
           lt_PRITEMEXP              TYPE TABLE OF BAPIMEREQITEM,
           lt_PRITEMSOURCE           TYPE TABLE OF BAPIMEREQSOURCE,
           lt_PRACCOUNT              TYPE TABLE OF BAPIMEREQACCOUNT,
           lt_PRACCOUNTPROITSEGMENT  TYPE TABLE OF BAPIMEREQACCOUNTPROFITSEG,
           lt_PRACCOUNTX             TYPE TABLE OF BAPIMEREQACCOUNTX,
           lt_PRADDRDELIVERY         TYPE TABLE OF BAPIMERQADDRDELIVERY,
           lt_PRITEMTEXT             TYPE TABLE OF BAPIMEREQITEMTEXT,
           lt_PRHEADERTEXT           TYPE TABLE OF BAPIMEREQHEADTEXT,
           lt_EXTENSIONIN            TYPE TABLE OF BAPIPAREX,
           lt_EXTENSIONOUT           TYPE TABLE OF BAPIPAREX,
           lt_PRVERSION              TYPE TABLE OF BAPIMEREQDCM,
           lt_PRVERSIONX             TYPE TABLE OF BAPIMEREQDCMX,
           lt_ALLVERSIONS            TYPE TABLE OF BAPIMEDCM_ALLVERSIONS,
           lt_PRCOMPONENTS           TYPE TABLE OF BAPIMEREQCOMPONENT,
           lt_PRCOMPONENTSX          TYPE TABLE OF BAPIMEREQCOMPONENTX,
           lt_SERVICEOUTLINE         TYPE TABLE OF BAPI_SRV_OUTLINE,
           lt_SERVICEOUTLINEX        TYPE TABLE OF BAPI_SRV_OUTLINEX,
           lt_SERVICELINES           TYPE TABLE OF BAPI_SRV_SERVICE_LINE,
           lt_SERVICELINESX          TYPE TABLE OF BAPI_SRV_SERVICE_LINEX,
           lt_SERVICELIMIT           TYPE TABLE OF BAPI_SRV_LIMIT_DATA,
           lt_SERVICELIMITX          TYPE TABLE OF BAPI_SRV_LIMIT_DATAX,
           lt_SERVICECONTRACTLIMITS  TYPE TABLE OF BAPI_SRV_CONTRACT_LIMITS,
           lt_SERVICECONTRACTLIMITSX TYPE TABLE OF BAPI_SRV_CONTRACT_LIMITSX,
           lt_SERVICEACCOUNT         TYPE TABLE OF BAPI_SRV_ACC_DATA,
           lt_SERVICEACCOUNTX        TYPE TABLE OF BAPI_SRV_ACC_DATAX,
           lt_SERVICELONGTEXTS       TYPE TABLE OF BAPI_SRV_LONGTEXTS,
           lt_SERIALNUMBER           TYPE TABLE OF BAPIMEREQSERIALNO,
           lt_SERIALNUMBERX          TYPE TABLE OF BAPIMEREQSERIALNOX.

    DATA : ls_RETURN                 TYPE BAPIRET2,
           ls_PRITEM                 TYPE BAPIMEREQITEMIMP,
           ls_PRITEMX                TYPE BAPIMEREQITEMX,
           ls_PRITEMEXP              TYPE BAPIMEREQITEM,
           ls_PRITEMSOURCE           TYPE BAPIMEREQSOURCE,
           ls_PRACCOUNT              TYPE BAPIMEREQACCOUNT,
           ls_PRACCOUNTPROITSEGMENT  TYPE BAPIMEREQACCOUNTPROFITSEG,
           ls_PRACCOUNTX             TYPE BAPIMEREQACCOUNTX,
           ls_PRADDRDELIVERY         TYPE BAPIMERQADDRDELIVERY,
           ls_PRITEMTEXT             TYPE BAPIMEREQITEMTEXT,
           ls_PRHEADERTEXT           TYPE BAPIMEREQHEADTEXT,
           ls_EXTENSIONIN            TYPE BAPIPAREX,
           ls_EXTENSIONOUT           TYPE BAPIPAREX,
           ls_PRVERSION              TYPE BAPIMEREQDCM,
           ls_PRVERSIONX             TYPE BAPIMEREQDCMX,
           ls_ALLVERSIONS            TYPE BAPIMEDCM_ALLVERSIONS,
           ls_PRCOMPONENTS           TYPE BAPIMEREQCOMPONENT,
           ls_PRCOMPONENTSX          TYPE BAPIMEREQCOMPONENTX,
           ls_SERVICEOUTLINE         TYPE BAPI_SRV_OUTLINE,
           ls_SERVICEOUTLINEX        TYPE BAPI_SRV_OUTLINEX,
           ls_SERVICELINES           TYPE BAPI_SRV_SERVICE_LINE,
           ls_SERVICELINESX          TYPE BAPI_SRV_SERVICE_LINEX,
           ls_SERVICELIMIT           TYPE BAPI_SRV_LIMIT_DATA,
           ls_SERVICELIMITX          TYPE BAPI_SRV_LIMIT_DATAX,
           ls_SERVICECONTRACTLIMITS  TYPE BAPI_SRV_CONTRACT_LIMITS,
           ls_SERVICECONTRACTLIMITSX TYPE BAPI_SRV_CONTRACT_LIMITSX,
           ls_SERVICEACCOUNT         TYPE BAPI_SRV_ACC_DATA,
           ls_SERVICEACCOUNTX        TYPE BAPI_SRV_ACC_DATAX,
           ls_SERVICELONGTEXTS       TYPE BAPI_SRV_LONGTEXTS,
           ls_SERIALNUMBER           TYPE BAPIMEREQSERIALNO,
           ls_SERIALNUMBERX          TYPE BAPIMEREQSERIALNOX.

    DATA : LS_item LIKE LINE OF GS_DATA-GT_ITEM.

    DATA : lv_NUMBER TYPE BAPIMEREQHEADER-PREQ_NO.

    DATA : BEGIN OF LS_DATA,
             BANFN TYPE EBAN-BANFN,
             BNFPO TYPE EBAN-BNFPO,
*             BSART TYPE EBAN-BSART,
             MENGE TYPE EBAN-MENGE,
             BSMNG TYPE EBAN-BSMNG,
           END OF LS_DATA.
    DATA LT_DATA LIKE TABLE OF LS_DATA.

    DATA LS_PO TYPE GY_PO.

    SELECT BANFN
           BNFPO
*           BSART
           MENGE
           BSMNG
      FROM EBAN
      INTO TABLE LT_DATA
      WHERE BANFN EQ I_PR.
*
*    i_PRHEADER-PREQ_NO  = I_PR.
*    i_PRHEADERX-PREQ_NO = ABAP_TRUE.

    LV_NUMBER = I_PR.

    LOOP AT LT_DATA INTO LS_DATA.
*      i_PRHEADER-PR_TYPE  = LS_DATA-BSART.
*      i_PRHEADERX-PR_TYPE = ABAP_TRUE.

      LS_PRITEM-PREQ_ITEM   = LS_DATA-BNFPO.
      LS_PRITEM-DELETE_IND  = ABAP_TRUE.
      APPEND LS_PRITEM TO LT_PRITEM.
      LS_PRITEMX-PREQ_ITEM  = LS_DATA-BNFPO.
      LS_PRITEMX-DELETE_IND = ABAP_TRUE.
      APPEND LS_PRITEMX TO LT_PRITEMX.
    ENDLOOP.

    CALL FUNCTION 'BAPI_PR_CHANGE'
      EXPORTING
        NUMBER                 = LV_NUMBER
        PRHEADER               = i_PRHEADER
        PRHEADERX              = i_PRHEADERX
        TESTRUN                = i_TESTRUN
      IMPORTING
        PRHEADEREXP            = e_PRHEADEREXP
      TABLES
        RETURN                 = lt_RETURN
        PRITEM                 = lt_PRITEM
        PRITEMX                = lt_PRITEMX
        PRITEMEXP              = lt_PRITEMEXP
        PRITEMSOURCE           = lt_PRITEMSOURCE
        PRACCOUNT              = lt_PRACCOUNT
        PRACCOUNTPROITSEGMENT  = lt_PRACCOUNTPROITSEGMENT
        PRACCOUNTX             = lt_PRACCOUNTX
        PRADDRDELIVERY         = lt_PRADDRDELIVERY
        PRITEMTEXT             = lt_PRITEMTEXT
        PRHEADERTEXT           = lt_PRHEADERTEXT
        EXTENSIONIN            = lt_EXTENSIONIN
        EXTENSIONOUT           = lt_EXTENSIONOUT
        PRVERSION              = lt_PRVERSION
        PRVERSIONX             = lt_PRVERSIONX
        ALLVERSIONS            = lt_ALLVERSIONS
        PRCOMPONENTS           = lt_PRCOMPONENTS
        PRCOMPONENTSX          = lt_PRCOMPONENTSX
        SERVICEOUTLINE         = lt_SERVICEOUTLINE
        SERVICEOUTLINEX        = lt_SERVICEOUTLINEX
        SERVICELINES           = lt_SERVICELINES
        SERVICELINESX          = lt_SERVICELINESX
        SERVICELIMIT           = lt_SERVICELIMIT
        SERVICELIMITX          = lt_SERVICELIMITX
        SERVICECONTRACTLIMITS  = lt_SERVICECONTRACTLIMITS
        SERVICECONTRACTLIMITSX = lt_SERVICECONTRACTLIMITSX
        SERVICEACCOUNT         = lt_SERVICEACCOUNT
        SERVICEACCOUNTX        = lt_SERVICEACCOUNTX
        SERVICELONGTEXTS       = lt_SERVICELONGTEXTS
        SERIALNUMBER           = lt_SERIALNUMBER
        SERIALNUMBERX          = lt_SERIALNUMBERX.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_CONSTANT-S.
    IF SY-SUBRC EQ 0.
      GS_DATA-GV_MESSAGE = LS_RETURN-MESSAGE.
      GS_DATA-GV_PR_SAP  = LS_RETURN-MESSAGE_V1.
      LS_PO              = I_PR.
      APPEND LS_PO TO R.
      COMMIT( ).
    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY TYPE = GC_CONSTANT-E.
    IF SY-SUBRC EQ 0.
      GS_DATA-GV_MESSAGE = LS_RETURN-MESSAGE.
    ENDIF.
  ENDMETHOD.
  METHOD CONVERT_ALPHA_IN.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_outPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD COMMIT.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = ABAP_TRUE.
  ENDMETHOD.
  METHOD RELEASE_PR.
    DATA : LV_NUMBER         TYPE  BAPI2009OB-PREQ_NO,
           LV_REL_CODE       TYPE  BAPIMMPARA-REL_CODE,
           LV_NO_COMMIT_WORK TYPE  BAPIFLAG-BAPIFLAG.

    DATA : LV_REL_STATUS_NEW    TYPE BAPIMMPARA-REL_STATUS,
           LV_REL_INDICATOR_NEW TYPE BAPIMMPARA-REL_IND.

    DATA : LS_RETURN  TYPE TABLE OF BAPIRETURN.

    DATA : LV_FRGST TYPE EBAN-FRGST.

    SELECT SINGLE FRGST
      FROM EBAN
      INTO LV_FRGST
      WHERE BANFN = I_PR.

    LV_NUMBER   = I_PR.
    LV_REL_CODE = LV_FRGST.

    CALL FUNCTION 'BAPI_REQUISITION_RELEASE_GEN'
      EXPORTING
        NUMBER            = LV_NUMBER
        REL_CODE          = LV_REL_CODE
        NO_COMMIT_WORK    = LV_NO_COMMIT_WORK
      IMPORTING
        REL_STATUS_NEW    = LV_REL_STATUS_NEW
        REL_INDICATOR_NEW = LV_REL_INDICATOR_NEW
      TABLES
        RETURN            = LS_RETURN
      EXCEPTIONS
        ERROR_MESSAGE     = 0
        OTHERS            = 1.

    COMMIT( ).

  ENDMETHOD.
  METHOD SEND_EMAIL_PR.

    CONSTANTS : BEGIN OF LC_CON,
                  SIGN        TYPE C LENGTH 1  VALUE 'I',
                  OPTION      TYPE C LENGTH 2  VALUE 'EQ',
                  REPID       TYPE C LENGTH 11 VALUE 'ZSDSMMR0390',
                  SUBJM       TYPE C LENGTH 13 VALUE 'SUBJECT_EMAIL',
                  SENDD       TYPE C LENGTH 12 VALUE 'SENDER_EMAIL',
                  SENDN       TYPE C LENGTH 11 VALUE 'SENDER_NAME',
                  RENEM       TYPE C LENGTH 14 VALUE 'RECEIVER_EMAIL',
                  CCEMI       TYPE C LENGTH 8  VALUE 'CC_EMAIL',
                  GA          TYPE C LENGTH 2  VALUE 'GA',
                  AP          TYPE C LENGTH 2  VALUE 'AP',
                  SP          TYPE C LENGTH 2  VALUE 'SP',
                  LG          TYPE C LENGTH 2  VALUE 'LG',
                END OF LC_CON.

    DATA : S_BANFN TYPE RANGE OF EBAN-BANFN,
           S_RECEI TYPE RANGE OF SOMLRECI1-RECEIVER,
           S_CC    TYPE RANGE OF SOMLRECI1-RECEIVER.

    DATA : P_SUBJE TYPE SOMLRECI1-RECEIVER,
           P_SENDD TYPE SOMLRECI1-RECEIVER,
           P_SENDN TYPE SOMLRECI1-RECEIVER.

    DATA : LV_PARAM_EXT TYPE ZSDSCAC001-PARAM_EXT.


    S_BANFN =  VALUE #( ( SIGN  = LC_CON-SIGN OPTION = LC_CON-OPTION LOW = I_PR ) ).

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING   I_REPID             = LC_CON-REPID
                                                    I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                    I_PARAM             = LC_CON-SUBJM
                                          CHANGING  C_RETURN            = P_SUBJE ).

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING   I_REPID             = LC_CON-REPID
                                                    I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                    I_PARAM             = LC_CON-SENDD
                                          CHANGING  C_RETURN            = P_SENDD ).

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING   I_REPID             = LC_CON-REPID
                                                    I_SINGLE_VALUE_FLAG = ABAP_TRUE
                                                    I_PARAM             = LC_CON-SENDN
                                          CHANGING  C_RETURN            = P_SENDN ).

    IF ( GS_DATA-GV_EKGRP EQ 'G01' OR
         GS_DATA-GV_EKGRP EQ 'G02' ).
      LV_PARAM_EXT = LC_CON-GA.
    ELSEIF ( GS_DATA-GV_EKGRP EQ 'GS7' OR
             GS_DATA-GV_EKGRP EQ 'SC2' ).
      LV_PARAM_EXT = LC_CON-AP.
    ELSEIF ( GS_DATA-GV_EKGRP      EQ 'P01' OR
             GS_DATA-GV_EKGRP+0(1) EQ 'B' ).
      LV_PARAM_EXT = LC_CON-SP.
    ELSEIF GS_DATA-GV_EKGRP EQ 'LO1'.
      LV_PARAM_EXT = LC_CON-LG.
    ENDIF.

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING   I_REPID             = LC_CON-REPID
                                                    I_PARAM             = LC_CON-RENEM
                                                    I_PARAM_EXT         = LV_PARAM_EXT
                                          CHANGING  CR_RETURN           = S_RECEI[] ).

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING   I_REPID             = LC_CON-REPID
                                                    I_PARAM             = LC_CON-CCEMI
                                          CHANGING  CR_RETURN           = S_CC[] ).

    SUBMIT ZSDSMMR0390 USING SELECTION-SCREEN 1000
                       WITH S_BANFN IN S_BANFN
                       WITH P_EMAIL EQ ABAP_TRUE
                       WITH P_SUBJE EQ P_SUBJE
                       WITH P_SENDD EQ P_SENDD
                       WITH P_SENDN EQ P_SENDN
                       WITH S_RECEI IN S_RECEI
                       WITH S_CC    IN S_CC
                       AND RETURN.
*    CC_EMAIL

  ENDMETHOD.
  METHOD GET_BUDGET_API_K2.
    DATA : I_URL              TYPE STRING,
           I_METHOD           TYPE STRING,
           I_HEADER           TYPE ZSDSCAS001_TT,
           I_BODY_TEXT        TYPE STRING,
           I_BODY_BIN         TYPE XSTRING,
           I_LEN              TYPE I,
           I_LEN_BIN          TYPE I,
           I_FROM             TYPE ZSDSCAS001_TT,
           I_USER             TYPE STRING,
           I_PASS             TYPE STRING,
           E_RETURN_BODY_TEXT TYPE STRING,
           E_RETURN_BODY_BIN  TYPE XSTRING,
           E_MESSAGE          TYPE STRING,
           E_STATUS           TYPE C.

    I_METHOD = GC_CONSTANT-GET.

    LCL_DATA=>GET_URL_BUDGET( EXPORTING I_WBS_NO = I_BUDGET
                               CHANGING C_URL    = I_URL ).
    LCL_DATA=>GET_HEADER_API_BUDGET( CHANGING C_HEADER = I_HEADER ).
    LCL_DATA=>GET_DETAIL_API_BUDGET( CHANGING C_BODY = I_BODY_TEXT
                                              C_LEN  = I_LEN ).

    LCL_DATA=>GET_USER_PASS( CHANGING I_USER = I_USER
                                      I_PASS = I_PASS ).

    CALL METHOD ZCL_SDSCA_CAL_API=>CALL_API
      EXPORTING
        I_URL              = I_URL
        I_METHOD           = I_METHOD
        I_HEADER           = I_HEADER
        I_BODY_TEXT        = I_BODY_TEXT
        I_BODY_BIN         = I_BODY_BIN
        I_LEN              = I_LEN
        I_LEN_BIN          = I_LEN_BIN
        I_FROM             = I_FROM
        I_USER             = I_USER
        I_PASS             = I_PASS
      IMPORTING
        E_RETURN           = C_BUDGET
        E_RETURN_BODY_TEXT = E_RETURN_BODY_TEXT
        E_RETURN_BODY_BIN  = E_RETURN_BODY_BIN
        E_MESSAGE          = E_MESSAGE
        E_STATUS           = E_STATUS.
    IF SY-SUBRC EQ 0.
      MESSAGE S000(ZSDSDMM01) WITH E_RETURN_BODY_TEXT.
    ENDIF.

  ENDMETHOD.
  METHOD UPDATE_ZSDSMMT022.
    DATA : LS_DATA TYPE ZSDSMMT022,
           LT_DATA TYPE TABLE OF ZSDSMMT022.
    LOOP AT GS_DATA-GT_ASSET INTO DATA(LS_ASSET).
      LS_DATA-BUKRS = LS_ASSET-BUKRS.
      LS_DATA-ANLN1 = LS_ASSET-ANLN1.
      LS_DATA-ANLN2 = LS_ASSET-ANLN2.
      LS_DATA-ANLKL = LS_ASSET-ANLKL.
      APPEND LS_DATA TO LT_DATA.
    ENDLOOP.
    IF LT_DATA IS NOT INITIAL.
      MODIFY ZSDSMMT022 FROM TABLE LT_DATA.
      COMMIT( ).
    ENDIF.
  ENDMETHOD.
  METHOD LOCK_TABLE_ZSDSMMT022.
    CALL FUNCTION 'ENQUEUE_EZSDSMMT022'
      EXPORTING
        MODE_ZSDSMMT022 = 'E'
        MANDT           = SY-MANDT
*       _SCOPE          = '2'
*       _WAIT           = ' '
*       _COLLECT        = ' '
      EXCEPTIONS
        FOREIGN_LOCK    = 1
        SYSTEM_FAILURE  = 2
        OTHERS          = 3.
    IF SY-SUBRC EQ 0.
      GS_DATA-GV_LOCK = ABAP_TRUE.
    ELSE.
      CLEAR : GS_DATA-GV_LOCK.
    ENDIF.

  ENDMETHOD.
  METHOD UNLOCK_TABLE_ZSDSMMT022.
    CALL FUNCTION 'DEQUEUE_EZSDSMMT022'
      EXPORTING
        MODE_ZSDSMMT022 = 'E'
        MANDT           = SY-MANDT
*       _SCOPE          = '3'
*       _SYNCHRON       = ' '
*       _COLLECT        = ' '
      .
  ENDMETHOD.
  METHOD CHECK_LOCK_ZSDSMMT022.

    DATA : LT_ENQ TYPE TABLE OF SEQG3.

    CALL FUNCTION 'ENQUEUE_READ'
      EXPORTING
        GCLIENT = SY-MANDT
        GNAME   = 'ZSDSMMT022'
        GARG    = '*'
*       GUNAME  = SY-UNAME
*       LOCAL   = ' '
*       FAST    = ' '
*       GARGNOWC                    = ' '
*     IMPORTING
*       NUMBER  =
*       SUBRC   =
      TABLES
        ENQ     = LT_ENQ
*     EXCEPTIONS
*       COMMUNICATION_FAILURE       = 1
*       SYSTEM_FAILURE              = 2
*       OTHERS  = 3
      .
    IF  LT_ENQ IS NOT INITIAL.
      R = ABAP_TRUE.
    ELSE.
      CLEAR : R.
    ENDIF.

  ENDMETHOD.
  METHOD UPDATE_TEXT.
    DATA : LS_DATA TYPE BAPIMEREQITEMTEXT.

    DATA : LV_LINE  TYPE I,
           LV_CHECK TYPE I.

    DATA : LV_CHECK_TEXT TYPE STRING.

    LV_CHECK_TEXT = I_TEXT.

    LS_DATA-PREQ_ITEM = |{ I_PR_LINE ALPHA = IN }|.
    LS_DATA-TEXT_ID   = I_ID.
    LS_DATA-TEXT_FORM = '*'.

    LV_LINE = STRLEN( I_TEXT ).

    IF LV_LINE GT 132.
      DO.
        IF SY-INDEX EQ 1.
          LS_DATA-TEXT_LINE = LV_CHECK_TEXT+0(132).
          APPEND LS_DATA TO CT_DATA.
          LV_CHECK = LV_LINE - 132.
          LV_CHECK_TEXT = LV_CHECK_TEXT+132(LV_CHECK).
          CONTINUE.
        ENDIF.
        IF LV_CHECK GT 132.
          CONCATENATE LS_DATA-TEXT_LINE LV_CHECK_TEXT+0(132) INTO LS_DATA-TEXT_LINE.
          APPEND LS_DATA TO CT_DATA.
          LV_CHECK = LV_CHECK - 132.
          LV_CHECK_TEXT = LV_CHECK_TEXT+132(LV_CHECK).
        ELSE.
          CONCATENATE LS_DATA-TEXT_LINE LV_CHECK_TEXT INTO LS_DATA-TEXT_LINE.
          APPEND LS_DATA TO CT_DATA.
          EXIT.
        ENDIF.
      ENDDO.
    ELSE.
      LS_DATA-TEXT_LINE = I_TEXT.
      APPEND LS_DATA TO CT_DATA.
    ENDIF.

  ENDMETHOD.
  METHOD PR_LINE_MK .
    DATA : LS_PRITEM  TYPE BAPIMEREQITEMIMP,
           LS_PRITEMX TYPE BAPIMEREQITEMX.

    DATA : LV_LEN TYPE I.

    DATA : LV_MAT      TYPE FLAG,
           LV_LONG_MAT TYPE FLAG.

    LS_PRITEM-CTRL_IND   = GC_CONSTANT-R.
    LS_PRITEM-ACCTASSCAT = I_DATA-KNTTP.
    LS_PRITEM-PUR_GROUP  = 'G01'.
    LS_PRITEM-PREQ_NAME  = SY-UNAME.
    LS_PRITEM-PREQ_DATE  = SY-DATUM.
    LS_PRITEM-PLANT      = '1000'.
    LS_PRITEM-TRACKINGNO = I_DATA-COSTCENTER.
    LS_PRITEM-MATL_GROUP = I_DATA-ANLKL.

    ls_PRITEM-PREQ_ITEM   = C_LINE.

    LV_LEN = STRLEN( I_DATA-MATNR ).
    IF LV_LEN GT 18.
      LS_PRITEM-MATERIAL_LONG  = I_DATA-MATNR.
      CLEAR : LV_MAT.
      LV_LONG_MAT = ABAP_TRUE.
    ELSE.
      LS_PRITEM-MATERIAL       = I_DATA-MATNR.
      CLEAR : LV_LONG_MAT.
      LV_MAT = ABAP_TRUE.
    ENDIF.

    LS_PRITEM-SHORT_TEXT  = I_DATA-DESCP.
    LS_PRITEM-QUANTITY    = I_DATA-QTY.
    LS_PRITEM-UNIT        = I_DATA-MEINS.

    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
      EXPORTING
        INPUT          = LS_PRITEM-UNIT
        LANGUAGE       = SY-LANGU
      IMPORTING
        OUTPUT         = LS_PRITEM-UNIT
      EXCEPTIONS
        UNIT_NOT_FOUND = 1
        OTHERS         = 2.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.



    LS_PRITEM-PREQ_PRICE  = I_DATA-AMT / I_DATA-QTY.
    LS_PRITEM-CURRENCY    = I_DATA-WAERS.
    LS_PRITEM-DELIV_DATE  = I_DATA-DELIVERY.
    LS_PRITEM-STORE_LOC   = I_DATA-STORAGE_LOCATION.

    IF I_DATA-MATNR IS INITIAL.
      IF     I_DATA-BUDGET_TYPE EQ GC_CONSTANT-CO.
        LS_PRITEM-ACCTASSCAT = 'K'.
      ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-IO.
        LS_PRITEM-ACCTASSCAT = 'F'.
      ELSEIF I_DATA-BUDGET_TYPE EQ GC_CONSTANT-WBS.
        LS_PRITEM-ACCTASSCAT = 'P'.
      ENDIF.
    ENDIF.

    LS_PRITEMX-PREQ_ITEM     = C_LINE.
    LS_PRITEMX-PREQ_ITEMX    = ABAP_TRUE.
    LS_PRITEMX-MATERIAL_LONG = LV_LONG_MAT.
    LS_PRITEMX-MATERIAL      = LV_MAT.
    LS_PRITEMX-SHORT_TEXT    = ABAP_TRUE.
    LS_PRITEMX-QUANTITY      = ABAP_TRUE.
    LS_PRITEMX-UNIT          = ABAP_TRUE.
    LS_PRITEMX-PREQ_PRICE    = ABAP_TRUE.
    LS_PRITEMX-CURRENCY      = ABAP_TRUE.
    LS_PRITEMX-STORE_LOC     = ABAP_TRUE.

    LS_PRITEMX-CTRL_IND      = ABAP_TRUE.
    LS_PRITEMX-PUR_GROUP     = ABAP_TRUE.
    LS_PRITEMX-PREQ_NAME     = ABAP_TRUE.
    LS_PRITEMX-PLANT         = ABAP_TRUE.
    LS_PRITEMX-TRACKINGNO    = ABAP_TRUE.
    LS_PRITEMX-MATL_GROUP    = ABAP_TRUE.
    LS_PRITEMX-DELIV_DATE    = ABAP_TRUE.
    LS_PRITEMX-PREQ_DATE     = ABAP_TRUE.
    LS_PRITEMX-ACCTASSCAT    = ABAP_TRUE.

    UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                           I_TEXT    = I_DATA-REMARK
                           I_ID      = GC_CONSTANT-ITEM_TEXT
                 CHANGING CT_DATA    = C_TEXT ).

    IF I_DATA-BUDGET_NO IS NOT INITIAL.
      UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                             I_TEXT    = I_DATA-BUDGET_NO
                             I_ID      = GC_CONSTANT-MEMO
                   CHANGING CT_DATA    = C_TEXT ).
    ENDIF.

    GS_DATA-GV_EKGRP = LS_PRITEM-PUR_GROUP.

    APPEND LS_PRITEM  TO C_DATA.
    APPEND LS_PRITEMX TO C_DATAX.

  ENDMETHOD.
  METHOD GET_BUDGET_TYPE.

    CONSTANTS : BEGIN OF LC_CON,
                  BUDGETNO TYPE C LENGTH 8 VALUE 'BudgetNo',
                  CONARE   TYPE C LENGTH 4 VALUE '1000',
                  IO       TYPE C LENGTH 2 VALUE 'IO',
                  COSTNO   TYPE C LENGTH 3 VALUE 'COS',
                  WBS      TYPE C LENGTH 3 VALUE 'WBS',
                END OF LC_CON.

    SELECT COUNT(*)
      FROM AUFK
      WHERE AUFNR EQ I_DATA.
    IF SY-SUBRC EQ 0.
      R = LC_CON-IO.
    ENDIF.

    SELECT COUNT(*)
      FROM CSKS
      WHERE KOKRS EQ LC_CON-CONARE
        AND KOSTL EQ I_DATA.
    IF SY-SUBRC EQ 0.
      R = LC_CON-COSTNO.
    ENDIF.

    SELECT COUNT(*)
      FROM PRPS
      WHERE POSID_EDIT EQ I_DATA.
    IF SY-SUBRC EQ 0.
      R = LC_CON-WBS.
    ENDIF.

  ENDMETHOD.
  METHOD COLLECT_MAT.
    DATA : LS_DATA LIKE LINE OF GS_DATA-GT_BOM.
    LS_DATA-BOM = I_DATA.
    COLLECT LS_DATA INTO GS_DATA-GT_BOM.
  ENDMETHOD.
  METHOD GET_DATA_BOM.

    DATA : LV_TABIX TYPE SY-TABIX.

    DATA : LT_STPO TYPE TABLE OF STPO_API02,
           LS_STPO TYPE STPO_API02.

    DATA : LT_BOM LIKE GS_DATA-GT_BOM,
           LS_BOM LIKE LINE OF LT_BOM.

    CONSTANTS : BEGIN OF LC_CON,
                  PLANT     TYPE  CSAP_MBOM-WERKS VALUE '1000',
                  BOM_USAGE TYPE  CSAP_MBOM-STLAN VALUE '5',
                END OF LC_CON.

    LOOP AT GS_DATA-GT_BOM ASSIGNING FIELD-SYMBOL(<LFS_BOM>).
      LV_TABIX = SY-TABIX.
      CALL FUNCTION 'CSAP_MAT_BOM_READ'
        EXPORTING
          MATERIAL  = <LFS_BOM>-BOM
          PLANT     = LC_CON-PLANT
          BOM_USAGE = LC_CON-BOM_USAGE
        TABLES
          T_STPO    = LT_STPO
        EXCEPTIONS
          ERROR     = 1
          OTHERS    = 2.
      IF SY-SUBRC <> 0.
        DELETE GS_DATA-GT_BOM INDEX LV_TABIX.
      ELSE.
        LOOP AT LT_STPO INTO LS_STPO.
          LV_TABIX = SY-TABIX.
          IF LV_TABIX EQ 1.
            <LFS_BOM>-COM = LS_STPO-COMPONENT.
          ELSE.
            MOVE-CORRESPONDING <LFS_BOM> TO LS_BOM.
            LS_BOM-COM = LS_STPO-COMPONENT.
            APPEND LS_BOM TO LT_BOM.
          ENDIF.
        ENDLOOP.
      ENDIF.

    ENDLOOP.

    IF LT_BOM IS NOT INITIAL.
      APPEND LINES OF LT_BOM TO GS_DATA-GT_BOM.
      SORT GS_DATA-GT_BOM BY BOM COM.
      DELETE ADJACENT DUPLICATES FROM GS_DATA-GT_BOM COMPARING ALL FIELDS.

      SELECT BOM,
             COM,
             MAKTX
        FROM @GS_DATA-GT_BOM AS A
        INNER JOIN MAKT ON A~COM      EQ MAKT~MATNR AND
                           MAKT~SPRAS EQ @SY-LANGU
        INTO TABLE @DATA(LT_TMP).
      GS_DATA-GT_BOM = LT_TMP.
    ENDIF.
  ENDMETHOD.
  METHOD GET_DATA_BY_BOM.

    DATA : LS_PRITEM  TYPE BAPIMEREQITEMIMP,
           LS_PRITEMX TYPE BAPIMEREQITEMX.

    DATA : LV_LEN TYPE I.

    DATA : LV_MAT      TYPE FLAG,
           LV_LONG_MAT TYPE FLAG.

    LOOP AT GS_DATA-GT_BOM INTO DATA(LS_BOM).
      LS_PRITEM-CTRL_IND   = GC_CONSTANT-R.
      LS_PRITEM-ACCTASSCAT = I_DATA-KNTTP.
      LS_PRITEM-PUR_GROUP  = I_BRANCH.
      LS_PRITEM-PREQ_NAME  = SY-UNAME.
      LS_PRITEM-PREQ_DATE  = SY-DATUM.
      LS_PRITEM-PLANT      = '1000'.
      LS_PRITEM-TRACKINGNO = I_DATA-COSTCENTER.
      LS_PRITEM-MATL_GROUP = I_DATA-ANLKL.


      ls_PRITEM-PREQ_ITEM   = C_LINE.

      LV_LEN = STRLEN( LS_BOM-COM ).
      IF LV_LEN GT 18.
        LS_PRITEM-MATERIAL_LONG  = LS_BOM-COM.
        CLEAR : LV_MAT.
        LV_LONG_MAT = ABAP_TRUE.
      ELSE.
        LS_PRITEM-MATERIAL       = LS_BOM-COM.
        CLEAR : LV_LONG_MAT.
        LV_MAT = ABAP_TRUE.
      ENDIF.

      LS_PRITEM-SHORT_TEXT  = LS_BOM-DES.
      LS_PRITEM-QUANTITY    = I_DATA-QTY.
      LS_PRITEM-UNIT        = I_DATA-MEINS.
      LS_PRITEM-PREQ_PRICE  = I_DATA-AMT / I_DATA-QTY.
      LS_PRITEM-CURRENCY    = I_DATA-WAERS.
      LS_PRITEM-DELIV_DATE  = I_DATA-DELIVERY.
      LS_PRITEM-STORE_LOC   = I_DATA-STORAGE_LOCATION.

      LS_PRITEMX-PREQ_ITEM     = C_LINE.
      LS_PRITEMX-PREQ_ITEMX    = ABAP_TRUE.
      LS_PRITEMX-MATERIAL_LONG = LV_LONG_MAT.
      LS_PRITEMX-MATERIAL      = LV_MAT.
      LS_PRITEMX-SHORT_TEXT    = ABAP_TRUE.
      LS_PRITEMX-QUANTITY      = ABAP_TRUE.
      LS_PRITEMX-UNIT          = ABAP_TRUE.
      LS_PRITEMX-PREQ_PRICE    = ABAP_TRUE.
      LS_PRITEMX-CURRENCY      = ABAP_TRUE.
      LS_PRITEMX-STORE_LOC     = ABAP_TRUE.

      LS_PRITEMX-CTRL_IND      = ABAP_TRUE.
      LS_PRITEMX-PUR_GROUP     = ABAP_TRUE.
      LS_PRITEMX-PREQ_NAME     = ABAP_TRUE.
      LS_PRITEMX-PLANT         = ABAP_TRUE.
      LS_PRITEMX-TRACKINGNO    = ABAP_TRUE.
      LS_PRITEMX-MATL_GROUP    = ABAP_TRUE.
      LS_PRITEMX-DELIV_DATE    = ABAP_TRUE.
      LS_PRITEMX-PREQ_DATE     = ABAP_TRUE.
      LS_PRITEMX-ACCTASSCAT    = ABAP_TRUE.

      UPDATE_TEXT( EXPORTING I_PR_LINE = ls_PRITEM-PREQ_ITEM
                             I_TEXT    = I_DATA-REMARK
                             I_ID      = GC_CONSTANT-ITEM_TEXT
                   CHANGING CT_DATA    = C_TEXT ).

      APPEND LS_PRITEM  TO C_DATA.
      APPEND LS_PRITEMX TO C_DATAX.
    ENDLOOP.
  ENDMETHOD.
  METHOD GET_CONFIG.
    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID  = 'PR_PROCESS'
                                                  I_PARAM  = 'ASSET'
                                        CHANGING  CR_RETURN = GS_DATA-GR_UOM ).
  ENDMETHOD.
ENDCLASS.
