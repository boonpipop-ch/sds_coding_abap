class ZCL_ZSDSMM_PR_PROCESS_DPC_EXT definition
  public
  inheriting from ZCL_ZSDSMM_PR_PROCESS_DPC
  create public .

public section.

  constants GC_S type CHAR1 value 'S' ##NO_TEXT.
  constants GC_E type CHAR1 value 'E' ##NO_TEXT.
  constants GC_CREATE_PR_SET type CHAR13 value 'CREATE_PR_SET' ##NO_TEXT.
  constants GC_CHECK_BUDGET_SET type CHAR16 value 'CHECK_BUDGET_SET' ##NO_TEXT.
  constants GC_GET_PR type CHAR10 value 'GET_PR_SET' ##NO_TEXT.
  constants:
    BEGIN OF GC_CON,
                  A TYPE C LENGTH 1 VALUE 'A',
    END OF GC_CON .
  constants GC_UPDATE_STATUS_PR_SET type CHAR20 value 'UPDATE_STATUS_PR_SET' ##NO_TEXT.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
    redefinition .
protected section.

  methods CHECK_BUDGET_SET_GET_ENTITY
    redefinition .
  methods CHECK_BUDGET_TYP_GET_ENTITY
    redefinition .
  methods CHECK_COST_CENTE_GET_ENTITY
    redefinition .
  methods GET_MAT_DESC_SET_GET_ENTITY
    redefinition .
  methods GET_PR_SET_GET_ENTITYSET
    redefinition .
  methods MAT_GROUP_GET_ENTITYSET
    redefinition .
  methods PURCHASE_GROUP_S_GET_ENTITYSET
    redefinition .
  methods UPDATE_STATUS_PR_CREATE_ENTITY
    redefinition .
  methods ZSDSVC_T006A_GET_ENTITYSET
    redefinition .
  methods ZSDSVC_TCURT_GET_ENTITYSET
    redefinition .
  methods CHECK_PR_SET_GET_ENTITY
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_ZSDSMM_PR_PROCESS_DPC_EXT IMPLEMENTATION.


  METHOD /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY.

    DATA : LS_DATA       TYPE ZSDSMMS004,
           LS_GET_DETAIL TYPE ZSDSMMS019,
           LS_UPDATE_PR  TYPE ZSDSMMS033.

    FIELD-SYMBOLS <LFS_DATA> TYPE ANY.

    IF IO_DATA_PROVIDER IS NOT INITIAL.
      IF     IV_ENTITY_SET_NAME EQ GC_CREATE_PR_SET.
        IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_DATA ).
        LCL_DATA=>CREATE_PR( CHANGING C_DATA = LS_DATA ).
        ASSIGN LS_DATA TO <LFS_DATA>.
      ELSEIF IV_ENTITY_SET_NAME EQ GC_CHECK_BUDGET_SET.
*      LCL_DATA=>CHECK_BUDGET( CHANGING C_DATA = LS_DATA )
      ELSEIF IV_ENTITY_SET_NAME EQ GC_GET_PR.
        IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_GET_DETAIL ).
        LCL_DATA=>GET_DATA_PR( CHANGING C_DATA = LS_GET_DETAIL ).
        ASSIGN LS_GET_DETAIL TO <LFS_DATA>.
      ELSEIF IV_ENTITY_SET_NAME EQ GC_UPDATE_STATUS_PR_SET.
        IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_UPDATE_PR ).
        LCL_DATA=>UPDATE_LOG_PR( CHANGING C_DATA = LS_UPDATE_PR ).
        ASSIGN LS_UPDATE_PR TO <LFS_DATA>.
      ENDIF.

      COPY_DATA_TO_REF(
           EXPORTING
           IS_DATA = <LFS_DATA>
           CHANGING
           CR_DATA = ER_DEEP_ENTITY
           ).
    ENDIF.

  ENDMETHOD.


  METHOD CHECK_BUDGET_SET_GET_ENTITY.

    DATA : LS_KEY_TAB LIKE LINE OF IT_KEY_TAB.

    DATA : LV_BUDGET_NO   TYPE STRING,
           LV_BUDGET_TYPE TYPE STRING.

    LOOP AT IT_KEY_TAB INTO LS_KEY_TAB.

      IF     LS_KEY_TAB-NAME = 'BudgetNo'.
        LV_BUDGET_NO   = LS_KEY_TAB-VALUE.
      ELSEIF LS_KEY_TAB-NAME = 'BudgetType'.
        LV_BUDGET_TYPE = LS_KEY_TAB-VALUE.
      ENDIF.
    ENDLOOP.


    ER_ENTITY-BUDGETNO     = LV_BUDGET_NO.
    ER_ENTITY-BUDGETTYPE   = LV_BUDGET_TYPE.
    ER_ENTITY-BUDGETTOTAL  = 10123.
    ER_ENTITY-BUDGETREMAIN = 5000.
    ER_ENTITY-FLAGDETAIL   = ''.


  ENDMETHOD.


  METHOD CHECK_BUDGET_TYP_GET_ENTITY.

    DATA : IS_KEY_TAB LIKE LINE OF IT_KEY_TAB.

    CONSTANTS : BEGIN OF LC_CON,
                  BUDGETNO TYPE C LENGTH 8 VALUE 'BudgetNo',
                  CONARE   TYPE C LENGTH 4 VALUE '1000',
                  IO       TYPE C LENGTH 2 VALUE 'IO',
                  COSTNO   TYPE C LENGTH 3 VALUE 'COS',
                  WBS      TYPE C LENGTH 3 VALUE 'WBS',
                END OF LC_CON.

    DATA : LV_PS_NO TYPE PS_POSID,
           LV_LV3   TYPE PS_POSID.

    DATA : LCL_DATA TYPE REF TO ZCL_SDSCA_UTIL_SDS.

    READ TABLE IT_KEY_TAB INTO IS_KEY_TAB
    WITH KEY NAME = LC_CON-BUDGETNO.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-BUDGETNO = IS_KEY_TAB-VALUE.
    ENDIF.

    SELECT COUNT(*)
      FROM AUFK
      WHERE AUFNR EQ ER_ENTITY-BUDGETNO.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-BUDGETTYPE = LC_CON-IO.
    ENDIF.

    SELECT COUNT(*)
      FROM CSKS
      WHERE KOKRS EQ LC_CON-CONARE
        AND KOSTL EQ ER_ENTITY-BUDGETNO.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-BUDGETTYPE = LC_CON-COSTNO.
    ENDIF.

    IF ER_ENTITY-BUDGETTYPE IS INITIAL.
      IF LCL_DATA IS NOT BOUND.
        CREATE OBJECT LCL_DATA.
      ENDIF.
*    SELECT COUNT(*)
*      FROM PRPS
*      WHERE POSID_EDIT EQ ER_ENTITY-BUDGETNO.
*    IF SY-SUBRC EQ 0.
*      ER_ENTITY-BUDGETTYPE = LC_CON-WBS.
*    ENDIF.
      LV_PS_NO = ER_ENTITY-BUDGETNO.
      LV_LV3 = LCL_DATA->GET_WBS_LV3_FROM_HIGHER_LV( LV_PS_NO ).
      IF LV_LV3 IS NOT INITIAL.
        ER_ENTITY-BUDGETNO   = LV_LV3.
        ER_ENTITY-BUDGETTYPE = LC_CON-WBS.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD CHECK_COST_CENTE_GET_ENTITY.
    DATA : IS_KEY_TAB LIKE LINE OF IT_KEY_TAB.

    CONSTANTS : BEGIN OF LC_CON,
                  COST_CENTER TYPE C LENGTH 13 VALUE 'CostCenterKey',
                  S           TYPE C LENGTH 1 VALUE 'S',
                  E           TYPE C LENGTH 1 VALUE 'E',
                END OF LC_CON.

    DATA : LV_KOSTL TYPE CSKT-KOSTL.

    READ TABLE IT_KEY_TAB INTO IS_KEY_TAB
    WITH KEY NAME = LC_CON-COST_CENTER.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-COSTCENTERKEY = IS_KEY_TAB-VALUE.
    ENDIF.

    LV_KOSTL = |{ ER_ENTITY-COSTCENTERKEY ALPHA = IN }|.

    SELECT SINGLE LTEXT
      FROM CSKT
      INTO ER_ENTITY-COSTCENTERDESCRIPTION
      WHERE KOSTL EQ LV_KOSTL.
*        AND SPRAS EQ SY-LANGU.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-MESSAGETYPE = LC_CON-S.
      ER_ENTITY-MESSAGETEXT = TEXT-S01.
    ELSE.
      ER_ENTITY-MESSAGETYPE = LC_CON-E.
      ER_ENTITY-MESSAGETEXT = TEXT-E01.
    ENDIF.

  ENDMETHOD.


  METHOD GET_MAT_DESC_SET_GET_ENTITY.

    DATA : IS_KEY_TAB LIKE LINE OF IT_KEY_TAB.

    CONSTANTS : BEGIN OF LC_CON,
                  MATCODE TYPE C LENGTH 14 VALUE 'MaterialNumber',
                  S       TYPE C LENGTH 1 VALUE 'S',
                  E       TYPE C LENGTH 1 VALUE 'E',
                  PB00    TYPE C LENGTH 4 VALUE 'PB00',
                END OF LC_CON.

    READ TABLE IT_KEY_TAB INTO IS_KEY_TAB
    WITH KEY NAME = LC_CON-MATCODE.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-MATERIALNUMBER = IS_KEY_TAB-VALUE.
    ENDIF.

    SELECT SINGLE MAKTX
      FROM MAKT
      INTO ER_ENTITY-MATERIALDESCRIPTION
      WHERE MATNR EQ ER_ENTITY-MATERIALNUMBER.
*        AND SPRAS EQ SY-LANGU.
*    IF SY-SUBRC EQ 0.
*      SELECT SINGLE KBETR
*        FROM A017
*        INNER JOIN KONP ON A017~KNUMH EQ KONP~KNUMH
*        WHERE A017~KSCHL EQ @LC_CON-PB00
*          AND A017~DATBI GE @SY-DATUM
*          AND A017~MATNR EQ @ER_ENTITY-MATERIALNUMBER
*        INTO @ER_ENTITY-MATERIALPRICE.
*    ENDIF.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-MESSAGETYPE = LC_CON-S.
      ER_ENTITY-MESSAGETEXT = TEXT-S01.

      SELECT SINGLE KBETR
        FROM A017
        INNER JOIN KONP ON A017~KNUMH EQ KONP~KNUMH
        WHERE A017~KSCHL EQ @LC_CON-PB00
          AND A017~DATBI GE @SY-DATUM
          AND A017~MATNR EQ @ER_ENTITY-MATERIALNUMBER
        INTO @ER_ENTITY-MATERIALPRICE.
    ELSE.
      ER_ENTITY-MESSAGETYPE = LC_CON-E.
      ER_ENTITY-MESSAGETEXT = TEXT-E01.
    ENDIF.

  ENDMETHOD.


  method GET_PR_SET_GET_ENTITYSET.
**TRY.
*CALL METHOD SUPER->GET_PR_SET_GET_ENTITYSET
*  EXPORTING
*    IV_ENTITY_NAME           =
*    IV_ENTITY_SET_NAME       =
*    IV_SOURCE_NAME           =
*    IT_FILTER_SELECT_OPTIONS =
*    IS_PAGING                =
*    IT_KEY_TAB               =
*    IT_NAVIGATION_PATH       =
*    IT_ORDER                 =
*    IV_FILTER_STRING         =
*    IV_SEARCH_STRING         =
**    IO_TECH_REQUEST_CONTEXT  =
**  IMPORTING
**    ET_ENTITYSET             =
**    ES_RESPONSE_CONTEXT      =
*    .
**  CATCH /IWBEP/CX_MGW_BUSI_EXCEPTION.
**  CATCH /IWBEP/CX_MGW_TECH_EXCEPTION.
**ENDTRY.
  endmethod.


  METHOD MAT_GROUP_GET_ENTITYSET.

    DATA : BEGIN OF LS_T023T,
             MATKL TYPE T023T-MATKL,
             WGBEZ TYPE T023T-WGBEZ,
           END OF LS_T023T.
    DATA LT_T023T LIKE TABLE OF LS_T023T.

    DATA : LR_MAT_GROUP TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_MAT_GROUP LIKE LINE OF LR_MAT_GROUP.

    DATA : LR_WBS TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_WBS LIKE LINE OF LR_WBS.

    DATA : LR_GL TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_GL LIKE LINE OF LR_GL.

    DATA : LR_MAT_GROUP_WITH_TYPE TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_MAT_GROUP_WITH_TYPE LIKE LINE OF LR_MAT_GROUP.

    FIELD-SYMBOLS <LFS_DATA> LIKE LINE OF LR_MAT_GROUP.

    DATA : LS_FILTER LIKE LINE OF IT_FILTER_SELECT_OPTIONS,
           LS_OPTION LIKE LINE OF LS_FILTER-SELECT_OPTIONS.

    DATA : LS_ENTITYSET LIKE LINE OF ET_ENTITYSET.

    DATA : LCL_BUDGET TYPE REF TO ZCL_SDSPS_BUDGET.

    DATA : LV_TYPE TYPE C.

    DATA : LV_WBS TYPE PS_POSID,
           lV_GL  TYPE SAKNR.

    DATA : LV_CLASS TYPE MEVAK.

    DATA : LR_ANLKL TYPE RANGE OF T023-ANLKL,
           LR_SAKNR TYPE RANGE OF ZSDSMMT019-SAKNR.

    CONSTANTS : BEGIN OF LC_CON,
                  MATGROUP TYPE C LENGTH 8 VALUE 'MatGroup',
                  Type     TYPE C LENGTH 4 VALUE 'Type',
                  WBS      TYPE C LENGTH 3 VALUE 'Wbs',
                  GL       TYPE C LENGTH 2 VALUE 'Gl',
                  CP       TYPE C LENGTH 2 VALUE 'CP',
                  EQ       TYPE C LENGTH 2 VALUE 'EQ',
                  ST       TYPE C LENGTH 2 VALUE '*',
                  I        TYPE C LENGTH 1 VALUE 'I',
                  A        TYPE C LENGTH 1 VALUE 'A',
                  B        TYPE C LENGTH 1 VALUE 'B',
                  C        TYPE C LENGTH 1 VALUE 'C',
                  D        TYPE C LENGTH 1 VALUE 'D',
                  E        TYPE C LENGTH 1 VALUE 'E',
                  G        TYPE C LENGTH 1 VALUE 'G',
                  OF       TYPE C LENGTH 2 VALUE 'OF',
                  FA       TYPE C LENGTH 2 VALUE 'FA',
                  COATING  TYPE C LENGTH 6 VALUE 'AC-IME',
                  AUC      TYPE C LENGTH 6 VALUE 'FA-AUC',
                  OTH_EX   TYPE C LENGTH 9 VALUE 'OF-OTH_EX',
                END OF LC_CON.

    IF LCL_BUDGET IS NOT BOUND.
      CREATE OBJECT LCL_BUDGET.
    ENDIF.

    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
    WITH KEY PROPERTY = LC_CON-MATGROUP.
    IF SY-SUBRC EQ 0.
      LR_MAT_GROUP = LS_FILTER-SELECT_OPTIONS.
*      LS_MAT_GROUP-OPTION = LC_CON-CP.
      LOOP AT LR_MAT_GROUP ASSIGNING <LFS_DATA>.
        <LFS_DATA>-OPTION = LC_CON-CP.
        <LFS_DATA>-LOW    = |{ LC_CON-ST }| & |{ <LFS_DATA>-LOW }| & |{ LC_CON-ST }|.
        TRANSLATE <LFS_DATA>-LOW TO UPPER CASE.
      ENDLOOP.

    ELSE.
      CLEAR : LR_MAT_GROUP.
    ENDIF.

*    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
*    WITH KEY PROPERTY = LC_CON-GL.
*    IF SY-SUBRC EQ 0.
*      LR_GL = LS_FILTER-SELECT_OPTIONS.
*      READ TABLE LR_GL INTO LS_GL INDEX 1.
*      IF LS_GL-LOW IS NOT INITIAL.
*        LV_GL    = |{ LS_GL-LOW ALPHA = IN }|.
*        LR_SAKNR = VALUE #( ( SIGN  = LC_CON-I OPTION = LC_CON-EQ LOW = LV_GL ) ).
*      ENDIF.
*    ELSE.
*      CLEAR : LV_GL,LR_SAKNR[].
*    ENDIF.

    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
    WITH KEY PROPERTY = LC_CON-TYPE.
    IF SY-SUBRC EQ 0.
      READ TABLE LS_FILTER-SELECT_OPTIONS INTO LS_OPTION INDEX 1.
      LV_TYPE = LS_OPTION-LOW.

      IF LV_TYPE IS NOT INITIAL.
        LS_MAT_GROUP_WITH_TYPE-SIGN   = LC_CON-I.
        LS_MAT_GROUP_WITH_TYPE-OPTION = LC_CON-CP.

        IF     LV_TYPE EQ LC_CON-A.
*          LS_MAT_GROUP_WITH_TYPE-LOW = |{ LC_CON-FA }| & |{ LC_CON-ST }|.
          LS_MAT_GROUP_WITH_TYPE-LOW = LC_CON-ST.
        ELSEIF LV_TYPE EQ LC_CON-B.
          LS_MAT_GROUP_WITH_TYPE-LOW = LC_CON-ST.
        ELSEIF LV_TYPE EQ LC_CON-C.
          LS_MAT_GROUP_WITH_TYPE-LOW = LC_CON-ST.
        ELSEIF LV_TYPE EQ LC_CON-E.
          LS_MAT_GROUP_WITH_TYPE-LOW = LC_CON-COATING.
        ELSEIF LV_TYPE EQ LC_CON-G.
          LS_MAT_GROUP_WITH_TYPE-LOW = LC_CON-AUC.
          CLEAR : LR_SAKNR,LR_SAKNR[].
        ELSE.
          LS_MAT_GROUP_WITH_TYPE-LOW = LC_CON-OTH_EX.
*          LS_MAT_GROUP_WITH_TYPE-LOW = |{ LC_CON-OF }| & |{ LC_CON-ST }|.
        ENDIF.
      ENDIF.
      APPEND LS_MAT_GROUP_WITH_TYPE TO LR_MAT_GROUP_WITH_TYPE.
    ELSE.
      CLEAR LR_MAT_GROUP_WITH_TYPE[].
    ENDIF.

    IF LV_TYPE EQ LC_CON-A.
      READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
      WITH KEY PROPERTY = LC_CON-WBS.
      IF SY-SUBRC EQ 0.
        LR_WBS = LS_FILTER-SELECT_OPTIONS.
        READ TABLE LR_WBS INTO LS_WBS INDEX 1.
        IF LS_WBS-LOW IS NOT INITIAL.
          LV_WBS   = LS_WBS-LOW.
          DATA(LV_CHECK_WBS) = LCL_DATA=>GET_WBS( LV_WBS ).
          IF LV_CHECK_WBS EQ ABAP_TRUE.
            LV_CLASS = LCL_BUDGET->GET_ASSET_CLASS( LV_WBS ).
            LV_CLASS = |{ LV_CLASS ALPHA = IN }|.
            LR_ANLKL = VALUE #( ( SIGN  = LC_CON-I OPTION = LC_CON-EQ LOW = LV_CLASS ) ).
          ENDIF.
        ENDIF.
      ELSE.
        CLEAR : LV_WBS,LR_ANLKL[].
      ENDIF.
    ENDIF.

    IF LV_TYPE EQ LC_CON-A AND
       LR_ANLKL[] IS INITIAL.
      CLEAR : LR_MAT_GROUP_WITH_TYPE[].
      LS_MAT_GROUP_WITH_TYPE-SIGN   = LC_CON-I.
      LS_MAT_GROUP_WITH_TYPE-OPTION = LC_CON-CP.
      LS_MAT_GROUP_WITH_TYPE-LOW    = LC_CON-OTH_EX.
      APPEND LS_MAT_GROUP_WITH_TYPE TO LR_MAT_GROUP_WITH_TYPE.
    ENDIF.

    SELECT T023T~MATKL,
           T023T~WGBEZ
      FROM T023T
      INNER JOIN T023       ON T023T~MATKL      EQ T023~MATKL
*      INNER JOIN ZSDSMMT019 ON ZSDSMMT019~MATKL EQ T023T~MATKL
      INTO TABLE @LT_T023T
      WHERE T023T~SPRAS EQ @SY-LANGU
        AND   T023T~MATKL IN @LR_MAT_GROUP_WITH_TYPE[]
        AND ( T023T~WGBEZ IN @LR_MAT_GROUP[] OR
              T023T~MATKL IN @LR_MAT_GROUP[] )
        AND T023~ANLKL       IN @LR_ANLKL[].
*        AND ZSDSMMT019~SAKNR IN @LR_SAKNR[].

    IF LV_TYPE EQ LC_CON-A.
      DELETE LT_T023T WHERE MATKL EQ LC_CON-AUC.
    ENDIF.

    LOOP AT LT_T023T INTO LS_T023T.
      LS_ENTITYSET-MATGROUP    = LS_T023T-MATKL.
      LS_ENTITYSET-DESCRIPTION = LS_T023T-WGBEZ.

      APPEND LS_ENTITYSET TO ET_ENTITYSET.
      CLEAR : LS_ENTITYSET.
    ENDLOOP.
  ENDMETHOD.


  METHOD PURCHASE_GROUP_S_GET_ENTITYSET.

    DATA : BEGIN OF LS_T024,
             EKGRP TYPE T024-EKGRP,
             EKNAM TYPE T024-EKNAM,
           END OF LS_T024.
    DATA LT_T024 LIKE TABLE OF LS_T024.

    DATA : LR_PUR_GROUP TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_PUR_GROUP LIKE LINE OF LR_PUR_GROUP.

    DATa : LR_BRANCH TYPE /IWBEP/T_COD_SELECT_OPTIONS.

    FIELD-SYMBOLS <LFS_DATA> LIKE LINE OF LR_PUR_GROUP.

    DATA : LS_FILTER LIKE LINE OF IT_FILTER_SELECT_OPTIONS.

    DATA : LS_ENTITYSET LIKE LINE OF ET_ENTITYSET.

    CONSTANTS : BEGIN OF LC_CON,
                  KEY TYPE C LENGTH 8 VALUE 'Key',
                  CP  TYPE C LENGTH 2 VALUE 'CP',
                  ST  TYPE C LENGTH 2 VALUE '*',
                  B   TYPE C LENGTH 1 VALUE 'B',
                  I   TYPE C LENGTH 1 VALUE 'I',
                  GS  TYPE c LENGTH 2 VALUE 'GS',
                  SC  TYPE c LENGTH 2 VALUE 'SC',
                END OF LC_CON.

    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
    WITH KEY PROPERTY = LC_CON-KEY.
    IF SY-SUBRC EQ 0.
      LR_PUR_GROUP = LS_FILTER-SELECT_OPTIONS.
*      LS_MAT_GROUP-OPTION = LC_CON-CP.
      LOOP AT LR_PUR_GROUP ASSIGNING <LFS_DATA>.
        <LFS_DATA>-OPTION = LC_CON-CP.
        <LFS_DATA>-LOW    = |{ <LFS_DATA>-LOW }| & |{ LC_CON-ST }|.
        TRANSLATE <LFS_DATA>-LOW TO UPPER CASE.
      ENDLOOP.

    ELSE.
      CLEAR : LR_PUR_GROUP.
    ENDIF.

    CLEAR : LS_PUR_GROUP.
    LS_PUR_GROUP-SIGN   = LC_CON-I.
    LS_PUR_GROUP-OPTION = LC_CON-CP.
    LS_PUR_GROUP-LOW    = |{ LC_CON-B }| & |{ LC_CON-ST }|.
    APPEND LS_PUR_GROUP TO LR_BRANCH.

    CLEAR : LS_PUR_GROUP.
    LS_PUR_GROUP-SIGN   = LC_CON-I.
    LS_PUR_GROUP-OPTION = LC_CON-CP.
    LS_PUR_GROUP-LOW    = |{ LC_CON-GS }| & |{ LC_CON-ST }|.
    APPEND LS_PUR_GROUP TO LR_BRANCH.

    CLEAR : LS_PUR_GROUP.
    LS_PUR_GROUP-SIGN   = LC_CON-I.
    LS_PUR_GROUP-OPTION = LC_CON-CP.
    LS_PUR_GROUP-LOW    = |{ LC_CON-SC }| & |{ LC_CON-ST }|.
    APPEND LS_PUR_GROUP TO LR_BRANCH.

    SELECT EKGRP,
           EKNAM
      FROM T024
      INTO TABLE @LT_T024
      WHERE   EKGRP IN @LR_BRANCH
        AND ( EKGRP IN @LR_PUR_GROUP[] OR
              EKNAM IN @LR_PUR_GROUP[] ).

    LOOP AT LT_T024 INTO LS_T024.
      LS_ENTITYSET-KEY         = LS_T024-EKGRP.
      LS_ENTITYSET-DESCRIPTION = LS_T024-EKNAM.

      APPEND LS_ENTITYSET TO ET_ENTITYSET.
      CLEAR : LS_ENTITYSET.
    ENDLOOP.

  ENDMETHOD.


  METHOD UPDATE_STATUS_PR_CREATE_ENTITY.

    DATA : LS_DATA TYPE ZCL_ZSDSMM_PR_PROCESS_MPC=>TS_UPDATA_STATUS_PR.

    IF IO_DATA_PROVIDER IS NOT INITIAL.
      IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_DATA ).
    ENDIF.

    LCL_DATA=>UPDATE_STATUS_PR( EXPORTING I_DATA    = LS_DATA
                                IMPORTING E_MESSAGE = ER_ENTITY-MESSAGE
                                          E_MESSTYP = ER_ENTITY-MESSAGETYPE ).

    IF SY-SUBRC EQ 0.
      ER_ENTITY-PRNO        = LS_DATA-PRNO.
      ER_ENTITY-STATUS      = LS_DATA-STATUS.
      ER_ENTITY-POSITION    = LS_DATA-POSITION.
      ER_ENTITY-ACTIONBY    = LS_DATA-ACTIONBY.
      ER_ENTITY-ACTIONDATE  = LS_DATA-ACTIONDATE.
      ER_ENTITY-ACTIONTIME  = LS_DATA-ACTIONTIME.
      ER_ENTITY-REMARK      = LS_DATA-REMARK.
      ER_ENTITY-MESSAGE     = 'Test Message'.
      ER_ENTITY-MESSAGETYPE = 'S'.
    ENDIF.
  ENDMETHOD.


  METHOD ZSDSVC_T006A_GET_ENTITYSET.
    DATA : LR_MSEHI TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_MSEHI LIKE LINE OF LR_MSEHI.

    DATA : LR_MSEHI_CONVERT TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_MSEHI_CONVERT LIKE LINE OF LR_MSEHI.

    DATA : LS_FILTER LIKE LINE OF IT_FILTER_SELECT_OPTIONS.

    DATA : LS_ENTITYSET LIKE LINE OF ET_ENTITYSET.

    FIELD-SYMBOLS <LFS_DATA> LIKE LINE OF LR_MSEHI.

    CONSTANTS : BEGIN OF LC_CON,
                  MSEHI TYPE C LENGTH 5 VALUE 'msehi',
                  CP    TYPE C LENGTH 2 VALUE 'CP',
                  ST    TYPE C LENGTH 1 VALUE '*',
                END OF LC_CON.

    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
    WITH KEY PROPERTY = LC_CON-MSEHI.
    IF SY-SUBRC EQ 0.
      LR_MSEHI        = LS_FILTER-SELECT_OPTIONS.
      LOOP AT LR_MSEHI ASSIGNING <LFS_DATA>.
        <LFS_DATA>-OPTION = LC_CON-CP.
        TRANSLATE <LFS_DATA>-LOW TO UPPER CASE.
        LS_MSEHI_CONVERT = <LFS_DATA>.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            INPUT          = <LFS_DATA>-LOW
          IMPORTING
            OUTPUT         = LS_MSEHI_CONVERT-LOW
          EXCEPTIONS
            UNIT_NOT_FOUND = 1
            OTHERS         = 2.
        IF SY-SUBRC <> 0.
* Implement suitable error handling here
        ENDIF.
        APPEND LS_MSEHI_CONVERT TO LR_MSEHI_CONVERT.
        <LFS_DATA>-LOW    = |{ <LFS_DATA>-LOW }| & |{ LC_CON-ST }|.
      ENDLOOP.
    ELSE.
      CLEAR : LR_MSEHI.
    ENDIF.

    SELECT MSEHI,
           MSEHL
      FROM ZSDSVC_T006A
    INTO TABLE @ET_ENTITYSET
    WHERE MSEHI IN @LR_MSEHI OR
          MSEHI IN @LR_MSEHI_CONVERT.

  ENDMETHOD.


  METHOD ZSDSVC_TCURT_GET_ENTITYSET.
    DATA : LR_waers TYPE /IWBEP/T_COD_SELECT_OPTIONS,
           LS_waers LIKE LINE OF LR_waers.

    DATA : LS_FILTER LIKE LINE OF IT_FILTER_SELECT_OPTIONS.

    DATA : LS_ENTITYSET LIKE LINE OF ET_ENTITYSET.

    FIELD-SYMBOLS <LFS_DATA> LIKE LINE OF LR_waers.

    CONSTANTS : BEGIN OF LC_CON,
                  WAERS TYPE C LENGTH 5 VALUE 'waers',
                  CP    TYPE C LENGTH 2 VALUE 'CP',
                  ST    TYPE C LENGTH 1 VALUE '*',
                END OF LC_CON.

    READ TABLE IT_FILTER_SELECT_OPTIONS INTO LS_FILTER
    WITH KEY PROPERTY = LC_CON-WAERS.
    IF SY-SUBRC EQ 0.
      LR_waers        = LS_FILTER-SELECT_OPTIONS.
      LOOP AT LR_waers ASSIGNING <LFS_DATA>.
        <LFS_DATA>-OPTION = LC_CON-CP.
        <LFS_DATA>-LOW    = |{ <LFS_DATA>-LOW }| & |{ LC_CON-ST }|.
        TRANSLATE <LFS_DATA>-LOW TO UPPER CASE.
      ENDLOOP.
    ELSE.
      CLEAR : LR_waers.
    ENDIF.

    SELECT WAERS,
           LTEXT
      FROM ZSDSVC_TCURT
    INTO TABLE @ET_ENTITYSET
    WHERE WAERS IN @LR_waers.
  ENDMETHOD.


  METHOD CHECK_PR_SET_GET_ENTITY.
    DATA : LS_KEY_TAB LIKE LINE OF IT_KEY_TAB.

    DATA : LV_WEB_NO  TYPE CHAR20.

    DATA : LV_OUTPUT  TYPE BANFN,
           LV_MESSAGE TYPE CHAR255.

    LOOP AT IT_KEY_TAB INTO LS_KEY_TAB.
      IF     LS_KEY_TAB-NAME = 'webNo'.
        LV_WEB_NO = LS_KEY_TAB-VALUE.
      ENDIF.
    ENDLOOP.

    ER_ENTITY-WEBNO   = LV_WEB_NO.

    CALL FUNCTION 'Z_SDSMM_CREATE_PR'
      EXPORTING
        I_GET_DATA_FROM_K2 = ABAP_TRUE
        I_WEBNO            = LV_WEB_NO
        I_TEST_RUN         = ABAP_TRUE
      IMPORTING
        E_OUTPUT           = LV_OUTPUT
        E_MESSAGE          = LV_MESSAGE.
    IF LV_OUTPUT IS NOT INITIAL.
      ER_ENTITY-MESTYPE = GC_S.
    ELSE.
      ER_ENTITY-MESTYPE = GC_E.
      ER_ENTITY-MESSAGE = LV_MESSAGE.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
