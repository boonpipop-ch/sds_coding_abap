*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarationse

CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CREATE_PR    CHANGING C_DATA TYPE ZSDSMMS004,
      CHECK_BUDGET CHANGING C_DATA TYPE ZSDSMMS004,
      CHECK_CREATE_ASSET IMPORTING IT_DATA  TYPE ZSDSMMS004
                         RETURNING VALUE(R) TYPE ZSDSFIS012_TT,
      UPDATE_STATUS_PR IMPORTING I_DATA    TYPE ZCL_ZSDSMM_PR_PROCESS_MPC=>TS_UPDATA_STATUS_PR
                       EXPORTING E_MESSAGE TYPE ANY
                                 E_MESSTYP TYPE ANY,
      COMPLEATE IMPORTING I_PR TYPE ANY,
      REJECT    IMPORTING I_PR      TYPE ANY
                EXPORTING E_MESSAGE TYPE ANY
                          E_MESSTYP TYPE ANY,
      GET_DATA_PR CHANGING C_DATA TYPE ZSDSMMS019,
      UPDATE_LOG_PR CHANGING C_DATA TYPE ZSDSMMS033,
      SDSMMT006 IMPORTING I_WEB_NO TYPE ANY
                          I_PR_NO  TYPE ANY,
      GET_WBS IMPORTING I_DATA   TYPE ANY
              RETURNING VALUE(R) TYPE CHAR1,
      GET_DATA_FROM_QUOTATION IMPORTING I_DATA   TYPE ZSDSMMS019-WEBNO
                              RETURNING VALUE(R) TYPE ZSDSMMS019,
      COMMIT.

    CONSTANTS : BEGIN OF LC_CON,
                  S   TYPE C VALUE 'S',
                  REJ TYPE C LENGTH 3 VALUE 'REJ',
                  COM TYPE C LENGTH 3 VALUE 'COM',
                  SUB TYPE C LENGTH 3 VALUE 'SUB',
                  A   TYPE C LENGTH 1 VALUE 'A',
                  K   TYPE C LENGTH 1 VALUE 'K',
                  F   TYPE C LENGTH 1 VALUE 'F',
                  P   TYPE C LENGTH 1 VALUE 'P',
                  COS TYPE C LENGTH 3 VALUE 'COS',
                  IO  TYPE C LENGTH 2 VALUE 'IO',
                  WBS TYPE C LENGTH 3 VALUE 'WBS',
                END OF LC_CON.

ENDCLASS.

CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD CREATE_PR.
    DATA : I_HEADER TYPE ZSDSMMS002.

    DATA : E_OUTPUT	 TYPE	BANFN,
           E_MESSAGE TYPE	CHAR255.

    DATA : LT_ASSET TYPE ZSDSFIS012_TT.

    MOVE-CORRESPONDING C_DATA TO I_HEADER.

    LT_ASSET = CHECK_CREATE_ASSET( C_DATA ).

    CALL FUNCTION 'Z_SDSMM_CREATE_PR'
      EXPORTING
        I_HEADER     = I_HEADER
        IT_ITEM      = C_DATA-DETAIL
        IT_ASSET_NUM = LT_ASSET
        I_SEND_MAIL  = ABAP_TRUE
      IMPORTING
        E_OUTPUT     = E_OUTPUT
        E_MESSAGE    = E_MESSAGE.

    IF E_OUTPUT IS NOT INITIAL.
      C_DATA-MSGTY = ZCL_ZSDSMM_PR_PROCESS_DPC_EXT=>GC_S.
      C_DATA-MSGTX = E_OUTPUT.
    ELSE.
      C_DATA-MSGTY = ZCL_ZSDSMM_PR_PROCESS_DPC_EXT=>GC_E.
      C_DATA-MSGTX = E_MESSAGE.
    ENDIF.

  ENDMETHOD.
  METHOD CHECK_BUDGET.

  ENDMETHOD.
  METHOD CHECK_CREATE_ASSET.

    DATA : LS_DATA TYPE ZSDSMMS003.

    DATA : LS_ASSET TYPE ZSDSFIS011,
           LT_ASSET TYPE TABLE OF ZSDSFIS011.

    DATA : LT_RETURN  TYPE  ZSDSFIS012_TT,
           LV_MESSAGE TYPE  CHAR255,
           LV_MESTYPE TYPE  CHAR1.

    DATA : BEGIN OF LS_T023,
             MATKL TYPE T023-MATKL,
             ANLKL TYPE T023-ANLKL,
           END OF LS_T023.
    DATA LT_T023 LIKE TABLE OF LS_T023.

    CONSTANTS : BEGIN OF LC_CON,
                  A       TYPE C LENGTH 1 VALUE 'A',
                  COMCODE TYPE C LENGTH 4 VALUE '1000',
                END OF LC_CON.

    DATA : LT_TMP TYPE TABLE OF ZSDSMMS003 WITH EMPTY KEY.

    LT_TMP = IT_DATA-DETAIL.

    SELECT T023~MATKL,
           T023~ANLKL
      FROM T023
      INNER JOIN @LT_TMP AS A ON T023~MATKL EQ A~ANLKL
      INTO TABLE @LT_T023.

    LOOP AT IT_DATA-DETAIL INTO LS_DATA WHERE KNTTP EQ LC_CON-A.
      READ TABLE LT_T023 INTO LS_T023
      WITH KEY MATKL = LS_DATA-ANLKL.
      IF SY-SUBRC EQ 0.
        LS_ASSET-ASSET_CLASS  = LS_T023-ANLKL.
      ENDIF.

      LS_ASSET-COMPANY_CODE = LC_CON-COMCODE.
      LS_ASSET-DESCRIPTION1 = LS_DATA-DESCP.
      LS_ASSET-QTY          = 1.
      COLLECT LS_ASSET INTO LT_ASSET.
    ENDLOOP.

    LOOP AT LT_ASSET INTO LS_ASSET.
      CALL FUNCTION 'Z_SDSFI_ASSET_CREATE'
        EXPORTING
          IS_INPUT  = LS_ASSET
        IMPORTING
          ET_RETURN = LT_RETURN
          E_MESSAGE = LV_MESSAGE
          E_MESTYPE = LV_MESTYPE.

      APPEND LINES OF LT_RETURN TO R.
      CLEAR : LT_RETURN,LV_MESSAGE,LV_MESTYPE,LS_ASSET.
    ENDLOOP.

  ENDMETHOD.
  METHOD UPDATE_STATUS_PR.

    DATA : LS_ZSDSMMT001 TYPE ZSDSMMT001.

    DATA : LV_RUNNG TYPE ZSDSMMT001-RUNNG.

    IF I_DATA-STATUS NE LC_CON-REJ.
      SELECT MAX( RUNNG )
        FROM ZSDSMMT001
        INTO LV_RUNNG
        WHERE BANFN EQ I_DATA-PRNO.

      LS_ZSDSMMT001-RUNNG = LV_RUNNG + 1.
      LS_ZSDSMMT001-BANFN = I_DATA-PRNO.
      LS_ZSDSMMT001-STATU = I_DATA-STATUS.
      LS_ZSDSMMT001-POSIT = I_DATA-POSITION.
      LS_ZSDSMMT001-FLAGD = SPACE.
      LS_ZSDSMMT001-REMAK = I_DATA-REMARK.
      LS_ZSDSMMT001-ACTBY = I_DATA-ACTIONBY.
      LS_ZSDSMMT001-ERDAT = I_DATA-ACTIONDATE.
      LS_ZSDSMMT001-ERTIM = I_DATA-ACTIONTIME.

      MODIFY ZSDSMMT001 FROM LS_ZSDSMMT001.
      IF SY-SUBRC EQ 0.
        E_MESSAGE = TEXT-S01.
        E_MESSTYP = LC_CON-S.
      ENDIF.
    ELSE.
      UPDATE ZSDSMMT001 SET FLAGD = ABAP_TRUE
                      WHERE BANFN EQ I_DATA-PRNO.
      IF SY-SUBRC EQ 0.
        E_MESSAGE = TEXT-S01.
        E_MESSTYP = LC_CON-S.
      ENDIF.
      LCL_DATA=>REJECT( EXPORTING I_PR    = I_DATA-PRNO
                        IMPORTING E_MESSAGE = E_MESSAGE
                                  E_MESSTYP = E_MESSTYP ).
    ENDIF.

    IF I_DATA-STATUS EQ LC_CON-COM.
      LCL_DATA=>COMPLEATE( I_DATA-PRNO ).
    ENDIF.
  ENDMETHOD.
  METHOD COMPLEATE.
    CALL FUNCTION 'Z_SDSMM_CREATE_PR' IN BACKGROUND TASK
      EXPORTING
        I_GET_DATA_FROM_K2 = ABAP_TRUE
        I_WEBNO            = I_PR
        I_SEND_MAIL        = ABAP_TRUE.
  ENDMETHOD.
  METHOD REJECT.
    DATA : E_OUTPUT   TYPE CHAR1,
           LV_MESSAGE  TYPE CHAR255,
           LV_MSGTYP   TYPE BAPIRET2-TYPE.

    DATA : I_WEBNO TYPE CHAR20.

    I_WEBNO = I_PR.

    CALL FUNCTION 'Z_SDSMM_REJECT_PR'
      EXPORTING
        I_WEBNO   = I_WEBNO
      IMPORTING
        E_OUTPUT  = E_OUTPUT
        E_MESSAGE = LV_MESSAGE
        E_MESSTYP = LV_MSGTYP.

    E_MESSAGE = LV_MESSAGE.
    E_MESSTYP = LV_MSGTYP.

  ENDMETHOD.
  METHOD GET_DATA_PR.

    DATA : BEGIN OF LS_EBAN,
             BANFN TYPE EBAN-BANFN,
             BNFPO TYPE EBAN-BNFPO,
             KNTTP TYPE EBAN-KNTTP,
             MATKL TYPE EBAN-MATKL,
             MATNR TYPE EBAN-MATNR,
             TXZ01 TYPE EBAN-TXZ01,
             MENGE TYPE EBAN-MENGE,
             BSMNG TYPE EBAN-BSMNG,
             MEINS TYPE EBAN-MEINS,
             PREIS TYPE EBAN-PREIS,
             WAERS TYPE EBAN-WAERS,
             LFDAT TYPE EBAN-LFDAT,
           END OF LS_EBAN.
    DATA : LT_EBAN LIKE TABLE OF LS_EBAN WITH EMPTY KEY .

    DATA : BEGIN OF LS_EBKN,
             BANFN      TYPE EBKN-BANFN,
             BNFPO      TYPE EBKN-BNFPO,
             KOSTL      TYPE EBKN-AUFNR,
             AUFNR      TYPE EBKN-AUFNR,
             PS_PSP_PNR TYPE EBKN-PS_PSP_PNR,
           END OF LS_EBKN.
    DATA : LT_EBKN LIKE TABLE OF LS_EBKN.

    DATA : LS_DETAIL TYPE ZSDSMMS003.

    SELECT SINGLE BANFN
      FROM ZSDSMMT006
      INTO C_DATA-BANFN
     WHERE WEBNO EQ C_DATA-WEBNO
       AND FLAGD EQ SPACE.
    IF SY-SUBRC EQ 0.
      SELECT BANFN
             BNFPO
             KNTTP
             MATKL
             MATNR
             TXZ01
             MENGE
             BSMNG
             MEINS
             PREIS
             WAERS
             LFDAT
        FROM EBAN
        INTO TABLE LT_EBAN
        WHERE BANFN EQ C_DATA-BANFN.

      IF LT_EBAN IS NOT INITIAL.
        SELECT EBKN~BANFN,
               EBKN~BNFPO,
               EBKN~KOSTL,
               EBKN~AUFNR,
               EBKN~PS_PSP_PNR
          FROM EBKN
          INNER JOIN @LT_EBAN AS A ON EBKN~BANFN EQ A~BANFN AND
                                      EBKN~BNFPO EQ A~BNFPO
          INTO TABLE @LT_EBKN.
      ENDIF.

      LOOP AT LT_EBAN INTO LS_EBAN.
        LS_DETAIL-BANFN       = LS_EBAN-BANFN.
        LS_DETAIL-BNFPO       = LS_EBAN-BANFN.
        LS_DETAIL-KNTTP       = LS_EBAN-KNTTP.
        LS_DETAIL-ANLKL       = LS_EBAN-MATKL.

        READ TABLE LT_EBKN INTO LS_EBKN
        WITH KEY BANFN = LS_EBAN-BANFN
                 BNFPO = LS_EBAN-BNFPO.

        IF     LS_DETAIL-KNTTP  = LC_CON-K.
          LS_DETAIL-BUDGET_NO   = LS_EBKN-KOSTL.
          LS_DETAIL-BUDGET_TYPE = LC_CON-COS.
        ELSEIF LS_DETAIL-KNTTP  = LC_CON-F.
          LS_DETAIL-BUDGET_NO   = LS_EBKN-AUFNR.
          LS_DETAIL-BUDGET_TYPE = LC_CON-IO.
        ELSEIF LS_DETAIL-KNTTP  = LC_CON-P.
          LS_DETAIL-BUDGET_NO   = LS_EBKN-PS_PSP_PNR.
          LS_DETAIL-BUDGET_TYPE = LC_CON-WBS.
        ENDIF.
        LS_DETAIL-MATNR       = LS_EBAN-MATNR.
        LS_DETAIL-DESCP       = LS_EBAN-TXZ01.
        LS_DETAIL-QTY         = LS_EBAN-MENGE.
        LS_DETAIL-PO_QTY      = LS_EBAN-BSMNG.
        LS_DETAIL-MEINS       = LS_EBAN-MEINS.
        LS_DETAIL-AMT         = LS_EBAN-PREIS.
        LS_DETAIL-WAERS       = LS_EBAN-WAERS.
        LS_DETAIL-DELIVERY    = LS_EBAN-LFDAT.
        IF LS_DETAIL-KNTTP EQ LC_CON-A.
          COLLECT LS_DETAIL INTO C_DATA-DETAIL.
        ELSE.
          APPEND LS_DETAIL TO C_DATA-DETAIL.
        ENDIF.
        CLEAR : LS_DETAIL.
      ENDLOOP.
    ELSE." case QT
      C_DATA = GET_DATA_FROM_QUOTATION( C_DATA-WEBNO ).
    ENDIF.

* mockup data
*    LS_DETAIL-BANFN       = '11223'.
*    LS_DETAIL-BNFPO       = '1'.
*    LS_DETAIL-KNTTP       = 'a'.
*    LS_DETAIL-ANLKL       = 'test'.
*    LS_DETAIL-BUDGET_NO   = ''.
*    LS_DETAIL-BUDGET_TYPE = ''.
*    LS_DETAIL-MATNR       = 'test1'.
*    LS_DETAIL-DESCP       = 'test1_desc'.
*    LS_DETAIL-QTY         = 10.
*    LS_DETAIL-MEINS       = 'EA'.
*    LS_DETAIL-AMT         = 12000.
*    LS_DETAIL-WAERS       = 'THB'.
*    LS_DETAIL-DELIVERY    = '20240520'.
*
*    APPEND LS_DETAIL TO C_DATA-DETAIL.
*
*    LS_DETAIL-BANFN       = '11223'.
*    LS_DETAIL-BNFPO       = '2'.
*    LS_DETAIL-KNTTP       = 'd'.
*    LS_DETAIL-ANLKL       = 'test11'.
*    LS_DETAIL-BUDGET_NO   = ''.
*    LS_DETAIL-BUDGET_TYPE = ''.
*    LS_DETAIL-MATNR       = 'test2'.
*    LS_DETAIL-DESCP       = 'test2_desc'.
*    LS_DETAIL-QTY         = 7.
*    LS_DETAIL-MEINS       = 'EA'.
*    LS_DETAIL-AMT         = 7900.
*    LS_DETAIL-WAERS       = 'THB'.
*    LS_DETAIL-DELIVERY    = '20240531'.
*
*    APPEND LS_DETAIL TO C_DATA-DETAIL.


  ENDMETHOD.
  METHOD UPDATE_LOG_PR.
    DATA : LS_ZSDSMMT001 TYPE ZSDSMMT001.

    DATA : LV_RUNNG TYPE ZSDSMMT001-RUNNG.

    DATA : LS_NEXTSTEPLIST LIKE LINE OF C_DATA-NEXTSTEPLIST.

    CONSTANTS : LC_COM TYPE C LENGTH 3 VALUE 'COM',
                LC_REJ TYPE C LENGTH 3 VALUE 'REJ',
                LC_WIT TYPE C LENGTH 3 VALUE 'WAI'.

    IF C_DATA-STATUS NE LC_CON-REJ.
      SELECT MAX( RUNNG )
        FROM ZSDSMMT001
        INTO LV_RUNNG
        WHERE BANFN EQ C_DATA-PRNO.

      LV_RUNNG = LV_RUNNG + 1.

      LS_ZSDSMMT001-RUNNG = LV_RUNNG.
      LS_ZSDSMMT001-BANFN = C_DATA-PRNO.
      LS_ZSDSMMT001-STATU = C_DATA-STATUS.
      LS_ZSDSMMT001-POSIT = C_DATA-POSITION.
      LS_ZSDSMMT001-FLAGD = SPACE.
      LS_ZSDSMMT001-REMAK = C_DATA-REMARK.
      LS_ZSDSMMT001-ACTBY = C_DATA-ACTIONBY.
      LS_ZSDSMMT001-ERDAT = C_DATA-ACTIONDATE.
      LS_ZSDSMMT001-ERTIM = C_DATA-ACTIONTIME.

      IF C_DATA-FLAGCOMPLETED EQ ABAP_TRUE.
        MODIFY ZSDSMMT001 FROM LS_ZSDSMMT001.
        COMMIT WORK AND WAIT.
        LS_ZSDSMMT001-STATU = LC_CON-COM.
        LV_RUNNG = LV_RUNNG + 1.
        LS_ZSDSMMT001-RUNNG = LV_RUNNG.
        CLEAR : LS_ZSDSMMT001-ACTBY.
      ENDIF.

      MODIFY ZSDSMMT001 FROM LS_ZSDSMMT001.
      COMMIT WORK AND WAIT.

      LOOP AT C_DATA-NEXTSTEPLIST INTO LS_NEXTSTEPLIST.
        CLEAR : LS_ZSDSMMT001.
        LV_RUNNG            = LV_RUNNG + 1.
        LS_ZSDSMMT001-RUNNG = LV_RUNNG.
        LS_ZSDSMMT001-BANFN = C_DATA-PRNO.
        LS_ZSDSMMT001-STATU = LC_WIT.
        LS_ZSDSMMT001-POSIT = LS_NEXTSTEPLIST-NEXTSTEPPOSITION.
        LS_ZSDSMMT001-FLAGD = SPACE.
        LS_ZSDSMMT001-REMAK = C_DATA-REMARK.
        LS_ZSDSMMT001-ACTBY = LS_NEXTSTEPLIST-NEXTSTEPACTIONBY.
        LS_ZSDSMMT001-ERDAT = C_DATA-ACTIONDATE.
        LS_ZSDSMMT001-ERTIM = C_DATA-ACTIONTIME.
        INSERT ZSDSMMT001 FROM LS_ZSDSMMT001.
        COMMIT WORK AND WAIT.
      ENDLOOP.
      IF SY-SUBRC EQ 0.
        C_DATA-MESSAGE     = TEXT-S01.
        C_DATA-MESSAGETYPE = LC_CON-S.
      ENDIF.

    ELSE.
*      UPDATE ZSDSMMT001 SET FLAGD = ABAP_TRUE
*                      WHERE BANFN EQ C_DATA-PRNO.
*      COMMIT WORK AND WAIT.
*      IF SY-SUBRC EQ 0.
*        C_DATA-MESSAGE     = TEXT-S01.
*        C_DATA-MESSAGETYPE = LC_CON-S.
*      ENDIF.
      LCL_DATA=>REJECT( EXPORTING I_PR    = C_DATA-PRNO
                        IMPORTING E_MESSAGE = C_DATA-MESSAGE
                                  E_MESSTYP = C_DATA-MESSAGETYPE ).
      IF C_DATA-MESSAGETYPE <> 'E'.
        UPDATE ZSDSMMT001 SET FLAGD = ABAP_TRUE
                        WHERE BANFN EQ C_DATA-PRNO.
        COMMIT WORK AND WAIT.
        IF SY-SUBRC EQ 0.
          C_DATA-MESSAGE     = TEXT-S01.
          C_DATA-MESSAGETYPE = LC_CON-S.
        ENDIF.
      ENDIF.
    ENDIF.

    IF     C_DATA-FLAGCOMPLETED EQ ABAP_TRUE.
      LCL_DATA=>COMPLEATE( C_DATA-PRNO ).
    ELSEIF C_DATA-STATUS EQ LC_CON-SUB.
      LCL_DATA=>SDSMMT006( I_WEB_NO = C_DATA-PRNO
                           I_PR_NO  = SPACE ).
    ENDIF.

  ENDMETHOD.
  METHOD SDSMMT006.
    DATA : LS_ZSDSMMT006 TYPE ZSDSMMT006.

    LS_ZSDSMMT006-BANFN = I_PR_NO.
    LS_ZSDSMMT006-WEBNO = I_WEB_NO.
    LS_ZSDSMMT006-ERNAM = SY-UNAME.
    LS_ZSDSMMT006-ERDAT = SY-DATUM.
    LS_ZSDSMMT006-ERZET = SY-UZEIT.
    LS_ZSDSMMT006-AENAM = SY-UNAME.
    LS_ZSDSMMT006-AEDAT = SY-DATUM.
    LS_ZSDSMMT006-AETIM = SY-UZEIT.

*    SELECT COUNT(*)
*      FROM ZSDSMMT006
*      WHERE BANFN EQ SPACE
*        AND WEBNO EQ I_WEB_NO.
*    IF SY-SUBRC EQ 0.
*      DELETE FROM ZSDSMMT006 WHERE BANFN EQ SPACE
*                               AND WEBNO EQ I_WEB_NO.
*      COMMIT( ).
*    ENDIF.
    MODIFY ZSDSMMT006 FROM LS_ZSDSMMT006.
    COMMIT( ).
  ENDMETHOD.
  METHOD COMMIT.
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD  GET_WBS.

    SELECT COUNT(*)
      FROM PRPS
      WHERE POSID EQ I_DATA.
    IF SY-SUBRC EQ 0.
      R = ABAP_TRUE.
    ELSE.
      CLEAR : R.
    ENDIF.

  ENDMETHOD.
  METHOD GET_DATA_FROM_QUOTATION.
    DATA LS_DETAIL TYPE ZSDSMMS003.

    DATA LV_LINE TYPE I.

    SELECT VBAP~VBELN,
           VBAP~POSNR,
           VBAP~MATNR,
           VBAP~ARKTX,
           VBAP~KWMENG,
           VBAP~VRKME,
           VBAP~NETWR,
           VBAP~WAERK,
           VBAP~PS_PSP_PNR,
           VBEP~EDATU
      FROM VBAP
      LEFT JOIN VBEP ON VBAP~VBELN EQ VBEP~VBELN AND
                        VBAP~POSNR EQ VBEP~POSNR AND
                        VBEP~ETENR EQ '0001'
      INTO TABLE @DATA(LT_VBAP)
      WHERE VBAP~VBELN EQ @I_DATA.

    LOOP AT LT_VBAP INTO DATA(LS_VBAP).
      ADD 1 TO LV_LINE.
      LS_DETAIL-BANFN             = LS_VBAP-VBELN.
      LS_DETAIL-BNFPO             = LV_LINE.
      LS_DETAIL-KNTTP             = ''.
      LS_DETAIL-ANLKL             = ''.

      CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
        EXPORTING
          INPUT         = LS_VBAP
        IMPORTING
          OUTPUT        = LS_DETAIL-BUDGET_NO
        EXCEPTIONS
          ERROR_MESSAGE = 1
          OTHERS        = 2.

      IF LS_DETAIL-BUDGET_NO IS INITIAL.
        LS_DETAIL-BUDGET_TYPE     = LC_CON-WBS.
      ENDIF.
      LS_DETAIL-MATNR             = LS_VBAP-MATNR.
      LS_DETAIL-DESCP             = LS_VBAP-ARKTX.
      LS_DETAIL-QTY               = LS_VBAP-KWMENG.
      LS_DETAIL-MEINS             = LS_VBAP-VRKME.
      LS_DETAIL-AMT               = LS_VBAP-NETWR.
      LS_DETAIL-WAERS             = LS_VBAP-WAERK.
      LS_DETAIL-DELIVERY          = LS_VBAP-EDATU.
*      LS_DETAIL-COSTCENTER        = ''.
*      LS_DETAIL-PO_QTY            = ''.
*      LS_DETAIL-STORAGE_LOCATION  = ''.
*      LS_DETAIL-REQUEST_FOR       = ''.
*      LS_DETAIL-GL                = ''.
*      LS_DETAIL-LINE_ITEM         = ''.
*      LS_DETAIL-REMARK            = ''.

      APPEND LS_DETAIL TO R-DETAIL.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.
