*&---------------------------------------------------------------------*
*& Include          ZSDSMMR0540_CLASS
*&---------------------------------------------------------------------*
CLASS LCL_UTIL DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY.

ENDCLASS.
CLASS LCL_UTIL IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_IN.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_outPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
ENDCLASS.
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR,
      START_PROCESS.
    CLASS-METHODS :
      GET_DATA,
      GET_ADDTIONAL_DATA,
      SHOW_REPORT,
      SET_LAYOUT_OUTPUT,
      BUILD_FCAT,
      SET_SORT,
      SET_ALV_GRID,
      HTML_TOP_OF_PAGE,
      SELECT_INPUT_FILE_NAME,
      UPDATE_MAT,
      UPDATE_CP1 CHANGING I_DATA TYPE GY_RESULT,
      UPDATE_INDOOR_UNIT_TYPE CHANGING I_DATA TYPE GY_RESULT,
      UPDATE_INDOOR_CAPACITY CHANGING I_DATA TYPE GY_RESULT,
      UPDATE_COUNTING_FLAG CHANGING I_DATA TYPE GY_RESULT,
      UPDATE_MG2 CHANGING I_DATA  TYPE GY_RESULT
                          I_INDEX TYPE I,
      UPDATE_MG1 CHANGING I_DATA  TYPE GY_RESULT
                          I_INDEX TYPE I,
      UPDATE_PRODUCT_HIERARCHY CHANGING I_DATA  TYPE GY_RESULT
                                        I_INDEX TYPE I,
      UPDATE_ALL CHANGING I_DATA TYPE GY_RESULT,
      UPDATE_SAELS_DATA CHANGING I_DATA  TYPE GY_RESULT
                                 I_INDEX TYPE I,
      MODIFY_SAELSDATA IMPORTING I_DATA   TYPE GY_RESULT
                                 I_MVKE   TYPE GY_MVKE
                       RETURNING VALUE(R) TYPE BAPI_MVKE,
      MODIFY_SAELSDATAX IMPORTING I_DATA   TYPE BAPI_MVKE
                                  I_MVKE   TYPE GY_MVKE
                        RETURNING VALUE(R) TYPE BAPI_MVKEX,
      MODIFY_VALUATIONDATA IMPORTING I_DATA   TYPE GY_RESULT
                           RETURNING VALUE(R) TYPE BAPI_MBEW,
      MODIFY_VALUATIONDATAX IMPORTING I_DATA   TYPE BAPI_MBEW
                            RETURNING VALUE(R) TYPE BAPI_MBEWX,
      MODIFY_CLIENTDATA IMPORTING I_DATA   TYPE GY_RESULT
                        RETURNING VALUE(R) TYPE BAPI_MARA,
      MODIFY_CLIENTDATAX IMPORTING I_DATA   TYPE BAPI_MARA
                         RETURNING VALUE(R) TYPE BAPI_MARAX,
      MODIFY_EXTENSIONIN IMPORTING I_DATA       TYPE GY_RESULT
                         CHANGING  EXTENSIONIN  TYPE  BAPIPAREX_T
                                   EXTENSIONINX TYPE  T_BAPIPAREXX,
      UPDATE_MATERIALDESCRIPTION IMPORTING I_DATA   TYPE GY_RESULT
                                 RETURNING VALUE(R) TYPE T_BAPI_MAKT,
      EXCEL_UPDATE_ALL IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_COM_PRICE IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_MATGROUP_2 IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_MATGROUP_1 IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_PRODUCT_HIERARCHY IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_INDOOR_TYPE IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_CAPACITY IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      EXCEL_UPDATE_COUNTING_FLAG IMPORTING LS_TABLE TYPE ALSMEX_TABLINE,
      GET_CHANNEL.
    CLASS-DATA :
      LO TYPE REF TO LCL_DATA.

    CONSTANTS : BEGIN OF LCL_CON,
                  ORG TYPE C LENGTH 4 VALUE '1000',
                  DIS TYPE C LENGTH 2 VALUE 'D0',
                END OF LCL_CON.

ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD GET_DATA.
    IF LO IS INITIAL.
      CREATE OBJECT LO.
    ENDIF.

    LO->START_PROCESS( ).
  ENDMETHOD.
  METHOD START_PROCESS.
    DATA: IT_RAW   TYPE TRUXS_T_TEXT_DATA,
          LV_TABIX TYPE SY-TABIX.

    DATA: LV_SCOL TYPE I VALUE 1,
          LV_SROW TYPE I VALUE 2,
          LV_ECOL TYPE I VALUE 100,
          LV_EROW TYPE I VALUE 9999.

    DATA: LT_TABLE TYPE TABLE OF ALSMEX_TABLINE,
          LS_TABLE TYPE ALSMEX_TABLINE.

    DATA: LV_COUNT TYPE I.

    CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
      EXPORTING
        FILENAME                = P_FILE
        I_BEGIN_COL             = LV_SCOL
        I_BEGIN_ROW             = LV_SROW
        I_END_COL               = LV_ECOL
        I_END_ROW               = LV_EROW
      TABLES
        INTERN                  = LT_TABLE
      EXCEPTIONS
        INCONSISTENT_PARAMETERS = 1
        UPLOAD_OLE              = 2
        OTHERS                  = 3.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    LOOP AT LT_TABLE INTO DATA(LS_TMP).
*      ADD 1 TO LV_COUNT.
      MOVE-CORRESPONDING LS_TMP TO LS_TABLE.
      IF R1 EQ ABAP_TRUE.
        EXCEL_UPDATE_ALL( LS_TABLE ).
      ELSEIF R2 EQ ABAP_TRUE.
        EXCEL_UPDATE_COM_PRICE( LS_TABLE ).
      ELSEIF R3 EQ ABAP_TRUE.
        EXCEL_UPDATE_MATGROUP_2( LS_TABLE ).
      ELSEIF R4 EQ ABAP_TRUE.
        EXCEL_UPDATE_MATGROUP_1( LS_TABLE ).
      ELSEIF R5 EQ ABAP_TRUE.
        EXCEL_UPDATE_PRODUCT_HIERARCHY( LS_TABLE ).
      ELSEIF R6 EQ ABAP_TRUE.
        EXCEL_UPDATE_INDOOR_TYPE( LS_TABLE ).
      ELSEIF R7 EQ ABAP_TRUE.
        EXCEL_UPDATE_CAPACITY( LS_TABLE ).
      ELSEIF R8 EQ ABAP_TRUE.
        EXCEL_UPDATE_COUNTING_FLAG( LS_TABLE ).
      ENDIF.

      AT END OF ROW.
*        CLEAR : LV_COUNT.
*        GS_RESULT-UPDATE = LS_TABLE-VALUE.
        APPEND GS_RESULT TO GT_RESULT.
        CLEAR : GS_RESULT.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.
  METHOD GET_ADDTIONAL_DATA.

    GET_CHANNEL( ).


*    FIELD-SYMBOLS <LFS_RESULT> LIKE LINE OF GT_RESULT.
*    LOOP AT GT_RESULT ASSIGNING <LFS_RESULT>.
*
*    ENDLOOP.
  ENDMETHOD.
  METHOD SHOW_REPORT.
    SET_LAYOUT_OUTPUT( ).
    BUILD_FCAT( ).
    SET_SORT( ).
    SET_ALV_GRID( ).
  ENDMETHOD.
  METHOD SET_LAYOUT_OUTPUT.
*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                END OF LC_CON.
    GS_LAYOUT-ZEBRA             = GC_X.
    GS_LAYOUT-COLWIDTH_OPTIMIZE = GC_X.
*    GS_LAYOUT-BOX_FIELDNAME     = LC_CON-CHK_FILED.
  ENDMETHOD.
  METHOD BUILD_FCAT.
    DATA:
       LS_FCAT TYPE SLIS_FIELDCAT_ALV.

*    CONSTANTS : BEGIN OF LC_CON,
*                  CHK_FILED TYPE C LENGTH 5 VALUE 'CHECK',
*                  CHK_NAME  TYPE C LENGTH 3 VALUE 'CHK',
*                END OF LC_CON.
*
*    CLEAR LS_FCAT.
*    LS_FCAT-FIELDNAME   = LC_CON-CHK_FILED.
*    LS_FCAT-SELTEXT_S   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_M   = LC_CON-CHK_NAME.
*    LS_FCAT-SELTEXT_L   = LC_CON-CHK_FILED.
*    LS_FCAT-CHECKBOX    = ABAP_TRUE.
*    LS_FCAT-INPUT       = ABAP_TRUE.
*    LS_FCAT-EDIT        = ABAP_TRUE.
*    APPEND LS_FCAT TO GT_FCAT.

    DATA : LV_RUNNING  TYPE I,
           LV_DATA     TYPE C LENGTH 6 VALUE 'TEXT-',
           LV_RUN_TEXT TYPE C LENGTH 2.

    CONSTANTS : LC_F TYPE C VALUE 'F',
                LC_T TYPE C VALUE 'T',
                LC_d TYPE C VALUE 'D'.

    FIELD-SYMBOLS <LFS> TYPE ANY.

    DATA : LV_TEXT TYPE C LENGTH 8.
*Field
    CLEAR : LS_FCAT.
    DO 99 TIMES.
      ADD 1 TO LV_RUNNING.
      LV_RUN_TEXT = LV_RUNNING.

      LCL_UTIL=>CONVERT_ALPHA_IN( EXPORTING I_DATA = LV_RUN_TEXT
                                  IMPORTING E_Data = LV_RUN_TEXT ).

      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_F LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS NOT ASSIGNED.
        EXIT.
      ENDIF.
      LS_FCAT-FIELDNAME = <LFS>.
*Teble Ref
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_T LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-REF_TABNAME = <LFS>.
      ENDIF.
*Description
      IF <LFS> IS ASSIGNED.
        UNASSIGN <LFS>.
      ENDIF.
      CONCATENATE LV_DATA LC_D LV_RUN_TEXT INTO LV_TEXT.
      ASSIGN (LV_TEXT) TO <LFS>.
      IF <LFS> IS ASSIGNED.
        LS_FCAT-SELTEXT_S = <LFS>.
        LS_FCAT-SELTEXT_M = <LFS>.
        LS_FCAT-SELTEXT_L = <LFS>.
      ENDIF.
      APPEND LS_FCAT TO GT_FCAT.
      CLEAR LS_FCAT.
    ENDDO.

  ENDMETHOD.
  METHOD SET_SORT.
**  CLEAR gs_sort.
**  gs_sort-fieldname = 'LIFNR'.
**  gs_sort-spos = '1'.
**  gs_sort-up = 'X'.
***  gs_sort-subtot = 'X'.
**  APPEND gs_sort TO gt_sort.
  ENDMETHOD.
  METHOD SET_ALV_GRID.
*SAPLKKBL
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        I_CALLBACK_PROGRAM = SY-REPID
        "I_CALLBACK_PF_STATUS_SET = 'PF_STATUS_1'
        "I_callback_user_command  = 'USER_COMMAND'
*       I_CALLBACK_TOP_OF_PAGE            = ' '
*       i_html_height_top  = 12
*       I_CALLBACK_HTML_TOP_OF_PAGE       = 'HTML_TOP_OF_PAGE'
*       I_CALLBACK_HTML_END_OF_LIST       = ' '
*       I_STRUCTURE_NAME   =
*       I_BACKGROUND_ID    = ' '
*       I_GRID_TITLE       =
*       I_GRID_SETTINGS    =
        IS_LAYOUT          = GS_LAYOUT
        IT_FIELDCAT        = GT_FCAT
*       IT_EXCLUDING       =
*       IT_SPECIAL_GROUPS  =
        IT_SORT            = GT_SORT
*       IT_FILTER          =
*       IS_SEL_HIDE        =
        I_DEFAULT          = GC_X
        I_SAVE             = GC_A
*       IS_VARIANT         =
*       IT_EVENTS          =
*       IT_EVENT_EXIT      =
*       IS_PRINT           =
*       IS_REPREP_ID       =
*       I_SCREEN_START_COLUMN             = 0
*       I_SCREEN_START_LINE               = 0
*       I_SCREEN_END_COLUMN               = 0
*       I_SCREEN_END_LINE  = 0
*       I_HTML_HEIGHT_TOP  = 0
*       I_HTML_HEIGHT_END  = 0
*       IT_ALV_GRAPHICS    =
*       IT_HYPERLINK       =
*       IT_ADD_FIELDCAT    =
*       IT_EXCEPT_QINFO    =
*       IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*       E_EXIT_CAUSED_BY_CALLER           =
*       ES_EXIT_CAUSED_BY_USER            =
      TABLES
        T_OUTTAB           = GT_RESULT
      EXCEPTIONS
        PROGRAM_ERROR      = 1
        OTHERS             = 2.
    IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMETHOD.
  METHOD HTML_TOP_OF_PAGE.
*  DATA: text TYPE sdydo_text_element.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 100.
*  text =  'Company Code Data'.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'HEADING'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
*
*  text = 'User Name : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uname.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*
*  text = 'Date : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-datum.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 50.
*
*  text = 'Time : '.
*  CALL METHOD document->add_text
*    EXPORTING
*      text         = text
*      sap_emphasis = 'Strong'.
*
*  CALL METHOD document->add_gap
*    EXPORTING
*      width = 6.
*
*  text = sy-uzeit.
*  CALL METHOD document->add_text
*    EXPORTING
*      text      = text
*      sap_style = 'Key'.
*
*  CALL METHOD document->new_line.
*  CALL METHOD document->new_line.
  ENDMETHOD.
  METHOD SELECT_INPUT_FILE_NAME.
    CALL FUNCTION 'F4_FILENAME'
      EXPORTING
        PROGRAM_NAME  = SY-REPID
        DYNPRO_NUMBER = SY-DYNNR
        FIELD_NAME    = 'PATH'
      IMPORTING
        FILE_NAME     = GV_TMP_FILE_PATH.
  ENDMETHOD.
  METHOD UPDATE_MAT.
    DATA : LV_INDEX TYPE I VALUE 1.
    SORT GT_RESULT BY MATNR.
    SORT GT_MVKE BY MATNR.

    LOOP AT GT_RESULT ASSIGNING FIELD-SYMBOL(<LFS_DATA>).
      IF R1 EQ ABAP_TRUE.
        UPDATE_ALL( CHANGING I_DATA = <LFS_DATA> ).
        UPDATE_SAELS_DATA( CHANGING I_DATA  = <LFS_DATA>
                                    I_INDEX = LV_INDEX ).
      ELSEIF R2 EQ ABAP_TRUE.
        UPDATE_CP1( CHANGING I_DATA = <LFS_DATA> ).
      ELSEIF R3 EQ ABAP_TRUE.
        UPDATE_MG2( CHANGING I_DATA = <LFS_DATA>
                             I_INDEX = LV_INDEX ).
      ELSEIF R4 EQ ABAP_TRUE.
        UPDATE_MG1( CHANGING I_DATA = <LFS_DATA>
                             I_INDEX = LV_INDEX ).
      ELSEIF R5 EQ ABAP_TRUE.
        UPDATE_PRODUCT_HIERARCHY( CHANGING I_DATA = <LFS_DATA>
                                           I_INDEX = LV_INDEX ).
      ELSEIF R6 EQ ABAP_TRUE.
        UPDATE_INDOOR_UNIT_TYPE( CHANGING I_DATA = <LFS_DATA> ).
      ELSEIF R7 EQ ABAP_TRUE.
        UPDATE_INDOOR_CAPACITY( CHANGING I_DATA = <LFS_DATA> ).
      ELSEIF R8 EQ ABAP_TRUE.
        UPDATE_COUNTING_FLAG( CHANGING I_DATA = <LFS_DATA> ).
      ENDIF.
*      IF R1 EQ ABAP_TRUE.
*        UPDATE_MG2( CHANGING I_DATA = <LFS_DATA> ).
*      ELSEIF R2 EQ ABAP_TRUE.
*        UPDATE_CP1( CHANGING I_DATA = <LFS_DATA> ).
*      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD UPDATE_CP1.
    DATA : BAPI_MBEW  TYPE BAPI_MBEW,
           BAPI_MBEWX TYPE BAPI_MBEWX.

    DATA : RETURN	TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    CONSTANTS : BEGIN OF LC_CON,
                  ORG TYPE C LENGTH 4 VALUE '1000',
                END OF LC_CON.

    DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

    IF LV_LEN GT 18.
      HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
    ELSE.
      HEADDATA-MATERIAL      = I_DATA-MATNR.
    ENDIF.

    BAPI_MBEW-COMMPRICE1  = I_DATA-COMMPRICE1.
    BAPI_MBEW-VAL_AREA    = LC_CON-ORG.

    BAPI_MBEWX-VAL_AREA   = LC_CON-ORG.
    BAPI_MBEWX-COMMPRICE1 = ABAP_TRUE.

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        HEADDATA       = HEADDATA
        VALUATIONDATA  = BAPI_MBEW
        VALUATIONDATAX = BAPI_MBEWX
      IMPORTING
        RETURN         = RETURN.

    IF RETURN-TYPE EQ GC_S.
      I_DATA-STATUS = GC_SUCS.
      COMMIT WORK AND WAIT.
    ELSE.
      I_DATA-STATUS = GC_ERRO.
    ENDIF.

    I_DATA-MESSAGE = RETURN-MESSAGE.
  ENDMETHOD.
  METHOD UPDATE_MG1.
    DATA : BAPI_MVKE  TYPE BAPI_MVKE,
           BAPI_MVKEX TYPE BAPI_MVKEX.

    DATA : RETURN	 TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    CONSTANTS : BEGIN OF LC_CON,
                  ORG TYPE C LENGTH 4 VALUE '1000',
                  DIS TYPE C LENGTH 2 VALUE 'D0',
                END OF LC_CON.

    DATA : LV_TABIX TYPE SY-TABIX.

    LOOP AT GT_MVKE INTO DATA(LS_MVKE) FROM I_INDEX.
      LV_TABIX = SY-TABIX.
      IF LS_MVKE-MATNR NE I_DATA-MATNR.
        I_INDEX = LV_TABIX.
        EXIT.
      ENDIF.

      DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

      IF LV_LEN GT 18.
        HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
      ELSE.
        HEADDATA-MATERIAL      = I_DATA-MATNR.
      ENDIF.

      BAPI_MVKE-SALES_ORG   = LS_MVKE-VKORG.
      BAPI_MVKE-DISTR_CHAN  = LS_MVKE-VTWEG.
      BAPI_MVKE-MATL_GRP_1  = I_DATA-MAT_GROUP_1.

      BAPI_MVKEX-SALES_ORG  = LS_MVKE-VKORG.
      BAPI_MVKEX-DISTR_CHAN = LS_MVKE-VTWEG.
      BAPI_MVKEX-MATL_GRP_1 = ABAP_TRUE.

      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA   = HEADDATA
          SALESDATA  = BAPI_MVKE
          SALESDATAX = BAPI_MVKEX
        IMPORTING
          RETURN     = RETURN.

      IF RETURN-TYPE EQ GC_S.
        I_DATA-STATUS = GC_SUCS.
        COMMIT WORK AND WAIT.
      ELSE.
        I_DATA-STATUS = GC_ERRO.
      ENDIF.

      I_DATA-MESSAGE = RETURN-MESSAGE.
    ENDLOOP.
  ENDMETHOD.
  METHOD UPDATE_PRODUCT_HIERARCHY.
    DATA : BAPI_MVKE  TYPE BAPI_MVKE,
           BAPI_MVKEX TYPE BAPI_MVKEX.

    DATA : RETURN	 TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    DATA : CLIENTDATA  TYPE BAPI_MARA,
           CLIENTDATAX TYPE BAPI_MARAX.

    CONSTANTS : BEGIN OF LC_CON,
                  ORG TYPE C LENGTH 4 VALUE '1000',
                  DIS TYPE C LENGTH 2 VALUE 'D0',
                END OF LC_CON.

    DATA : LV_TABIX TYPE SY-TABIX.

    LOOP AT GT_MVKE INTO DATA(LS_MVKE) FROM I_INDEX.
      LV_TABIX = SY-TABIX.
      IF LS_MVKE-MATNR NE I_DATA-MATNR.
        I_INDEX = LV_TABIX.
        EXIT.
      ENDIF.

      DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

      IF LV_LEN GT 18.
        HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
      ELSE.
        HEADDATA-MATERIAL      = I_DATA-MATNR.
      ENDIF.

      BAPI_MVKE-SALES_ORG   = LS_MVKE-VKORG.
      BAPI_MVKE-DISTR_CHAN  = LS_MVKE-VTWEG.
      BAPI_MVKE-PROD_HIER   = I_DATA-PROD_HIER.

      BAPI_MVKEX-SALES_ORG  = LS_MVKE-VKORG.
      BAPI_MVKEX-DISTR_CHAN = LS_MVKE-VTWEG.
      BAPI_MVKEX-PROD_HIER  = ABAP_TRUE.

      CLIENTDATA  = MODIFY_CLIENTDATA( I_DATA ).
      CLIENTDATAX = MODIFY_CLIENTDATAX( CLIENTDATA ).

      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA    = HEADDATA
          CLIENTDATA  = CLIENTDATA
          CLIENTDATAX = CLIENTDATAX
          SALESDATA   = BAPI_MVKE
          SALESDATAX  = BAPI_MVKEX
        IMPORTING
          RETURN      = RETURN.

      IF RETURN-TYPE EQ GC_S.
        I_DATA-STATUS = GC_SUCS.
        COMMIT WORK AND WAIT.
      ELSE.
        I_DATA-STATUS = GC_ERRO.
      ENDIF.

      I_DATA-MESSAGE = RETURN-MESSAGE.
    ENDLOOP.
  ENDMETHOD.
  METHOD UPDATE_MG2.
    DATA : BAPI_MVKE  TYPE BAPI_MVKE,
           BAPI_MVKEX TYPE BAPI_MVKEX.

    DATA : RETURN	 TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    CONSTANTS : BEGIN OF LC_CON,
                  ORG TYPE C LENGTH 4 VALUE '1000',
                  DIS TYPE C LENGTH 2 VALUE 'D0',
                END OF LC_CON.

    DATA : LV_TABIX TYPE SY-TABIX.

    LOOP AT GT_MVKE INTO DATA(LS_MVKE) FROM I_INDEX.
      LV_TABIX = SY-TABIX.
      IF LS_MVKE-MATNR NE I_DATA-MATNR.
        I_INDEX = LV_TABIX.
        EXIT.
      ENDIF.

      DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

      IF LV_LEN GT 18.
        HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
      ELSE.
        HEADDATA-MATERIAL      = I_DATA-MATNR.
      ENDIF.

      BAPI_MVKE-SALES_ORG   = LS_MVKE-VKORG.
      BAPI_MVKE-DISTR_CHAN  = LS_MVKE-VTWEG.
      BAPI_MVKE-MATL_GRP_2  = I_DATA-MAT_GROUP_2.

      BAPI_MVKEX-SALES_ORG  = LS_MVKE-VKORG.
      BAPI_MVKEX-DISTR_CHAN = LS_MVKE-VTWEG.
      BAPI_MVKEX-MATL_GRP_2 = ABAP_TRUE.

      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA   = HEADDATA
          SALESDATA  = BAPI_MVKE
          SALESDATAX = BAPI_MVKEX
        IMPORTING
          RETURN     = RETURN.

      IF RETURN-TYPE EQ GC_S.
        I_DATA-STATUS = GC_SUCS.
        COMMIT WORK AND WAIT.
      ELSE.
        I_DATA-STATUS = GC_ERRO.
      ENDIF.

      I_DATA-MESSAGE = RETURN-MESSAGE.
    ENDLOOP.
  ENDMETHOD.
  METHOD UPDATE_ALL.

    DATA : RETURN	 TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    DATA : CLIENTDATA           TYPE BAPI_MARA,
           CLIENTDATAX          TYPE BAPI_MARAX,
           PLANTDATA            TYPE BAPI_MARC,
           PLANTDATAX           TYPE BAPI_MARCX,
           FORECASTPARAMETERS   TYPE BAPI_MPOP,
           FORECASTPARAMETERSX  TYPE BAPI_MPOPX,
           PLANNINGDATA         TYPE BAPI_MPGD,
           PLANNINGDATAX        TYPE BAPI_MPGDX,
           STORAGELOCATIONDATA  TYPE BAPI_MARD,
           STORAGELOCATIONDATAX TYPE BAPI_MARDX,
           VALUATIONDATA        TYPE BAPI_MBEW,
           VALUATIONDATAX       TYPE BAPI_MBEWX,
           WAREHOUSENUMBERDATA  TYPE BAPI_MLGN,
           WAREHOUSENUMBERDATAX TYPE BAPI_MLGNX,
           SALESDATA            TYPE BAPI_MVKE,
           SALESDATAX           TYPE BAPI_MVKEX,
           STORAGETYPEDATA      TYPE BAPI_MLGT,
           STORAGETYPEDATAX     TYPE BAPI_MLGTX,
           FLAG_ONLINE          TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           FLAG_CAD_CALL        TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           NO_DEQUEUE           TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           NO_ROLLBACK_WORK     TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           CLIENTDATACWM        TYPE /CWM/BAPI_MARA,
           CLIENTDATACWMX       TYPE /CWM/BAPI_MARAX,
           VALUATIONDATACWM     TYPE /CWM/BAPI_MBEW,
           VALUATIONDATACWMX    TYPE /CWM/BAPI_MBEWX,
           MATPLSTADATA         TYPE BAPI_MATPLSTA,
           MATPLSTADATAX        TYPE BAPI_MATPLSTAX,
           MARC_APS_EXTDATA     TYPE BAPI_MARC_APS_EXT,
           MARC_APS_EXTDATAX    TYPE BAPI_MARC_APS_EXTX.

    DATA : MATERIALDESCRIPTION   TYPE TABLE OF BAPI_MAKT,
           UNITSOFMEASURE        TYPE TABLE OF BAPI_MARM,
           UNITSOFMEASUREX       TYPE TABLE OF BAPI_MARMX,
           INTERNATIONALARTNOS   TYPE TABLE OF BAPI_MEAN,
           MATERIALLONGTEXT      TYPE TABLE OF BAPI_MLTX,
           TAXCLASSIFICATIONS    TYPE TABLE OF BAPI_MLAN,
           RETURNMESSAGES        TYPE TABLE OF BAPI_MATRETURN2,
           PRTDATA               TYPE TABLE OF BAPI_MFHM,
           PRTDATAX              TYPE TABLE OF BAPI_MFHMX,
           EXTENSIONIN           TYPE TABLE OF BAPIPAREX,
           EXTENSIONINX          TYPE TABLE OF BAPIPAREXX,
           UNITSOFMEASURECWM     TYPE TABLE OF /CWM/BAPI_MARM,
           UNITSOFMEASURECWMX    TYPE TABLE OF /CWM/BAPI_MARMX,
           SEGMRPGENERALDATA     TYPE TABLE OF BAPI_SGT_MRP_GN,
           SEGMRPGENERALDATAX    TYPE TABLE OF BAPI_SGT_MRP_GNX,
           SEGMRPQUANTITYDATA    TYPE TABLE OF BAPI_SGT_MRP,
           SEGMRPQUANTITYDATAX   TYPE TABLE OF BAPI_SGT_MRPX,
           SEGVALUATIONTYPE      TYPE TABLE OF BAPI_SGT_MADKA,
           SEGVALUATIONTYPEX     TYPE TABLE OF BAPI_SGT_MADKAX,
           SEGSALESSTATUS        TYPE TABLE OF BAPI_SGT_MVKE,
           SEGSALESSTATUSX       TYPE TABLE OF BAPI_SGT_MVKEX,
           SEGWEIGHTVOLUME       TYPE TABLE OF BAPI_SGT_MARM,
           SEGWEIGHTVOLUMEX      TYPE TABLE OF BAPI_SGT_MARMX,
           DEMAND_PENALTYDATA    TYPE TABLE OF BAPI_PPO_DMND_PENALTY,
           DEMAND_PENALTYDATAX   TYPE TABLE OF BAPI_PPO_DMND_PENALTYX,
           NFMCHARGEWEIGHTS      TYPE TABLE OF /NFM/BAPITVGW,
           NFMCHARGEWEIGHTSX     TYPE TABLE OF /NFM/BAPITVGWX,
           NFMSTRUCTURALWEIGHTS  TYPE TABLE OF /NFM/BAPITKGW,
           NFMSTRUCTURALWEIGHTSX TYPE TABLE OF /NFM/BAPITKGWX.

    DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

    IF LV_LEN GT 18.
      HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
    ELSE.
      HEADDATA-MATERIAL      = I_DATA-MATNR.
    ENDIF.

    CLIENTDATA  = MODIFY_CLIENTDATA( I_DATA ).
    CLIENTDATAX = MODIFY_CLIENTDATAX( CLIENTDATA ).

*    SALESDATA  = MODIFY_SAELSDATA( I_DATA ).
*    SALESDATAX = MODIFY_SAELSDATAX( SALESDATA ).

    VALUATIONDATA  = MODIFY_VALUATIONDATA( I_DATA ).
    VALUATIONDATAX = MODIFY_VALUATIONDATAX( VALUATIONDATA ).

    MODIFY_EXTENSIONIN( EXPORTING I_DATA = I_DATA
                         CHANGING EXTENSIONIN  = EXTENSIONIN
                                  EXTENSIONINX = EXTENSIONINX ).

    MATERIALDESCRIPTION = UPDATE_MATERIALDESCRIPTION( I_DATA ).

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        HEADDATA              = HEADDATA
        CLIENTDATA            = CLIENTDATA
        CLIENTDATAX           = CLIENTDATAX
        PLANTDATA             = PLANTDATA
        PLANTDATAX            = PLANTDATAX
        FORECASTPARAMETERS    = FORECASTPARAMETERS
        FORECASTPARAMETERSX   = FORECASTPARAMETERSX
        PLANNINGDATA          = PLANNINGDATA
        PLANNINGDATAX         = PLANNINGDATAX
        STORAGELOCATIONDATA   = STORAGELOCATIONDATA
        STORAGELOCATIONDATAX  = STORAGELOCATIONDATAX
        VALUATIONDATA         = VALUATIONDATA
        VALUATIONDATAX        = VALUATIONDATAX
        WAREHOUSENUMBERDATA   = WAREHOUSENUMBERDATA
        WAREHOUSENUMBERDATAX  = WAREHOUSENUMBERDATAX
        SALESDATA             = SALESDATA
        SALESDATAX            = SALESDATAX
        STORAGETYPEDATA       = STORAGETYPEDATA
        STORAGETYPEDATAX      = STORAGETYPEDATAX
        FLAG_ONLINE           = FLAG_ONLINE
        FLAG_CAD_CALL         = FLAG_CAD_CALL
        NO_DEQUEUE            = NO_DEQUEUE
        NO_ROLLBACK_WORK      = NO_ROLLBACK_WORK
        CLIENTDATACWM         = CLIENTDATACWM
        CLIENTDATACWMX        = CLIENTDATACWMX
        VALUATIONDATACWM      = VALUATIONDATACWM
        VALUATIONDATACWMX     = VALUATIONDATACWMX
        MATPLSTADATA          = MATPLSTADATA
        MATPLSTADATAX         = MATPLSTADATAX
        MARC_APS_EXTDATA      = MARC_APS_EXTDATA
        MARC_APS_EXTDATAX     = MARC_APS_EXTDATAX
      IMPORTING
        RETURN                = RETURN
      TABLES
        MATERIALDESCRIPTION   = MATERIALDESCRIPTION
        UNITSOFMEASURE        = UNITSOFMEASURE
        UNITSOFMEASUREX       = UNITSOFMEASUREX
        INTERNATIONALARTNOS   = INTERNATIONALARTNOS
        MATERIALLONGTEXT      = MATERIALLONGTEXT
        TAXCLASSIFICATIONS    = TAXCLASSIFICATIONS
        RETURNMESSAGES        = RETURNMESSAGES
        PRTDATA               = PRTDATA
        PRTDATAX              = PRTDATAX
        EXTENSIONIN           = EXTENSIONIN
        EXTENSIONINX          = EXTENSIONINX
        UNITSOFMEASURECWM     = UNITSOFMEASURECWM
        UNITSOFMEASURECWMX    = UNITSOFMEASURECWMX
        SEGMRPGENERALDATA     = SEGMRPGENERALDATA
        SEGMRPGENERALDATAX    = SEGMRPGENERALDATAX
        SEGMRPQUANTITYDATA    = SEGMRPQUANTITYDATA
        SEGMRPQUANTITYDATAX   = SEGMRPQUANTITYDATAX
        SEGVALUATIONTYPE      = SEGVALUATIONTYPE
        SEGVALUATIONTYPEX     = SEGVALUATIONTYPEX
        SEGSALESSTATUS        = SEGSALESSTATUS
        SEGSALESSTATUSX       = SEGSALESSTATUSX
        SEGWEIGHTVOLUME       = SEGWEIGHTVOLUME
        SEGWEIGHTVOLUMEX      = SEGWEIGHTVOLUMEX
        DEMAND_PENALTYDATA    = DEMAND_PENALTYDATA
        DEMAND_PENALTYDATAX   = DEMAND_PENALTYDATAX
        NFMCHARGEWEIGHTS      = NFMCHARGEWEIGHTS
        NFMCHARGEWEIGHTSX     = NFMCHARGEWEIGHTSX
        NFMSTRUCTURALWEIGHTS  = NFMSTRUCTURALWEIGHTS
        NFMSTRUCTURALWEIGHTSX = NFMSTRUCTURALWEIGHTSX
      EXCEPTIONS
        ERROR_MESSAGE         = 1
        OTHERS                = 2.

    IF RETURN-TYPE EQ GC_S.
      I_DATA-STATUS = GC_SUCS.
      COMMIT WORK AND WAIT.
    ELSE.
      I_DATA-STATUS = GC_ERRO.
    ENDIF.

    I_DATA-MESSAGE = RETURN-MESSAGE.
  ENDMETHOD.
  METHOD MODIFY_SAELSDATA.
    R-SALES_ORG   = I_MVKE-VKORG.
    R-DISTR_CHAN  = I_MVKE-VTWEG.
    R-PROD_HIER   = I_DATA-PRODUCT_CHECK.
    R-MATL_GRP_1  = I_DATA-MAT_GROUP_1.
    R-MATL_GRP_2  = I_DATA-MAT_GROUP_2.
  ENDMETHOD.
  METHOD MODIFY_SAELSDATAX.
    R-SALES_ORG  = I_MVKE-VKORG.
    R-DISTR_CHAN = I_MVKE-VTWEG.

*    IF I_DATA-MATL_GRP_1 IS NOT INITIAL.
    R-MATL_GRP_1 = ABAP_TRUE.
*    ENDIF.

*    IF I_DATA-MATL_GRP_2 IS NOT INITIAL.
    R-MATL_GRP_2 = ABAP_TRUE.
*    ENDIF.

*    IF I_DATA-PROD_HIER IS NOT INITIAL.
*      R-PROD_HIER = ABAP_TRUE.
*    ENDIF.

  ENDMETHOD.
  METHOD MODIFY_VALUATIONDATA.
    R-COMMPRICE1  = I_DATA-COMMPRICE1.
    R-VAL_AREA    = LCL_CON-ORG.
  ENDMETHOD.
  METHOD MODIFY_VALUATIONDATAX.
    R-VAL_AREA   = LCL_CON-ORG.
    IF I_DATA-COMMPRICE1 IS NOT INITIAL.
      R-COMMPRICE1 = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.
  METHOD MODIFY_CLIENTDATA.
    R-PROD_HIER = I_DATA-PROD_HIER.
  ENDMETHOD.
  METHOD MODIFY_CLIENTDATAX.
    IF I_DATA-PROD_HIER IS NOT INITIAL.
      R-PROD_HIER = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.
  METHOD MODIFY_EXTENSIONIN.
    DATA : BEGIN OF LS_BAPI_TE_MARA,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA.
  DATA END OF LS_BAPI_TE_MARA.


    DATA: BEGIN OF LS_BAPI_TE_MARAX,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARAX.
    DATA: END   OF LS_BAPI_TE_MARAX.

    DATA : BEGIN OF LS_BAPI_TE_MARA2,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA2.
  DATA END OF LS_BAPI_TE_MARA2.

    DATA: BEGIN OF LS_BAPI_TE_MARA2X,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARA2X.
    DATA: END   OF LS_BAPI_TE_MARA2X.

    DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

    IF LV_LEN GT 18.
      LS_BAPI_TE_MARA2-STRUCTURE   = 'BAPI_TE_MARA2'.
      LS_BAPI_TE_MARA2X-STRUCTURE  = 'BAPI_TE_MARA2X'.

      LS_BAPI_TE_MARA2-MATERIAL    = I_DATA-MATNR.
      LS_BAPI_TE_MARA2X-MATERIAL   = I_DATA-MATNR.

      LS_BAPI_TE_MARA2-ZZIOD  = I_DATA-IN_OUT_DOOR.
      LS_BAPI_TE_MARA2-ZZIUT  = I_DATA-IN_DOOR_TYPR.
      LS_BAPI_TE_MARA2-ZZCAV  = I_DATA-CAPACITY_VAL.
      LS_BAPI_TE_MARA2-ZZCAU  = I_DATA-CAPACITY_UNBIT.
      LS_BAPI_TE_MARA2-ZZINNI = I_DATA-INVT_FLAG.
      LS_BAPI_TE_MARA2-ZZVOL  = I_DATA-VOLTAGE_LV.
      LS_BAPI_TE_MARA2-ZZFRE  = I_DATA-FREQUENCY.
      LS_BAPI_TE_MARA2-ZZPHA  = I_DATA-PHASE.
      LS_BAPI_TE_MARA2-ZZCOS  = I_DATA-COOLING_SYSTEM.
      LS_BAPI_TE_MARA2-ZZREFT = I_DATA-REFRIG_TYPR.
      LS_BAPI_TE_MARA2-ZZCOHP = I_DATA-COOLING_HEATP.
      LS_BAPI_TE_MARA2-ZZCOL  = I_DATA-COLOR.
      LS_BAPI_TE_MARA2-ZZPMT  = I_DATA-PAIR_MUL_TYPE.
      APPEND LS_BAPI_TE_MARA2  TO EXTENSIONIN.

      LS_BAPI_TE_MARA2X-ZZIOD  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZIUT  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZCAV  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZCAU  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZINNI = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZVOL  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZFRE  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZPHA  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZCOS  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZREFT = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZCOHP = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZCOL  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZPMT  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARA2X TO EXTENSIONINX.
    ELSE.
      LS_BAPI_TE_MARA-STRUCTURE   = 'BAPI_TE_MARA'.
      LS_BAPI_TE_MARAX-STRUCTURE  = 'BAPI_TE_MARAX'.

      LS_BAPI_TE_MARA-MATERIAL    = I_DATA-MATNR.
      LS_BAPI_TE_MARAX-MATERIAL   = I_DATA-MATNR.

      LS_BAPI_TE_MARA-ZZIOD  = I_DATA-IN_OUT_DOOR.
      LS_BAPI_TE_MARA-ZZIUT  = I_DATA-IN_DOOR_TYPR.
      LS_BAPI_TE_MARA-ZZCAV  = I_DATA-CAPACITY_VAL.
      LS_BAPI_TE_MARA-ZZCAU  = I_DATA-CAPACITY_UNBIT.
      LS_BAPI_TE_MARA-ZZINNI = I_DATA-INVT_FLAG.
      LS_BAPI_TE_MARA-ZZVOL  = I_DATA-VOLTAGE_LV.
      LS_BAPI_TE_MARA-ZZFRE  = I_DATA-FREQUENCY.
      LS_BAPI_TE_MARA-ZZPHA  = I_DATA-PHASE.
      LS_BAPI_TE_MARA-ZZCOS  = I_DATA-COOLING_SYSTEM.
      LS_BAPI_TE_MARA-ZZREFT = I_DATA-REFRIG_TYPR.
      LS_BAPI_TE_MARA-ZZCOHP = I_DATA-COOLING_HEATP.
      LS_BAPI_TE_MARA-ZZCOL  = I_DATA-COLOR.
      LS_BAPI_TE_MARA-ZZPMT  = I_DATA-PAIR_MUL_TYPE.
      APPEND LS_BAPI_TE_MARA  TO EXTENSIONIN.

      LS_BAPI_TE_MARAX-ZZIOD  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZIUT  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZCAV  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZCAU  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZINNI = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZVOL  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZFRE  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZPHA  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZCOS  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZREFT = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZCOHP = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZCOL  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZPMT  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARAX TO EXTENSIONINX.
    ENDIF.
  ENDMETHOD.
  METHOD UPDATE_MATERIALDESCRIPTION.
    DATA : LS_MAKT TYPE BAPI_MAKT.

    LS_MAKT-LANGU     = SY-LANGU.
    CALL FUNCTION 'CONVERSION_EXIT_ISOLA_OUTPUT'
      EXPORTING
        INPUT  = LS_MAKT-LANGU
      IMPORTING
        OUTPUT = LS_MAKT-LANGU_ISO.

    LS_MAKT-MATL_DESC = I_DATA-MAT_DESC.

    APPEND LS_MAKT TO R.

  ENDMETHOD.
  METHOD EXCEL_UPDATE_ALL.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR          = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-PROD_HIER      = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 3.
      GS_RESULT-IN_OUT_DOOR    = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 4.
      GS_RESULT-IN_DOOR_TYPR   = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 5.
      GS_RESULT-CAPACITY_VAL   = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 6.
      GS_RESULT-CAPACITY_UNBIT = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 7.
      GS_RESULT-INVT_FLAG      = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 8.
      GS_RESULT-VOLTAGE_LV     = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 9.
      GS_RESULT-FREQUENCY      = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 10.
      GS_RESULT-PHASE          = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 11.
      GS_RESULT-COOLING_SYSTEM = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 12.
      GS_RESULT-REFRIG_TYPR    = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 13.
      GS_RESULT-COOLING_HEATP  = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 14.
      GS_RESULT-COLOR          = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 15.
      GS_RESULT-PAIR_MUL_TYPE  = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 16.
      GS_RESULT-MAT_DESC       = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 17.
      GS_RESULT-MAT_DESC1      = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 18.
      GS_RESULT-MODEL_CHECK    = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 19.
      GS_RESULT-PRODUCT_CHECK  = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 20.
      GS_RESULT-MAT_GROUP_1    = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 21.
      GS_RESULT-MAT_GROUP_2    = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 22.
      GS_RESULT-COMMPRICE1     = LS_TABLE-VALUE.
    ENDIF.

  ENDMETHOD.
  METHOD EXCEL_UPDATE_COM_PRICE.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR          = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-COMMPRICE1     = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD EXCEL_UPDATE_MATGROUP_2.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR          = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-MAT_GROUP_2    = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD EXCEL_UPDATE_MATGROUP_1.
    IF LS_TABLE-COL EQ 1.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
      GS_RESULT-MATNR          = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-MAT_GROUP_1    = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD EXCEL_UPDATE_PRODUCT_HIERARCHY.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR        = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-PROD_HIER    = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD EXCEL_UPDATE_INDOOR_TYPE.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR        = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-IN_DOOR_TYPR = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD EXCEL_UPDATE_CAPACITY.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR          = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-CAPACITY_VAL   = LS_TABLE-VALUE.
    ELSEIF LS_TABLE-COL EQ 3.
      GS_RESULT-CAPACITY_UNBIT = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD EXCEL_UPDATE_COUNTING_FLAG.
    IF LS_TABLE-COL EQ 1.
      GS_RESULT-MATNR         = LS_TABLE-VALUE.
      TRANSLATE GS_RESULT-MATNR TO UPPER CASE.
    ELSEIF LS_TABLE-COL EQ 2.
      GS_RESULT-COUNTING_FLAG = LS_TABLE-VALUE.
    ENDIF.
  ENDMETHOD.
  METHOD GET_CHANNEL.
    SELECT MVKE~MATNR,
           MVKE~VKORG,
           MVKE~VTWEG
      FROM @GT_RESULT AS A
      INNER JOIN MVKE ON A~MATNR EQ MVKE~MATNR
      INTO TABLE @GT_MVKE.

  ENDMETHOD.
  METHOD UPDATE_SAELS_DATA.
    DATA : RETURN	 TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    DATA : CLIENTDATA           TYPE BAPI_MARA,
           CLIENTDATAX          TYPE BAPI_MARAX,
           PLANTDATA            TYPE BAPI_MARC,
           PLANTDATAX           TYPE BAPI_MARCX,
           FORECASTPARAMETERS   TYPE BAPI_MPOP,
           FORECASTPARAMETERSX  TYPE BAPI_MPOPX,
           PLANNINGDATA         TYPE BAPI_MPGD,
           PLANNINGDATAX        TYPE BAPI_MPGDX,
           STORAGELOCATIONDATA  TYPE BAPI_MARD,
           STORAGELOCATIONDATAX TYPE BAPI_MARDX,
           VALUATIONDATA        TYPE BAPI_MBEW,
           VALUATIONDATAX       TYPE BAPI_MBEWX,
           WAREHOUSENUMBERDATA  TYPE BAPI_MLGN,
           WAREHOUSENUMBERDATAX TYPE BAPI_MLGNX,
           SALESDATA            TYPE BAPI_MVKE,
           SALESDATAX           TYPE BAPI_MVKEX,
           STORAGETYPEDATA      TYPE BAPI_MLGT,
           STORAGETYPEDATAX     TYPE BAPI_MLGTX,
           FLAG_ONLINE          TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           FLAG_CAD_CALL        TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           NO_DEQUEUE           TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           NO_ROLLBACK_WORK     TYPE BAPIE1GLOBAL_DATA-TESTRUN,
           CLIENTDATACWM        TYPE /CWM/BAPI_MARA,
           CLIENTDATACWMX       TYPE /CWM/BAPI_MARAX,
           VALUATIONDATACWM     TYPE /CWM/BAPI_MBEW,
           VALUATIONDATACWMX    TYPE /CWM/BAPI_MBEWX,
           MATPLSTADATA         TYPE BAPI_MATPLSTA,
           MATPLSTADATAX        TYPE BAPI_MATPLSTAX,
           MARC_APS_EXTDATA     TYPE BAPI_MARC_APS_EXT,
           MARC_APS_EXTDATAX    TYPE BAPI_MARC_APS_EXTX.

    DATA : MATERIALDESCRIPTION   TYPE TABLE OF BAPI_MAKT,
           UNITSOFMEASURE        TYPE TABLE OF BAPI_MARM,
           UNITSOFMEASUREX       TYPE TABLE OF BAPI_MARMX,
           INTERNATIONALARTNOS   TYPE TABLE OF BAPI_MEAN,
           MATERIALLONGTEXT      TYPE TABLE OF BAPI_MLTX,
           TAXCLASSIFICATIONS    TYPE TABLE OF BAPI_MLAN,
           RETURNMESSAGES        TYPE TABLE OF BAPI_MATRETURN2,
           PRTDATA               TYPE TABLE OF BAPI_MFHM,
           PRTDATAX              TYPE TABLE OF BAPI_MFHMX,
           EXTENSIONIN           TYPE TABLE OF BAPIPAREX,
           EXTENSIONINX          TYPE TABLE OF BAPIPAREXX,
           UNITSOFMEASURECWM     TYPE TABLE OF /CWM/BAPI_MARM,
           UNITSOFMEASURECWMX    TYPE TABLE OF /CWM/BAPI_MARMX,
           SEGMRPGENERALDATA     TYPE TABLE OF BAPI_SGT_MRP_GN,
           SEGMRPGENERALDATAX    TYPE TABLE OF BAPI_SGT_MRP_GNX,
           SEGMRPQUANTITYDATA    TYPE TABLE OF BAPI_SGT_MRP,
           SEGMRPQUANTITYDATAX   TYPE TABLE OF BAPI_SGT_MRPX,
           SEGVALUATIONTYPE      TYPE TABLE OF BAPI_SGT_MADKA,
           SEGVALUATIONTYPEX     TYPE TABLE OF BAPI_SGT_MADKAX,
           SEGSALESSTATUS        TYPE TABLE OF BAPI_SGT_MVKE,
           SEGSALESSTATUSX       TYPE TABLE OF BAPI_SGT_MVKEX,
           SEGWEIGHTVOLUME       TYPE TABLE OF BAPI_SGT_MARM,
           SEGWEIGHTVOLUMEX      TYPE TABLE OF BAPI_SGT_MARMX,
           DEMAND_PENALTYDATA    TYPE TABLE OF BAPI_PPO_DMND_PENALTY,
           DEMAND_PENALTYDATAX   TYPE TABLE OF BAPI_PPO_DMND_PENALTYX,
           NFMCHARGEWEIGHTS      TYPE TABLE OF /NFM/BAPITVGW,
           NFMCHARGEWEIGHTSX     TYPE TABLE OF /NFM/BAPITVGWX,
           NFMSTRUCTURALWEIGHTS  TYPE TABLE OF /NFM/BAPITKGW,
           NFMSTRUCTURALWEIGHTSX TYPE TABLE OF /NFM/BAPITKGWX.

    DATA LV_TABIX TYPE SY-TABIX.

    LOOP AT GT_MVKE INTO DATA(LS_MVKE) FROM I_INDEX.
      LV_TABIX = SY-TABIX.
      IF LS_MVKE-MATNR NE I_DATA-MATNR.
        I_INDEX = LV_TABIX.
        EXIT.
      ENDIF.

      DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

      IF LV_LEN GT 18.
        HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
      ELSE.
        HEADDATA-MATERIAL      = I_DATA-MATNR.
      ENDIF.

*    CLIENTDATA  = MODIFY_CLIENTDATA( I_DATA ).
*    CLIENTDATAX = MODIFY_CLIENTDATAX( CLIENTDATA ).

      SALESDATA  = MODIFY_SAELSDATA( I_DATA = I_DATA
                                     I_MVKE = LS_MVKE ).
      SALESDATAX = MODIFY_SAELSDATAX( I_DATA = SALESDATA
                                      I_MVKE = LS_MVKE ).

*    VALUATIONDATA  = MODIFY_VALUATIONDATA( I_DATA ).
*    VALUATIONDATAX = MODIFY_VALUATIONDATAX( VALUATIONDATA ).
*
*    MODIFY_EXTENSIONIN( EXPORTING I_DATA = I_DATA
*                         CHANGING EXTENSIONIN  = EXTENSIONIN
*                                  EXTENSIONINX = EXTENSIONINX ).
*
*    MATERIALDESCRIPTION = UPDATE_MATERIALDESCRIPTION( I_DATA ).

      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA              = HEADDATA
          CLIENTDATA            = CLIENTDATA
          CLIENTDATAX           = CLIENTDATAX
          PLANTDATA             = PLANTDATA
          PLANTDATAX            = PLANTDATAX
          FORECASTPARAMETERS    = FORECASTPARAMETERS
          FORECASTPARAMETERSX   = FORECASTPARAMETERSX
          PLANNINGDATA          = PLANNINGDATA
          PLANNINGDATAX         = PLANNINGDATAX
          STORAGELOCATIONDATA   = STORAGELOCATIONDATA
          STORAGELOCATIONDATAX  = STORAGELOCATIONDATAX
          VALUATIONDATA         = VALUATIONDATA
          VALUATIONDATAX        = VALUATIONDATAX
          WAREHOUSENUMBERDATA   = WAREHOUSENUMBERDATA
          WAREHOUSENUMBERDATAX  = WAREHOUSENUMBERDATAX
          SALESDATA             = SALESDATA
          SALESDATAX            = SALESDATAX
          STORAGETYPEDATA       = STORAGETYPEDATA
          STORAGETYPEDATAX      = STORAGETYPEDATAX
          FLAG_ONLINE           = FLAG_ONLINE
          FLAG_CAD_CALL         = FLAG_CAD_CALL
          NO_DEQUEUE            = NO_DEQUEUE
          NO_ROLLBACK_WORK      = NO_ROLLBACK_WORK
          CLIENTDATACWM         = CLIENTDATACWM
          CLIENTDATACWMX        = CLIENTDATACWMX
          VALUATIONDATACWM      = VALUATIONDATACWM
          VALUATIONDATACWMX     = VALUATIONDATACWMX
          MATPLSTADATA          = MATPLSTADATA
          MATPLSTADATAX         = MATPLSTADATAX
          MARC_APS_EXTDATA      = MARC_APS_EXTDATA
          MARC_APS_EXTDATAX     = MARC_APS_EXTDATAX
        IMPORTING
          RETURN                = RETURN
        TABLES
          MATERIALDESCRIPTION   = MATERIALDESCRIPTION
          UNITSOFMEASURE        = UNITSOFMEASURE
          UNITSOFMEASUREX       = UNITSOFMEASUREX
          INTERNATIONALARTNOS   = INTERNATIONALARTNOS
          MATERIALLONGTEXT      = MATERIALLONGTEXT
          TAXCLASSIFICATIONS    = TAXCLASSIFICATIONS
          RETURNMESSAGES        = RETURNMESSAGES
          PRTDATA               = PRTDATA
          PRTDATAX              = PRTDATAX
          EXTENSIONIN           = EXTENSIONIN
          EXTENSIONINX          = EXTENSIONINX
          UNITSOFMEASURECWM     = UNITSOFMEASURECWM
          UNITSOFMEASURECWMX    = UNITSOFMEASURECWMX
          SEGMRPGENERALDATA     = SEGMRPGENERALDATA
          SEGMRPGENERALDATAX    = SEGMRPGENERALDATAX
          SEGMRPQUANTITYDATA    = SEGMRPQUANTITYDATA
          SEGMRPQUANTITYDATAX   = SEGMRPQUANTITYDATAX
          SEGVALUATIONTYPE      = SEGVALUATIONTYPE
          SEGVALUATIONTYPEX     = SEGVALUATIONTYPEX
          SEGSALESSTATUS        = SEGSALESSTATUS
          SEGSALESSTATUSX       = SEGSALESSTATUSX
          SEGWEIGHTVOLUME       = SEGWEIGHTVOLUME
          SEGWEIGHTVOLUMEX      = SEGWEIGHTVOLUMEX
          DEMAND_PENALTYDATA    = DEMAND_PENALTYDATA
          DEMAND_PENALTYDATAX   = DEMAND_PENALTYDATAX
          NFMCHARGEWEIGHTS      = NFMCHARGEWEIGHTS
          NFMCHARGEWEIGHTSX     = NFMCHARGEWEIGHTSX
          NFMSTRUCTURALWEIGHTS  = NFMSTRUCTURALWEIGHTS
          NFMSTRUCTURALWEIGHTSX = NFMSTRUCTURALWEIGHTSX
        EXCEPTIONS
          ERROR_MESSAGE         = 1
          OTHERS                = 2.

      IF RETURN-TYPE EQ GC_S.
        I_DATA-STATUS = GC_SUCS.
        COMMIT WORK AND WAIT.
      ELSE.
        I_DATA-STATUS = GC_ERRO.
      ENDIF.

      I_DATA-MESSAGE = RETURN-MESSAGE.

    ENDLOOP.

  ENDMETHOD.
  METHOD UPDATE_INDOOR_UNIT_TYPE.
    DATA : BEGIN OF LS_BAPI_TE_MARA,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA.
  DATA END OF LS_BAPI_TE_MARA.

    DATA: BEGIN OF LS_BAPI_TE_MARAX,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARAX.
    DATA: END   OF LS_BAPI_TE_MARAX.

    DATA : BEGIN OF LS_BAPI_TE_MARA2,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA2.
  DATA END OF LS_BAPI_TE_MARA2.

    DATA: BEGIN OF LS_BAPI_TE_MARA2X,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARA2X.
    DATA: END   OF LS_BAPI_TE_MARA2X.

    DATA : RETURN   TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    DATA : EXTENSIONIN  TYPE TABLE OF BAPIPAREX,
           EXTENSIONINX TYPE TABLE OF BAPIPAREXX.

    DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

    IF LV_LEN GT 18.
      HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
      LS_BAPI_TE_MARA2-STRUCTURE   = 'BAPI_TE_MARA2'.
      LS_BAPI_TE_MARA2X-STRUCTURE  = 'BAPI_TE_MARA2X'.

      LS_BAPI_TE_MARA2-MATERIAL  = I_DATA-MATNR.
      LS_BAPI_TE_MARA2X-MATERIAL = I_DATA-MATNR.

      LS_BAPI_TE_MARA2-ZZIUT  = I_DATA-IN_DOOR_TYPR.
      APPEND LS_BAPI_TE_MARA2  TO EXTENSIONIN.

      LS_BAPI_TE_MARA2X-ZZIUT  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARA2X TO EXTENSIONINX.
    ELSE.
      HEADDATA-MATERIAL         = I_DATA-MATNR.
      LS_BAPI_TE_MARA-STRUCTURE   = 'BAPI_TE_MARA'.
      LS_BAPI_TE_MARAX-STRUCTURE  = 'BAPI_TE_MARAX'.

      LS_BAPI_TE_MARA-MATERIAL  = I_DATA-MATNR.
      LS_BAPI_TE_MARAX-MATERIAL = I_DATA-MATNR.

      LS_BAPI_TE_MARA-ZZIUT = I_DATA-IN_DOOR_TYPR.
      APPEND LS_BAPI_TE_MARA  TO EXTENSIONIN.

      LS_BAPI_TE_MARAX-ZZIUT  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARAX TO EXTENSIONINX.
    ENDIF.

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        HEADDATA      = HEADDATA
      IMPORTING
        RETURN        = RETURN
      TABLES
        EXTENSIONIN   = EXTENSIONIN
        EXTENSIONINX  = EXTENSIONINX
      EXCEPTIONS
        ERROR_MESSAGE = 1
        OTHERS        = 2.

    IF RETURN-TYPE EQ GC_S.
      I_DATA-STATUS = GC_SUCS.
      COMMIT WORK AND WAIT.
    ELSE.
      I_DATA-STATUS = GC_ERRO.
    ENDIF.

    I_DATA-MESSAGE = RETURN-MESSAGE.

  ENDMETHOD.
  METHOD UPDATE_INDOOR_CAPACITY.
    DATA : BEGIN OF LS_BAPI_TE_MARA,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA.
  DATA END OF LS_BAPI_TE_MARA.

    DATA: BEGIN OF LS_BAPI_TE_MARAX,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARAX.
    DATA: END   OF LS_BAPI_TE_MARAX.

    DATA : BEGIN OF LS_BAPI_TE_MARA2,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA2.
  DATA END OF LS_BAPI_TE_MARA2.

    DATA: BEGIN OF LS_BAPI_TE_MARA2X,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARA2X.
    DATA: END   OF LS_BAPI_TE_MARA2X.

    DATA : RETURN   TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    DATA : EXTENSIONIN  TYPE TABLE OF BAPIPAREX,
           EXTENSIONINX TYPE TABLE OF BAPIPAREXX.

    DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

    IF LV_LEN GT 18.
      HEADDATA-MATERIAL_LONG      = I_DATA-MATNR.
      LS_BAPI_TE_MARA2-STRUCTURE   = 'BAPI_TE_MARA2'.
      LS_BAPI_TE_MARA2X-STRUCTURE  = 'BAPI_TE_MARA2X'.

      LS_BAPI_TE_MARA2-MATERIAL  = I_DATA-MATNR.
      LS_BAPI_TE_MARA2X-MATERIAL = I_DATA-MATNR.

      LS_BAPI_TE_MARA2-ZZCAV  = I_DATA-CAPACITY_VAL.
      LS_BAPI_TE_MARA2-ZZCAU  = I_DATA-CAPACITY_UNBIT.
      APPEND LS_BAPI_TE_MARA  TO EXTENSIONIN.

      LS_BAPI_TE_MARA2X-ZZCAV  = ABAP_TRUE.
      LS_BAPI_TE_MARA2X-ZZCAU  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARAX TO EXTENSIONINX.
    ELSE.
      HEADDATA-MATERIAL           = I_DATA-MATNR.
      LS_BAPI_TE_MARA-STRUCTURE   = 'BAPI_TE_MARA'.
      LS_BAPI_TE_MARAX-STRUCTURE  = 'BAPI_TE_MARAX'.

      LS_BAPI_TE_MARA-MATERIAL  = I_DATA-MATNR.
      LS_BAPI_TE_MARAX-MATERIAL = I_DATA-MATNR.

      LS_BAPI_TE_MARA-ZZCAV  = I_DATA-CAPACITY_VAL.
      LS_BAPI_TE_MARA-ZZCAU  = I_DATA-CAPACITY_UNBIT.
      APPEND LS_BAPI_TE_MARA  TO EXTENSIONIN.

      LS_BAPI_TE_MARAX-ZZCAV  = ABAP_TRUE.
      LS_BAPI_TE_MARAX-ZZCAU  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARAX TO EXTENSIONINX.
    ENDIF.

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        HEADDATA      = HEADDATA
      IMPORTING
        RETURN        = RETURN
      TABLES
        EXTENSIONIN   = EXTENSIONIN
        EXTENSIONINX  = EXTENSIONINX
      EXCEPTIONS
        ERROR_MESSAGE = 1
        OTHERS        = 2.

    IF RETURN-TYPE EQ GC_S.
      I_DATA-STATUS = GC_SUCS.
      COMMIT WORK AND WAIT.
    ELSE.
      I_DATA-STATUS = GC_ERRO.
    ENDIF.

    I_DATA-MESSAGE = RETURN-MESSAGE.
  ENDMETHOD.
  METHOD UPDATE_COUNTING_FLAG.
    DATA : BEGIN OF LS_BAPI_TE_MARA,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA.
  DATA END OF LS_BAPI_TE_MARA.

    DATA: BEGIN OF LS_BAPI_TE_MARAX,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARAX.
    DATA: END   OF LS_BAPI_TE_MARAX.

    DATA : BEGIN OF LS_BAPI_TE_MARA2,
             STRUCTURE TYPE TE_STRUC.
             INCLUDE TYPE BAPI_TE_MARA2.
  DATA END OF LS_BAPI_TE_MARA2.

    DATA: BEGIN OF LS_BAPI_TE_MARA2X,
            STRUCTURE TYPE TE_STRUC.
            INCLUDE TYPE BAPI_TE_MARA2X.
    DATA: END   OF LS_BAPI_TE_MARA2X.

    DATA : RETURN   TYPE BAPIRET2.

    DATA : HEADDATA TYPE  BAPIMATHEAD.

    DATA : EXTENSIONIN  TYPE TABLE OF BAPIPAREX,
           EXTENSIONINX TYPE TABLE OF BAPIPAREXX.

    DATA(LV_LEN) = STRLEN( I_DATA-MATNR ).

    IF LV_LEN GT 18.
      HEADDATA-MATERIAL_LONG = I_DATA-MATNR.
      LS_BAPI_TE_MARA2-STRUCTURE   = 'BAPI_TE_MARA2'.
      LS_BAPI_TE_MARA2X-STRUCTURE  = 'BAPI_TE_MARA2X'.

      LS_BAPI_TE_MARA2-MATERIAL  = I_DATA-MATNR.
      LS_BAPI_TE_MARA2X-MATERIAL = I_DATA-MATNR.

      LS_BAPI_TE_MARA2-ZZSCF  = I_DATA-COUNTING_FLAG.
      APPEND LS_BAPI_TE_MARA2  TO EXTENSIONIN.

      LS_BAPI_TE_MARA2X-ZZSCF  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARA2X TO EXTENSIONINX.
    ELSE.
      HEADDATA-MATERIAL         = I_DATA-MATNR.
      LS_BAPI_TE_MARA-STRUCTURE   = 'BAPI_TE_MARA'.
      LS_BAPI_TE_MARAX-STRUCTURE  = 'BAPI_TE_MARAX'.

      LS_BAPI_TE_MARA-MATERIAL  = I_DATA-MATNR.
      LS_BAPI_TE_MARAX-MATERIAL = I_DATA-MATNR.

      LS_BAPI_TE_MARA-ZZSCF = I_DATA-COUNTING_FLAG.
      APPEND LS_BAPI_TE_MARA  TO EXTENSIONIN.

      LS_BAPI_TE_MARAX-ZZSCF  = ABAP_TRUE.
      APPEND LS_BAPI_TE_MARAX TO EXTENSIONINX.
    ENDIF.

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        HEADDATA      = HEADDATA
      IMPORTING
        RETURN        = RETURN
      TABLES
        EXTENSIONIN   = EXTENSIONIN
        EXTENSIONINX  = EXTENSIONINX
      EXCEPTIONS
        ERROR_MESSAGE = 1
        OTHERS        = 2.

    IF RETURN-TYPE EQ GC_S.
      I_DATA-STATUS = GC_SUCS.
      COMMIT WORK AND WAIT.
    ELSE.
      I_DATA-STATUS = GC_ERRO.
    ENDIF.

    I_DATA-MESSAGE = RETURN-MESSAGE.
  ENDMETHOD.
ENDCLASS.
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS DEFINITION.
*Handling double click
  PUBLIC SECTION.
    METHODS:
    HANDLE_DOUBLE_CLICK
    FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS. "lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS EVENT_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.

  ENDMETHOD. "handle_double_click
ENDCLASS. "lcl_event_receiver IMPLEMENTATION
