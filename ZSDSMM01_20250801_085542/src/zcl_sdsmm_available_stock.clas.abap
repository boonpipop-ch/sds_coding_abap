class ZCL_SDSMM_AVAILABLE_STOCK definition
  public
  final
  create public .

public section.

  class-data ET_WERKS type WSRS_T_WERKS_RANGE .
  class-data ET_LGORT type TDT_RG_LGORT .
  constants GC_TRUE type FLAG value 'X' ##NO_TEXT.

  class-methods GET_CONSTANTS
    exporting
      !ET_WERKS type WSRS_T_WERKS_RANGE
      !ET_LGORT type TDT_RG_LGORT
      !ET_KAPPL type APPLICATION_RANGE_ERP_T
      !ET_KSCHL type FARR_TT_COND_TYPE_RANGE
      !ET_VKORG type RANGE_T_VKORG
      !ET_VTWEG type TMS_T_VTWEG_RANGE .
  class-methods AVAILABLE_STOCK_PROCESS
    importing
      !IF_MATNR type MATNR optional
    exporting
      !ET_RESULT type ZSDSMMS026_TT .
  class-methods GET_STOCK_DATA
    importing
      !IT_WERKS type WSRS_T_WERKS_RANGE
      !IT_PARTGRP_MATNR type ZMATNR_R
      !IT_KAPPL type APPLICATION_RANGE_ERP_T
      !IT_KSCHL type FARR_TT_COND_TYPE_RANGE
      !IT_VKORG type RANGE_T_VKORG
      !IT_VTWEG type TMS_T_VTWEG_RANGE
    exporting
      !ET_STOCK type ZSDSMMS026_TT .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-METHODS GET_MATERIAL_BY_PARTGROUP
      IMPORTING
        !IF_MATNR         TYPE MATNR
      EXPORTING
        !ET_PARTGRP_MATNR TYPE ZMATNR_R .
ENDCLASS.



CLASS ZCL_SDSMM_AVAILABLE_STOCK IMPLEMENTATION.


  METHOD AVAILABLE_STOCK_PROCESS.
    DATA: LRT_WERKS TYPE WSRS_T_WERKS_RANGE,
          LRT_LGORT	TYPE TDT_RG_LGORT,
          LRT_KAPPL	TYPE APPLICATION_RANGE_ERP_T,
          LRT_KSCHL	TYPE FARR_TT_COND_TYPE_RANGE,
          LRT_VKORG	TYPE RANGE_T_VKORG,
          LRT_VTWEG	TYPE TMS_T_VTWEG_RANGE,
          LRT_PARTGRP_MATNR TYPE ZMATNR_R,
          LT_RESULT         TYPE ZSDSMMS026_TT.

    "Get constants from GENC
    CALL METHOD ZCL_SDSMM_AVAILABLE_STOCK=>GET_CONSTANTS
      IMPORTING
        ET_WERKS  = LRT_WERKS
        ET_LGORT  = LRT_LGORT
        ET_KAPPL  = LRT_KAPPL
        ET_KSCHL  = LRT_KSCHL
        ET_VKORG  = LRT_VKORG
        ET_VTWEG  = LRT_VTWEG	.


    CALL METHOD ZCL_SDSMM_AVAILABLE_STOCK=>GET_MATERIAL_BY_PARTGROUP
      EXPORTING
        IF_MATNR         = IF_MATNR
      IMPORTING
        ET_PARTGRP_MATNR = LRT_PARTGRP_MATNR.


    CALL METHOD ZCL_SDSMM_AVAILABLE_STOCK=>GET_STOCK_DATA
      EXPORTING
        IT_WERKS         = LRT_WERKS
        IT_PARTGRP_MATNR = LRT_PARTGRP_MATNR
        IT_KAPPL         = LRT_KAPPL
        IT_KSCHL         = LRT_KSCHL
        IT_VKORG         = LRT_VKORG
        IT_VTWEG         = LRT_VTWEG

      IMPORTING
        ET_STOCK         = LT_RESULT.


    ET_RESULT[] = LT_RESULT[] .

    CLEAR: LRT_WERKS[] , LRT_WERKS[], LT_RESULT[] .


  ENDMETHOD.


  METHOD GET_CONSTANTS.
    CONSTANTS:
      LC_PLANT  TYPE  ZSDSDE_PARAM_NAME VALUE 'PLANT',
      LC_LGORT  TYPE  ZSDSDE_PARAM_NAME VALUE 'STORAGE_LOCATION',
      LC_KAPPL  TYPE  ZSDSDE_PARAM_NAME VALUE 'APPLICATION',
      LC_KSCHL  TYPE  ZSDSDE_PARAM_NAME VALUE 'CONDITION_TYPE',
      LC_VKORG  TYPE  ZSDSDE_PARAM_NAME VALUE 'SALESORG',
      LC_VTWEG  TYPE  ZSDSDE_PARAM_NAME VALUE 'DISTRIBUTE_CHANNEL'.

    STATICS:
      LV_READ       TYPE  FLAG.

    DATA:
      LT_GENC       TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

    DATA:
      LV_REPID   TYPE  PROGRAMM.

* Initialize Output
    CLEAR:  ET_WERKS[],
            ET_LGORT[],
            ET_KAPPL[],
            ET_KSCHL[],
            ET_VKORG[],
            ET_VTWEG[].


* Read All GenC constants for program
    CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
      EXPORTING
        IF_REPID = LV_REPID
      IMPORTING
        ET_GEN_C = LT_GENC.

     CLEAR: ET_WERKS[],
            ET_LGORT[],
            ET_KAPPL[],
            ET_KSCHL[],
            ET_VKORG[],
            ET_VTWEG[].

* Assign GenC Constants
    LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<LFS_GENC>).

      CASE <LFS_GENC>-PARAM.
        WHEN LC_PLANT.
          "Plant
          APPEND INITIAL LINE TO ET_WERKS ASSIGNING FIELD-SYMBOL(<LFS_WERKS>).
          MOVE-CORRESPONDING <LFS_GENC> TO <LFS_WERKS>.

        WHEN LC_LGORT  .
          "Storage Location
          APPEND INITIAL LINE TO ET_LGORT ASSIGNING FIELD-SYMBOL(<LFS_LGORT>).
          MOVE-CORRESPONDING <LFS_GENC> TO <LFS_LGORT>.

        WHEN LC_KAPPL  .
          "Application
          APPEND INITIAL LINE TO ET_KAPPL ASSIGNING FIELD-SYMBOL(<LFS_KAPPL>).
          MOVE-CORRESPONDING <LFS_GENC> TO <LFS_KAPPL>.

        WHEN LC_KSCHL  .
          "Condition Type
          APPEND INITIAL LINE TO ET_KSCHL ASSIGNING FIELD-SYMBOL(<LFS_KSCHL>).
          MOVE-CORRESPONDING <LFS_GENC> TO <LFS_KSCHL>.

        WHEN LC_VKORG  .
          "Sales Org
          APPEND INITIAL LINE TO ET_KAPPL ASSIGNING FIELD-SYMBOL(<LFS_VKORG>).
          MOVE-CORRESPONDING <LFS_GENC> TO <LFS_VKORG>.

        WHEN LC_VTWEG .
          "Distribution Chanel
          APPEND INITIAL LINE TO ET_VTWEG ASSIGNING FIELD-SYMBOL(<LFS_VTWEG>).
          MOVE-CORRESPONDING <LFS_GENC> TO <LFS_VTWEG>.

        WHEN OTHERS.

      ENDCASE.

    ENDLOOP.


  ENDMETHOD.


  METHOD GET_MATERIAL_BY_PARTGROUP.
    DATA LV_PART_GROUP TYPE ZRTCAC002-PART_GROUP .

    "Get Spare parts material
    SELECT  PART_GROUP INTO LV_PART_GROUP UP TO 1 ROWS
      FROM  ZRTCAC002   "#EC CI_GENBUFF
      WHERE MATNR = IF_MATNR
      ORDER BY PART_GROUP.
    ENDSELECT.

    IF SY-SUBRC = 0 .
      "Get Material same as material inbound.
      SELECT PART_GROUP, MATNR
        FROM ZRTCAC002        "#EC CI_GENBUFF
       WHERE PART_GROUP = @LV_PART_GROUP
         AND ACTIVE = @GC_TRUE
        INTO TABLE @DATA(LT_ZRTCAC002).

      LOOP AT LT_ZRTCAC002 INTO DATA(LS_ZRTCAC002)    .
        APPEND VALUE #( SIGN   = 'I'
                        OPTION = 'EQ'
                        LOW    = LS_ZRTCAC002-MATNR
                        HIGH   = '' )
                  TO ET_PARTGRP_MATNR.
      ENDLOOP.

    ENDIF.


  ENDMETHOD.


  METHOD GET_STOCK_DATA.
    DATA:
      LF_STOP_FLG TYPE CHAR1,
      LT_OUTTAB   TYPE STANDARD TABLE OF RMMMBESTN_DATEN,
      LT_OUTTAB_L TYPE STANDARD TABLE OF RMMMBESTN_DATEN,
      LT_OUTTAB_2 TYPE STANDARD TABLE OF RMMMBESTN_DATEN,
      LS_STOCK    TYPE ZSDSMMS026.

    DATA:
      LR_MATNR TYPE RANGE OF MATNR,
      LR_WERKS TYPE RANGE OF WERKS.

    DATA  LF_AVAILABLE_QTY   TYPE BAPIWMDVE-COM_QTY.

    SELECT MARC~MATNR , MARC~WERKS , MAKT~MAKTX, MARA~MEINS
      FROM MARA
     INNER JOIN MARC ON MARA~MATNR = MARC~MATNR
     INNER JOIN MAKT ON MAKT~MATNR = MARA~MATNR
      INTO TABLE @DATA(LT_MARC)
     WHERE MARA~MATNR IN @IT_PARTGRP_MATNR
       AND MARC~WERKS IN @IT_WERKS
       AND MARC~LVORM = ''
       AND MAKT~SPRAS = @SY-LANGU.

    IF SY-SUBRC <> 0.
      RETURN.
    ENDIF.

    IF LT_MARC[] IS NOT INITIAL .
      SELECT MARD~MATNR , MARD~WERKS, MARD~LGORT ,  "#EC CI_NO_TRANSFORM
             MARD~LGPBE , MARD~UMLME
        FROM MARD
        INTO TABLE @DATA(LT_MARD)
         FOR ALL ENTRIES IN @LT_MARC
       WHERE MATNR = @LT_MARC-MATNR
         AND WERKS = @LT_MARC-WERKS.
      IF SY-SUBRC EQ 0 .
        SORT LT_MARD BY MATNR WERKS LGORT .
      ENDIF.

      SELECT A004~MATNR, KONP~KBETR, KONP~KONWA   "#EC CI_NO_TRANSFORM
        FROM A004 INNER JOIN KONP ON KONP~KNUMH = A004~KNUMH  "#EC CI_BUFFJOIN
                                 AND KONP~KAPPL = A004~KAPPL
                                 AND KONP~KSCHL = A004~KSCHL
         FOR ALL ENTRIES IN @LT_MARC
       WHERE A004~MATNR = @LT_MARC-MATNR
         AND A004~KAPPL IN @IT_KAPPL
         AND A004~KSCHL IN @IT_KSCHL
         AND A004~VKORG IN @IT_VKORG
         AND A004~VTWEG IN @IT_VTWEG
         AND A004~DATBI = '99991231'
         INTO TABLE @DATA(LT_KONP)."#EC CI_NOORDER
      IF SY-SUBRC = 0 .
        SORT LT_KONP BY MATNR .
      ENDIF.

      SELECT MATNR, BWKEY, BWTAR, VERPR  "#EC CI_NO_TRANSFORM
        FROM MBEW
         FOR ALL ENTRIES IN @LT_MARC
       WHERE MBEW~MATNR = @LT_MARC-MATNR
         AND MBEW~BWKEY IN @IT_WERKS
         AND MBEW~BWTAR = ''
        INTO TABLE @DATA(LT_MBEW).
      IF SY-SUBRC EQ 0 .
        SORT LT_MBEW BY MATNR BWKEY BWTAR .
      ENDIF.

    ENDIF.

    LOOP AT LT_MARC ASSIGNING FIELD-SYMBOL(<L_MARC>).

      CLEAR : LR_MATNR[] , LR_WERKS[] .
      LR_MATNR = VALUE #( ( SIGN   = 'I'
                            OPTION = 'EQ'
                            LOW    = <L_MARC>-MATNR ) ).
      LR_WERKS = VALUE #( ( SIGN   = 'I'
                            OPTION = 'EQ'
                            LOW    = <L_MARC>-WERKS ) ).

      LF_STOP_FLG = 'X'.

      "export memory in program RMMMBESTN
      EXPORT
        STOP_FLG = LF_STOP_FLG  TO MEMORY ID 'ZSTOP_FLG'.

      SUBMIT RMMMBESTN WITH MS_MATNR  IN LR_MATNR
                       WITH MS_WERKS  IN LR_WERKS
                       WITH VERNU     EQ '01'
                       AND RETURN. "#EC CI_SUBMIT

      CLEAR: LT_OUTTAB[].

      IMPORT GT_OUTTAB = LT_OUTTAB FROM MEMORY ID 'ZGT_OUTTAB'.

      LT_OUTTAB_L[] = LT_OUTTAB[].
      DELETE LT_OUTTAB_L WHERE LGORT IS INITIAL.
      DELETE ADJACENT DUPLICATES FROM LT_OUTTAB_L COMPARING LGORT.

      LOOP AT LT_OUTTAB_L INTO DATA(LS_OUTTAB).
        CLEAR: LS_STOCK.
        LS_STOCK-SLOC                = LS_OUTTAB-LGORT .
        LS_STOCK-SLOC_DESC           = LS_OUTTAB-LGOBE .
        LS_STOCK-MATERIAL_NO         = <L_MARC>-MATNR .
        LS_STOCK-MATERIAL_DESC       = <L_MARC>-MAKTX .
        LS_STOCK-UNRESTRICTED_USE    = LS_OUTTAB-LABST .
        LS_STOCK-QUALITY_INSPECTION  = LS_OUTTAB-INSME .
        LS_STOCK-REQ_QTY             = LS_OUTTAB-BDMNG .
        LS_STOCK-OPEN_QTY_STOCK      = LS_OUTTAB-OMENG .
        LS_STOCK-BLOCK_STK_RETURN    = LS_OUTTAB-RETME .
        LS_STOCK-STK_IN_TRANSIT      = LS_OUTTAB-TRAME .
        LS_STOCK-BLOCK_STK_GR        = LS_OUTTAB-WESPB .
        LS_STOCK-SALES_ORDERS        = LS_OUTTAB-VBMNC .
        LS_STOCK-TIED_EMPTIES_STK    = LS_OUTTAB-GLGMG .
        LS_STOCK-ON_ORDER_STK        = LS_OUTTAB-MENGE .

        READ TABLE LT_MARD INTO DATA(LS_MARD)
                           WITH KEY MATNR = <L_MARC>-MATNR
                                    WERKS = <L_MARC>-WERKS
                                    LGORT = LS_OUTTAB-LGORT
                           BINARY SEARCH.
        IF SY-SUBRC = 0 .
          LS_STOCK-STORAGE_BIN   =  LS_MARD-LGPBE .
          LS_STOCK-STK_IN_PP     =  LS_MARD-UMLME .
        ENDIF.

        READ TABLE LT_KONP INTO DATA(LS_KONP)
                           WITH KEY MATNR = <L_MARC>-MATNR
                           BINARY SEARCH .
        IF SY-SUBRC = 0 .
          LS_STOCK-RATE_COND_AMT   =  LS_KONP-KBETR .
        ENDIF.

        CALL METHOD ZCL_SDSMM_RESERV_VAN_SLOC=>CHECK_MATERIAL_AVAILABILITY
          EXPORTING
            IF_MATNR      = <L_MARC>-MATNR
            IF_PLANT      = <L_MARC>-WERKS
            IF_STGE_LOC   = LS_OUTTAB-LGORT
            IF_UNIT       = <L_MARC>-MEINS
            IF_CHECK_RULE = '03'
          IMPORTING
            EF_COM_QTY    = LF_AVAILABLE_QTY.
        IF SY-SUBRC = 0 .
          LS_STOCK-FREE_STK_QTY  = LF_AVAILABLE_QTY.
        ENDIF.

        READ TABLE LT_MBEW INTO DATA(LS_MBEW)
        WITH KEY MATNR =  <L_MARC>-MATNR
                 BWKEY =  <L_MARC>-WERKS
                 BINARY SEARCH .
        IF SY-SUBRC = 0 .
          LS_STOCK-MOVING_AVG_PUP = LS_MBEW-VERPR .
        ENDIF.

        APPEND LS_STOCK TO ET_STOCK.

      ENDLOOP.

    ENDLOOP.



  ENDMETHOD.
ENDCLASS.
