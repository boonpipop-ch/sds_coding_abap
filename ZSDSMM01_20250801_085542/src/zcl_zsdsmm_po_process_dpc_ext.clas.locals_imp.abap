*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      GET_DATA_PO   CHANGING C_DATA TYPE ZSDSMMS006,
      RELEASE_PO    IMPORTING I_EBELN TYPE EKKO-EBELN,
      UPDATE_REJECT IMPORTING I_EBELN  TYPE EKKO-EBELN
                              I_REMARK TYPE ZSDSMMT002-REMAK,
      UPDATE_PO CHANGING C_DATA TYPE ZSDSMMS030,
      GET_WORKFLOW IMPORTING I_DATA   TYPE STRING
                   RETURNING VALUE(R) TYPE STRING.

ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD GET_DATA_PO.
    DATA : BEGIN OF LS_EKPO,
             BSART      TYPE EKKO-BSART,
             LIFNR      TYPE EKKO-LIFNR,
             EBELN      TYPE EKPO-EBELN,
             EBELP      TYPE EKPO-EBELP,
             KNTTP      TYPE EKPO-KNTTP,
             MATNR      TYPE EKPO-MATNR,
             TXZ01      TYPE EKPO-TXZ01,
             MENGE      TYPE EKPO-MENGE,
             MEINS      TYPE EKPO-MEINS,
             NETPR      TYPE EKPO-NETPR,
             AUFNR      TYPE EKKN-AUFNR,
             PS_PSP_PNR TYPE EKKN-PS_PSP_PNR,
             EINDT      TYPE EKET-EINDT,
             NETWR      TYPE EKPO-NETWR,
             BANFN      TYPE EKPO-BANFN,
             BNFPO      TYPE EKPO-BNFPO,
             MATKL      TYPE EKPO-MATKL,
           END OF LS_EKPO.
    DATA LT_EKPO LIKE TABLE OF LS_EKPO WITH EMPTY KEY.

    DATA LCL_UTIL TYPE REF TO ZCL_SDSCA_UTIL_SDS.

    DATA : LV_NAME TYPE STRING.

    DATA : LV_BANFN TYPE EBAN-BANFN.

    CONSTANTS : BEGIN OF LC_CON,
                  OONE TYPE C LENGTH 2     VALUE '01',
                  TONE TYPE C LENGTH 4     VALUE '0001',
                  OBJK TYPE THEAD-TDOBJECT VALUE 'EKPO',
                  PRON TYPE THEAD-TDID     VALUE 'F51',
                  SEVO TYPE CRMS4D_SERV_I-OBJTYPE_H      VALUE 'BUS2000116',
                  SEVT TYPE CRMS4D_SERV_I-AC_OBJECT_TYPE VALUE '01',
                END OF LC_CON.

    DATA : LS_DETAIL TYPE ZSDSMMS005.

    IF LCL_UTIL IS NOT BOUND.
      CREATE OBJECT LCL_UTIL.
    ENDIF.

    SELECT EKKO~BSART,
           EKKO~LIFNR,
           EKPO~EBELN,
           EKPO~EBELP,
           EKPO~KNTTP,
           EKPO~MATNR,
           EKPO~TXZ01,
           EKPO~MENGE,
           EKPO~MEINS,
           EKPO~NETPR,
           EKKN~AUFNR,
           EKKN~PS_PSP_PNR,
           EKET~EINDT,
           EKPO~NETWR,
           EKPO~BANFN,
           EKPO~BNFPO,
           EKPO~MATKL
      FROM EKKO
      INNER JOIN EKPO ON EKKO~EBELN EQ EKPO~EBELN AND
                         EKPO~LOEKZ EQ @SPACE
      INNER JOIN EKET ON EKPO~EBELN EQ EKET~EBELN AND
                         EKPO~EBELP EQ EKET~EBELP AND
                         EKET~ETENR EQ @LC_CON-TONE
      LEFT  JOIN EKKN ON EKPO~EBELN EQ EKKN~EBELN AND
                         EKPO~EBELP EQ EKKN~EBELP AND
                         EKKN~ZEKKN EQ @LC_CON-OONE
      WHERE EKKO~EBELN EQ @C_DATA-PONO
      INTO TABLE @LT_EKPO.

    C_DATA-POTYPE  = LCL_DATA=>GET_WORKFLOW( C_DATA-PONO )."'POFG'.
*    C_DATA-SVNO    = ''.
*    C_DATA-PORJNO  = LCL_UTIL->GET_TEXT( I_ID       = LC_CON-PRON
*                                         I_NAME     = LV_NAME
*                                         I_OBJECT   = LC_CON-OBJK
*                                         I_LANGUAGE = SY-LANGU ).
*    C_DATA-INVNO   = ''.
*    C_DATA-INVDT   = ''.

    IF LT_EKPO IS NOT INITIAL.
      SELECT CRMS4D_SERV_I~OBJECT_ID,
             CRMS4D_SERV_I~AC_ASSIGNMENT
        FROM @LT_EKPO AS A
        INNER JOIN CRMS4D_SERV_I ON A~AUFNR EQ CRMS4D_SERV_I~AC_ASSIGNMENT
        WHERE CRMS4D_SERV_I~OBJTYPE_H      EQ @LC_CON-SEVO
          AND CRMS4D_SERV_I~AC_OBJECT_TYPE EQ @LC_CON-SEVT
        INTO TABLE @DATA(LT_SV_ORDER).

      SELECT DISTINCT RSEG~EBELN,
                      RBKP~BLDAT,
                      RBKP~XBLNR
        FROM RBKP
        INNER JOIN RSEG ON RBKP~BELNR EQ RSEG~BELNR AND
                           RBKP~GJAHR EQ RSEG~GJAHR
        FOR ALL ENTRIES IN @LT_EKPO
        WHERE RSEG~EBELN EQ @LT_EKPO-EBELN
        INTO TABLE @DATA(LT_INV).
    ENDIF.

    LOOP AT LT_EKPO INTO LS_EKPO.
      IF LS_EKPO-MATKL = 'IN-INSTAL'.
        C_DATA-POTYPE = 'POIN'.
      ENDIF.

      LV_BANFN = LS_EKPO-BANFN.
      IF C_DATA-VENDOR IS INITIAL.
        LCL_UTIL->GET_VEND_NAME( EXPORTING I_VEND_NO  = LS_EKPO-LIFNR
                                 IMPORTING E_NAME_ALL = C_DATA-VENDOR ).
      ENDIF.

      LS_DETAIL-PONO         = LS_EKPO-EBELN.
      LS_DETAIL-POITEMNO     = LS_EKPO-EBELP.
      LS_DETAIL-ITEMTYPE     = LS_EKPO-KNTTP.
      LS_DETAIL-MATERIALCODE = LS_EKPO-MATNR.
      LS_DETAIL-DESCRIPTION  = LS_EKPO-TXZ01.
      LS_DETAIL-QTY          = LS_EKPO-MENGE.

      READ TABLE LT_SV_ORDER INTO DATA(LS_SV_ORDER)
      WITH KEY AC_ASSIGNMENT = LS_EKPO-AUFNR.
      IF SY-SUBRC EQ 0.
        LS_DETAIL-SERVICEORDER = LS_SV_ORDER-OBJECT_ID.
      ENDIF.

      READ TABLE LT_INV INTO DATA(LS_INV)
      WITH KEY EBELN = LS_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
        LS_DETAIL-INVNO        = LS_INV-XBLNR.
        LS_DETAIL-INVDATE      = LS_INV-BLDAT.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
        EXPORTING
          INPUT          = LS_EKPO-MEINS
        IMPORTING
          OUTPUT         = LS_DETAIL-BASEUNIT
        EXCEPTIONS
          UNIT_NOT_FOUND = 1
          OTHERS         = 2.

      LS_DETAIL-AMOUNT       = LS_EKPO-NETWR."LS_EKPO-NETPR .
      IF LS_EKPO-AUFNR IS NOT INITIAL.
        LS_DETAIL-BUDGETID     = LS_EKPO-AUFNR.
      ELSEIF LS_EKPO-AUFNR IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
          EXPORTING
            INPUT  = LS_EKPO-AUFNR
          IMPORTING
            OUTPUT = LS_DETAIL-BUDGETID.
      ENDIF.
      APPEND LS_DETAIL TO C_DATA-DETAIL.
      CLEAR : LS_DETAIL.
    ENDLOOP.

    SELECT SINGLE WEBNO
      FROM ZSDSMMT006
      WHERE BANFN = @LV_BANFN
      INTO @C_DATA-PR.

  ENDMETHOD.
  METHOD RELEASE_PO.

    DATA : LV_PURCHASEORDER  TYPE  BAPIMMPARA-PO_NUMBER,
           LV_PO_REL_CODE    TYPE  BAPIMMPARA-PO_REL_COD,
           LV_USE_EXCEPTIONS TYPE  BAPIMMPARA-SELECTION,
           LV_NO_COMMIT      TYPE  BAPIMMPARA-SELECTION.

    DATA : BEGIN OF LS_T16FS,
*    frggr TYPE ekko-frggr,
*    frgsx TYPE ekko-frgsx,
             FRGC1 TYPE T16FS-FRGC1,
           END OF LS_T16FS.

    CONSTANTS : LC_COM TYPE C LENGTH 3 VALUE 'COM'.

*    DATA : LV_MESSAGE TYPE C LENGTH 255.

    DATA : LV_EBELN TYPE EKKO-EBELN.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_EBELN
      IMPORTING
        OUTPUT = LV_EBELN.

    SELECT SINGLE FRGC1
      FROM EKKO
      INNER JOIN T16FS ON EKKO~FRGGR EQ T16FS~FRGGR AND
                          EKKO~FRGSX EQ T16FS~FRGSX
      INTO LS_T16FS-FRGC1
      WHERE EBELN EQ LV_EBELN.

    LV_PURCHASEORDER  = LV_EBELN.
    LV_PO_REL_CODE    = LS_T16FS-FRGC1.

    CALL FUNCTION 'BAPI_PO_RELEASE'
      EXPORTING
        PURCHASEORDER          = LV_PURCHASEORDER
        PO_REL_CODE            = LV_PO_REL_CODE
      EXCEPTIONS
        AUTHORITY_CHECK_FAIL   = 1
        DOCUMENT_NOT_FOUND     = 2
        ENQUEUE_FAIL           = 3
        PREREQUISITE_FAIL      = 4
        RELEASE_ALREADY_POSTED = 5
        RESPONSIBILITY_FAIL    = 6
        OTHERS                 = 7.
    IF SY-SUBRC <> 0.
      UPDATE ZSDSMMT002 SET RELES = ABAP_TRUE
                      WHERE EBELN EQ LV_EBELN
                        AND STATU EQ LC_COM
                        AND FLAGD EQ SPACE.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      IF SY-BATCH NE ABAP_TRUE.
*        CONCATENATE I_EBELN ':' SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LV_MESSAGE SEPARATED BY SPACE.
*        MESSAGE S000(ZSDSMM01) WITH LV_MESSAGE.
*
*        CLEAR : LV_MESSAGE.
*        CONCATENATE I_EBELN TEXT-101 INTO LV_MESSAGE SEPARATED BY SPACE.
*        MESSAGE S000(ZSDSMM01) WITH LV_MESSAGE.
*      ENDIF.
    ENDIF.

    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD UPDATE_REJECT.
    UPDATE ZSDSMMT002 SET FLAGD = ABAP_TRUE
                          REMAK = I_REMARK
                    WHERE EBELN EQ I_EBELN.
  ENDMETHOD.
  METHOD UPDATE_PO.
    DATA : LS_ZSDSMMT002 TYPE ZSDSMMT002.

    DATA : LV_RUNNING TYPE ZSDSMMT002-RUNNG.

    DATA : LS_NEXTSTEPLIST LIKE LINE OF C_DATA-NEXTSTEPLIST.

    CONSTANTS : LC_S TYPE C VALUE 'S',
                LC_E TYPE C VALUE 'E'.

    CONSTANTS : LC_COM TYPE C LENGTH 3 VALUE 'COM',
                LC_REJ TYPE C LENGTH 3 VALUE 'REJ',
                LC_WIT TYPE C LENGTH 3 VALUE 'WAI'.

    SELECT MAX( RUNNG )
      FROM ZSDSMMT002
      INTO  LV_RUNNING
      WHERE EBELN = C_DATA-PONO.

    LV_RUNNING = LV_RUNNING + 1.

    LS_ZSDSMMT002-RUNNG = LV_RUNNING.
    LS_ZSDSMMT002-EBELN = C_DATA-PONO.
    LS_ZSDSMMT002-STATU = C_DATA-STATUS.
    LS_ZSDSMMT002-POSIT = C_DATA-POSITION.
    LS_ZSDSMMT002-FLAGD = SPACE.
    LS_ZSDSMMT002-REMAK = C_DATA-REMARK.
    LS_ZSDSMMT002-ERNAM = C_DATA-ACTIONBY.
    LS_ZSDSMMT002-ERDAT = C_DATA-ACTIONDATE.
    LS_ZSDSMMT002-ERZET = C_DATA-ACTIONTIME.

    IF C_DATA-FLAGCOMPLETED EQ ABAP_TRUE.
      INSERT ZSDSMMT002 FROM LS_ZSDSMMT002.
      COMMIT WORK AND WAIT.
      LS_ZSDSMMT002-STATU = LC_COM.
      LV_RUNNING          = LV_RUNNING + 1.
      LS_ZSDSMMT002-RUNNG = LV_RUNNING.
      CLEAR : LS_ZSDSMMT002-ERNAM.
    ENDIF.

    INSERT ZSDSMMT002 FROM LS_ZSDSMMT002.
    COMMIT WORK AND WAIT.
    IF SY-SUBRC EQ 0.
      C_DATA-PONO        = C_DATA-PONO.
      C_DATA-MESSAGE     = TEXT-S01.
      C_DATA-MESSAGETYPE = LC_S.
    ELSE.
      C_DATA-PONO        = C_DATA-PONO.
      C_DATA-MESSAGE     = TEXT-E01.
      C_DATA-MESSAGETYPE = LC_E.
    ENDIF.

    LOOP AT C_DATA-NEXTSTEPLIST INTO LS_NEXTSTEPLIST.
      CLEAR : LS_ZSDSMMT002.
      LV_RUNNING          = LV_RUNNING + 1.
      LS_ZSDSMMT002-RUNNG = LV_RUNNING.
      LS_ZSDSMMT002-EBELN = C_DATA-PONO.
      LS_ZSDSMMT002-STATU = LC_WIT.
      LS_ZSDSMMT002-POSIT = LS_NEXTSTEPLIST-NEXTSTEPPOSITION.
      LS_ZSDSMMT002-FLAGD = SPACE.
      LS_ZSDSMMT002-REMAK = C_DATA-REMARK.
      LS_ZSDSMMT002-ERNAM = LS_NEXTSTEPLIST-NEXTSTEPACTIONBY.
      LS_ZSDSMMT002-ERDAT = C_DATA-ACTIONDATE.
      LS_ZSDSMMT002-ERZET = C_DATA-ACTIONTIME.
      INSERT ZSDSMMT002 FROM LS_ZSDSMMT002.
      COMMIT WORK AND WAIT.
    ENDLOOP.

    IF     LS_ZSDSMMT002-STATU EQ LC_REJ.
      LCL_DATA=>UPDATE_REJECT( I_EBELN  = LS_ZSDSMMT002-EBELN
                               I_REMARK = LS_ZSDSMMT002-REMAK ).
    ELSEIF LS_ZSDSMMT002-STATU EQ LC_COM.
      LCL_DATA=>RELEASE_PO( LS_ZSDSMMT002-EBELN ).
    ENDIF.

  ENDMETHOD.
  METHOD GET_WORKFLOW.
    SELECT SINGLE BSART
      FROM EKKO
      INTO @DATA(LV_DATA)
      WHERE EBELN EQ @I_DATA.

    IF LV_DATA EQ 'ZFG1' OR
       LV_DATA EQ 'ZFG2' OR
       LV_DATA EQ 'ZFGC' OR
       LV_DATA EQ 'ZFGI' OR
       LV_DATA EQ 'ZFGL' OR
       LV_DATA EQ 'ZP1'.
      R = 'POFG'.
*    ELSEIF LV_DATA EQ 'ZGMO'.
*      R = 'POIS'.
    ELSEIF LV_DATA EQ 'ZECO'.
      R = 'POSV'.
    ELSEIF LV_DATA EQ 'ZSCO'.
      R = 'POSV'.
    ELSEIF LV_DATA EQ 'ZP3'.
      R = 'POSV'.
    ELSEIF LV_DATA EQ 'ZP2'  OR
           LV_DATA EQ 'ZSDA' OR
           LV_DATA EQ 'ZSDC' OR
           LV_DATA EQ 'ZSDI' OR
           LV_DATA EQ 'ZSPI' OR
           LV_DATA EQ 'ZSPL'.
      R = 'POSP'.
    ELSEIF LV_DATA EQ 'ZPO' OR
           LV_DATA EQ 'ZP1' OR
           LV_DATA EQ 'ZP2' OR
           LV_DATA EQ 'ZP3'.
      R = 'POSB'.
    ELSE.
      R = 'POOR'.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
