class ZCL_ZSDSMM_PO_PROCESS_DPC_EXT definition
  public
  inheriting from ZCL_ZSDSMM_PO_PROCESS_DPC
  create public .

public section.

  constants GC_PO_GET_DATA type CHAR10 value 'PoDataSet' ##NO_TEXT.
  constants GC_PO_UPDATE_STATUS type CHAR17 value 'PoUpdateStatusSet' ##NO_TEXT.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
    redefinition .
protected section.

  methods POUPDATESTATUSSE_CREATE_ENTITY
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_ZSDSMM_PO_PROCESS_DPC_EXT IMPLEMENTATION.


  METHOD /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY.
    DATA : LS_DATA   TYPE ZSDSMMS006,
           LS_DETAIL TYPE ZSDSMMS005,
           LS_UPDATE TYPE ZSDSMMS030.

    FIELD-SYMBOLS <LFS_DATA> TYPE ANY.

    IF IO_DATA_PROVIDER IS NOT INITIAL.
      IF     IV_ENTITY_SET_NAME EQ GC_PO_GET_DATA.
        IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_DATA ).
        LCL_DATA=>GET_DATA_PO( CHANGING C_DATA = LS_DATA ).
*        CLEAR : LS_DATA-DETAIL[].
*        LS_DATA-POTYPE = 'POFG'.
*
*        LS_DETAIL-PONO         = LS_DATA-PONO .
*        LS_DETAIL-POITEMNO     = 1.
*        LS_DETAIL-ITEMTYPE     = 'A'.
*        LS_DETAIL-MATERIALCODE = 'TESTA'.
*        LS_DETAIL-DESCRIPTION  = 'TEST A'.
*        LS_DETAIL-QTY          = 10.
*        LS_DETAIL-BASEUNIT     = 'EA'.
*        LS_DETAIL-AMOUNT       = 1200.
*        APPEND LS_DETAIL TO LS_DATA-DETAIL.
*
*        LS_DETAIL-PONO         = LS_DATA-PONO .
*        LS_DETAIL-POITEMNO     = 2.
*        LS_DETAIL-ITEMTYPE     = 'B'.
*        LS_DETAIL-MATERIALCODE = 'TESTB'.
*        LS_DETAIL-DESCRIPTION  = 'TEST B'.
*        LS_DETAIL-QTY          = 5.
*        LS_DETAIL-BASEUNIT     = 'EA'.
*        LS_DETAIL-AMOUNT       = 700.
*        APPEND LS_DETAIL TO LS_DATA-DETAIL.

        ASSIGN LS_DATA TO <LFS_DATA>.
      ELSEIF IV_ENTITY_SET_NAME EQ GC_PO_UPDATE_STATUS.
        IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_UPDATE ).
        LCL_DATA=>UPDATE_PO( CHANGING C_DATA = LS_UPDATE ).
        ASSIGN LS_UPDATE TO <LFS_DATA>.
      ENDIF.

    COPY_DATA_TO_REF(
         EXPORTING
         IS_DATA =  <LFS_DATA>
         CHANGING
         CR_DATA = ER_DEEP_ENTITY
         ).
    ENDIF.

  ENDMETHOD.


  METHOD POUPDATESTATUSSE_CREATE_ENTITY.

    DATA : LS_DATA TYPE ZCL_ZSDSMM_PO_PROCESS_MPC=>TS_POUPDATESTATUS.

    DATA : LS_ZSDSMMT002 TYPE ZSDSMMT002.

    DATA : LV_RUNNING TYPE ZSDSMMT002-RUNNG.

    CONSTANTS : LC_S TYPE C VALUE 'S',
                LC_E TYPE C VALUE 'E'.

    CONSTANTS : LC_COM TYPE C LENGTH 3 VALUE 'COM',
                LC_REJ TYPE C LENGTH 3 VALUE 'REJ'.

    IF IO_DATA_PROVIDER IS NOT INITIAL.
      IO_DATA_PROVIDER->READ_ENTRY_DATA( IMPORTING ES_DATA = LS_DATA ).
    ENDIF.

    SELECT MAX( RUNNG )
      FROM ZSDSMMT002
      INTO  LV_RUNNING
      WHERE EBELN = LS_DATA-PONO.

    LS_ZSDSMMT002-RUNNG = LV_RUNNING + 1.
    LS_ZSDSMMT002-EBELN = LS_DATA-PONO.
    LS_ZSDSMMT002-STATU = LS_DATA-STATUS.
    LS_ZSDSMMT002-POSIT = LS_DATA-POSITION.
    LS_ZSDSMMT002-FLAGD = SPACE.
    LS_ZSDSMMT002-REMAK = LS_DATA-REMARK.
    LS_ZSDSMMT002-ERNAM = LS_DATA-ACTIONBY.
    LS_ZSDSMMT002-ERDAT = LS_DATA-ACTIONDATE.
    LS_ZSDSMMT002-ERZET = LS_DATA-ACTIONTIME.

    INSERT ZSDSMMT002 FROM LS_ZSDSMMT002.
    IF SY-SUBRC EQ 0.
      ER_ENTITY-PONO        = LS_DATA-PONO.
      ER_ENTITY-MESSAGE     = TEXT-S01.
      ER_ENTITY-MESSAGETYPE = LC_S.
    ELSE.
      ER_ENTITY-PONO        = LS_DATA-PONO.
      ER_ENTITY-MESSAGE     = TEXT-E01.
      ER_ENTITY-MESSAGETYPE = LC_E.
    ENDIF.

    IF     LS_ZSDSMMT002-STATU EQ LC_REJ.
      LCL_DATA=>UPDATE_REJECT( I_EBELN  = LS_ZSDSMMT002-EBELN
                               I_REMARK = LS_ZSDSMMT002-REMAK ).
    ELSEIF LS_ZSDSMMT002-STATU EQ LC_COM.
      LCL_DATA=>RELEASE_PO( LS_ZSDSMMT002-EBELN ).
    ENDIF.

  ENDMETHOD.
ENDCLASS.
