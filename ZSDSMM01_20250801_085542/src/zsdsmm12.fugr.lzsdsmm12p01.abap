*&---------------------------------------------------------------------*
*& Include          LZSDSMM12P01
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
***INCLUDE LZSDSMM12F01.
*----------------------------------------------------------------------*
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      SEARCH_COSTCENTER IMPORTING I_DATA   TYPE  ZSDSFIT050
                        RETURNING VALUE(R) TYPE ZSDSFIS142_TT,
      SEARCH_LOCATION IMPORTING I_DATA   TYPE  ZSDSFIT050
                      RETURNING VALUE(R) TYPE ZSDSFIS142_TT,
      SEARCH_LOCATION_FG_SP IMPORTING I_DATA   TYPE  ZSDSMMT024
                            RETURNING VALUE(R) TYPE ZSDSFIS142_TT,
      SEARCH_PERSONAL_NUMBER IMPORTING I_DATA   TYPE  ZSDSFIT050
                             RETURNING VALUE(R) TYPE ZSDSFIS142_TT,
      SEARCH_MAT   IMPORTING I_DATA   TYPE  ZSDSMMT024
                   RETURNING VALUE(R) TYPE ZSDSFIS142_TT,
      INSERT_DATA IMPORTING I_DATA    TYPE  ZSDSFIT050
                  CHANGING  C_MESSTYP TYPE CHAR1
                            C_MESSAGE TYPE CHAR255,
      GET_DATA_FG IMPORTING I_DATA   TYPE ZSDSMMT024
                  RETURNING VALUE(R) TYPE ZSDSMMS059,
      GET_DATA_SP IMPORTING I_DATA   TYPE ZSDSMMT025
                  RETURNING VALUE(R) TYPE ZSDSMMS059,
      UPDATA_PHYSICAL_FG IMPORTING I_DATA    TYPE ZSDSMMT024
                         CHANGING  C_MESSTYP TYPE CHAR1
                                   C_MESSAGE TYPE CHAR255,
      UPDATA_PHYSICAL_SP IMPORTING I_DATA    TYPE ZSDSMMT024
                         CHANGING  C_MESSTYP TYPE CHAR1
                                   C_MESSAGE TYPE CHAR255,
      GET_REPORT IMPORTING I_DATA   TYPE ZSDSFIT050
                 RETURNING VALUE(R) TYPE ZSDSFIS182_TT,
      GET_ECC_ASSET IMPORTING I_DATA TYPE ZSDSFIT050
                    CHANGING  C_DESC TYPE CHAR255
                              C_COST TYPE ANLZ-KOSTL
                              C_EMPC TYPE ANLZ-PERNR
                              C_ASST TYPE ANLN1
                              C_SUBA TYPE ANLN2,
      GET_ASSET_DESC IMPORTING I_DATA TYPE ZSDSFIT050
                     EXPORTING C_DESC TYPE CHAR255
                               C_COST TYPE ANLZ-KOSTL
                               C_EMPC TYPE ANLZ-PERNR,
      GET_AUTO IMPORTING I_DATA TYPE ZSDSFIT050
               CHANGING  C_AUTO TYPE CHAR255,
      COMMIT,
      ROLLBACK.

ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD SEARCH_COSTCENTER.
    DATA : LR_KTEXT TYPE RANGE OF CSKT-KTEXT,
           LS_KTEXT LIKE LINE OF LR_KTEXT.

    DATA : LR_KOSTL TYPE RANGE OF CSKT-KOSTL,
           LS_KOSTL LIKE LINE OF LR_KOSTL.

    LS_KTEXT-SIGN   = GC_CON-I.
    LS_KTEXT-OPTION = GC_CON-CP.
    CONCATENATE GC_CON-START I_DATA-SEARF GC_CON-START INTO LS_KTEXT-LOW.
    APPEND LS_KTEXT TO LR_KTEXT.

    LS_KOSTL-SIGN   = GC_CON-I.
    LS_KOSTL-OPTION = GC_CON-CP.
    CONCATENATE GC_CON-START I_DATA-SEARF GC_CON-START INTO LS_KOSTL-LOW.
    APPEND LS_KOSTL TO LR_KOSTL.

    SELECT KOSTL,
           KTEXT
      FROM CSKT
      WHERE SPRAS EQ @SY-LANGU
       AND KOKRS EQ @GC_CON-CONA
       AND ( KTEXT IN @LR_KTEXT[] OR
             KOSTL IN @LR_KOSTL[] )
      INTO TABLE @R.
  ENDMETHOD.
  METHOD SEARCH_LOCATION.
    DATA : LR_KTEXT TYPE RANGE OF T499S-KTEXT,
           LS_KTEXT LIKE LINE OF LR_KTEXT.

    LS_KTEXT-SIGN   = GC_CON-I.
    LS_KTEXT-OPTION = GC_CON-CP.
    CONCATENATE GC_CON-START I_DATA-SEARF GC_CON-START INTO LS_KTEXT-LOW.
    APPEND LS_KTEXT TO LR_KTEXT.

    SELECT STAND,
           KTEXT
      FROM T499S
      WHERE KTEXT IN @LR_KTEXT[]
      INTO TABLE @R.
  ENDMETHOD.
  METHOD SEARCH_PERSONAL_NUMBER.

    DATA : LR_NAME TYPE RANGE OF PA0002-VORNA,
           LS_NAME LIKE LINE OF LR_NAME.

    LS_NAME-SIGN   = GC_CON-I.
    LS_NAME-OPTION = GC_CON-CP.
    CONCATENATE GC_CON-START I_DATA-SEARF GC_CON-START INTO LS_NAME-LOW.
    APPEND LS_NAME TO LR_NAME.

    SELECT PERNR,
           ( PA0002~VORNA && ' ' && PA0002~NACHN )
      FROM PA0002
      WHERE ( VORNA IN @LR_NAME[] OR
              NACHN IN @LR_NAME[] )
      INTO TABLE @R.

  ENDMETHOD.
  METHOD INSERT_DATA.
    DATA LS_DATA     TYPE ZSDSFIT050.
    DATA LS_DATA_LOG TYPE ZSDSFIT055.

    DATA: LT_INPUT   TYPE ZSDSFIS087_TT,
          LT_MESSAGE TYPE	ZSDSFIS088_TT.

    DATA: LS_INPUT   TYPE ZSDSFIS087,
          LS_MESSAGE TYPE	ZSDSFIS088.

    DATA: LV_EMP  TYPE C LENGTH 8,
          LV_EMP0 TYPE C LENGTH 8,
          LV_MNG  TYPE C LENGTH 8,
          LV_MNG0 TYPE C LENGTH 8.

    DATA: LV_CHECK TYPE C.

    DATA: LV_LINE_LOG TYPE I.

    SELECT SINGLE STORT
      FROM ANLZ
      WHERE ANLZ~BUKRS EQ '1000'
        AND ANLZ~ANLN1 EQ @I_DATA-ANLN1
        AND ANLZ~ANLN2 EQ @I_DATA-ANLN2
        AND ANLZ~BDATU GE @SY-DATUM
        AND ANLZ~ADATU LE @SY-DATUM
      INTO (@LS_DATA-STORT).
    IF SY-SUBRC EQ 0.
      LS_DATA-ANLN1  = I_DATA-ANLN1.
      LS_DATA-ANLN2  = I_DATA-ANLN2.
      LS_DATA-KOSTL  = I_DATA-KOSTL.
      LS_DATA-PERNR  = I_DATA-PERNR.
      LS_DATA-REMARK = I_DATA-REMARK.
      LS_DATA-STATU  = I_DATA-STATU.

*      SELECT SINGLE ERNAM,
*                    ERDAT,
*                    ERZET
*        FROM ZSDSFIT050
*        INTO (@LS_DATA-ERNAM,@LS_DATA-ERDAT,@LS_DATA-ERZET)
*        WHERE ANLN1 EQ @LS_DATA-ANLN1
*          AND ANLN2 EQ @LS_DATA-ANLN2.
*      IF SY-SUBRC NE 0.
      LS_DATA-ERNAM  = I_DATA-ERNAM.
      LS_DATA-ERDAT  = SY-DATUM.
      LS_DATA-ERZET  = SY-UZEIT.
*      ENDIF.
      LS_DATA-AENAM  = I_DATA-ERNAM.
      LS_DATA-AEDAT  = SY-DATUM.
      LS_DATA-AEZET  = SY-UZEIT.

      CLEAR : LV_CHECK.
      SELECT COUNT( * )
        FROM ZSDSCAC009
        WHERE PROCESS EQ 'TRANFASSET'
          AND STATU   EQ ABAP_TRUE.
      IF SY-SUBRC EQ 0.
        LV_EMP  = I_DATA-PERNR.
        LV_EMP0 = I_DATA-PERNR.
        LV_MNG  = I_DATA-SEARF.
        LV_MNG0 = I_DATA-SEARF.

        LV_EMP  = |{ LV_EMP  ALPHA = OUT }|.
        LV_EMP0 = |{ LV_EMP0 ALPHA = IN  }|.
        LV_MNG  = |{ LV_MNG  ALPHA = OUT }|.
        LV_MNG0 = |{ LV_MNG0 ALPHA = IN  }|.

*        SELECT COUNT( * )
        SELECT SINGLE *
         FROM ANLZ
         INTO @DATA(LS_ANLZ)
         WHERE ANLN1 = @LS_DATA-ANLN1
           AND ANLN2 = @LS_DATA-ANLN2
           AND ( RAUMN EQ @LV_EMP OR
                 RAUMN EQ @LV_EMP0 )
           AND ( PERNR EQ @LV_MNG OR
                 PERNR EQ @LV_MNG0 )
           AND BDATU GE @SY-DATUM
           AND ADATU LE @SY-DATUM.
        IF SY-SUBRC NE 0.
          CLEAR : LT_INPUT,LT_MESSAGE.
          LS_INPUT-COMCODE              = '1000'.
          LS_INPUT-FIX_ASSET_NO         = I_DATA-ANLN1.
          LS_INPUT-FIX_ASSET_SUB_NO     = I_DATA-ANLN2.
          LS_INPUT-OWNER_NEW            = I_DATA-PERNR.
          LS_INPUT-OWNER_NEW_COSTCENTER = I_DATA-KOSTL.
          LS_INPUT-OWNER_NEW_MANAGER    = I_DATA-SEARF.
          APPEND LS_INPUT TO LT_INPUT.

          CALL FUNCTION 'Z_SDSFI_TRANSFER_FIX_ASSET'
            EXPORTING
              IT_INPUT   = LT_INPUT
            IMPORTING
              ET_MESSAGE = LT_MESSAGE.
          READ TABLE LT_MESSAGE
          WITH KEY MESSAGE_TYPE = 'E' TRANSPORTING NO FIELDS.
          IF SY-SUBRC EQ 0.
            LV_CHECK = ABAP_TRUE.
          ELSE.
            CLEAR : LV_CHECK.
          ENDIF.
        ENDIF.
      ENDIF.

      IF LV_CHECK EQ SPACE.
        MODIFY ZSDSFIT050 FROM LS_DATA.

        MOVE-CORRESPONDING LS_DATA TO LS_DATA_LOG.

        SELECT MAX( RUNNG )
          FROM ZSDSFIT055
          WHERE ANLN1 EQ @LS_DATA-ANLN1
            AND ANLN2 EQ @LS_DATA-ANLN2
          INTO @LS_DATA_LOG-RUNNG.
        IF SY-SUBRC NE 0.
          LS_DATA_LOG-RUNNG = 1.
        ELSE.
          LS_DATA_LOG-RUNNG = LS_DATA_LOG-RUNNG + 1.
        ENDIF.
        C_MESSTYP = GC_CON-S.

        CLEAR : LV_LINE_LOG.
        DO.
          ADD 1 TO LV_LINE_LOG.
          TRY.
              INSERT ZSDSFIT055 FROM LS_DATA_LOG.
              IF SY-SUBRC EQ 0.
                COMMIT( ).
                EXIT.
              ELSE.
                IF LV_LINE_LOG LE 5.
                  LS_DATA_LOG-RUNNG = LS_DATA_LOG-RUNNG + 1.
                ELSE.
                  C_MESSTYP = GC_CON-E.
                  C_MESSAGE = TEXT-E03.
                  ROLLBACK( ).
                  EXIT.
                ENDIF.
              ENDIF.
            CATCH CX_SY_OPEN_SQL_DB INTO DATA(LO_SQL_EXCEPTION).
              C_MESSTYP = GC_CON-E.
              C_MESSAGE = TEXT-E02.
              ROLLBACK( ).
          ENDTRY.
        ENDDO.
      ELSE.
        C_MESSAGE = TEXT-E03.
      ENDIF.
    ELSE.
      C_MESSTYP = GC_CON-E.
      C_MESSAGE = TEXT-E01.
    ENDIF.
*    ENDIF.
  ENDMETHOD.
  METHOD SEARCH_MAT.

    DATA : LR_MAT TYPE RANGE OF MAKT-MAKTX,
           LS_MAT LIKE LINE OF LR_MAT.

    LS_MAT-SIGN   = GC_CON-I.
    LS_MAT-OPTION = GC_CON-CP.
    CONCATENATE GC_CON-START I_DATA-SEARF GC_CON-START INTO LS_MAT-LOW.
    APPEND LS_MAT TO LR_MAT.

    SELECT MATNR,
           MAKTX
      FROM MAKT
      WHERE MATNR IN @LR_MAT[]
        AND MAKTX IN @LR_MAT[]
      INTO TABLE @R.

  ENDMETHOD.
  METHOD SEARCH_LOCATION_FG_SP.
    DATA : LR_LOCATION TYPE RANGE OF T001L-LGOBE,
           LS_LOCATION LIKE LINE OF LR_LOCATION.

    LS_LOCATION-SIGN   = GC_CON-I.
    LS_LOCATION-OPTION = GC_CON-CP.
    CONCATENATE GC_CON-START I_DATA-SEARF GC_CON-START INTO LS_LOCATION-LOW.
    TRANSLATE LS_LOCATION-LOW TO UPPER CASE.
    APPEND LS_LOCATION TO LR_LOCATION.

    SELECT LGORT,
           LGOBE
      FROM T001L
      WHERE LGORT IN @LR_LOCATION[]
         OR LGOBE IN @LR_LOCATION[]
      INTO TABLE @R.

  ENDMETHOD.
  METHOD GET_DATA_FG.
    DATA : BEGIN OF LS_ISEG,
             IBLNR TYPE ISEG-IBLNR,
             GJAHR TYPE ISEG-GJAHR,
             ZEILI TYPE ISEG-ZEILI,
             MATNR TYPE ISEG-MATNR,
             WERKS TYPE ISEG-WERKS,
             LGORT TYPE ISEG-LGORT,
             BUCHM TYPE ISEG-BUCHM,
             MEINS TYPE ISEG-MEINS,
             LGPBE TYPE MARD-LGPBE,
             MAKTX TYPE MAKT-MAKTX,
             BTEXT TYPE T064B-BTEXT,
           END OF LS_ISEG.
    DATA LT_ISEG LIKE TABLE OF LS_ISEG.

    DATA: BEGIN OF LS_MARD,
            MATNR TYPE MARD-MATNR,
            LGORT TYPE MARD-LGORT,
            LGPBE TYPE MARD-LGPBE,
          END OF LS_MARD.
    DATA LT_MARD LIKE TABLE OF LS_MARD.

    DATA : BEGIN OF LS_ZTK2_PHYSICAL_FG,
             IBLNR     TYPE ZSDSMMT024-IBLNR,
             GJAHR     TYPE ZSDSMMT024-GJAHR,
             ITEM      TYPE ZSDSMMT024-ITEM,
             ENTRY_QNT TYPE ZSDSMMT024-ENTRY_QNT,
             REMARK    TYPE ZSDSMMT024-REMARK,
           END OF LS_ZTK2_PHYSICAL_FG.
    DATA LT_ZTK2_PHYSICAL_FG LIKE TABLE OF LS_ZTK2_PHYSICAL_FG.

    DATA : E_PERIOD TYPE  POPER,
           E_GJAHR  TYPE  GJAHR.

    DATA : I_BUKRS TYPE  BUKRS,
           I_DATUM TYPE  DATUM.

    DATA : LR_LGPBE TYPE RANGE OF MARD-LGPBE,
           LR_LGORT TYPE RANGE OF MARD-LGORT,
           LR_MATNR TYPE RANGE OF MARD-MATNR.

    DATA : LV_LGPBE TYPE MARD-LGPBE,
           LV_LGORT TYPE MARD-LGORT,
           LV_MATNR TYPE MARD-MATNR.

    DATA : LS_DATA LIKE LINE OF R-DATA_TAB.

    I_BUKRS = '1000'.
    I_DATUM = SY-DATUM.

    CALL FUNCTION 'Z_SDSFI_GET_PERIOD_FISCAL_YEAR'
      EXPORTING
        I_BUKRS  = I_BUKRS
        I_DATUM  = I_DATUM
      IMPORTING
        E_PERIOD = E_PERIOD
        E_GJAHR  = E_GJAHR.

    LV_LGPBE = I_DATA-LGPBE.
    LV_LGORT = I_DATA-LGORT.
    LV_MATNR = I_DATA-MATNR.

    CONCATENATE LV_LGPBE '*' INTO LV_LGPBE.
    CONCATENATE '*' LV_MATNR '*' INTO LV_MATNR.
    IF LV_LGORT IS INITIAL.
      LR_LGORT =  VALUE #( ( SIGN  = 'I' OPTION = 'BT' LOW = '1000' HIGH = '9999' ) ).
    ELSE.
      CONCATENATE LV_LGORT '*' INTO LV_LGORT.
      LR_LGORT =  VALUE #( ( SIGN  = 'I' OPTION = 'CP' LOW = LV_LGORT ) ).
    ENDIF.

    LR_LGPBE =  VALUE #( ( SIGN  = 'I' OPTION = 'CP' LOW = LV_LGPBE ) ).

    LR_MATNR =  VALUE #( ( SIGN  = 'I' OPTION = 'CP' LOW = LV_MATNR ) ).

    IF LR_LGPBE[] IS INITIAL AND
     LR_LGORT[] IS INITIAL AND
     LR_MATNR[] IS INITIAL.
      R-MESSTYP = 'E'.
      R-MESSAGE = 'Please select one or more options.'.
    ELSE.
      SELECT ISEG~IBLNR
             ISEG~GJAHR
             ISEG~ZEILI
             ISEG~MATNR
             ISEG~WERKS
             ISEG~LGORT
             ISEG~BUCHM
             ISEG~MEINS
             MARD~LGPBE
             MAKT~MAKTX
             T064B~BTEXT
        FROM ISEG
        INNER JOIN MARD  ON ISEG~MATNR  EQ MARD~MATNR AND
                            ISEG~LGORT  EQ MARD~LGORT AND
                            MARD~WERKS  EQ '1000'
        INNER JOIN MAKT  ON ISEG~MATNR  EQ MAKT~MATNR
        LEFT JOIN T064B  ON ISEG~BSTAR EQ T064B~BSTAR AND
                            T064B~SPRAS EQ SY-LANGU
        INTO TABLE LT_ISEG
        WHERE ISEG~GJAHR EQ E_GJAHR
          AND MARD~LGPBE IN LR_LGPBE
          AND ISEG~LGORT IN LR_LGORT
          AND ISEG~MATNR IN LR_MATNR
          AND ISEG~BSTAR EQ 1.

      SORT LT_ISEG BY IBLNR GJAHR ZEILI.
      DELETE ADJACENT DUPLICATES FROM LT_ISEG COMPARING IBLNR GJAHR ZEILI.

      IF LT_ISEG[] IS NOT INITIAL.
        SELECT IBLNR
               GJAHR
               ITEM
               ENTRY_QNT
               REMARK
          FROM ZSDSMMT024
          INTO TABLE LT_ZTK2_PHYSICAL_FG
          FOR ALL ENTRIES IN LT_ISEG
          WHERE IBLNR EQ LT_ISEG-IBLNR
            AND GJAHR EQ LT_ISEG-GJAHR
            AND ITEM  EQ LT_ISEG-ZEILI.

        LOOP AT LT_ISEG INTO LS_ISEG.

          READ TABLE LT_ZTK2_PHYSICAL_FG INTO LS_ZTK2_PHYSICAL_FG
          WITH KEY IBLNR = LS_ISEG-IBLNR
                   GJAHR = LS_ISEG-GJAHR
                   ITEM  = LS_ISEG-ZEILI.
          IF SY-SUBRC = 0.
            LS_DATA-ENTRY_QNT = LS_ZTK2_PHYSICAL_FG-ENTRY_QNT.
            LS_DATA-REMARK    = LS_ZTK2_PHYSICAL_FG-REMARK.
          ENDIF.

          LS_DATA-LGPBE = LS_ISEG-LGPBE.
          LS_DATA-MATNR = LS_ISEG-MATNR.
          LS_DATA-MAKTX = LS_ISEG-MAKTX.
          LS_DATA-IBLNR = LS_ISEG-IBLNR.
          LS_DATA-LGORT = LS_ISEG-LGORT.
          LS_DATA-MEINS = LS_ISEG-MEINS.
          LS_DATA-BTEXT = LS_ISEG-BTEXT.
          LS_DATA-ITEM  = LS_ISEG-ZEILI.
          LS_DATA-GJAHR = LS_ISEG-GJAHR.
          LS_DATA-BUCHM = LS_ISEG-BUCHM.

          APPEND LS_DATA TO R-DATA_TAB.
          CLEAR : LS_DATA.
        ENDLOOP.

        IF R-DATA_TAB IS NOT INITIAL.
          R-MESSTYP = 'S'.
        ELSE.
          R-MESSTYP = 'E'.
          R-MESSAGE = 'No data found.'.
        ENDIF.

      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD GET_DATA_SP.
    DATA : BEGIN OF LS_ISEG,
             IBLNR TYPE ISEG-IBLNR,
             GJAHR TYPE ISEG-GJAHR,
             ZEILI TYPE ISEG-ZEILI,
             MATNR TYPE ISEG-MATNR,
             WERKS TYPE ISEG-WERKS,
             LGORT TYPE ISEG-LGORT,
             BUCHM TYPE ISEG-BUCHM,
             MEINS TYPE ISEG-MEINS,
             LGPBE TYPE MARD-LGPBE,
             MAKTX TYPE MAKT-MAKTX,
             BTEXT TYPE T064B-BTEXT,
           END OF LS_ISEG.
    DATA LT_ISEG LIKE TABLE OF LS_ISEG.

    DATA: BEGIN OF LS_MARD,
            MATNR TYPE MARD-MATNR,
            LGORT TYPE MARD-LGORT,
            LGPBE TYPE MARD-LGPBE,
          END OF LS_MARD.
    DATA LT_MARD LIKE TABLE OF LS_MARD.

    DATA : BEGIN OF LS_ZTK2_PHYSICAL_SP,
             IBLNR     TYPE ZSDSMMT024-IBLNR,
             GJAHR     TYPE ZSDSMMT024-GJAHR,
             ITEM      TYPE ZSDSMMT024-ITEM,
             ENTRY_QNT TYPE ZSDSMMT024-ENTRY_QNT,
             REMARK    TYPE ZSDSMMT024-REMARK,
           END OF LS_ZTK2_PHYSICAL_SP.
    DATA LT_ZTK2_PHYSICAL_SP LIKE TABLE OF LS_ZTK2_PHYSICAL_SP.

    DATA : E_PERIOD TYPE  POPER,
           E_GJAHR  TYPE  GJAHR.

    DATA : I_BUKRS TYPE  BUKRS,
           I_DATUM TYPE  DATUM.

    DATA : LR_LGPBE TYPE RANGE OF MARD-LGPBE,
           LR_LGORT TYPE RANGE OF MARD-LGORT,
           LR_MATNR TYPE RANGE OF MARD-MATNR.

    DATA : LV_LGPBE TYPE MARD-LGPBE,
           LV_LGORT TYPE MARD-LGORT,
           LV_MATNR TYPE MARD-MATNR.

    DATA : LS_DATA LIKE LINE OF R-DATA_TAB.

    I_BUKRS = '1000'.
    I_DATUM = SY-DATUM.

    CALL FUNCTION 'Z_SDSFI_GET_PERIOD_FISCAL_YEAR'
      EXPORTING
        I_BUKRS  = I_BUKRS
        I_DATUM  = I_DATUM
      IMPORTING
        E_PERIOD = E_PERIOD
        E_GJAHR  = E_GJAHR.

    LV_LGPBE = I_DATA-LGPBE.
    LV_LGORT = I_DATA-LGORT.
    LV_MATNR = I_DATA-MATNR.

    CONCATENATE LV_LGPBE '*' INTO LV_LGPBE.
    CONCATENATE '*' LV_MATNR '*' INTO LV_MATNR.

    LR_LGPBE =  VALUE #( ( SIGN  = 'I' OPTION = 'CP' LOW = LV_LGPBE ) ).
    LR_LGORT =  VALUE #( ( SIGN  = 'I' OPTION = 'CP' LOW = LV_LGORT ) ).
    LR_MATNR =  VALUE #( ( SIGN  = 'I' OPTION = 'CP' LOW = LV_MATNR ) ).

    IF LR_LGPBE[] IS INITIAL AND
     LR_LGORT[] IS INITIAL AND
     LR_MATNR[] IS INITIAL.
      R-MESSTYP = 'E'.
      R-MESSAGE = 'Please select one or more options.'.
    ELSE.
      SELECT ISEG~IBLNR
             ISEG~GJAHR
             ISEG~ZEILI
             ISEG~MATNR
             ISEG~WERKS
             ISEG~LGORT
             ISEG~BUCHM
             ISEG~MEINS
             MARD~LGPBE
             MAKT~MAKTX
             T064B~BTEXT
        FROM ISEG
        INNER JOIN MARD  ON ISEG~MATNR  EQ MARD~MATNR AND
                            ISEG~LGORT  EQ MARD~LGORT AND
                            MARD~WERKS  EQ '1000'
        INNER JOIN MAKT  ON ISEG~MATNR  EQ MAKT~MATNR
        INNER JOIN T064B ON ISEG~BSTAR EQ T064B~BSTAR AND
                            T064B~SPRAS EQ SY-LANGU
        INTO TABLE LT_ISEG
        WHERE ISEG~GJAHR EQ E_GJAHR
          AND MARD~LGPBE IN LR_LGPBE
          AND ISEG~LGORT IN LR_LGORT
          AND ISEG~MATNR IN LR_MATNR
          AND ISEG~BSTAR EQ 1.

      SORT LT_ISEG BY IBLNR GJAHR ZEILI.
      DELETE ADJACENT DUPLICATES FROM LT_ISEG COMPARING IBLNR GJAHR ZEILI.

      IF LT_ISEG[] IS NOT INITIAL.
        SELECT IBLNR
               GJAHR
               ITEM
               ENTRY_QNT
               REMARK
          FROM ZSDSMMT025
          INTO TABLE LT_ZTK2_PHYSICAL_SP
          FOR ALL ENTRIES IN LT_ISEG
          WHERE IBLNR EQ LT_ISEG-IBLNR
            AND GJAHR EQ LT_ISEG-GJAHR
            AND ITEM  EQ LT_ISEG-ZEILI.

        LOOP AT LT_ISEG INTO LS_ISEG.

          READ TABLE LT_ZTK2_PHYSICAL_SP INTO LS_ZTK2_PHYSICAL_SP
          WITH KEY IBLNR = LS_ISEG-IBLNR
                   GJAHR = LS_ISEG-GJAHR
                   ITEM  = LS_ISEG-ZEILI.
          IF SY-SUBRC = 0.
            LS_DATA-ENTRY_QNT = LS_ZTK2_PHYSICAL_SP-ENTRY_QNT.
            LS_DATA-REMARK    = LS_ZTK2_PHYSICAL_SP-REMARK.
          ENDIF.

          LS_DATA-LGPBE = LS_ISEG-LGPBE.
          LS_DATA-MATNR = LS_ISEG-MATNR.
          LS_DATA-MAKTX = LS_ISEG-MAKTX.
          LS_DATA-IBLNR = LS_ISEG-IBLNR.
          LS_DATA-LGORT = LS_ISEG-LGORT.
          LS_DATA-MEINS = LS_ISEG-MEINS.
          LS_DATA-BTEXT = LS_ISEG-BTEXT.
          LS_DATA-ITEM  = LS_ISEG-ZEILI.
          LS_DATA-GJAHR = LS_ISEG-GJAHR.
          LS_DATA-BUCHM = LS_ISEG-BUCHM.

          APPEND LS_DATA TO R-DATA_TAB.
          CLEAR : LS_DATA.
        ENDLOOP.
        IF R-DATA_TAB IS NOT INITIAL.
          R-MESSTYP = 'S'.
        ELSE.
          R-MESSTYP = 'E'.
          R-MESSAGE = 'No data found.'.
        ENDIF.

      ENDIF.
    ENDIF.


*    LS_DATA-ENTRY_QNT = '20'.
*    LS_DATA-LGPBE = '111'.
*    LS_DATA-MATNR = 'est'.
*    LS_DATA-MAKTX = 'testt1'.
*    LS_DATA-IBLNR = '1'.
*    LS_DATA-LGORT = '122'.
*    LS_DATA-MEINS = '1'.
*    LS_DATA-BTEXT = '1'.
*    LS_DATA-ITEM  = '1'.
*    LS_DATA-GJAHR = '1'.
*    LS_DATA-BUCHM = '1'.
*    LS_DATA-REMARK = 'hahah'.
*
*    APPEND LS_DATA TO R-DATA_TAB.

  ENDMETHOD.
  METHOD UPDATA_PHYSICAL_FG.
    DATA : LV_PHYSINVENTORY TYPE IKPF-IBLNR,
           LV_FISCALYEAR    TYPE IKPF-GJAHR,
           LV_COUNT_DATE    TYPE IIKPF-ZLDAT.

    DATA : LT_ITEMS	 TYPE TABLE OF BAPI_PHYSINV_ITEM,
           LT_RETURN TYPE TABLE OF BAPIRET2.

    DATA : LS_ITEMS	TYPE BAPI_PHYSINV_ITEM.

    DATA : LS_HEAD  TYPE  BAPI_PHYSINV_HEAD.

    DATA : LT_IKPF TYPE TABLE OF IKPF,
           LS_IKPF TYPE IKPF.

    DATA : BEGIN OF LS_CHECK,
             IBLNR TYPE ZSDSMMT024-IBLNR,
             GJAHR TYPE ZSDSMMT024-GJAHR,
             ITEM  TYPE ZSDSMMT024-ITEM,
             ERNAM TYPE ZSDSMMT024-ERNAM,
             ERDAT TYPE ZSDSMMT024-ERDAT,
             ERTIM TYPE ZSDSMMT024-ERZET,
           END OF  LS_CHECK.

    DATA : LS_ZTK2_PHYSICAL_SP TYPE ZSDSMMT024.

    DATA : LV_TABIX TYPE SY-TABIX.

    LV_PHYSINVENTORY = I_DATA-IBLNR.
    LV_FISCALYEAR    = I_DATA-GJAHR.
    LV_COUNT_DATE    = SY-DATUM.

    CALL FUNCTION 'BAPI_MATPHYSINV_GETDETAIL'
      EXPORTING
        PHYSINVENTORY = LV_PHYSINVENTORY
        FISCALYEAR    = LV_FISCALYEAR
      IMPORTING
        HEAD          = LS_HEAD
      TABLES
        ITEMS         = LT_ITEMS
        RETURN        = LT_RETURN.


    READ TABLE LT_ITEMS INTO LS_ITEMS
    WITH KEY PHYSINVENTORY = I_DATA-IBLNR
             FISCALYEAR    = I_DATA-GJAHR
             ITEM          = I_DATA-ITEM.
    IF SY-SUBRC = 0.
      MOVE-CORRESPONDING LS_ITEMS TO LS_ZTK2_PHYSICAL_SP.

      LS_ZTK2_PHYSICAL_SP-IBLNR     = LS_ITEMS-PHYSINVENTORY.
      LS_ZTK2_PHYSICAL_SP-GJAHR     = LS_ITEMS-FISCALYEAR.
      LS_ZTK2_PHYSICAL_SP-ITEM      = LS_ITEMS-ITEM.
      LS_ZTK2_PHYSICAL_SP-LGPBE     = I_DATA-LGPBE.
      LS_ZTK2_PHYSICAL_SP-BUCHM     = I_DATA-BUCHM.
      LS_ZTK2_PHYSICAL_SP-ENTRY_QNT = I_DATA-ENTRY_QNT.
      LS_ZTK2_PHYSICAL_SP-REMARK    = I_DATA-REMARK.

      SELECT SINGLE IBLNR
                    GJAHR
                    ITEM
                    ERNAM
                    ERDAT
                    ERZET
        FROM ZSDSMMT024
        INTO LS_CHECK
        WHERE IBLNR = I_DATA-IBLNR
          AND GJAHR = I_DATA-GJAHR
          AND ITEM  = I_DATA-ITEM.
      IF SY-SUBRC = 0.
        LS_ZTK2_PHYSICAL_SP-ERNAM = LS_CHECK-ERNAM.
        LS_ZTK2_PHYSICAL_SP-ERDAT = LS_CHECK-ERDAT.
        LS_ZTK2_PHYSICAL_SP-ERZET = LS_CHECK-ERTIM.
        LS_ZTK2_PHYSICAL_SP-AENAM = I_DATA-AENAM.
        LS_ZTK2_PHYSICAL_SP-AEDAT = SY-DATUM.
        LS_ZTK2_PHYSICAL_SP-AEZET = SY-UZEIT.
        UPDATE ZSDSMMT024 FROM LS_ZTK2_PHYSICAL_SP.
      ELSE.
        LS_ZTK2_PHYSICAL_SP-ERNAM = I_DATA-ERNAM.
        LS_ZTK2_PHYSICAL_SP-ERDAT = SY-DATUM.
        LS_ZTK2_PHYSICAL_SP-ERZET = SY-UZEIT.
        INSERT ZSDSMMT024 FROM LS_ZTK2_PHYSICAL_SP.
      ENDIF.
      IF SY-SUBRC EQ 0.
        COMMIT WORK AND WAIT.
        C_MESSTYP = 'S'.
        C_MESSAGE = 'Data has been saved'.
      ELSE.
        C_MESSTYP = 'S'.
        C_MESSAGE = 'Cannot update!!Please try again.'.
      ENDIF.

    ENDIF.

  ENDMETHOD.
  METHOD UPDATA_PHYSICAL_SP.
    DATA : LV_PHYSINVENTORY TYPE IKPF-IBLNR,
           LV_FISCALYEAR    TYPE IKPF-GJAHR,
           LV_COUNT_DATE    TYPE IIKPF-ZLDAT.

    DATA : LT_ITEMS	 TYPE TABLE OF BAPI_PHYSINV_ITEM,
           LT_RETURN TYPE TABLE OF BAPIRET2.

    DATA : LS_ITEMS	TYPE BAPI_PHYSINV_ITEM.

    DATA : LS_HEAD  TYPE  BAPI_PHYSINV_HEAD.

    DATA : LT_IKPF TYPE TABLE OF IKPF,
           LS_IKPF TYPE IKPF.

    DATA : BEGIN OF LS_CHECK,
             IBLNR TYPE ZSDSMMT025-IBLNR,
             GJAHR TYPE ZSDSMMT025-GJAHR,
             ITEM  TYPE ZSDSMMT025-ITEM,
             ERNAM TYPE ZSDSMMT025-ERNAM,
             ERDAT TYPE ZSDSMMT025-ERDAT,
             ERTIM TYPE ZSDSMMT025-ERZET,
           END OF  LS_CHECK.

    DATA : LS_ZTK2_PHYSICAL_SP TYPE ZSDSMMT025.

    DATA : LV_TABIX TYPE SY-TABIX.

    LV_PHYSINVENTORY = I_DATA-IBLNR.
    LV_FISCALYEAR    = I_DATA-GJAHR.
    LV_COUNT_DATE    = SY-DATUM.

    CALL FUNCTION 'BAPI_MATPHYSINV_GETDETAIL'
      EXPORTING
        PHYSINVENTORY = LV_PHYSINVENTORY
        FISCALYEAR    = LV_FISCALYEAR
      IMPORTING
        HEAD          = LS_HEAD
      TABLES
        ITEMS         = LT_ITEMS
        RETURN        = LT_RETURN.


    READ TABLE LT_ITEMS INTO LS_ITEMS
    WITH KEY PHYSINVENTORY = I_DATA-IBLNR
             FISCALYEAR    = I_DATA-GJAHR
             ITEM          = I_DATA-ITEM.
    IF SY-SUBRC = 0.
      MOVE-CORRESPONDING LS_ITEMS TO LS_ZTK2_PHYSICAL_SP.

      LS_ZTK2_PHYSICAL_SP-IBLNR     = LS_ITEMS-PHYSINVENTORY.
      LS_ZTK2_PHYSICAL_SP-GJAHR     = LS_ITEMS-FISCALYEAR.
      LS_ZTK2_PHYSICAL_SP-ITEM      = LS_ITEMS-ITEM.
      LS_ZTK2_PHYSICAL_SP-LGPBE     = I_DATA-LGPBE.
      LS_ZTK2_PHYSICAL_SP-BUCHM     = I_DATA-BUCHM.
      LS_ZTK2_PHYSICAL_SP-ENTRY_QNT = I_DATA-ENTRY_QNT.
      LS_ZTK2_PHYSICAL_SP-REMARK    = I_DATA-REMARK.

      SELECT SINGLE IBLNR
                    GJAHR
                    ITEM
                    ERNAM
                    ERDAT
                    ERZET
        FROM ZSDSMMT025
        INTO LS_CHECK
        WHERE IBLNR = I_DATA-IBLNR
          AND GJAHR = I_DATA-GJAHR
          AND ITEM  = I_DATA-ITEM.
      IF SY-SUBRC = 0.
        LS_ZTK2_PHYSICAL_SP-ERNAM = LS_CHECK-ERNAM.
        LS_ZTK2_PHYSICAL_SP-ERDAT = LS_CHECK-ERDAT.
        LS_ZTK2_PHYSICAL_SP-ERZET = LS_CHECK-ERTIM.
        LS_ZTK2_PHYSICAL_SP-AENAM = I_DATA-AENAM.
        LS_ZTK2_PHYSICAL_SP-AEDAT = SY-DATUM.
        LS_ZTK2_PHYSICAL_SP-AEZET = SY-UZEIT.
        UPDATE ZSDSMMT025 FROM LS_ZTK2_PHYSICAL_SP.
      ELSE.
        LS_ZTK2_PHYSICAL_SP-ERNAM = I_DATA-ERNAM.
        LS_ZTK2_PHYSICAL_SP-ERDAT = SY-DATUM.
        LS_ZTK2_PHYSICAL_SP-ERZET = SY-UZEIT.
        INSERT ZSDSMMT025 FROM LS_ZTK2_PHYSICAL_SP.
      ENDIF.
      IF SY-SUBRC EQ 0.
        COMMIT WORK AND WAIT.
        C_MESSTYP = 'S'.
        C_MESSAGE = 'Data has been saved'.
      ELSE.
        C_MESSTYP = 'E'.
        C_MESSAGE = 'Cannot update!!Please try again.'.
      ENDIF.
    ELSE.
      C_MESSTYP = 'E'.
      C_MESSAGE = 'No data found'.
    ENDIF.

  ENDMETHOD.
  METHOD GET_REPORT.

    DATA : LV_PERNR  TYPE CHAR8,
           LV_PERNR1 TYPE CHAR8.

    DATA : LV_ERNAM TYPE SY-UNAME.

    DATA : LS_R LIKE LINE OF R.

    LV_PERNR1 = LV_PERNR = I_DATA-PERNR.
    LV_PERNR  = |{ LV_PERNR ALPHA = OUT }|.
    LV_PERNR1 = |{ LV_PERNR1 ALPHA = IN }|.

    LV_ERNAM  = I_DATA-ERNAM.

    SELECT DISTINCT ANLA~ANLN1,
                    ANLA~ANLN2,
                    ANLA~MCOA1,
                    ANLA~TXT50,
                    ANLA~INVZU,
                    ANLZ~KOSTL,
                    ANLZ~STORT,
                    ANLZ~RAUMN,
                    ANLZ~PERNR,
                    ZSDSFIT050~PERNR AS COUNT,
                    ZSDSFIT050~REMARK,
                    ZSDSFIT050~STATU,
                    ZSDSFIT050~ERNAM,
                    ZSDSFIT050~ERDAT,
                    ZSDSFIT050~ERZET,
                    ( A~VORNA && ' ' && A~NACHN ) AS OWNNA,
                    ( B~VORNA && ' ' && B~NACHN ) AS MGNNA,
                    ( C~VORNA && ' ' && C~NACHN ) AS INPNA,
*                    ( D~VORNA && ' ' && D~NACHN ) AS LOGNA,
                    T499S~KTEXT,
                    CSKT~LTEXT
    FROM ANLZ
    INNER JOIN ANLA ON ANLZ~BUKRS EQ ANLA~BUKRS AND
                       ANLZ~ANLN1 EQ ANLA~ANLN1 AND
                       ANLZ~ANLN2 EQ ANLA~ANLN2
    LEFT JOIN ZSDSFIT050 ON ANLA~ANLN1 EQ ZSDSFIT050~ANLN1 AND
                            ANLA~ANLN2 EQ ZSDSFIT050~ANLN2
*    LEFT JOIN ZSDSFIT055 ON ANLA~ANLN1 EQ ZSDSFIT055~ANLN1 AND
*                            ANLA~ANLN2 EQ ZSDSFIT055~ANLN2
    LEFT JOIN PA0002 AS A ON ANLZ~RAUMN       EQ A~PERNR   AND
                             A~ENDDA          GE @SY-DATUM AND
                             A~BEGDA          LE @SY-DATUM
    LEFT JOIN PA0002 AS B ON ANLZ~PERNR       EQ B~PERNR   AND
                             B~ENDDA          GE @SY-DATUM AND
                             B~BEGDA          LE @SY-DATUM
    LEFT JOIN PA0002 AS C ON ZSDSFIT050~PERNR EQ C~PERNR AND
                             C~ENDDA          GE @SY-DATUM AND
                             C~BEGDA          LE @SY-DATUM
*    LEFT JOIN PA0002 AS D ON ZSDSFIT055~PERNR EQ C~PERNR AND
*                             C~ENDDA          GE @SY-DATUM AND
*                             C~BEGDA          LE @SY-DATUM
    LEFT JOIN T499S ON ANLZ~WERKS EQ T499S~WERKS AND
                       ANLZ~STORT EQ T499S~STAND
    LEFT JOIN CSKT  ON ANLZ~KOSTL EQ CSKT~KOSTL
    WHERE ANLA~BUKRS EQ '1000'
      AND ANLZ~BDATU GE @SY-DATUM
      AND ANLZ~ADATU LE @SY-DATUM
      AND ( ANLZ~RAUMN EQ @LV_PERNR OR
            ANLZ~RAUMN EQ @LV_PERNR1 )
    INTO TABLE @DATA(LT_DATA).

    SELECT DISTINCT ANLA~ANLN1,
                    ANLA~ANLN2,
                    ANLA~MCOA1,
                    ANLA~TXT50,
                    ANLA~INVZU,
                    ANLZ~KOSTL,
                    ANLZ~STORT,
                    ANLZ~RAUMN,
                    ANLZ~PERNR,
                    ZSDSFIT055~PERNR AS COUNT,
                    ZSDSFIT055~REMARK,
                    ZSDSFIT055~STATU,
                    ZSDSFIT055~ERNAM,
                    ZSDSFIT055~ERDAT,
                    ZSDSFIT055~ERZET,
                    ( A~VORNA && ' ' && A~NACHN ) AS OWNNA,
                    ( B~VORNA && ' ' && B~NACHN ) AS MGNNA,
                    ( C~VORNA && ' ' && C~NACHN ) AS INPNA,
                    T499S~KTEXT,
                    CSKT~LTEXT
    FROM ZSDSFIT055
    INNER JOIN ANLA ON ZSDSFIT055~ANLN1 EQ ANLA~ANLN1 AND
                       ZSDSFIT055~ANLN2 EQ ANLA~ANLN2
    LEFT JOIN  ANLZ ON ANLA~BUKRS EQ ANLZ~BUKRS AND
                       ANLA~ANLN1 EQ ANLZ~ANLN1 AND
                       ANLA~ANLN2 EQ ANLZ~ANLN2 AND
                       ANLZ~BDATU GE @SY-DATUM  AND
                       ANLZ~ADATU LE @SY-DATUM
    LEFT JOIN PA0002 AS A ON ANLZ~RAUMN       EQ A~PERNR   AND
                             A~ENDDA          GE @SY-DATUM AND
                             A~BEGDA          LE @SY-DATUM
    LEFT JOIN PA0002 AS B ON ANLZ~PERNR       EQ B~PERNR   AND
                             B~ENDDA          GE @SY-DATUM AND
                             B~BEGDA          LE @SY-DATUM
    LEFT JOIN PA0002 AS C ON ZSDSFIT055~PERNR EQ C~PERNR AND
                             C~ENDDA          GE @SY-DATUM AND
                             C~BEGDA          LE @SY-DATUM
    LEFT JOIN T499S ON ANLZ~WERKS EQ T499S~WERKS AND
                       ANLZ~STORT EQ T499S~STAND
    LEFT JOIN CSKT  ON ANLZ~KOSTL EQ CSKT~KOSTL
    WHERE ( ( ZSDSFIT055~PERNR EQ @LV_PERNR OR
              ZSDSFIT055~PERNR EQ @LV_PERNR1 )
       OR ZSDSFIT055~ERNAM = @LV_ERNAM )
    INTO TABLE @DATA(LT_TMP).

    SORT LT_TMP BY ANLN1 ANLN2.
    DELETE ADJACENT DUPLICATES FROM LT_TMP COMPARING ANLN1 ANLN2.

    LOOP AT LT_DATA INTO DATA(LS_DATA).
      IF LS_DATA-INPNA IS NOT INITIAL.
        LS_R-ASSETNUMBER     = LS_DATA-ANLN1.
        LS_R-ASSETSUBNUMBER  = LS_DATA-ANLN2.
      ENDIF.
      LS_R-DESCRIPTION     = LS_DATA-TXT50.
      LS_R-REMARK          = LS_DATA-REMARK.
      LS_R-COUNTEDBY       = LS_DATA-INPNA.
      APPEND LS_R TO R.
      CLEAR : LS_R.
    ENDLOOP.

    LOOP AT LT_TMP INTO DATA(LS_TMP).
      READ TABLE R
      WITH KEY ASSETNUMBER    = LS_TMP-ANLN1
               ASSETSUBNUMBER = LS_TMP-ANLN2 TRANSPORTING NO FIELDS.
      IF SY-SUBRC NE 0.
        LS_R-ASSETNUMBER     = LS_TMP-ANLN1.
        LS_R-ASSETSUBNUMBER  = LS_TMP-ANLN2.
        LS_R-DESCRIPTION     = LS_TMP-TXT50.
        LS_R-REMARK          = LS_TMP-REMARK.
        LS_R-COUNTEDBY       = LS_TMP-INPNA.
        APPEND LS_R TO R.
        CLEAR : LS_R.
*      ELSE.
*        LS_R-COUNTEDBY       = LS_TMP-INPNA.
*        MODIFY R FROM LS_R TRANSPORTING COUNTEDBY
*                           WHERE ASSETNUMBER     = LS_TMP-ANLN1
*                             AND ASSETSUBNUMBER  = LS_TMP-ANLN2.
      ENDIF.
    ENDLOOP.

    SORT R BY ASSETNUMBER ASCENDING.
    DELETE ADJACENT DUPLICATES FROM R.
  ENDMETHOD.
  METHOD GET_ASSET_DESC.

    SELECT SINGLE ANLA~TXT50,
                  ZSDSFIT050~KOSTL,
                  ZSDSFIT050~PERNR
      FROM ANLA
      INNER JOIN ZSDSFIT050 ON ANLA~ANLN1 EQ ZSDSFIT050~ANLN1 AND
                               ANLA~ANLN2 EQ ZSDSFIT050~ANLN2
      INTO (@C_DESC,@C_COST,@DATA(LV_EMP))
      WHERE ANLA~BUKRS EQ '1000'
        AND ANLA~ANLN1 EQ @I_DATA-ANLN1
        AND ANLA~ANLN2 EQ @I_DATA-ANLN2.
    C_EMPC = LV_EMP.
    C_EMPC = |{ C_EMPC ALPHA = OUT }|.
    IF SY-SUBRC NE 0.
      SELECT SINGLE ANLA~TXT50,
                    ANLZ~KOSTL,
                    ANLZ~RAUMN
        FROM ANLA
        INNER JOIN ANLZ ON ANLA~BUKRS EQ ANLZ~BUKRS AND
                           ANLA~ANLN1 EQ ANLZ~ANLN1 AND
                           ANLA~ANLN2 EQ ANLZ~ANLN2 AND
                           ANLZ~BDATU GE @SY-DATUM
        INTO (@C_DESC,@C_COST,@DATA(LV_EMP1))
        WHERE ANLA~BUKRS EQ '1000'
          AND ANLA~ANLN1 EQ @I_DATA-ANLN1
          AND ANLA~ANLN2 EQ @I_DATA-ANLN2.
      C_EMPC = LV_EMP1.
      C_EMPC = |{ C_EMPC ALPHA = OUT }|.
    ENDIF.
  ENDMETHOD.
  METHOD COMMIT.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = ABAP_TRUE.
  ENDMETHOD.
  METHOD ROLLBACK.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ENDMETHOD.
  METHOD GET_ECC_ASSET.
    DATA : BEGIN OF LS_ASSET_LIST,
             INVZU TYPE ANLA-INVZU,
           END OF LS_ASSET_LIST.
    DATA : LT_ASSET_LIST LIKE TABLE OF LS_ASSET_LIST WITH EMPTY KEY.

    DATA : LV_SUB   TYPE C LENGTH 4,
           LV_ASSET TYPE C LENGTH 12.

    LV_SUB = I_DATA-ANLN2.
    LV_SUB = |{ LV_SUB ALPHA = OUT }|.

    LV_ASSET = I_DATA-ANLN1.
    LV_ASSET = |{ LV_ASSET ALPHA = OUT }|.

    CONCATENATE LV_ASSET LV_SUB INTO LS_ASSET_LIST-INVZU SEPARATED BY SPACE.
*    APPEND LS_ASSET_LIST TO LT_ASSET_LIST.
*    CLEAR LS_ASSET_LIST.

    SELECT SINGLE ANLA~ANLN1,
                  ANLA~ANLN2,
                  ANLA~TXT50,
                  ANLZ~KOSTL,
                  ANLZ~RAUMN
      FROM ANLA
      INNER JOIN ANLZ ON ANLA~BUKRS EQ ANLZ~BUKRS AND
                         ANLA~ANLN1 EQ ANLZ~ANLN1 AND
                         ANLA~ANLN2 EQ ANLZ~ANLN2 AND
                         ANLZ~BDATU GE @SY-DATUM
      INTO (@C_ASST,@C_SUBA,@C_DESC,@C_COST,@DATA(LV_EMP))
      WHERE ANLA~BUKRS EQ '1000'
        AND ANLA~INVZU EQ @LS_ASSET_LIST-INVZU.
    C_EMPC = LV_EMP.
    C_EMPC = |{ C_EMPC ALPHA = OUT }|.

  ENDMETHOD.
  METHOD GET_AUTO.
    DATA : LV_EMP TYPE CHAR8.

    LV_EMP = I_DATA-PERNR.
    LV_EMP = |{ LV_EMP ALPHA = OUT }|.

    SELECT COUNT( * )
      FROM ZSDSCAC009
      WHERE PROCESS EQ LV_EMP
        AND STATU   EQ ABAP_TRUE.
    IF SY-SUBRC EQ 0.
      C_AUTO = 'AUTO'.
    ELSE.
      CLEAR : C_AUTO.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
