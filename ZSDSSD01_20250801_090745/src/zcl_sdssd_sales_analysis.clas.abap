CLASS ZCL_SDSSD_SALES_ANALYSIS DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

*-----------------------------------------------------------------------
*  Program ID         : ZSDSSDR0190
*  Creation Date      : 27.06.2024
*  Author             : Thanapong C. (Eviden)
*  Add-on ID          : ZSDR002
*  Description        : Class utility for Sales Analysis Report
*  Purpose            : To retrieve the sales billing with linked quotes orders,
*                       deliveries, and shipments. Supports monthly summaries
*                       and drill-down to billing details
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer     Description
*-----------------------------------------------------------------------
*  06.01.2025  F36K910659  Thanapong C.   CH01 - 420000116, 420000199
*                                         1. Change logic display Customer name
*                                            for one time customer
*                                         2. Fixed logic to calculate BOM
*-----------------------------------------------------------------------
*  20.01.2025  F36K911286  Thanapong C.   CH02 - 420000199
*                                         1. Change logic of fields as follows:
*                                            - Price/Unit
*                                            - Work Condition QT
*                                            - Service Order
*                                            - Service Order WBS
*                                            - Cause of Failure
*                                            - Place of Failure
*                                            - Service sub-contract team
*                                            - Management Number(After Service)
*                                         2. Change logic to display Header
*                                            BOM Material refer. (MATNR_BOM)
*                                         3. Bug-Fixed logic to Price/Unit
*                                            and Service Order WBS
*-----------------------------------------------------------------------
*  28.02.2025  F36K913259  Thanapong C.   CH03 - 420000458
*                                         1. Bug-Fixed logic of Fiscal Year
*-----------------------------------------------------------------------

    TYPES:
      TT_VTWEG_RANGE TYPE RANGE OF VBRK-VTWEG .
    TYPES:
      TT_SPART_RANGE TYPE RANGE OF VBRP-SPART .
    TYPES:
      TT_VKBUR_RANGE TYPE RANGE OF VBRP-VKBUR .
    TYPES:
      TT_VKGRP_RANGE TYPE RANGE OF VBRP-VKGRP .
    TYPES:
      TT_KUNAG_RANGE TYPE RANGE OF VBRK-KUNAG .
    TYPES:
      TT_FKART_RANGE TYPE RANGE OF VBRK-FKART .
    TYPES:
      TT_FKDAT_RANGE TYPE RANGE OF VBRK-FKDAT .
    TYPES:
      TT_VBELN_RANGE TYPE RANGE OF VBRK-VBELN .
    TYPES:
      TT_VBTYP_RANGE TYPE RANGE OF VBRK-VBTYP .
    TYPES:
      TT_MATNR_RANGE TYPE RANGE OF VBRP-MATNR .
    TYPES:
      TT_PRODH_RANGE TYPE RANGE OF VBRP-PRODH .
    TYPES:
      TT_PERNR_RANGE TYPE RANGE OF VBPA-PERNR .
    TYPES:
      TT_BSTKD_RANGE TYPE RANGE OF VBKD-BSTKD .
    TYPES:
      TT_KVGR2_RANGE TYPE RANGE OF VBRP-KVGR2 .
    TYPES:
      TT_BNAME_RANGE TYPE RANGE OF VBAK-BNAME .

    TYPES:
      BEGIN OF TS_DATA.
        INCLUDE TYPE ZSDSSDS040.
    TYPES: POSID            TYPE PRPS-POSID,                   "CH02.01+
        SERV_OBJECT_TYPE TYPE CRMS4D_SERV_H-AC_OBJECT_TYPE, "CH02.01+
      END OF TS_DATA .
    TYPES:
      TT_DATA TYPE STANDARD TABLE OF TS_DATA WITH EMPTY KEY .
    TYPES:
      BEGIN OF TS_PSTYV,
        PSTYV TYPE VBRP-PSTYV,
      END OF TS_PSTYV .
    TYPES:
      TT_PSTYV TYPE HASHED TABLE OF TS_PSTYV
                                     WITH UNIQUE KEY PSTYV .
    TYPES:
      BEGIN OF TS_STRING,
        LINE TYPE STRING,
      END OF TS_STRING .
    TYPES:
      TT_STRING TYPE SORTED TABLE OF TS_STRING
                                      WITH UNIQUE KEY LINE .
    TYPES:
      BEGIN OF TS_GENC,
        T_ITEMCAT_BOM          TYPE TT_PSTYV,
        SD_DOCCAT_BILL_RANGE   TYPE RANGE OF VBRK-VBTYP,
        SD_DOCCAT_RANGE        TYPE RANGE OF VBAK-VBTYP,
        DISCOUNT_HD_RANGE      TYPE RANGE OF PRCD_ELEMENTS-KSCHL,
        DISCOUNT_CASH_RANGE    TYPE RANGE OF PRCD_ELEMENTS-KSCHL,
        ITEMCAT_BOM_RANGE      TYPE RANGE OF VBRP-PSTYV,
        BILLTYPE_MINUS_RANGE   TYPE RANGE OF VBRK-FKART,
        CUST_ACCT_GRP_OT_RANGE TYPE RANGE OF KNA1-KTOKD,  "CH01.01+
        BILLTYPE_CM_RANGE      TYPE RANGE OF VBRK-FKART,  "CH02.01+
        BILLTYPE_PROJ_RANGE    TYPE RANGE OF VBRK-FKART,  "CH02.03+
      END OF TS_GENC .
    TYPES:
      BEGIN OF TS_VBELN,
        VBELN TYPE VBAK-VBELN,
      END OF TS_VBELN .
    TYPES:
      TT_VBELN TYPE HASHED TABLE OF TS_VBELN
                                     WITH UNIQUE KEY VBELN .
    TYPES:
      BEGIN OF TS_T001L_KEY,
        WERKS TYPE T001L-WERKS,
        LGORT TYPE T001L-LGORT,
      END OF TS_T001L_KEY .
    TYPES:
      TT_T001L_KEY TYPE HASHED TABLE OF TS_T001L_KEY
                                    WITH UNIQUE KEY WERKS LGORT .
    TYPES:
      BEGIN OF TS_T001L,
        WERKS TYPE T001L-WERKS,
        LGORT TYPE T001L-LGORT,
        LGOBE TYPE T001L-LGOBE,
      END OF TS_T001L .
    TYPES:
      TT_T001L TYPE HASHED TABLE OF TS_T001L
                          WITH UNIQUE KEY WERKS LGORT .
    TYPES:
      BEGIN OF TS_ADR6_CUST,
        KUNNR      TYPE KNA1-KUNNR,
        ADDRNUMBER TYPE ADR6-ADDRNUMBER,
        SMTP_ADDR  TYPE ADR6-SMTP_ADDR,
      END OF TS_ADR6_CUST .
    TYPES:
      TT_ADR6_CUST TYPE SORTED TABLE OF TS_ADR6_CUST
                              WITH UNIQUE KEY KUNNR .
    TYPES:
      BEGIN OF TS_OBJECT_ID,
        OBJECT_ID TYPE CRMS4D_SERV_H-OBJECT_ID,
      END OF TS_OBJECT_ID .
    TYPES:
      TT_OBJECT_ID TYPE HASHED TABLE OF TS_OBJECT_ID
                                         WITH UNIQUE KEY OBJECT_ID .
    TYPES:
      BEGIN OF TS_KUNNR,
        KUNNR TYPE KNA1-KUNNR,
      END OF TS_KUNNR .
    TYPES:
      TT_KUNNR TYPE HASHED TABLE OF TS_KUNNR
                                    WITH UNIQUE KEY KUNNR .
    TYPES:
      BEGIN OF TS_VKORG,
        VKORG TYPE VBRK-VKORG,
      END OF TS_VKORG .
    TYPES:
      TT_VKORG TYPE HASHED TABLE OF TS_VKORG
                                     WITH UNIQUE KEY VKORG .
    TYPES:
      BEGIN OF TS_VTWEG,
        VTWEG TYPE VBRK-VTWEG,
      END OF TS_VTWEG .
    TYPES:
      TT_VTWEG TYPE HASHED TABLE OF TS_VTWEG
                                    WITH UNIQUE KEY VTWEG .
    TYPES:
      BEGIN OF TS_FKART,
        FKART TYPE TVFKT-FKART,
      END OF TS_FKART .
    TYPES:
      TT_FKART TYPE HASHED TABLE OF TS_FKART
                                    WITH UNIQUE KEY FKART .
    TYPES:
      BEGIN OF TS_XBLNR,
        XBLNR TYPE BKPF-XBLNR,
      END OF TS_XBLNR .
    TYPES:
      TT_XBLNR TYPE HASHED TABLE OF TS_XBLNR
                                     WITH UNIQUE KEY XBLNR .
    TYPES:
      BEGIN OF TS_MATNR,
        MATNR TYPE MARA-MATNR,
      END OF TS_MATNR .
    TYPES:
      TT_MATNR TYPE HASHED TABLE OF TS_MATNR
                                     WITH UNIQUE KEY MATNR .
    TYPES:
      BEGIN OF TS_MARA,
        MATNR  TYPE MARA-MATNR,
        ZZREFT TYPE MARA-ZZREFT,
        ZZSCF  TYPE MARA-ZZSCF,
        MFRNR  TYPE MARA-MFRNR,
      END OF TS_MARA .
    TYPES:
      TT_MARA TYPE HASHED TABLE OF TS_MARA
                                   WITH UNIQUE KEY MATNR .
    TYPES:
      BEGIN OF TS_T001W,
        WERKS TYPE T001W-WERKS,
        NAME1 TYPE T001W-NAME1,
      END OF TS_T001W .
    TYPES:
      TT_T001W TYPE HASHED TABLE OF TS_T001W
                                    WITH UNIQUE KEY WERKS .
    TYPES:
      BEGIN OF TS_WERKS ,
        WERKS TYPE T001W-WERKS,
      END OF TS_WERKS .
    TYPES:
      TT_WERKS TYPE HASHED TABLE OF TS_WERKS
                                    WITH UNIQUE KEY WERKS .
    TYPES:
      BEGIN OF TS_PSPNR,
        PSPNR TYPE PRPS-PSPNR,
      END OF TS_PSPNR .
    TYPES:
      TT_PSPNR TYPE HASHED TABLE OF TS_PSPNR
                                     WITH UNIQUE KEY PSPNR .
    TYPES:
      BEGIN OF TS_PROJECT,
        PSPNR    TYPE PRPS-PSPNR,
        POSID    TYPE PRPS-POSID,
        PSPHI    TYPE PRPS-PSPHI,
        PSPHI_TX TYPE PROJ-POST1,
      END OF TS_PROJECT .
    TYPES:
      TT_PROJECT TYPE HASHED TABLE OF TS_PROJECT
                                       WITH UNIQUE KEY PSPNR .
    TYPES:
      BEGIN OF TS_BILL_TEXT_H,
        VBELN    TYPE VBRK-VBELN,
        VKORG    TYPE VBRK-VKORG,
        VKORG_TX TYPE TVKOT-VTEXT,
        VTWEG    TYPE VBRK-VTWEG,
        VTWEG_TX TYPE TVTWT-VTEXT,
        SPART    TYPE VBRK-SPART,
        SPART_TX TYPE TSPAT-VTEXT,
        FKART    TYPE VBRK-FKART,
        FKART_TX TYPE TVFKT-VTEXT,
      END OF TS_BILL_TEXT_H .
    TYPES:
      TT_BILL_TEXT_H TYPE HASHED TABLE OF TS_BILL_TEXT_H
                                           WITH UNIQUE KEY VBELN .
    TYPES:
      BEGIN OF TS_DELIVERY,
        VBELN    TYPE VBRK-VBELN,
        DO_VBELN TYPE LIKP-VBELN,
        ERDAT    TYPE LIKP-ERDAT,
        ERZET    TYPE LIKP-ERZET,
        LFDAT    TYPE LIKP-LFDAT,
        VSTEL    TYPE LIKP-VSTEL,
        LSTEL    TYPE LIKP-LSTEL,
      END OF TS_DELIVERY .
    TYPES:
      TT_DELIVERY TYPE SORTED TABLE OF TS_DELIVERY
                                       WITH NON-UNIQUE KEY VBELN .
*BOI CH02.01
    TYPES: BEGIN OF TS_SERV_ORDER,
             VBELN      TYPE VBFA-VBELN,
             BILL_REQ   TYPE VBFA-VBELV,
             SERV_ORDER TYPE VBFA-VBELV,
           END OF TS_SERV_ORDER.
    TYPES TT_SERV_ORDER TYPE SORTED TABLE OF TS_SERV_ORDER
                             WITH NON-UNIQUE KEY VBELN.
*EOI CH02.01

    TYPES:
      BEGIN OF TS_VBRK,
        VBELN TYPE VBRK-VBELN,
        VKORG TYPE VBRK-VKORG,
        VTWEG TYPE VBRK-VTWEG,
        SPART TYPE VBRK-SPART,
        FKART TYPE VBRK-FKART,
        ZTERM TYPE VBRK-ZTERM,
      END OF TS_VBRK .
    TYPES:
      TT_VBRK TYPE HASHED TABLE OF TS_VBRK
                                    WITH UNIQUE KEY VBELN .
    TYPES:
      BEGIN OF TS_VBAP_KEY,
        VBELN TYPE VBRP-VBELN,
        POSNR TYPE VBRP-POSNR,
      END OF TS_VBAP_KEY .
    TYPES:
      TT_VBRP_KEY TYPE HASHED TABLE OF TS_VBAP_KEY
                             WITH UNIQUE KEY VBELN POSNR .
    TYPES:
      BEGIN OF TS_VBRP,
        VBELN TYPE VBRP-VBELN,
        POSNR TYPE VBRP-POSNR,
        PSTYV TYPE VBRP-PSTYV,
      END OF TS_VBRP .
    TYPES:
      TT_VBRP TYPE HASHED TABLE OF TS_VBRP
                                    WITH UNIQUE KEY VBELN POSNR .
    TYPES:
      BEGIN OF TS_PRCD_EL_KEY,
        KNUMV TYPE PRCD_ELEMENTS-KNUMV,
        KPOSN TYPE PRCD_ELEMENTS-KPOSN,
      END OF TS_PRCD_EL_KEY .
    TYPES:
      TT_PRCD_EL_KEY TYPE HASHED TABLE OF TS_PRCD_EL_KEY
                                           WITH UNIQUE KEY KNUMV KPOSN .
    TYPES:
      BEGIN OF TS_VBAK,
        VBELN TYPE VBAK-VBELN,
        KVGR1 TYPE VBAK-KVGR1,
        KVGR2 TYPE VBAK-KVGR2,
        AUGRU TYPE VBAK-AUGRU,
      END OF TS_VBAK .
    TYPES:
      TT_VBAK TYPE HASHED TABLE OF TS_VBAK
                                   WITH UNIQUE KEY VBELN .
    TYPES:
      BEGIN OF TS_KVGR1,
        KVGR1 TYPE TVV1T-KVGR1,
      END OF TS_KVGR1 .
    TYPES:
      TT_KVGR1 TYPE HASHED TABLE OF TS_KVGR1
                                    WITH UNIQUE KEY KVGR1 .
    TYPES:
      BEGIN OF TS_TVV1T,
        SPRAS TYPE TVV1T-SPRAS,
        KVGR1 TYPE TVV1T-KVGR1,
        BEZEI TYPE TVV1T-BEZEI,
      END OF TS_TVV1T .
    TYPES:
      TT_TVV1T TYPE HASHED TABLE OF TS_TVV1T
                                    WITH UNIQUE KEY SPRAS KVGR1 .
    TYPES:
      BEGIN OF TS_ZTERM,
        ZTERM TYPE T052U-ZTERM,
      END OF TS_ZTERM .
    TYPES:
      TT_ZTERM TYPE HASHED TABLE OF TS_ZTERM
                                    WITH UNIQUE KEY ZTERM .
    TYPES:
      BEGIN OF TS_T052U,
        SPRAS TYPE T052U-SPRAS,
        ZTERM TYPE T052U-ZTERM,
        TEXT1 TYPE T052U-TEXT1,
      END OF TS_T052U .
    TYPES:
      TT_T052U TYPE HASHED TABLE OF TS_T052U
                                    WITH UNIQUE KEY SPRAS ZTERM .
    TYPES:
      BEGIN OF TS_KVGR2,
        KVGR2 TYPE TVV2T-KVGR2,
      END OF TS_KVGR2 .
    TYPES:
      TT_KVGR2 TYPE HASHED TABLE OF TS_KVGR2
                                    WITH UNIQUE KEY KVGR2 .
    TYPES:
      BEGIN OF TS_TVV2T,
        SPRAS TYPE TVV2T-SPRAS,
        KVGR2 TYPE TVV2T-KVGR2,
        BEZEI TYPE TVV2T-BEZEI,
      END OF TS_TVV2T .
    TYPES:
      TT_TVV2T TYPE HASHED TABLE OF TS_TVV2T
                                    WITH UNIQUE KEY SPRAS KVGR2 .
    TYPES:
      BEGIN OF TS_TVFKT,
        SPRAS TYPE TVFKT-SPRAS,
        FKART TYPE TVFKT-FKART,
        VTEXT TYPE TVFKT-VTEXT,
      END OF TS_TVFKT .
    TYPES:
      TT_TVFKT TYPE HASHED TABLE OF TS_TVFKT
                                     WITH UNIQUE KEY SPRAS FKART .
    TYPES:
      BEGIN OF TS_BKPF,
        XBLNR TYPE BKPF-XBLNR,
        BELNR TYPE BKPF-BELNR,
      END OF TS_BKPF .
    TYPES:
      TT_BKPF TYPE SORTED TABLE OF TS_BKPF
                                   WITH NON-UNIQUE KEY XBLNR .
    TYPES:
      BEGIN OF TS_VKBUR,
        VKBUR TYPE TVKBT-VKBUR,
      END OF TS_VKBUR .
    TYPES:
      TT_VKBUR TYPE HASHED TABLE OF TS_VKBUR
                                     WITH UNIQUE KEY VKBUR .
    TYPES:
      BEGIN OF TS_TVKBT,
        SPRAS TYPE TVKBT-SPRAS,
        VKBUR TYPE TVKBT-VKBUR,
        BEZEI TYPE TVKBT-BEZEI,
      END OF TS_TVKBT .
    TYPES:
      TT_TVKBT TYPE HASHED TABLE OF TS_TVKBT
                                     WITH UNIQUE KEY SPRAS VKBUR .
    TYPES:
      BEGIN OF TS_KNUMV,
        KNUMV TYPE PRCD_ELEMENTS-KNUMV,
      END OF TS_KNUMV .
    TYPES:
      TT_KNUMV TYPE HASHED TABLE OF TS_KNUMV
                                     WITH UNIQUE KEY KNUMV .
    TYPES:
      BEGIN OF TS_PERNR,
        PERNR TYPE PA0002-PERNR,
      END OF TS_PERNR .
    TYPES:
      TT_PERNR TYPE HASHED TABLE OF TS_PERNR
                                      WITH UNIQUE KEY PERNR .
    TYPES:
      BEGIN OF TS_PA0002,
        PERNR TYPE PA0002-PERNR,
        NAME  TYPE CHAR90,
      END OF TS_PA0002 .
    TYPES:
      TT_PA0002 TYPE HASHED TABLE OF TS_PA0002
                                      WITH UNIQUE KEY PERNR .
    TYPES:
      BEGIN OF TS_VKGRP,
        VKGRP TYPE TVGRT-VKGRP,
      END OF TS_VKGRP .
    TYPES:
      TT_VKGRP TYPE HASHED TABLE OF TS_VKGRP
                                     WITH UNIQUE KEY VKGRP .
    TYPES:
      BEGIN OF TS_TVGRT,
        SPRAS TYPE TVGRT-SPRAS,
        VKGRP TYPE TVGRT-VKGRP,
        BEZEI TYPE TVGRT-BEZEI,
      END OF TS_TVGRT .
    TYPES:
      TT_TVGRT TYPE HASHED TABLE OF TS_TVGRT
                                     WITH UNIQUE KEY SPRAS VKGRP .
    TYPES:
      BEGIN OF TS_ABRVW,
        ABRVW TYPE TVLVT-ABRVW,
      END OF TS_ABRVW .
    TYPES:
      TT_ABRVW TYPE HASHED TABLE OF TS_ABRVW
                                         WITH UNIQUE KEY ABRVW .
    TYPES:
      BEGIN OF TS_TVLVT,
        SPRAS TYPE TVLVT-SPRAS,
        ABRVW TYPE TVLVT-ABRVW,
        BEZEI TYPE TVLVT-BEZEI,
      END OF TS_TVLVT .
    TYPES:
      TT_TVLVT TYPE HASHED TABLE OF TS_TVLVT
                                     WITH UNIQUE KEY SPRAS ABRVW .
    TYPES:
      BEGIN OF TS_SPART,
        SPART TYPE TSPAT-SPART,
      END OF TS_SPART .
    TYPES:
      TT_SPART TYPE HASHED TABLE OF TS_SPART
                                     WITH UNIQUE KEY SPART .
    TYPES:
      BEGIN OF TS_TSPAT,
        SPRAS TYPE TSPAT-SPRAS,
        SPART TYPE TSPAT-SPART,
        VTEXT TYPE TSPAT-VTEXT,
      END OF TS_TSPAT .
    TYPES:
      TT_TSPAT TYPE HASHED TABLE OF TS_TSPAT
                                     WITH UNIQUE KEY SPRAS SPART .
    TYPES:
      BEGIN OF TS_BILL,
        VBELN      TYPE VBRK-VBELN,
        POSNR      TYPE VBRP-POSNR,
        FKDAT      TYPE VBRK-FKDAT,
        VKORG      TYPE VBRK-VKORG,
        VTWEG      TYPE VBRK-VTWEG,
        KUNAG      TYPE VBRK-KUNAG,
        XBLNR      TYPE VBRK-XBLNR,
        ZTERM      TYPE VBRK-ZTERM,
        WAERK      TYPE VBRK-WAERK,
        KNUMV      TYPE VBRK-KNUMV,
        ZUONR      TYPE VBRK-ZUONR,
        FKART      TYPE VBRK-FKART,
        BSTKD      TYPE VBKD-BSTKD,
        BSTKD_E    TYPE VBKD-BSTKD_E,
        SPART      TYPE VBRP-SPART,
        VKBUR      TYPE VBRP-VKBUR,
        VKGRP      TYPE VBRP-VKGRP,
        ABRVW      TYPE VBRP-ABRVW,
        MATNR      TYPE VBRP-MATNR,
        ARKTX      TYPE VBRP-ARKTX,
        PRODH      TYPE VBRP-PRODH,
        UEPOS      TYPE VBRP-UEPOS,
        WERKS      TYPE VBRP-WERKS,
        LGORT      TYPE VBRP-LGORT,
        PSTYV      TYPE VBRP-PSTYV,
        FKIMG      TYPE VBRP-FKIMG,
        NTGEW      TYPE VBRP-NTGEW,
        BRGEW      TYPE VBRP-BRGEW,
        VRKME      TYPE VBRP-VRKME,
        VOLUM      TYPE VBRP-VOLUM,
        PRCTR      TYPE VBRP-PRCTR,
        PS_PSP_PNR TYPE VBRP-PS_PSP_PNR,
        MWSBP      TYPE VBRP-MWSBP,
        NETWR      TYPE VBRP-NETWR,
        AUBEL      TYPE VBRP-AUBEL,
        UPMAT      TYPE VBRP-UPMAT,
        AUFNR      TYPE VBRP-AUFNR,             "CH02.01+
        SO_VBELN   TYPE VBAK-VBELN,
        BNAME      TYPE VBAK-BNAME,
        KVGR1      TYPE VBAK-KVGR1,
        KVGR2      TYPE VBAK-KVGR2,
        AUART      TYPE VBAK-AUART,
        AUDAT      TYPE VBAK-AUDAT,
        ERNAM      TYPE VBAK-ERNAM,
        IHREZ      TYPE VBAK-IHREZ,
        AUGRU      TYPE VBAK-AUGRU,
        PERNR      TYPE VBPA-PERNR,
      END OF TS_BILL .
    TYPES:
      TT_BILL TYPE STANDARD TABLE OF TS_BILL
                                    WITH EMPTY KEY .
    TYPES:
      BEGIN OF TS_BILL_BOM_ITEM,
        VBELN TYPE VBRP-VBELN,
        UEPOS TYPE VBRP-UEPOS,
        POSNR TYPE VBRP-POSNR,
        NETWR TYPE VBRP-NETWR,
        MWSBP TYPE VBRP-MWSBP,
        KNUMV TYPE VBRK-KNUMV,
      END OF TS_BILL_BOM_ITEM .
    TYPES:
      TT_BILL_BOM_ITEM TYPE STANDARD TABLE OF TS_BILL_BOM_ITEM
                                             WITH EMPTY KEY .
    TYPES:
      BEGIN OF TS_TVTWT,
        SPRAS TYPE TVTWT-SPRAS,
        VTWEG TYPE TVTWT-VTWEG,
        VTEXT TYPE TVTWT-VTEXT,
      END OF TS_TVTWT .
    TYPES:
      TT_TVTWT TYPE HASHED TABLE OF TS_TVTWT
                                     WITH UNIQUE KEY SPRAS VTWEG .
    TYPES:
      BEGIN OF TS_TVKOT,
        SPRAS TYPE TVKOT-SPRAS,
        VKORG TYPE TVKOT-VKORG,
        VTEXT TYPE TVKOT-VTEXT,
      END OF TS_TVKOT .
    TYPES:
      TT_TVKOT  TYPE HASHED TABLE OF TS_TVKOT
                                      WITH UNIQUE KEY SPRAS VKORG .
    TYPES:
      BEGIN OF TS_KNB1,
        KUNNR TYPE KNA1-KUNNR,
        ADRNR TYPE KNA1-ADRNR,
        TELF2 TYPE KNA1-TELF2,
        ERDAT TYPE KNA1-ERDAT,
        BUSAB TYPE KNB1-BUSAB,
        BUKRS TYPE KNB1-BUKRS,
        KUKLA TYPE KNA1-KUKLA,
        KTOKD TYPE KNA1-KTOKD, "CH01.01+
      END OF TS_KNB1 .
    TYPES:
      TT_KNB1 TYPE HASHED TABLE OF TS_KNB1
                     WITH UNIQUE KEY KUNNR .
    TYPES:
      BEGIN OF TS_TKUKT ,
        SPRAS TYPE TKUKT-SPRAS,
        KUKLA TYPE TKUKT-KUKLA,
        VTEXT TYPE TKUKT-VTEXT,
      END OF TS_TKUKT .
    TYPES:
      TT_TKUKT TYPE HASHED TABLE OF TS_TKUKT
                                     WITH UNIQUE KEY SPRAS KUKLA .
    TYPES:
      BEGIN OF TS_T001S,
        BUKRS TYPE T001S-BUKRS,
        BUSAB TYPE T001S-BUSAB,
        SNAME TYPE T001S-SNAME,
      END OF TS_T001S .
    TYPES:
      TT_T001S TYPE HASHED TABLE OF TS_T001S
                                     WITH UNIQUE KEY BUKRS BUSAB .
    TYPES:
      BEGIN OF TS_TVLAT_KEY,
        VSTEL TYPE TVLAT-VSTEL,
        LSTEL TYPE TVLAT-LSTEL,
      END OF TS_TVLAT_KEY .
    TYPES:
      TT_TVLAT_KEY TYPE HASHED TABLE OF TS_TVLAT_KEY
                                         WITH UNIQUE KEY VSTEL LSTEL .
    TYPES:
      BEGIN OF TS_TVLAT,
        SPRAS TYPE TVLAT-SPRAS,
        VSTEL TYPE TVLAT-VSTEL,
        LSTEL TYPE TVLAT-LSTEL,
        VTEXT TYPE TVLAT-VTEXT,
      END OF TS_TVLAT .
    TYPES:
      TT_TVLAT TYPE HASHED TABLE OF TS_TVLAT
                                     WITH UNIQUE KEY SPRAS VSTEL LSTEL .
    TYPES:
      BEGIN OF TS_AUGRU,
        AUGRU TYPE TVAUT-AUGRU,
      END OF TS_AUGRU .
    TYPES:
      TT_AUGRU TYPE HASHED TABLE OF TS_AUGRU
                                     WITH UNIQUE KEY AUGRU .
    TYPES:
      BEGIN OF TS_TVAUT,
        SPRAS TYPE TVAUT-SPRAS,
        AUGRU TYPE TVAUT-AUGRU,
        BEZEI TYPE TVAUT-BEZEI,
      END OF TS_TVAUT .
    TYPES:
      TT_TVAUT TYPE HASHED TABLE OF TS_TVAUT
                                     WITH UNIQUE KEY SPRAS AUGRU .
    TYPES:
      BEGIN OF TS_PRPS,
        PSPNR    TYPE PRPS-PSPNR,
        PSPHI    TYPE PRPS-PSPHI,
        PSPHI_TX TYPE PROJ-POST1,
      END OF TS_PRPS .
    TYPES:
      TT_PRPS  TYPE HASHED TABLE OF TS_PRPS
                                     WITH UNIQUE KEY PSPNR .
    TYPES:
      BEGIN OF TS_BUT050,
        PARTNER1 TYPE BUT050-PARTNER1,
        PARTNER2 TYPE BUT050-PARTNER2,
      END OF TS_BUT050 .
    TYPES:
      TT_BUT050 TYPE SORTED TABLE OF TS_BUT050
                                     WITH NON-UNIQUE KEY PARTNER1 .
    TYPES:
      BEGIN OF TS_SERVICE,
        OBJECT_ID          TYPE CRMS4D_SERV_I-OBJECT_ID,
        NUMBER_INT         TYPE CRMS4D_SERV_I-NUMBER_INT,
        NUMBER_EXT         TYPE CRMS4D_SERV_I-NUMBER_EXT,
        ZZ1_VENDOR_TEAM    TYPE CRMS4D_SERV_I-ZZ1_VENDOR_TEAM,
        ZZ1_EXT_REFNO      TYPE CRMS4D_SERV_H-ZZ1_EXT_REFNO,
        INBOX_STATUS       TYPE CRMS4D_SERV_H-INBOX_STATUS,
        AC_ASSIGNMENT      TYPE CRMS4D_SERV_H-AC_ASSIGNMENT,
        AC_OBJECT_TYPE     TYPE CRMS4D_SERV_H-AC_OBJECT_TYPE,
        HEAD_CHANGED_AT    TYPE CRMS4D_SERV_H-HEAD_CHANGED_AT,
        CONTSTART          TYPE CRMS4D_SERV_H-CONTSTART,
        CONTEND            TYPE CRMS4D_SERV_H-CONTEND,
        PO_NUMBER_SOLD     TYPE CRMS4D_SERV_H-PO_NUMBER_SOLD,
        SRV_CUST_BEG       TYPE CRMS4D_SERV_H-SRV_CUST_BEG,
        ZZ1_BREAK_POSITION TYPE CRMS4D_SERV_H-ZZ1_BREAK_POSITION,
      END OF TS_SERVICE .
    TYPES:
      TT_SERVICE TYPE SORTED TABLE OF TS_SERVICE
                                      WITH UNIQUE KEY OBJECT_ID NUMBER_INT .
    TYPES:
      BEGIN OF TS_DISCOUNT,
        KNUMV     TYPE PRCD_ELEMENTS-KNUMV,
        SUM_KWERT TYPE VFPRC_ELEMENT_AMOUNT,
      END OF TS_DISCOUNT .
    TYPES:
      TT_DISCOUNT TYPE SORTED TABLE OF TS_DISCOUNT
                                      WITH NON-UNIQUE KEY KNUMV .
    TYPES:
      BEGIN OF TS_PRCD_EL,
        KNUMV TYPE PRCD_ELEMENTS-KNUMV,
        KPOSN TYPE PRCD_ELEMENTS-KPOSN,
        KSCHL TYPE PRCD_ELEMENTS-KSCHL,
        KBETR TYPE PRCD_ELEMENTS-KBETR,
        KWERT TYPE PRCD_ELEMENTS-KWERT,
      END OF TS_PRCD_EL .
    TYPES:
      TT_PRCD_EL TYPE SORTED TABLE OF TS_PRCD_EL
*                      WITH NON-UNIQUE KEY KNUMV KPOSN .      "CH02.01-
                      WITH NON-UNIQUE KEY KNUMV KPOSN KSCHL.  "CH02.01+

    TYPES:
      BEGIN OF TS_ADRC_CUST,
        KUNNR      TYPE C LENGTH 10,
        NATION     TYPE ADRC-NATION,
        ADDRNUMBER TYPE ADRC-ADDRNUMBER,
        TEL_NUMBER TYPE ADRC-TEL_NUMBER,
        NAME       TYPE C LENGTH 81,
        STREET     TYPE ADRC-STREET,
        STR_SUPPL3 TYPE ADRC-STR_SUPPL3,
        LOCATION   TYPE ADRC-LOCATION,
        STR_SUPPL1 TYPE ADRC-STR_SUPPL1,
        STR_SUPPL2 TYPE ADRC-STR_SUPPL2,
        CITY2      TYPE ADRC-CITY2,
        CITY1      TYPE ADRC-CITY1,
        POST_CODE1 TYPE ADRC-POST_CODE1,
      END OF TS_ADRC_CUST .
    TYPES:
      TT_ADRC_CUST TYPE SORTED TABLE OF TS_ADRC_CUST
                                        WITH NON-UNIQUE KEY KUNNR NATION .
    TYPES:
      BEGIN OF TS_ADV_RECT,
        VBELN TYPE ZSDSSDT010-VBELN,
        BELNR TYPE ZSDSSDT010-BELNR,
      END OF TS_ADV_RECT .
    TYPES:
      TT_ADV_RECT TYPE STANDARD TABLE OF TS_ADV_RECT
                             WITH EMPTY KEY .

*BOI CH01.01
    TYPES:
      BEGIN OF TS_SHIPMENT,
        VBELN    TYPE VBRK-VBELN,
        DO_VBELN TYPE VBAK-VBELN,
        TKNUM    TYPE VTTK-TKNUM,
        VSART    TYPE VTTK-VSART,
        DTDIS    TYPE VTTK-DTDIS,
        ROUTE    TYPE VTTK-ROUTE,
        UZDIS    TYPE VTTK-UZDIS,
        EXTI1    TYPE VTTK-EXTI1,
        EXTI2    TYPE VTTK-EXTI2,
        DATEN    TYPE VTTK-DATEN,
        UATEN    TYPE VTTK-UATEN,
      END OF TS_SHIPMENT .
    TYPES:
      TT_SHIPMENT TYPE SORTED TABLE OF TS_SHIPMENT
                               WITH NON-UNIQUE KEY VBELN .
    TYPES:
      BEGIN OF TS_QUOTATION,
        VBELN    TYPE VBRK-VBELN,
        VBTYP_V  TYPE VBFA-VBTYP_V,
        QT_VBELN TYPE VBAK-VBELN,
        AUART    TYPE VBAK-AUART,
        AUDAT    TYPE VBAK-AUDAT,
        ERNAM    TYPE VBAK-ERNAM,
      END OF TS_QUOTATION .
    TYPES:
      TT_QUOTATION TYPE SORTED TABLE OF TS_QUOTATION
                                WITH NON-UNIQUE KEY VBELN .

    TYPES:
      BEGIN OF TS_ADDR_PARTNER,
        VBELN      TYPE VBPA-VBELN,
        NATION     TYPE ADRC-NATION,
        PARVW      TYPE VBPA-PARVW,
        KUNNR      TYPE VBPA-KUNNR,
        ADRNR      TYPE VBPA-ADRNR,
        NAME       TYPE C LENGTH 81,
        STREET     TYPE ADRC-STREET,
        STR_SUPPL3 TYPE ADRC-STR_SUPPL3,
        LOCATION   TYPE ADRC-LOCATION,
        STR_SUPPL1 TYPE ADRC-STR_SUPPL1,
        STR_SUPPL2 TYPE ADRC-STR_SUPPL2,
        CITY2      TYPE ADRC-CITY2,
        CITY1      TYPE ADRC-CITY1,
        POST_CODE1 TYPE ADRC-POST_CODE1,
        TEL_NUMBER TYPE ADRC-TEL_NUMBER,
        SMTP_ADDR  TYPE ADR6-SMTP_ADDR,
        MOBILE     TYPE ADR2-TEL_NUMBER,
      END OF TS_ADDR_PARTNER .
    TYPES:
      TT_ADDR_PARTNER TYPE SORTED TABLE OF TS_ADDR_PARTNER
                           WITH NON-UNIQUE KEY VBELN NATION .

    TYPES: BEGIN OF TS_VBFA_ORDER_REASON,
             VBELN TYPE VBFA-VBELN,
             VBELV TYPE VBFA-VBELV,
             AUGRU TYPE VBAK-AUGRU,
           END OF TS_VBFA_ORDER_REASON .
    TYPES:
      TT_VBFA_ORDER_REASON TYPE SORTED TABLE OF TS_VBFA_ORDER_REASON
                                       WITH NON-UNIQUE KEY VBELN .

    CONSTANTS GC_MOBILE_IND TYPE AD_FLGMOB VALUE '3'.
*EOI CH01.01

    CONSTANTS:
      BEGIN OF GC_PARVW,
        PAYER         TYPE VBPA-PARVW VALUE 'RG',
        SHIP_TO       TYPE VBPA-PARVW VALUE 'WE',
        SALE_EMPLOYEE TYPE VBPA-PARVW VALUE 'VE',
        EMPLOYEE_RESP TYPE VBPA-PARVW VALUE 'ZM',
      END OF GC_PARVW .
    CONSTANTS:
      BEGIN OF GC_VBTYP,
        SALE_ORDER      TYPE VBAK-VBTYP VALUE 'C',
        SHIP_TO         TYPE VBAK-VBTYP VALUE '8',
        DELIVERY        TYPE VBAK-VBTYP VALUE 'J',
        QUOTATION       TYPE VBAK-VBTYP VALUE 'B',
        CREDIT_MEMO_REQ TYPE VBAK-VBTYP VALUE 'K',
        DEBIT_MEMO_REQ  TYPE VBAK-VBTYP VALUE 'L',
        RETURN          TYPE VBAK-VBTYP VALUE 'H',
        BILL_REQ        TYPE VBAK-VBTYP VALUE 'EBDR',  "CH02.01+
        SERV_ORDER      TYPE VBAK-VBTYP VALUE 'CSVO',  "CH02.01+
      END OF GC_VBTYP .
    CONSTANTS:
      BEGIN OF GC_AC_OBJECT_TYPE,
        INT_ORDER TYPE CRMS4D_SERV_H-AC_OBJECT_TYPE VALUE '01',
        WBS       TYPE CRMS4D_SERV_H-AC_OBJECT_TYPE VALUE '03',
      END OF GC_AC_OBJECT_TYPE .
    CONSTANTS:
      BEGIN OF GC_KSCHL,
        PRICE_UNIT_1    TYPE PRCD_ELEMENTS-KSCHL VALUE 'ZPR0',
        PRICE_UNIT_2    TYPE PRCD_ELEMENTS-KSCHL VALUE 'ZPR1',
        COST_UNIT       TYPE PRCD_ELEMENTS-KSCHL VALUE 'VPRS',
        PRICE_UNIT_SERV TYPE PRCD_ELEMENTS-KSCHL VALUE 'ZSR1', "CH02.01+
      END OF GC_KSCHL .
    CONSTANTS:
      BEGIN OF GC_TDOBJECT,
        VBBK TYPE  STXH-TDOBJECT  VALUE 'VBBK',
      END OF GC_TDOBJECT .
    CONSTANTS:
      BEGIN OF GC_TDID,
        REASON     TYPE THEAD-TDID VALUE 'ZH01',
        REMARK_QT  TYPE THEAD-TDID VALUE 'ZH02',
        PROJECT_TX TYPE THEAD-TDID VALUE 'ZH06',
        INV_REMARK TYPE THEAD-TDID VALUE 'ZH13',
        REQ_REMARK TYPE THEAD-TDID VALUE 'ZH10',
        LAND_NO    TYPE THEAD-TDID VALUE 'ZH11',
        REF_MEMO   TYPE THEAD-TDID VALUE 'ZH17',
      END OF GC_TDID .
    CONSTANTS:
      BEGIN OF GC_NATION,
        EN TYPE ADRC-NATION VALUE 'I',
        TH TYPE ADRC-NATION VALUE '',
      END OF GC_NATION .
    CONSTANTS:
      BEGIN OF GC_SEPARATE,
        COMMA TYPE CHAR01 VALUE ',',
      END OF GC_SEPARATE .
    CONSTANTS GC_INBOX_STATUS_COMPLETE TYPE CRMS4D_SERV_H-INBOX_STATUS VALUE '0003' ##NO_TEXT.
    CONSTANTS GC_PRODH2_CDU TYPE PRODH3 VALUE 'CDU' ##NO_TEXT.
    CONSTANTS GC_SALE_COUNT_FLAG_0 TYPE MARA-ZZSCF VALUE '0' ##NO_TEXT.
    CONSTANTS GC_BUKRS_SDS TYPE T001-BUKRS VALUE '1000' ##NO_TEXT.
    CONSTANTS GC_RELTYP_CREDIT_GROUP TYPE BUT050-RELTYP VALUE 'UKM001' ##NO_TEXT.
    CONSTANTS GC_OBJTYPE_SERVICE TYPE CRMS4D_SERV_H-OBJTYPE_H VALUE 'BUS2000116' ##NO_TEXT.
    CONSTANTS GC_KINAK_INACT TYPE PRCD_ELEMENTS-KINAK VALUE 'Y' . "CH02.01+

    CLASS-METHODS GET_DATA
      IMPORTING
        !IF_REPID       TYPE SY-REPID
        !IF_BUKRS       TYPE T001-BUKRS DEFAULT GC_BUKRS_SDS
        !IF_VKORG       TYPE VKORG
        !IF_LANGU       TYPE SY-LANGU DEFAULT SY-LANGU
        !IF_KEYDATE     TYPE SY-DATUM DEFAULT SY-DATUM
        !IT_VTWEG_RANGE TYPE TT_VTWEG_RANGE
        !IT_SPART_RANGE TYPE TT_SPART_RANGE
        !IT_VKBUR_RANGE TYPE TT_VKBUR_RANGE
        !IT_VKGRP_RANGE TYPE TT_VKGRP_RANGE
        !IT_KUNAG_RANGE TYPE TT_KUNAG_RANGE
        !IT_FKART_RANGE TYPE TT_FKART_RANGE
        !IT_FKDAT_RANGE TYPE TT_FKDAT_RANGE
        !IT_VBELN_RANGE TYPE TT_VBELN_RANGE
        !IT_MATNR_RANGE TYPE TT_MATNR_RANGE
        !IT_PRODH_RANGE TYPE TT_PRODH_RANGE
        !IT_PERNR_RANGE TYPE TT_PERNR_RANGE
        !IT_BSTKD_RANGE TYPE TT_BSTKD_RANGE
        !IT_KVGR2_RANGE TYPE TT_KVGR2_RANGE
        !IT_BNAME_RANGE TYPE TT_BNAME_RANGE
      EXPORTING
        !ET_DATA        TYPE TT_DATA .
    CLASS-METHODS GET_INVOICE
      IMPORTING
        !IF_VKORG       TYPE VKORG
        !IT_VTWEG_RANGE TYPE TT_VTWEG_RANGE
        !IT_SPART_RANGE TYPE TT_SPART_RANGE
        !IT_VKBUR_RANGE TYPE TT_VKBUR_RANGE
        !IT_VKGRP_RANGE TYPE TT_VKGRP_RANGE
        !IT_KUNAG_RANGE TYPE TT_KUNAG_RANGE
        !IT_FKART_RANGE TYPE TT_FKART_RANGE
        !IT_FKDAT_RANGE TYPE TT_FKDAT_RANGE
        !IT_VBELN_RANGE TYPE TT_VBELN_RANGE
        !IT_MATNR_RANGE TYPE TT_MATNR_RANGE
        !IT_PRODH_RANGE TYPE TT_PRODH_RANGE
        !IT_PERNR_RANGE TYPE TT_PERNR_RANGE
        !IT_BSTKD_RANGE TYPE TT_BSTKD_RANGE
        !IT_VBTYP_RANGE TYPE TT_VBTYP_RANGE
        !IT_KVGR2_RANGE TYPE TT_KVGR2_RANGE
        !IT_BNAME_RANGE TYPE TT_BNAME_RANGE
      EXPORTING
        !ET_BILL        TYPE TT_BILL .
    CLASS-METHODS GET_TEXT
      IMPORTING
        !IF_ID         TYPE THEAD-TDID
        !IF_NAME       TYPE CLIKE
        !IF_OBJECT     TYPE THEAD-TDOBJECT
        !IF_LANGU      TYPE THEAD-TDSPRAS DEFAULT SY-LANGU
      RETURNING
        VALUE(RF_TEXT) TYPE STRING .
    CLASS-METHODS GET_DATE_IN_FISCAL_YEAR
      IMPORTING
        !IF_DATE          TYPE VBRK-FKDAT DEFAULT SY-DATUM
      EXPORTING
        !EF_HALF_PERIOD   TYPE TS_DATA-HALF_PERIOD
        !EF_QUARTER       TYPE TS_DATA-QUARTER
        !EF_PERIOD        TYPE TS_DATA-PERIOD
        !EF_WEEK          TYPE TS_DATA-WEEK
        !EF_MONTH         TYPE TS_DATA-ZZMONTH
        !EF_CALENDAR_YEAR TYPE TS_DATA-CALENDAR_YEAR
        !EF_FISCAL_YEAR   TYPE TS_DATA-FISCAL_YEAR .
    CLASS-METHODS GET_FI_DOC
      IMPORTING
        !IF_BUKRS TYPE T001-BUKRS
        !IT_XBLNR TYPE TT_XBLNR
      EXPORTING
        !ET_BKPF  TYPE TT_BKPF .
    CLASS-METHODS GET_CUST_CRDT_GRP
      IMPORTING
        !IF_KEYDATE TYPE SY-DATUM
        !IT_KUNNR   TYPE TT_KUNNR
      EXPORTING
        !ET_BUT050  TYPE TT_BUT050 .
    CLASS-METHODS GET_PERSON_NAME
      IMPORTING
        !IT_PERNR  TYPE TT_PERNR
      EXPORTING
        !ET_PA0002 TYPE TT_PA0002 .
    CLASS-METHODS GET_SERVICE
      IMPORTING
        !IT_OBJECT_ID TYPE TT_OBJECT_ID
      EXPORTING
        !ET_SERVICE   TYPE TT_SERVICE .
    CLASS-METHODS GET_SALE_ORG_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_VKORG TYPE TT_VKORG
      EXPORTING
        !ET_TVKOT TYPE TT_TVKOT .
    CLASS-METHODS GET_UNIT_PRICE
      IMPORTING
        !IT_PRCD_EL_KEY TYPE TT_PRCD_EL_KEY
      EXPORTING
        !ET_UNIT_PRICE  TYPE TT_PRCD_EL .
    CLASS-METHODS GET_UNIT_COST
      IMPORTING
        !IT_PRCD_EL_KEY TYPE TT_PRCD_EL_KEY
      EXPORTING
        !ET_UNIT_COST   TYPE TT_PRCD_EL .
    CLASS-METHODS GET_APPL_TEXT
      IMPORTING
        !IT_ABRVW TYPE TT_ABRVW
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
      EXPORTING
        !ET_TVLVT TYPE TT_TVLVT .
    CLASS-METHODS GET_CUSTOMER
      IMPORTING
        !IF_KEYDATE   TYPE SY-DATUM DEFAULT SY-DATUM
        !IF_LANGU     TYPE SY-LANGU DEFAULT SY-LANGU
        !IF_BUKRS     TYPE BUKRS DEFAULT GC_BUKRS_SDS
        !IT_KUNNR     TYPE TT_KUNNR
      EXPORTING
        !ET_KNB1      TYPE TT_KNB1
        !ET_TKUKT     TYPE TT_TKUKT
        !ET_T001S     TYPE TT_T001S
        !ET_ADRC_CUST TYPE TT_ADRC_CUST
        !ET_ADR6_CUST TYPE TT_ADR6_CUST .
    CLASS-METHODS GET_PLANT_NAME
      IMPORTING
        !IT_WERKS TYPE TT_WERKS
      EXPORTING
        !ET_T001W TYPE TT_T001W .
    CLASS-METHODS GET_DIST_CHANNEL_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_VTWEG TYPE TT_VTWEG
      EXPORTING
        !ET_TVTWT TYPE TT_TVTWT .
    CLASS-METHODS GET_BILL_TYPE_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_FKART TYPE TT_FKART
      EXPORTING
        !ET_TVFKT TYPE TT_TVFKT .
    CLASS-METHODS GET_PAYMT_TERM_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_ZTERM TYPE TT_ZTERM
      EXPORTING
        !ET_T052U TYPE TT_T052U .
    CLASS-METHODS GET_DIVISION_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_SPART TYPE TT_SPART
      EXPORTING
        !ET_TSPAT TYPE TT_TSPAT .
    CLASS-METHODS GET_CUST_GROUP_1_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_KVGR1 TYPE TT_KVGR1
      EXPORTING
        !ET_TVV1T TYPE TT_TVV1T .
    CLASS-METHODS GET_CUST_GROUP_2_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_KVGR2 TYPE TT_KVGR2
      EXPORTING
        !ET_TVV2T TYPE TT_TVV2T .
    CLASS-METHODS GET_STORAGE_LOCATION_TEXT
      IMPORTING
        !IT_T001L_KEY TYPE TT_T001L_KEY
      EXPORTING
        !ET_T001L     TYPE TT_T001L .
    CLASS-METHODS GET_MD_MATERIAL
      IMPORTING
        !IT_MATNR TYPE TT_MATNR
      EXPORTING
        !ET_MARA  TYPE TT_MARA .
    CLASS-METHODS GET_LOAD_POINT_TEXT
      IMPORTING
        !IF_LANGU     TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_TVLAT_KEY TYPE TT_TVLAT_KEY
      EXPORTING
        !ET_TVLAT     TYPE TT_TVLAT .
    CLASS-METHODS GET_ORD_REASON_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_AUGRU TYPE TT_AUGRU
      EXPORTING
        !ET_TVAUT TYPE TT_TVAUT .
    CLASS-METHODS GET_SALE_GROUP_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_VKGRP TYPE TT_VKGRP
      EXPORTING
        !ET_TVGRT TYPE TT_TVGRT .
    CLASS-METHODS GET_SALE_OFFICE_TEXT
      IMPORTING
        !IF_LANGU TYPE SY-LANGU DEFAULT SY-LANGU
        !IT_VKBUR TYPE TT_VKBUR
      EXPORTING
        !ET_TVKBT TYPE TT_TVKBT .
    CLASS-METHODS GET_ADV_RECEIVE
      IMPORTING
        !IF_BUKRS    TYPE BUKRS DEFAULT GC_BUKRS_SDS
        !IT_SO_VBELN TYPE TT_VBELN
      EXPORTING
        !ET_ADV_RECT TYPE TT_ADV_RECT .
  PROTECTED SECTION.
  PRIVATE SECTION.

*BOD CH01.01
*    TYPES:
*      BEGIN OF TS_SHIPMENT,
*        VBELN    TYPE VBRK-VBELN,
*        DO_VBELN TYPE VBAK-VBELN,
*        TKNUM    TYPE VTTK-TKNUM,
*        VSART    TYPE VTTK-VSART,
*        DTDIS    TYPE VTTK-DTDIS,
*        ROUTE    TYPE VTTK-ROUTE,
*        UZDIS    TYPE VTTK-UZDIS,
*        EXTI1    TYPE VTTK-EXTI1,
*        EXTI2    TYPE VTTK-EXTI2,
*        DATEN    TYPE VTTK-DATEN,
*        UATEN    TYPE VTTK-UATEN,
*      END OF TS_SHIPMENT .
*
*    TYPES:
*      TT_SHIPMENT TYPE SORTED TABLE OF TS_SHIPMENT
*                               WITH NON-UNIQUE KEY VBELN .
*    TYPES:
*      BEGIN OF TS_QUOTATION,
*        VBELN    TYPE VBRK-VBELN,
*        VBTYP_V  TYPE VBFA-VBTYP_V,
*        QT_VBELN TYPE VBAK-VBELN,
*        AUART    TYPE VBAK-AUART,
*        AUDAT    TYPE VBAK-AUDAT,
*        ERNAM    TYPE VBAK-ERNAM,
*      END OF TS_QUOTATION .
*    TYPES:
*      TT_QUOTATION TYPE SORTED TABLE OF TS_QUOTATION
*                                WITH NON-UNIQUE KEY VBELN .

*  TYPES:
*    BEGIN OF TS_SHIPTO,
*      VBELN      TYPE VBPA-VBELN,
*      NATION     TYPE ADRC-NATION,
*      KUNNR      TYPE VBPA-KUNNR,
*      ADRNR      TYPE VBPA-ADRNR,
*      NAME       TYPE C LENGTH 81,
*      STREET     TYPE ADRC-STREET,
*      STR_SUPPL3 TYPE ADRC-STR_SUPPL3,
*      LOCATION   TYPE ADRC-LOCATION,
*      STR_SUPPL1 TYPE ADRC-STR_SUPPL1,
*      STR_SUPPL2 TYPE ADRC-STR_SUPPL2,
*      CITY2      TYPE ADRC-CITY2,
*      CITY1      TYPE ADRC-CITY1,
*      POST_CODE1 TYPE ADRC-POST_CODE1,
*    END OF TS_SHIPTO .
*  TYPES:
*    TT_SHIPTO TYPE SORTED TABLE OF TS_SHIPTO
*                           WITH NON-UNIQUE KEY VBELN NATION .
*
*    TYPES: BEGIN OF TS_VBFA_ORDER_REASON,
*             VBELN TYPE VBFA-VBELN,
*             VBELV TYPE VBFA-VBELV,
*             AUGRU TYPE VBAK-AUGRU,
*           END OF TS_VBFA_ORDER_REASON .
*    TYPES: TT_VBFA_ORDER_REASON TYPE SORTED TABLE OF TS_VBFA_ORDER_REASON
*                                     WITH NON-UNIQUE KEY VBELN .
*EOD CH01.01

    CLASS-METHODS GET_GENC
      IMPORTING
        !IF_REPID TYPE SY-REPID
      EXPORTING
        !ES_GENC  TYPE TS_GENC .
    CLASS-METHODS GET_HEAD_DISCOUNT
      IMPORTING
        !IS_GENC    TYPE TS_GENC
        !IT_KNUMV   TYPE TT_KNUMV
      EXPORTING
        !ET_DISC_HD TYPE TT_DISCOUNT .
    CLASS-METHODS GET_CASH_DISCOUNT
      IMPORTING
        !IS_GENC      TYPE TS_GENC
        !IT_KNUMV     TYPE TT_KNUMV
      EXPORTING
        !ET_DISC_CASH TYPE TT_DISCOUNT .
    CLASS-METHODS GET_PROJECT
      IMPORTING
        !IT_PSPNR TYPE TT_PSPNR
      EXPORTING
        !ET_PROJ  TYPE TT_PROJECT .
    CLASS-METHODS GET_DOCU_FLOW_FOR_BILL
      IMPORTING
        !IF_KEYDATE      TYPE SY-DATUM DEFAULT SY-DATUM
        !IS_GENC         TYPE TS_GENC
        !IT_VBELN        TYPE TT_VBELN
      EXPORTING
        !ET_DELIVERY     TYPE TT_DELIVERY
        !ET_SHIPMENT     TYPE TT_SHIPMENT
        !ET_QUOTATION    TYPE TT_QUOTATION
        !ET_SHIPTO       TYPE TT_ADDR_PARTNER
        !ET_CUST_ONETIME TYPE TT_ADDR_PARTNER       "CH01.01+
        !ET_SERV_ORDER   TYPE TT_SERV_ORDER         "CH02.01+
        !ET_VBFA_ORD_RES TYPE TT_VBFA_ORDER_REASON.
ENDCLASS.



CLASS ZCL_SDSSD_SALES_ANALYSIS IMPLEMENTATION.


  METHOD GET_DATA.

    CONSTANTS:
      LC_MINUS_SIGN  TYPE I VALUE -1,
      LC_AMOUNTX1000 TYPE I VALUE 1000.

    DATA:
      LF_OBJECT_ID     TYPE CRMT_OBJECT_ID_DB,
      LF_TABIX         TYPE SY-TABIX,
      LF_STRING        TYPE STRING,
      LF_KSCHL         TYPE KSCHL,              "CH02.03+
      LS_DATA_H        TYPE TS_DATA,
      LS_DATA          TYPE TS_DATA,
      LS_PRODH         TYPE PRODH,

      LT_BILL          TYPE TT_BILL,
      LT_BILL_BOM_ITEM TYPE TT_BILL_BOM_ITEM,

      LT_TVLAT         TYPE TT_TVLAT,
      LT_SPART         TYPE TT_SPART,
      LT_PSPNR         TYPE TT_PSPNR,
      LT_KNUMV         TYPE TT_KNUMV,
      LT_PERNR         TYPE TT_PERNR,
      LT_VKBUR         TYPE TT_VKBUR,
      LT_VKGRP         TYPE TT_VKGRP,
      LT_ABRVW         TYPE TT_ABRVW,
      LT_KUNNR         TYPE TT_KUNNR,
      LT_T001L_KEY     TYPE TT_T001L_KEY,
      LT_OBJECT_ID     TYPE TT_OBJECT_ID,
      LT_ZTERM         TYPE TT_ZTERM,
      LT_MATNR         TYPE TT_MATNR,

      LT_VBAK_SO       TYPE TT_VBAK,
      LT_VBRK          TYPE TT_VBRK,
      LT_VKORG         TYPE TT_VKORG,
      LT_VTWEG         TYPE TT_VTWEG,
      LT_FKART         TYPE TT_FKART,
      LT_PRCD_EL_KEY   TYPE TT_PRCD_EL_KEY,

      LT_BOM_ITEM      TYPE TT_BILL,
      LT_KVGR1         TYPE TT_KVGR1,
      LT_KVGR2         TYPE TT_KVGR2,
      LT_AUGRU         TYPE TT_AUGRU,
      LT_XBLNR         TYPE TT_XBLNR,
      LT_STRING        TYPE SORTED TABLE OF STRING
                            WITH UNIQUE KEY TABLE_LINE,
      LT_WERKS         TYPE TT_WERKS,
      LT_TVLAT_KEY     TYPE TT_TVLAT_KEY,
      LT_SO_VBELN      TYPE TT_VBELN,
      LT_VBELN         TYPE TT_VBELN.

    CLEAR ET_DATA.

    " Get GenC (Constants setting)
    GET_GENC( EXPORTING IF_REPID = IF_REPID
              IMPORTING ES_GENC  = DATA(LS_GENC) ).

    " Get Invoice
    GET_INVOICE(
      EXPORTING
        IF_VKORG       = IF_VKORG
        IT_VTWEG_RANGE = IT_VTWEG_RANGE
        IT_SPART_RANGE = IT_SPART_RANGE
        IT_VKBUR_RANGE = IT_VKBUR_RANGE
        IT_VKGRP_RANGE = IT_VKGRP_RANGE
        IT_KUNAG_RANGE = IT_KUNAG_RANGE
        IT_FKART_RANGE = IT_FKART_RANGE
        IT_FKDAT_RANGE = IT_FKDAT_RANGE
        IT_VBELN_RANGE = IT_VBELN_RANGE
        IT_MATNR_RANGE = IT_MATNR_RANGE
        IT_PRODH_RANGE = IT_PRODH_RANGE
        IT_PERNR_RANGE = IT_PERNR_RANGE
        IT_BSTKD_RANGE = IT_BSTKD_RANGE
        IT_VBTYP_RANGE = LS_GENC-SD_DOCCAT_BILL_RANGE
        IT_KVGR2_RANGE = IT_KVGR2_RANGE
        IT_BNAME_RANGE = IT_BNAME_RANGE
      IMPORTING
        ET_BILL        = LT_BILL ).

    IF LT_BILL IS INITIAL.
      RETURN.
    ENDIF.

    SORT LT_BILL BY VBELN POSNR.

    LT_VBRK       = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).
    LT_VBAK_SO    = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES
                                             MAPPING VBELN = SO_VBELN ).

    " BOM Item of Billing
    LT_BOM_ITEM = FILTER #( LT_BILL IN LS_GENC-T_ITEMCAT_BOM WHERE PSTYV = PSTYV ).

    IF LT_BOM_ITEM IS NOT INITIAL .

      SELECT FROM VBRP AS IT
      INNER JOIN @LT_BOM_ITEM AS KEY
              ON IT~VBELN = KEY~VBELN AND
                 IT~UEPOS = KEY~POSNR
      INNER JOIN VBRK AS H
              ON IT~VBELN = H~VBELN
      FIELDS IT~VBELN,
             IT~UEPOS,
             IT~POSNR,
             IT~NETWR,
             IT~MWSBP,
              H~KNUMV
       WHERE KEY~UEPOS IS INITIAL
        INTO TABLE @LT_BILL_BOM_ITEM.
      IF SY-SUBRC IS INITIAL.
        SORT LT_BILL_BOM_ITEM BY VBELN UEPOS.
      ENDIF.
    ENDIF.

    LT_XBLNR = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    GET_FI_DOC(
      EXPORTING
        IF_BUKRS = IF_BUKRS
        IT_XBLNR = LT_XBLNR
      IMPORTING
        ET_BKPF  = DATA(LT_BKPF) ).

    LT_VBELN = CORRESPONDING #( LT_VBRK ).

    " Get Document Flow for Billing Document
    GET_DOCU_FLOW_FOR_BILL(
      EXPORTING
        IF_KEYDATE      = IF_KEYDATE
        IS_GENC         = LS_GENC
        IT_VBELN        = LT_VBELN
      IMPORTING
        ET_DELIVERY     = DATA(LT_DELIVERY)
        ET_SHIPMENT     = DATA(LT_SHIPMENT)
        ET_QUOTATION    = DATA(LT_QUOTATION)
        ET_SHIPTO       = DATA(LT_SHIPTO)
        ET_CUST_ONETIME = DATA(LT_CUST_ONETIME)           "CH01.01+
        ET_SERV_ORDER   = DATA(LT_SERV_ORDER)             "CH02.01+
        ET_VBFA_ORD_RES = DATA(LT_VBFA_ORD_RES) ).

    LT_TVLAT_KEY = CORRESPONDING #( LT_DELIVERY DISCARDING DUPLICATES ).

    " Loading Point Description
    GET_LOAD_POINT_TEXT(
      EXPORTING
        IF_LANGU     = IF_LANGU
        IT_TVLAT_KEY = LT_TVLAT_KEY
      IMPORTING
        ET_TVLAT     = LT_TVLAT ).

    LT_KUNNR = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES
                                        MAPPING KUNNR = KUNAG ).

    " Get Customer
    GET_CUSTOMER(
      EXPORTING
        IF_BUKRS     = IF_BUKRS
        IF_KEYDATE   = IF_KEYDATE
        IF_LANGU     = IF_LANGU
        IT_KUNNR     = LT_KUNNR
      IMPORTING
        ET_KNB1      = DATA(LT_CUSTOMER)
        ET_TKUKT     = DATA(LT_CUST_CLASS)
        ET_T001S     = DATA(LT_ACC_CLERK)
        ET_ADRC_CUST = DATA(LT_CUST_ADDR)
        ET_ADR6_CUST = DATA(LT_CUST_EMAIL) ).

    " Get Customer Credit Group
    GET_CUST_CRDT_GRP(
      EXPORTING
        IF_KEYDATE = IF_KEYDATE
        IT_KUNNR   = LT_KUNNR
      IMPORTING
        ET_BUT050  = DATA(LT_BP_CRDT_GRP) ).

    LT_PERNR = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Personal name
    GET_PERSON_NAME(
      EXPORTING
        IT_PERNR  = LT_PERNR
      IMPORTING
        ET_PA0002 = DATA(LT_PERS) ).

    LT_OBJECT_ID = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES
                                            MAPPING OBJECT_ID = XBLNR ).

*BOI CH02.01
    LT_OBJECT_ID = CORRESPONDING #( BASE ( LT_OBJECT_ID ) LT_SERV_ORDER DISCARDING DUPLICATES
                                    MAPPING OBJECT_ID = SERV_ORDER ).

    LT_OBJECT_ID = CORRESPONDING #( BASE ( LT_OBJECT_ID ) LT_BILL DISCARDING DUPLICATES
                                    MAPPING OBJECT_ID = SO_VBELN ).
*EOI CH02.01

    " Get Service Transaction
    GET_SERVICE(
      EXPORTING
        IT_OBJECT_ID = LT_OBJECT_ID
      IMPORTING
        ET_SERVICE   = DATA(LT_SERVICE) ).

    LT_MATNR  = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Material Master Data
    GET_MD_MATERIAL(
      EXPORTING
        IT_MATNR = LT_MATNR
      IMPORTING
        ET_MARA  = DATA(LT_MARA) ).

    LT_WERKS = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Plant Name
    GET_PLANT_NAME(
      EXPORTING
        IT_WERKS = LT_WERKS
      IMPORTING
        ET_T001W = DATA(LT_T001W) ).

    LT_T001L_KEY = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Storage Location
    GET_STORAGE_LOCATION_TEXT(
      EXPORTING
        IT_T001L_KEY = LT_T001L_KEY
      IMPORTING
        ET_T001L     = DATA(LT_T001L) ).

    LT_VKORG = CORRESPONDING #( LT_VBRK DISCARDING DUPLICATES ).

    " Get Sales Organizations
    GET_SALE_ORG_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_VKORG = LT_VKORG
      IMPORTING
        ET_TVKOT = DATA(LT_SALE_ORG) ).

    LT_VTWEG = CORRESPONDING #( LT_VBRK DISCARDING DUPLICATES ).

    " Get Distribution Channel
    GET_DIST_CHANNEL_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_VTWEG = LT_VTWEG
      IMPORTING
        ET_TVTWT = DATA(LT_DIST_CHANNEL) ).

    LT_FKART = CORRESPONDING #( LT_VBRK DISCARDING DUPLICATES ).

    " Get Bill Type
    GET_BILL_TYPE_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_FKART = LT_FKART
      IMPORTING
        ET_TVFKT = DATA(LT_TVFKT) ).

    LT_ZTERM = CORRESPONDING #( LT_VBRK DISCARDING DUPLICATES ).

    " Get Payment term description
    GET_PAYMT_TERM_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_ZTERM = LT_ZTERM
      IMPORTING
        ET_T052U = DATA(LT_PAYMT_TERM)
    ).

    LT_SPART = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Division Text
    GET_DIVISION_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_SPART = LT_SPART
      IMPORTING
        ET_TSPAT = DATA(LT_DIVISION) ).

    LT_KVGR1 = CORRESPONDING #( LT_VBAK_SO DISCARDING DUPLICATES ).

    " Get Customer Group 1 Text
    GET_CUST_GROUP_1_TEXT(
      EXPORTING
        IT_KVGR1 = LT_KVGR1
      IMPORTING
        ET_TVV1T = DATA(LT_CUST_GRP1) ).

    LT_KVGR2 = CORRESPONDING #( LT_VBAK_SO DISCARDING DUPLICATES ).

    " Get Customer Group 2 Text
    GET_CUST_GROUP_2_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_KVGR2 = LT_KVGR2
      IMPORTING
        ET_TVV2T = DATA(LT_CUST_GRP2) ).

    " Get Order Reason Text
    LT_AUGRU = CORRESPONDING #( LT_VBFA_ORD_RES DISCARDING DUPLICATES ).

    GET_ORD_REASON_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_AUGRU = LT_AUGRU
      IMPORTING
        ET_TVAUT = DATA(LT_TVAUT) ).

    " Get Sales Office Text
    LT_VKBUR = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    GET_SALE_OFFICE_TEXT(
      EXPORTING
        IF_LANGU = IF_LANGU
        IT_VKBUR = LT_VKBUR
      IMPORTING
        ET_TVKBT = DATA(LT_SALE_OFFICE) ).

    " Get Sales Group Text
    LT_VKGRP = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    GET_SALE_GROUP_TEXT(
      EXPORTING
        IT_VKGRP = LT_VKGRP
      IMPORTING
        ET_TVGRT = DATA(LT_SALE_GROUP) ).

    LT_ABRVW = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Application Text
    GET_APPL_TEXT(
      EXPORTING
        IT_ABRVW = LT_ABRVW
      IMPORTING
        ET_TVLVT = DATA(LT_APPL_TEXT) ).

    LT_PSPNR = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES
                                        MAPPING PSPNR = PS_PSP_PNR ).

    " Get Project and name for WBS
    GET_PROJECT(
      EXPORTING
        IT_PSPNR = LT_PSPNR
      IMPORTING
        ET_PROJ  = DATA(LT_PROJ) ).

    LT_SO_VBELN = CORRESPONDING #( LT_VBAK_SO ).

    " Get Advance Receive
    GET_ADV_RECEIVE(
      EXPORTING
        IF_BUKRS    = IF_BUKRS
        IT_SO_VBELN = LT_SO_VBELN
      IMPORTING
        ET_ADV_RECT = DATA(LT_ADV_RECT) ).

    LT_KNUMV = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    " Get Header Discount %
    GET_HEAD_DISCOUNT(
      EXPORTING
        IS_GENC    = LS_GENC
        IT_KNUMV   = LT_KNUMV
      IMPORTING
        ET_DISC_HD = DATA(LT_DISC_HD) ).

    " Get Cash Discount %
    GET_CASH_DISCOUNT(
      EXPORTING
        IS_GENC      = LS_GENC
        IT_KNUMV     = LT_KNUMV
      IMPORTING
        ET_DISC_CASH = DATA(LT_DISC_CASH) ).

    LT_PRCD_EL_KEY = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES
                                              MAPPING KPOSN = POSNR ).

    LT_PRCD_EL_KEY = CORRESPONDING #( BASE (  LT_PRCD_EL_KEY )
                                      LT_BILL_BOM_ITEM DISCARDING DUPLICATES
                                                       MAPPING KPOSN = POSNR ).

    " Get Price/Unit for Billing Item
    GET_UNIT_PRICE(
      EXPORTING
        IT_PRCD_EL_KEY = LT_PRCD_EL_KEY
      IMPORTING
        ET_UNIT_PRICE  = DATA(LT_UNIT_PRICE) ).

    " Get Cost/Unit for Billing Item
    GET_UNIT_COST(
      EXPORTING
        IT_PRCD_EL_KEY = LT_PRCD_EL_KEY
      IMPORTING
        ET_UNIT_COST   = DATA(LT_UNIT_COST) ).

    " Collect Result
    LOOP AT LT_BILL ASSIGNING FIELD-SYMBOL(<L_BILL_VBELN>)
    GROUP BY <L_BILL_VBELN>-VBELN.

      CLEAR: LS_DATA_H,
             LF_OBJECT_ID. "CH02.01+

      LS_DATA_H-CUST_CODE      = <L_BILL_VBELN>-KUNAG.
      LS_DATA_H-PERSON_NO      = <L_BILL_VBELN>-PERNR.
      LS_DATA_H-SO_NO          = <L_BILL_VBELN>-SO_VBELN.
      LS_DATA_H-SO_TYPE        = <L_BILL_VBELN>-AUART.
      LS_DATA_H-SO_CREATE_DATE = <L_BILL_VBELN>-AUDAT.
      LS_DATA_H-SO_CREATE_BY   = <L_BILL_VBELN>-ERNAM.
      LS_DATA_H-BILL_TYPE      = <L_BILL_VBELN>-FKART.
      LS_DATA_H-BILL_NO        = <L_BILL_VBELN>-VBELN.
      LS_DATA_H-BILL_DATE      = <L_BILL_VBELN>-FKDAT.
      LS_DATA_H-TAX_NO         = <L_BILL_VBELN>-XBLNR.
      LS_DATA_H-EXT_SYSTEM_1   = <L_BILL_VBELN>-IHREZ.
      LS_DATA_H-EXT_SYSTEM_2   = <L_BILL_VBELN>-BNAME.
      LS_DATA_H-PO_NO          = <L_BILL_VBELN>-BSTKD.
      LS_DATA_H-ZTERM          = <L_BILL_VBELN>-ZTERM.
      LS_DATA_H-WAERK          = <L_BILL_VBELN>-WAERK.
      LS_DATA_H-SUB_PO_NO      = <L_BILL_VBELN>-BSTKD_E.

      GET_DATE_IN_FISCAL_YEAR(
        EXPORTING
          IF_DATE          = <L_BILL_VBELN>-FKDAT
        IMPORTING
          EF_HALF_PERIOD   = LS_DATA_H-HALF_PERIOD
          EF_QUARTER       = LS_DATA_H-QUARTER
          EF_PERIOD        = LS_DATA_H-PERIOD
          EF_WEEK          = LS_DATA_H-WEEK
          EF_MONTH         = LS_DATA_H-ZZMONTH
          EF_CALENDAR_YEAR = LS_DATA_H-CALENDAR_YEAR
          EF_FISCAL_YEAR   = LS_DATA_H-FISCAL_YEAR ).

      " Sales Organization Text
      READ TABLE LT_SALE_ORG
      ASSIGNING FIELD-SYMBOL(<L_SALE_ORG>)
      WITH KEY SPRAS = IF_LANGU
               VKORG = <L_BILL_VBELN>-VKORG.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-SALE_ORG = <L_SALE_ORG>-VTEXT.
      ENDIF.

      " Distribution Channel Text
      READ TABLE LT_DIST_CHANNEL ASSIGNING FIELD-SYMBOL(<L_DIST_CHANNEL>)
      WITH KEY SPRAS = IF_LANGU
               VTWEG = <L_BILL_VBELN>-VTWEG.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-DIST_CHANNEL = <L_DIST_CHANNEL>-VTEXT.
      ENDIF.

      " Billing Type Name
      READ TABLE LT_TVFKT ASSIGNING FIELD-SYMBOL(<L_TVFKT>)
      WITH KEY  SPRAS = IF_LANGU
                FKART = <L_BILL_VBELN>-FKART.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-BILL_TYPE_TX = <L_TVFKT>-VTEXT.
      ENDIF.

      " Customer Master
      READ TABLE LT_CUSTOMER
      ASSIGNING FIELD-SYMBOL(<L_CUSTOMER>)
      WITH KEY KUNNR = <L_BILL_VBELN>-KUNAG.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-CUST_CREATE_DATE = <L_CUSTOMER>-ERDAT.
        LS_DATA_H-MOBILE           = <L_CUSTOMER>-TELF2.

        " Customer Classification
        READ TABLE LT_CUST_CLASS ASSIGNING FIELD-SYMBOL(<L_TKUKT>)
        WITH KEY SPRAS = IF_LANGU
                 KUKLA = <L_CUSTOMER>-KUKLA.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-CUST_CLASS       = <L_TKUKT>-VTEXT.
        ENDIF.

        " Account Clerk
        READ TABLE LT_ACC_CLERK ASSIGNING FIELD-SYMBOL(<L_T001S>)
        WITH KEY BUKRS = IF_BUKRS
                 BUSAB = <L_CUSTOMER>-BUSAB.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-ACC_CLERK        = <L_T001S>-SNAME.
        ENDIF.
      ENDIF.

*BOI CH01.01
      IF <L_CUSTOMER>-KTOKD IN LS_GENC-CUST_ACCT_GRP_OT_RANGE AND
         LS_GENC-CUST_ACCT_GRP_OT_RANGE IS NOT INITIAL.

        READ TABLE LT_CUST_ONETIME ASSIGNING FIELD-SYMBOL(<L_CUST_ONETIME>)
        WITH KEY VBELN  = <L_BILL_VBELN>-VBELN
                 NATION = GC_NATION-TH.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-CUST_NAME_TH = <L_CUST_ONETIME>-NAME.

          CONCATENATE <L_CUST_ONETIME>-STREET
                      <L_CUST_ONETIME>-STR_SUPPL3
                      <L_CUST_ONETIME>-LOCATION
                 INTO LS_DATA_H-CUST_ADDR_1.

          CONCATENATE <L_CUST_ONETIME>-STR_SUPPL1
                      <L_CUST_ONETIME>-STR_SUPPL2
                      <L_CUST_ONETIME>-CITY2
                      <L_CUST_ONETIME>-CITY1
                      <L_CUST_ONETIME>-POST_CODE1
                 INTO LS_DATA_H-CUST_ADDR_2.

          LS_DATA_H-CUST_REGION   = <L_CUST_ONETIME>-CITY1.
          LS_DATA_H-CUST_POSTCODE = <L_CUST_ONETIME>-POST_CODE1.
          LS_DATA_H-TELEPHONE     = <L_CUST_ONETIME>-TEL_NUMBER.
          LS_DATA_H-ETAX_EMAIL    = <L_CUST_ONETIME>-SMTP_ADDR.
          LS_DATA_H-MOBILE        = <L_CUST_ONETIME>-MOBILE.

        ENDIF.

        READ TABLE LT_CUST_ONETIME ASSIGNING <L_CUST_ONETIME>
        WITH KEY VBELN  = <L_BILL_VBELN>-VBELN
                 NATION = GC_NATION-EN.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-CUST_NAME_EN = <L_CUST_ONETIME>-NAME.
        ENDIF.

      ELSE.
*EOI CH01.01
        READ TABLE LT_CUST_ADDR
        ASSIGNING FIELD-SYMBOL(<L_ADDR_CUST>)
        WITH KEY KUNNR  = <L_BILL_VBELN>-KUNAG
                 NATION = GC_NATION-TH.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-CUST_NAME_TH = <L_ADDR_CUST>-NAME.

          CONCATENATE <L_ADDR_CUST>-STREET
                      <L_ADDR_CUST>-STR_SUPPL3
                      <L_ADDR_CUST>-LOCATION
                 INTO LS_DATA_H-CUST_ADDR_1.

          CONCATENATE <L_ADDR_CUST>-STR_SUPPL1
                      <L_ADDR_CUST>-STR_SUPPL2
                      <L_ADDR_CUST>-CITY2
                      <L_ADDR_CUST>-CITY1
                      <L_ADDR_CUST>-POST_CODE1
                 INTO LS_DATA_H-CUST_ADDR_2.

          LS_DATA_H-CUST_REGION   = <L_ADDR_CUST>-CITY1.
          LS_DATA_H-CUST_POSTCODE = <L_ADDR_CUST>-POST_CODE1.
          LS_DATA_H-TELEPHONE     = <L_ADDR_CUST>-TEL_NUMBER.

        ENDIF.

        READ TABLE LT_CUST_ADDR ASSIGNING <L_ADDR_CUST>
        WITH KEY KUNNR  = <L_BILL_VBELN>-KUNAG
                 NATION = GC_NATION-EN.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-CUST_NAME_EN = <L_ADDR_CUST>-NAME.
        ENDIF.

        READ TABLE LT_CUST_EMAIL ASSIGNING FIELD-SYMBOL(<L_CUST_EMAIL>)
        WITH KEY KUNNR = <L_BILL_VBELN>-KUNAG.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-ETAX_EMAIL = <L_CUST_EMAIL>-SMTP_ADDR.
        ENDIF.

      ENDIF.  "CH01.01+

      READ TABLE LT_BP_CRDT_GRP ASSIGNING FIELD-SYMBOL(<L_BP_CRDT_GRP>)
      WITH KEY PARTNER1 = <L_BILL_VBELN>-KUNAG.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-CUST_CREDIT_GROUP = <L_BP_CRDT_GRP>-PARTNER2.
      ENDIF.

      READ TABLE LT_SHIPTO ASSIGNING FIELD-SYMBOL(<L_ADDR_SHIPTO>)
      WITH KEY VBELN  = <L_BILL_VBELN>-VBELN
               NATION = GC_NATION-TH.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-SHIPTO_CODE    = <L_ADDR_SHIPTO>-KUNNR.
        LS_DATA_H-SHIPTO_NAME_TH = <L_ADDR_SHIPTO>-NAME.

        CONCATENATE <L_ADDR_SHIPTO>-STREET
                    <L_ADDR_SHIPTO>-STR_SUPPL3
                    <L_ADDR_SHIPTO>-LOCATION
                    <L_ADDR_SHIPTO>-STR_SUPPL1
                    <L_ADDR_SHIPTO>-STR_SUPPL2
                    <L_ADDR_SHIPTO>-CITY2
                    <L_ADDR_SHIPTO>-CITY1
                    <L_ADDR_SHIPTO>-POST_CODE1
               INTO LS_DATA_H-SHIPTO_ADDR.

        LS_DATA_H-SHIPTO_REGION   = <L_ADDR_SHIPTO>-CITY1.
        LS_DATA_H-SHIPTO_POSTCODE = <L_ADDR_SHIPTO>-POST_CODE1.
      ENDIF.

      READ TABLE LT_SHIPTO
      ASSIGNING <L_ADDR_SHIPTO>
      WITH KEY VBELN  = <L_BILL_VBELN>-VBELN
               NATION = GC_NATION-EN.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-SHIPTO_NAME_EN = <L_ADDR_SHIPTO>-NAME.
      ENDIF.

      READ TABLE LT_PERS ASSIGNING FIELD-SYMBOL(<L_PERS>)
      WITH KEY PERNR = <L_BILL_VBELN>-PERNR.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-PERSON_NAME = <L_PERS>-NAME.
      ENDIF.

      LS_DATA_H-CUST_GROUP_1 = <L_BILL_VBELN>-KVGR1.

      READ TABLE LT_CUST_GRP1 ASSIGNING FIELD-SYMBOL(<L_CUST_GRP1>)
      WITH KEY  SPRAS = IF_LANGU
                KVGR1 = <L_BILL_VBELN>-KVGR1.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-CUST_GROUP_1_TX = <L_CUST_GRP1>-BEZEI.
      ENDIF.

      LS_DATA_H-CUST_GROUP_2 = <L_BILL_VBELN>-KVGR2.

      READ TABLE LT_CUST_GRP2 ASSIGNING FIELD-SYMBOL(<L_CUST_GRP2>)
      WITH KEY SPRAS = IF_LANGU
               KVGR2 = <L_BILL_VBELN>-KVGR2.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-CUST_GROUP_2_TX = <L_CUST_GRP2>-BEZEI.
      ENDIF.

      READ TABLE LT_VBFA_ORD_RES ASSIGNING FIELD-SYMBOL(<L_VBFA_ORD_RES>)
      WITH KEY VBELN = <L_BILL_VBELN>-VBELN.
      IF SY-SUBRC IS INITIAL.

        READ TABLE LT_TVAUT ASSIGNING FIELD-SYMBOL(<L_ORD_REASON>)
        WITH KEY SPRAS = IF_LANGU
                 AUGRU = <L_VBFA_ORD_RES>-AUGRU.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-ORDER_REASON = <L_ORD_REASON>-BEZEI.
        ENDIF.

      ENDIF.

      READ TABLE LT_QUOTATION ASSIGNING FIELD-SYMBOL(<L_VBAK_QT>)
      WITH KEY VBELN   = <L_BILL_VBELN>-VBELN.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-QUOTE_NO   = <L_VBAK_QT>-QT_VBELN.
        LS_DATA_H-QUOTE_TYPE = <L_VBAK_QT>-AUART.
      ENDIF.

      READ TABLE LT_DELIVERY ASSIGNING FIELD-SYMBOL(<L_DELIVERY>)
      WITH KEY VBELN = <L_BILL_VBELN>-VBELN.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-DO_NO          = <L_DELIVERY>-DO_VBELN.
        LS_DATA_H-DO_CREATE_DATE = <L_DELIVERY>-ERDAT.
        LS_DATA_H-DO_CREATE_TIME = <L_DELIVERY>-ERZET.
        LS_DATA_H-DO_DATE        = <L_DELIVERY>-LFDAT.
        LS_DATA_H-LSTEL          = <L_DELIVERY>-LSTEL.

        READ TABLE LT_TVLAT ASSIGNING FIELD-SYMBOL(<L_TVLAT>)
        WITH KEY SPRAS = IF_LANGU
                 VSTEL = <L_DELIVERY>-VSTEL
                 LSTEL = <L_DELIVERY>-LSTEL.
        IF SY-SUBRC IS INITIAL.
          LS_DATA_H-LSTEL_TX       = <L_TVLAT>-VTEXT.
        ENDIF.

      ENDIF.

      READ TABLE LT_BKPF ASSIGNING FIELD-SYMBOL(<L_BKPF>)
      WITH KEY XBLNR = <L_BILL_VBELN>-XBLNR.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-REF_FIDOC = <L_BKPF>-BELNR.
      ENDIF.

      READ TABLE LT_SHIPMENT ASSIGNING FIELD-SYMBOL(<L_SHIPMENT>)
      WITH KEY VBELN = <L_BILL_VBELN>-VBELN.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-VSART = <L_SHIPMENT>-VSART.
        LS_DATA_H-TKNUM = <L_SHIPMENT>-TKNUM.
        LS_DATA_H-DTDIS = <L_SHIPMENT>-DTDIS.
        LS_DATA_H-ROUTE = <L_SHIPMENT>-ROUTE.
        LS_DATA_H-UZDIS = <L_SHIPMENT>-UZDIS.
        LS_DATA_H-EXTI1 = <L_SHIPMENT>-EXTI1.
        LS_DATA_H-EXTI2 = <L_SHIPMENT>-EXTI2.
        LS_DATA_H-DATEN = <L_SHIPMENT>-DATEN.
        LS_DATA_H-UATEN = <L_SHIPMENT>-UATEN.
      ENDIF.

      " Payment term description
      READ TABLE LT_PAYMT_TERM ASSIGNING FIELD-SYMBOL(<L_PAYMT_TERM>)
      WITH KEY SPRAS = IF_LANGU
               ZTERM = <L_BILL_VBELN>-ZTERM.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-ZTERM_TX = <L_PAYMT_TERM>-TEXT1.
      ENDIF.

      " Get Header Text
      LS_DATA_H-REF_MEMO_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-REF_MEMO
                                                   IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                                   IF_OBJECT = GC_TDOBJECT-VBBK
                                                   IF_LANGU  = IF_LANGU ).

      LS_DATA_H-REQ_REMARK_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-REQ_REMARK
                                                     IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                                     IF_OBJECT = GC_TDOBJECT-VBBK
                                                     IF_LANGU  = IF_LANGU ).

      LS_DATA_H-PROJ_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-PROJECT_TX
                                               IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                               IF_OBJECT = GC_TDOBJECT-VBBK
                                               IF_LANGU  = IF_LANGU ).

      LS_DATA_H-REMARK_QT_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-REMARK_QT
                                                    IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                                    IF_OBJECT = GC_TDOBJECT-VBBK
                                                    IF_LANGU  = IF_LANGU ).

      LS_DATA_H-REASON_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-REASON
                                                 IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                                 IF_OBJECT = GC_TDOBJECT-VBBK
                                                 IF_LANGU  = IF_LANGU ).

      LS_DATA_H-INV_REMARK_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-INV_REMARK
                                                     IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                                     IF_OBJECT = GC_TDOBJECT-VBBK
                                                     IF_LANGU  = IF_LANGU ).

      LS_DATA_H-LAND_NO_HTX = GET_TEXT( EXPORTING IF_ID     = GC_TDID-LAND_NO
                                                  IF_NAME   = <L_BILL_VBELN>-SO_VBELN
                                                  IF_OBJECT = GC_TDOBJECT-VBBK
                                                  IF_LANGU  = IF_LANGU ).

      " Header Discount %
      READ TABLE LT_DISC_HD ASSIGNING FIELD-SYMBOL(<L_DISC_HD>)
      WITH KEY KNUMV = <L_BILL_VBELN>-KNUMV.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-HEAD_DIS_KWERT = <L_DISC_HD>-SUM_KWERT.
      ENDIF.

      " Cash Discount %
      READ TABLE LT_DISC_CASH ASSIGNING FIELD-SYMBOL(<L_DISC_CASH>)
      WITH KEY KNUMV = <L_BILL_VBELN>-KNUMV.
      IF SY-SUBRC IS INITIAL.
        LS_DATA_H-CASH_DIS_KWERT = <L_DISC_CASH>-SUM_KWERT.
      ENDIF.

*BOI CH02.01
      IF <L_BILL_VBELN>-FKART IN LS_GENC-BILLTYPE_CM_RANGE AND
         LS_GENC-BILLTYPE_CM_RANGE IS NOT INITIAL.

        READ TABLE LT_SERV_ORDER ASSIGNING FIELD-SYMBOL(<L_SERV_ORDER>)
        WITH KEY VBELN = <L_BILL_VBELN>-VBELN.
        IF SY-SUBRC IS INITIAL.
          LF_OBJECT_ID = <L_SERV_ORDER>-SERV_ORDER.
        ELSE.
          LF_OBJECT_ID = <L_BILL_VBELN>-SO_VBELN. "Sale Order
        ENDIF.

      ELSE.
*EOI CH02.01
        LF_OBJECT_ID = <L_BILL_VBELN>-XBLNR.
      ENDIF. "CH02.01+

      READ TABLE LT_SERVICE ASSIGNING FIELD-SYMBOL(<L_SERVICE>)
      WITH KEY OBJECT_ID = LF_OBJECT_ID.
      IF SY-SUBRC IS INITIAL.
        LF_TABIX = SY-TABIX.

        LS_DATA_H-QUOTE_WORK_COND      = <L_SERVICE>-ZZ1_EXT_REFNO.
        LS_DATA_H-SERV_ORDER           = <L_SERVICE>-OBJECT_ID.
        LS_DATA_H-SERV_ORDER_STATUS    = <L_SERVICE>-INBOX_STATUS.
        LS_DATA_H-RECEPTION_DATE       = <L_SERVICE>-SRV_CUST_BEG.
        LS_DATA_H-SERV_SUB_CONT        = <L_SERVICE>-ZZ1_VENDOR_TEAM.
        LS_DATA_H-SERV_CONT_STARTDATE  = <L_SERVICE>-CONTSTART.
        LS_DATA_H-SERV_CONT_ENDDATE    = <L_SERVICE>-CONTEND.
        LS_DATA_H-MGMT_NO              = <L_SERVICE>-PO_NUMBER_SOLD.
        LS_DATA_H-PLACE_FAIL           = <L_SERVICE>-ZZ1_BREAK_POSITION. "CH02.01+
        LS_DATA_H-SERV_OBJECT_TYPE     = <L_SERVICE>-AC_OBJECT_TYPE.     "CH02.01+

*BOD CH02.01
*        CASE <L_SERVICE>-AC_OBJECT_TYPE.
*          WHEN GC_AC_OBJECT_TYPE-INT_ORDER.
*            "Text-007: I/O
*            LS_DATA_H-SERV_ORDER_WBS = TEXT-007.
*          WHEN GC_AC_OBJECT_TYPE-WBS.
*            LS_DATA_H-SERV_ORDER_WBS = <L_SERVICE>-AC_ASSIGNMENT.
*        ENDCASE.
*EOD CH02.01

        " Closed Date of all Process
        IF <L_SERVICE>-HEAD_CHANGED_AT IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_TSTPS_OUTPUT'
            EXPORTING
              INPUT  = <L_SERVICE>-HEAD_CHANGED_AT
            IMPORTING
              OUTPUT = LS_DATA_H-CLOSE_DATE.
        ENDIF.

        IF <L_SERVICE>-INBOX_STATUS = GC_INBOX_STATUS_COMPLETE.
          "Text-008: Complete
          LS_DATA_H-JOB_COMP_DATE = TEXT-008.
          LS_DATA_H-CLOSE_DATE    = TEXT-008.

        ENDIF.

        CLEAR LT_STRING.

        LOOP AT LT_SERVICE ASSIGNING <L_SERVICE> FROM LF_TABIX.

*          IF <L_SERVICE>-OBJECT_ID = <L_BILL_VBELN>-XBLNR. "CH02.01-
          IF <L_SERVICE>-OBJECT_ID = LF_OBJECT_ID.          "CH02.01+
            LF_STRING = <L_SERVICE>-ZZ1_VENDOR_TEAM.
            INSERT LF_STRING INTO TABLE LT_STRING.
          ELSE.
            EXIT.
          ENDIF.

        ENDLOOP.

        CONCATENATE LINES OF LT_STRING INTO LS_DATA_H-SERV_SUB_CONT
                SEPARATED BY GC_SEPARATE-COMMA.

      ENDIF.

      LOOP AT GROUP <L_BILL_VBELN> ASSIGNING FIELD-SYMBOL(<L_BILL>).

        CLEAR: LS_DATA,
               LS_PRODH,
               LF_KSCHL.  "CH02.03+

        LS_PRODH                = <L_BILL>-PRODH.
        LS_DATA                 = CORRESPONDING #( LS_DATA_H ).

        LS_DATA-POSNR             = <L_BILL>-POSNR.
        LS_DATA-UEPOS             = <L_BILL>-UEPOS.
        LS_DATA-MATNR             = <L_BILL>-MATNR.
        LS_DATA-ARKTX             = <L_BILL>-ARKTX.
        LS_DATA-ACT_QTY           = <L_BILL>-FKIMG.
        LS_DATA-VRKME             = <L_BILL>-VRKME.
        LS_DATA-NTGEW             = <L_BILL>-NTGEW.
        LS_DATA-BRGEW             = <L_BILL>-BRGEW.
        LS_DATA-VOLUM             = <L_BILL>-VOLUM.
        LS_DATA-PRCTR             = <L_BILL>-PRCTR.
        LS_DATA-PS_PSP_PNR        = <L_BILL>-PS_PSP_PNR.
        LS_DATA-PRODH             = <L_BILL>-PRODH.
        LS_DATA-PRODH_1           = LS_PRODH-PRODH1.
        LS_DATA-PRODH_2           = LS_PRODH-PRODH2.
        LS_DATA-PRODH_3           = LS_PRODH-PRODH3.
        LS_DATA-NET_AMOUNT        = <L_BILL>-NETWR.
        LS_DATA-TAX_AMOUNT        = <L_BILL>-MWSBP.
        LS_DATA-TOTAL_AMOUNT      = <L_BILL>-NETWR + <L_BILL>-MWSBP.
        LS_DATA-SALE_AMOUNT_X1000 = <L_BILL>-NETWR * LC_AMOUNTX1000.
*BOD CH02.03
*        LS_DATA-CAUSE_FAIL        = <L_BILL>-AUFNR. "CH02.01+
*EOD CH02.03
        LS_DATA-CAUSE_FAIL        = |{ <L_BILL>-AUFNR ALPHA = OUT }|. "CH02.03+
        LS_DATA-SERV_ORDER_WBS    = |{ <L_BILL>-AUFNR ALPHA = OUT }|. "CH02.03+

        READ TABLE LT_MARA ASSIGNING FIELD-SYMBOL(<L_MARA>)
        WITH KEY MATNR = <L_BILL>-MATNR.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-ZZREFT = <L_MARA>-ZZREFT.
          LS_DATA-MFRNR  = <L_MARA>-MFRNR.

          IF <L_MARA>-ZZSCF  = GC_SALE_COUNT_FLAG_0 AND
             LS_PRODH-PRODH2 = GC_PRODH2_CDU.
            LS_DATA-SALE_QTY = <L_BILL>-FKIMG.
          ENDIF.

        ENDIF.

        " Plant
        READ TABLE LT_T001W ASSIGNING FIELD-SYMBOL(<L_T001W>)
        WITH KEY WERKS = <L_BILL>-WERKS.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-WERKS_TX = <L_T001W>-NAME1.
        ENDIF.

        " Storage Location
        READ TABLE LT_T001L ASSIGNING FIELD-SYMBOL(<L_T001L>)
        WITH KEY WERKS = <L_BILL>-WERKS
                 LGORT = <L_BILL>-LGORT.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-LGOBE = <L_T001L>-LGOBE.
        ENDIF.

        " Check Item Cat. for BOM
        IF <L_BILL>-PSTYV IN LS_GENC-ITEMCAT_BOM_RANGE.
          LS_DATA-H_BOM_QTY = <L_BILL>-FKIMG.
          LS_DATA-BILL_QTY  = <L_BILL>-FKIMG.
        ENDIF.

        " Check H-Level ITEM (BOM)
        IF LS_DATA-UEPOS IS INITIAL.
*          LS_DATA-UEPOS     = <L_BILL>-POSNR.  "CH02.02-

*BOI CH02.02
          IF <L_BILL>-UPMAT IS NOT INITIAL.
            LS_DATA-MATNR_BOM = <L_BILL>-UPMAT.
          ELSE.
*EOI CH02.02
            LS_DATA-MATNR_BOM = <L_BILL>-MATNR.
          ENDIF. "CH02.02+

          " Summary Amount of BOM, Total of BOM
          READ TABLE LT_BILL_BOM_ITEM TRANSPORTING NO FIELDS
          WITH KEY VBELN = <L_BILL>-VBELN
                   UEPOS = <L_BILL>-POSNR.
          IF SY-SUBRC IS INITIAL.

            LF_TABIX = SY-TABIX.  "CH01.02+

            LOOP AT LT_BILL_BOM_ITEM ASSIGNING FIELD-SYMBOL(<L_BILL_BOM_ITEM>) FROM LF_TABIX.
              IF <L_BILL_BOM_ITEM>-VBELN = <L_BILL>-VBELN  AND
                 <L_BILL_BOM_ITEM>-UEPOS = <L_BILL>-POSNR.
                LS_DATA-BOM_AMOUNT       = LS_DATA-BOM_AMOUNT + <L_BILL_BOM_ITEM>-NETWR.
                LS_DATA-BOM_TOTAL_AMOUNT = LS_DATA-BOM_TOTAL_AMOUNT + <L_BILL_BOM_ITEM>-NETWR + <L_BILL_BOM_ITEM>-MWSBP .

                " Summary Total Cost of BOM
                READ TABLE LT_UNIT_COST ASSIGNING FIELD-SYMBOL(<L_UNIT_COST>)
                WITH KEY KNUMV = <L_BILL_BOM_ITEM>-KNUMV
                         KPOSN = <L_BILL_BOM_ITEM>-POSNR.
                IF SY-SUBRC IS INITIAL.
                  LS_DATA-BOM_TOTAL_COST = LS_DATA-BOM_TOTAL_COST + <L_UNIT_COST>-KWERT.
                ENDIF.

              ELSE.
                EXIT.
              ENDIF.
            ENDLOOP. "End loop of LT_BILL_BOM_ITEM
          ENDIF.

        ELSE.
          LS_DATA-ACT_QTY = <L_BILL>-FKIMG.

          IF <L_BILL>-UPMAT IS NOT INITIAL.
            LS_DATA-MATNR_BOM = <L_BILL>-UPMAT.
          ELSE.
            READ TABLE LT_BILL ASSIGNING FIELD-SYMBOL(<L_BILL_BOM>)
            WITH KEY VBELN = <L_BILL>-VBELN
                     POSNR = <L_BILL>-UEPOS
            BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              LS_DATA-MATNR_BOM = <L_BILL_BOM>-MATNR.
            ENDIF.
          ENDIF.

        ENDIF.

        " Division Text
        READ TABLE LT_DIVISION ASSIGNING FIELD-SYMBOL(<L_DIVISION>)
        WITH KEY SPRAS = IF_LANGU
                 SPART = <L_BILL>-SPART.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-DIVISION = <L_DIVISION>-VTEXT.
        ENDIF.

        " Sale Area (Sales Org. /Dist. Channel/Division)
        IF LS_DATA-SALE_ORG IS NOT INITIAL.
          LS_DATA-SALE_AREA = LS_DATA-SALE_ORG.
        ENDIF.

        IF LS_DATA-DIST_CHANNEL IS NOT INITIAL.
          LS_DATA-SALE_AREA = |{ LS_DATA-SALE_AREA }/{ LS_DATA-DIST_CHANNEL }|.
        ENDIF.

        IF LS_DATA-DIVISION IS NOT INITIAL.
          LS_DATA-SALE_AREA = |{ LS_DATA-SALE_AREA }/{ LS_DATA-DIVISION }|.
        ENDIF.

        " Sales Office
        READ TABLE LT_SALE_OFFICE ASSIGNING FIELD-SYMBOL(<L_SALE_OFFICE>)
        WITH KEY SPRAS = IF_LANGU
                 VKBUR = <L_BILL>-VKBUR.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-SALE_OFFICE = <L_SALE_OFFICE>-BEZEI.
        ENDIF.

        " Sales Group
        READ TABLE LT_SALE_GROUP ASSIGNING FIELD-SYMBOL(<L_SALE_GROUP>)
        WITH KEY SPRAS = IF_LANGU
                 VKGRP = <L_BILL>-VKGRP.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-SALE_GROUP = <L_SALE_GROUP>-BEZEI.
        ENDIF.

        " Application
        READ TABLE LT_APPL_TEXT ASSIGNING FIELD-SYMBOL(<L_TVLVT>)
        WITH KEY SPRAS = IF_LANGU
                 ABRVW = <L_BILL>-ABRVW.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-APPLICATION = <L_TVLVT>-BEZEI.
        ENDIF.


*BOI CH02.03
        "Get Condition Type from Bill Type
        IF <L_BILL>-FKART  IN LS_GENC-BILLTYPE_PROJ_RANGE
       AND LS_GENC-BILLTYPE_PROJ_RANGE IS NOT INITIAL.
          LF_KSCHL = GC_KSCHL-PRICE_UNIT_2.
        ELSEIF <L_BILL>-FKART  IN LS_GENC-BILLTYPE_CM_RANGE
           AND LS_GENC-BILLTYPE_CM_RANGE IS NOT INITIAL.
          LF_KSCHL = GC_KSCHL-PRICE_UNIT_SERV.
        ELSE.
          LF_KSCHL = GC_KSCHL-PRICE_UNIT_1.
        ENDIF.
*EOI CH02.03

        " Price/Unit
        READ TABLE LT_UNIT_PRICE ASSIGNING FIELD-SYMBOL(<L_UNIT_PRICE>)
        WITH KEY KNUMV = <L_BILL>-KNUMV
                 KPOSN = <L_BILL>-POSNR
                 KSCHL = LF_KSCHL.        "CH02.03+
        IF SY-SUBRC IS INITIAL.
          LS_DATA-UNIT_PRICE = <L_UNIT_PRICE>-KBETR.
*BOI CH02.03
        ELSEIF LF_KSCHL <> GC_KSCHL-PRICE_UNIT_2.

          READ TABLE LT_UNIT_PRICE ASSIGNING <L_UNIT_PRICE>
          WITH KEY KNUMV = <L_BILL>-KNUMV
                   KPOSN = <L_BILL>-POSNR
                   KSCHL = GC_KSCHL-PRICE_UNIT_2.
          IF SY-SUBRC IS INITIAL.
            LS_DATA-UNIT_PRICE = <L_UNIT_PRICE>-KBETR.
          ENDIF.
*EOI CH02.03
        ENDIF.

        " Cost/Unit
        READ TABLE LT_UNIT_COST ASSIGNING <L_UNIT_COST>
        WITH KEY KNUMV = <L_BILL>-KNUMV
                 KPOSN = <L_BILL>-POSNR.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-UNIT_COST  = <L_UNIT_COST>-KBETR.
          LS_DATA-TOTAL_COST = <L_UNIT_COST>-KWERT.
        ENDIF.

        " Net Price/Unit
        IF <L_BILL>-FKIMG IS NOT INITIAL.
          LS_DATA-UNIT_NET_PRICE = <L_BILL>-NETWR / <L_BILL>-FKIMG.
        ENDIF.

        " Project Name
        READ TABLE LT_PROJ ASSIGNING FIELD-SYMBOL(<L_PROJ>)
        WITH KEY PSPNR = <L_BILL>-PS_PSP_PNR.
        IF SY-SUBRC IS INITIAL.
          LS_DATA-PROJ_NAME = <L_PROJ>-PSPHI_TX.
          LS_DATA-POSID     =  <L_PROJ>-POSID. "CH02.01+
        ENDIF.

*BOD CH02.01
**BOI CH02.01
*        CASE LS_DATA_H-SERV_OBJECT_TYPE.
*          WHEN GC_AC_OBJECT_TYPE-INT_ORDER.
*            "Text-007: I/O
*            LS_DATA-SERV_ORDER_WBS = TEXT-007.
*          WHEN GC_AC_OBJECT_TYPE-WBS.
*            LS_DATA-SERV_ORDER_WBS = LS_DATA-POSID.
*        ENDCASE.
*        IF LS_DATA_H-SERV_ORDER IS NOT INITIAL.
*          LS_DATA-CAUSE_FAIL = <L_BILL>-AUFNR.
*        ENDIF.
**EOI CH02.01
*EOD CH02.01

        " Advance Receive for SO document no.
        READ TABLE LT_ADV_RECT
        TRANSPORTING NO FIELDS
        WITH KEY VBELN = <L_BILL>-SO_VBELN
                 BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LF_TABIX = SY-TABIX.

          CLEAR LT_STRING.

          LOOP AT LT_ADV_RECT ASSIGNING FIELD-SYMBOL(<L_ADV_RECT>) FROM LF_TABIX.

            IF <L_ADV_RECT>-VBELN <> <L_BILL>-SO_VBELN.
              EXIT.
            ENDIF.

            IF <L_ADV_RECT>-BELNR IS NOT INITIAL.
              LF_STRING = <L_ADV_RECT>-BELNR.
              INSERT LF_STRING INTO TABLE LT_STRING.
            ENDIF.

          ENDLOOP. "End loop of LT_ADV_RECT

          CONCATENATE LINES OF LT_STRING INTO LS_DATA-ADV_RECEIVE
                  SEPARATED BY GC_SEPARATE-COMMA.
        ENDIF.

        " Check Bill Type to display sign (-)
        IF <L_BILL>-FKART IN LS_GENC-BILLTYPE_MINUS_RANGE
       AND LS_GENC-BILLTYPE_MINUS_RANGE IS NOT INITIAL.

          LS_DATA-H_BOM_QTY         = ABS( LS_DATA-H_BOM_QTY ) * LC_MINUS_SIGN.
          LS_DATA-SALE_QTY          = ABS( LS_DATA-SALE_QTY ) * LC_MINUS_SIGN.
          LS_DATA-BILL_QTY          = ABS( LS_DATA-BILL_QTY ) * LC_MINUS_SIGN.
          LS_DATA-NET_AMOUNT        = ABS( LS_DATA-NET_AMOUNT ) * LC_MINUS_SIGN.
          LS_DATA-TAX_AMOUNT        = ABS( LS_DATA-TAX_AMOUNT ) * LC_MINUS_SIGN.
          LS_DATA-TOTAL_AMOUNT      = ABS( LS_DATA-TOTAL_AMOUNT ) * LC_MINUS_SIGN.
          LS_DATA-UNIT_COST         = ABS( LS_DATA-UNIT_COST ) * LC_MINUS_SIGN.
          LS_DATA-TOTAL_COST        = ABS( LS_DATA-TOTAL_COST ) * LC_MINUS_SIGN.
          LS_DATA-BOM_AMOUNT        = ABS( LS_DATA-BOM_AMOUNT ) * LC_MINUS_SIGN.
          LS_DATA-BOM_TOTAL_AMOUNT  = ABS( LS_DATA-BOM_TOTAL_AMOUNT ) * LC_MINUS_SIGN.
          LS_DATA-BOM_TOTAL_COST    = ABS( LS_DATA-BOM_TOTAL_COST ) * LC_MINUS_SIGN.
          LS_DATA-SALE_AMOUNT_X1000 = ABS( LS_DATA-SALE_AMOUNT_X1000 ) * LC_MINUS_SIGN.

        ENDIF.

        APPEND LS_DATA TO ET_DATA.

      ENDLOOP. "End loop member of <L_BILL_VBELN>

    ENDLOOP. "End loop of <L_BILL_VBELN>

  ENDMETHOD.


  METHOD GET_TEXT.

    DATA:
      LF_NAME  TYPE THEAD-TDNAME,
      LT_TLINE TYPE TLINE_TTYP.

    IF IF_NAME IS INITIAL.
      RETURN.
    ENDIF.

    LF_NAME = IF_NAME.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        CLIENT                  = SY-MANDT
        ID                      = IF_ID
        LANGUAGE                = IF_LANGU
        NAME                    = LF_NAME
        OBJECT                  = IF_OBJECT
      TABLES
        LINES                   = LT_TLINE
      EXCEPTIONS
        ID                      = 1
        LANGUAGE                = 2
        NAME                    = 3
        NOT_FOUND               = 4
        OBJECT                  = 5
        REFERENCE_CHECK         = 6
        WRONG_ACCESS_TO_ARCHIVE = 7
        OTHERS                  = 8.
    IF SY-SUBRC IS INITIAL.

      LOOP AT LT_TLINE ASSIGNING FIELD-SYMBOL(<L_TLINE>).

        IF <L_TLINE>-TDLINE IS INITIAL.
          CONTINUE.
        ENDIF.

        IF RF_TEXT IS INITIAL.
          RF_TEXT = <L_TLINE>-TDLINE.
        ELSE.
          CONCATENATE RF_TEXT
                      <L_TLINE>-TDLINE
                 INTO RF_TEXT
         SEPARATED BY SPACE.
        ENDIF.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.


  METHOD GET_GENC.

    CONSTANTS:
      LC_ITEMCAT_BOM      TYPE ZSDSDE_PARAM_NAME VALUE 'ITEMCAT_BOM',
      LC_DISCOUNT_HD      TYPE ZSDSDE_PARAM_NAME VALUE 'DISCOUNT_HD',
      LC_DISCOUNT_CASH    TYPE ZSDSDE_PARAM_NAME VALUE 'DISCOUNT_CASH',
      LC_BILLTYPE_MINUS   TYPE ZSDSDE_PARAM_NAME VALUE 'BILLTYPE_MINUS',
      LC_SD_DOCCAT        TYPE ZSDSDE_PARAM_NAME VALUE 'SD_DOCCAT',
      LC_CUST_ACCT_GRP_OT TYPE ZSDSDE_PARAM_NAME VALUE 'CUST_ACCT_GRP_OT', "CH01.01+
      LC_BILLTYPE_CM      TYPE ZSDSDE_PARAM_NAME VALUE 'BILLTYPE_CM',      "CH02.01+
      LC_BILLTYPE_PROJ    TYPE ZSDSDE_PARAM_NAME VALUE 'BILLTYPE_PROJ',    "CH02.03+

      LC_PARAM_EXT_BILL   TYPE ZSDSCAC001-PARAM_EXT VALUE 'BILL'
      .

    DATA:
      LT_GENC  TYPE  ZCL_SDSCA_UTILITIES=>TT_GEN_C.

* Initialize Output
    CLEAR: ES_GENC.

* Read All GenC constants for program
    CALL METHOD ZCL_SDSCA_UTILITIES=>GET_GEN_C
      EXPORTING
        IF_REPID = IF_REPID
      IMPORTING
        ET_GEN_C = LT_GENC.


    LOOP AT LT_GENC ASSIGNING FIELD-SYMBOL(<L_GENC>).

      CASE <L_GENC>-PARAM.
        WHEN LC_ITEMCAT_BOM.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-ITEMCAT_BOM_RANGE.

          INSERT VALUE TS_PSTYV( PSTYV = <L_GENC>-VALUE_LOW )
            INTO TABLE ES_GENC-T_ITEMCAT_BOM.

        WHEN LC_BILLTYPE_MINUS.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-BILLTYPE_MINUS_RANGE.

        WHEN LC_DISCOUNT_HD.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-DISCOUNT_HD_RANGE.

        WHEN LC_DISCOUNT_CASH.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-DISCOUNT_CASH_RANGE.

        WHEN LC_SD_DOCCAT.

          IF <L_GENC>-PARAM_EXT = LC_PARAM_EXT_BILL.

            APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                            OPTION = <L_GENC>-PARAM_OPTION
                            LOW    = <L_GENC>-VALUE_LOW
                            HIGH   = <L_GENC>-VALUE_HIGH )
                      TO  ES_GENC-SD_DOCCAT_BILL_RANGE.

          ENDIF.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-SD_DOCCAT_RANGE.

*BOI CH01.01
        WHEN LC_CUST_ACCT_GRP_OT.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-CUST_ACCT_GRP_OT_RANGE.
*EOI CH01.01

*BOI CH01.01
        WHEN LC_BILLTYPE_CM.

          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-BILLTYPE_CM_RANGE.

*EOI CH01.01

*BOI CH02.03
        WHEN LC_BILLTYPE_PROJ.
          APPEND VALUE #( SIGN   = <L_GENC>-PARAM_SIGN
                          OPTION = <L_GENC>-PARAM_OPTION
                          LOW    = <L_GENC>-VALUE_LOW
                          HIGH   = <L_GENC>-VALUE_HIGH )
                    TO  ES_GENC-BILLTYPE_PROJ_RANGE.
*EOI CH02.03
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


  METHOD GET_DATE_IN_FISCAL_YEAR.

    CONSTANTS:
      LC_NO_DAY_WEEK      TYPE I VALUE 7,
      LC_NO_WEEK_IN_MONTH TYPE I VALUE 4,
      LC_MONTH_1          TYPE I VALUE 1,
      LC_MONTH_3          TYPE I VALUE 3,
      LC_MONTH_4          TYPE I VALUE 4,
      LC_MONTH_6          TYPE I VALUE 6,
      LC_MONTH_7          TYPE I VALUE 7,
      LC_MONTH_9          TYPE I VALUE 9,
      LC_MONTH_10         TYPE I VALUE 10,
      LC_MONTH_12         TYPE I VALUE 12,
      LC_DIFF_MONTH       TYPE I VALUE 9.

    DATA:
      LF_WEEK          TYPE SCAL-WEEK,
      LF_1ST_DATE      TYPE DATS,
      LF_WEEK_IN_MONTH TYPE I VALUE 1,
      LF_DAY           TYPE I,
      LF_MONTH         TYPE I,
      LF_PERIOD        TYPE I,
      LF_YEAR          TYPE I.

    CLEAR: EF_HALF_PERIOD  ,
           EF_QUARTER      ,
           EF_PERIOD       ,
           EF_WEEK         ,
           EF_MONTH        ,
           EF_CALENDAR_YEAR,
           EF_FISCAL_YEAR .

    IF IF_DATE IS INITIAL.
      RETURN.
    ENDIF.

    LF_MONTH  = IF_DATE+04(02).
    LF_YEAR   = IF_DATE+00(04).

    EF_MONTH  = LF_MONTH.

    IF ( LF_MONTH BETWEEN 4 AND 9 ).
      " Text-001: 1st half
      EF_HALF_PERIOD = TEXT-001.
    ELSE. " Month 10-3
      " Text-002: 2st half
      EF_HALF_PERIOD = TEXT-002.
    ENDIF.

    EF_CALENDAR_YEAR = LF_YEAR.

    " Fiscal Year is Previous Current Year for Month 1-3
*    IF ( LF_YEAR BETWEEN 1 AND 3 ).  "CH03.01-
    IF ( LF_MONTH BETWEEN 1 AND 3 ).  "CH03.01+
      EF_FISCAL_YEAR = LF_YEAR - 1.
    ELSE. "Fiscal Year is current Year
      EF_FISCAL_YEAR = LF_YEAR.
    ENDIF.

    " Calculate period in Fiscal Year ( 3rd month is the End of Fiscal Year )
    LF_PERIOD = LF_MONTH + LC_DIFF_MONTH.
    IF LF_PERIOD > LC_MONTH_12.
      LF_PERIOD = LF_PERIOD - LC_MONTH_12.
    ENDIF.
    EF_PERIOD = LF_PERIOD.

    " Get Quarter
    IF ( LF_MONTH BETWEEN LC_MONTH_1 AND LC_MONTH_3 ).
      " Text-003: Quarter 1
      EF_QUARTER = TEXT-003.
    ELSEIF ( LF_MONTH BETWEEN LC_MONTH_4 AND LC_MONTH_6 ).
      " Text-004: Quarter 2
      EF_QUARTER = TEXT-004.
    ELSEIF ( LF_MONTH BETWEEN LC_MONTH_7 AND LC_MONTH_9 ).
      " Text-005: Quarter 3
      EF_QUARTER = TEXT-005.
    ELSEIF ( LF_MONTH BETWEEN LC_MONTH_10 AND LC_MONTH_12 ).
      " Text-006: Quarter 4
      EF_QUARTER = TEXT-006.
    ENDIF.

    " Get week in month
    CALL FUNCTION 'DATE_GET_WEEK'
      EXPORTING
        DATE         = IF_DATE
      IMPORTING
        WEEK         = LF_WEEK
      EXCEPTIONS
        DATE_INVALID = 1
        OTHERS       = 2.
    IF SY-SUBRC <> 0.
      RETURN.
    ENDIF.

    CALL FUNCTION 'WEEK_GET_FIRST_DAY'
      EXPORTING
        WEEK         = LF_WEEK
      IMPORTING
        DATE         = LF_1ST_DATE
      EXCEPTIONS
        WEEK_INVALID = 1
        OTHERS       = 2.
    IF SY-SUBRC <> 0 OR
       LF_1ST_DATE IS INITIAL.
      RETURN.
    ENDIF.

    LF_DAY = LF_1ST_DATE+6(2).
    WHILE LF_DAY > 0.
      LF_DAY = LF_DAY - LC_NO_DAY_WEEK.
      IF  LF_DAY > 0.
        LF_WEEK_IN_MONTH = LF_WEEK_IN_MONTH + 1.
      ENDIF.
    ENDWHILE.

    IF LF_WEEK_IN_MONTH > LC_NO_WEEK_IN_MONTH.
      LF_WEEK_IN_MONTH = LF_WEEK_IN_MONTH - 1.
    ENDIF.

    EF_WEEK = LF_WEEK_IN_MONTH.

  ENDMETHOD.


  METHOD GET_FI_DOC.

    CLEAR ET_BKPF.

    IF IT_XBLNR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM BKPF
     INNER JOIN @IT_XBLNR AS KEY
             ON BKPF~XBLNR = KEY~XBLNR
         FIELDS BKPF~XBLNR,
                BKPF~BELNR
          WHERE BKPF~BUKRS = @IF_BUKRS
            AND BKPF~XBLNR IS NOT INITIAL
           INTO TABLE @ET_BKPF.

  ENDMETHOD.


  METHOD GET_CUST_CRDT_GRP.

    CLEAR ET_BUT050.

    IF IT_KUNNR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM BUT050 AS BP_REL
     INNER JOIN @IT_KUNNR AS KEY
             ON BP_REL~PARTNER1 = KEY~KUNNR
         FIELDS BP_REL~PARTNER1,
                BP_REL~PARTNER2
          WHERE BP_REL~RELTYP = @GC_RELTYP_CREDIT_GROUP
            AND ( BP_REL~DATE_FROM <= @IF_KEYDATE AND
                  BP_REL~DATE_TO   >= @IF_KEYDATE )
          INTO TABLE @ET_BUT050.

  ENDMETHOD.


  METHOD GET_PERSON_NAME.

    CLEAR ET_PA0002.

    IF IT_PERNR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM PA0002 AS PERS
    INNER JOIN @IT_PERNR AS KEY
            ON PERS~PERNR = KEY~PERNR
    FIELDS PERS~PERNR,
           CONCAT_WITH_SPACE( PERS~VORNA, PERS~NACHN, 1  ) AS NAME
    INTO TABLE @ET_PA0002.

  ENDMETHOD.


  METHOD GET_SERVICE.

    CLEAR ET_SERVICE.

    IF IT_OBJECT_ID IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM CRMS4D_SERV_H AS SERV_H
    INNER JOIN @IT_OBJECT_ID AS KEY
            ON KEY~OBJECT_ID = SERV_H~OBJECT_ID
    INNER JOIN CRMS4D_SERV_I AS SERV_I
            ON SERV_I~OBJTYPE_H = SERV_H~OBJTYPE_H AND
               SERV_I~OBJECT_ID = SERV_H~OBJECT_ID
     FIELDS SERV_I~OBJECT_ID,
            SERV_I~NUMBER_INT,
            SERV_I~NUMBER_EXT,
            SERV_I~ZZ1_VENDOR_TEAM,
            SERV_H~ZZ1_EXT_REFNO,
            SERV_H~INBOX_STATUS,
            SERV_H~AC_ASSIGNMENT,
            SERV_H~AC_OBJECT_TYPE,
            SERV_H~HEAD_CHANGED_AT,
            SERV_H~CONTSTART,
            SERV_H~CONTEND,
            SERV_H~PO_NUMBER_SOLD,
            SERV_H~SRV_CUST_BEG,
            SERV_H~ZZ1_BREAK_POSITION
    WHERE SERV_H~OBJTYPE_H = @GC_OBJTYPE_SERVICE
      AND KEY~OBJECT_ID IS NOT INITIAL
     INTO TABLE @ET_SERVICE.

  ENDMETHOD.


  METHOD GET_HEAD_DISCOUNT.

    CLEAR ET_DISC_HD.

    IF IT_KNUMV IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM PRCD_ELEMENTS AS PRC
 INNER JOIN @IT_KNUMV AS KEY
         ON PRC~KNUMV = KEY~KNUMV
     FIELDS PRC~KNUMV,
            SUM( ABS( PRC~KWERT ) ) AS SUM_KWERT
      WHERE PRC~KINAK =  @SPACE
        AND PRC~KSCHL IN @IS_GENC-DISCOUNT_HD_RANGE
      GROUP BY PRC~KNUMV
 INTO TABLE @ET_DISC_HD.

  ENDMETHOD.


  METHOD GET_SALE_ORG_TEXT.

    CLEAR ET_TVKOT.

    IF IT_VKORG IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVKOT
         FIELDS TVKOT~SPRAS,
                TVKOT~VKORG,
                TVKOT~VTEXT
         FOR ALL ENTRIES IN @IT_VKORG
          WHERE TVKOT~VKORG = @IT_VKORG-VKORG
            AND TVKOT~SPRAS = @IF_LANGU
        INTO TABLE @ET_TVKOT.

  ENDMETHOD.


  METHOD GET_CASH_DISCOUNT.

    CLEAR ET_DISC_CASH.

    IF IT_KNUMV IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM PRCD_ELEMENTS AS PRC
     INNER JOIN @IT_KNUMV AS KEY
             ON PRC~KNUMV = KEY~KNUMV
         FIELDS PRC~KNUMV,
                SUM( ABS( PRC~KWERT ) ) AS SUM_KWERT
          WHERE PRC~KINAK =  @SPACE
            AND PRC~KSCHL IN @IS_GENC-DISCOUNT_CASH_RANGE
          GROUP BY PRC~KNUMV
     INTO TABLE @ET_DISC_CASH.

  ENDMETHOD.


  METHOD GET_UNIT_PRICE.

    DATA: LT_KSCHL_RANGE TYPE COND_TYPE_RANGE_ERP_T.

    CLEAR ET_UNIT_PRICE.

    LT_KSCHL_RANGE = VALUE #( SIGN = 'I' OPTION = 'EQ'
                            ( LOW = GC_KSCHL-PRICE_UNIT_1 )
                            ( LOW = GC_KSCHL-PRICE_UNIT_2 )
                            ( LOW = GC_KSCHL-PRICE_UNIT_SERV ) ).   "CH02.01+

    IF IT_PRCD_EL_KEY IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM PRCD_ELEMENTS AS PRC
     INNER JOIN @IT_PRCD_EL_KEY AS KEY
             ON PRC~KNUMV = KEY~KNUMV AND
                PRC~KPOSN = KEY~KPOSN
         FIELDS PRC~KNUMV,
                PRC~KPOSN,
                PRC~KSCHL,
                PRC~KBETR,
                PRC~KWERT
*          WHERE PRC~KINAK = @SPACE  "CH02.01-
          WHERE PRC~KINAK IN ( @SPACE, @GC_KINAK_INACT )  "CH02.01+
            AND PRC~KSCHL IN @LT_KSCHL_RANGE
            AND PRC~KBETR IS NOT INITIAL
     INTO TABLE @ET_UNIT_PRICE.

  ENDMETHOD.


  METHOD GET_UNIT_COST.

    CLEAR ET_UNIT_COST.

    IF IT_PRCD_EL_KEY IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM PRCD_ELEMENTS AS PRC
     INNER JOIN @IT_PRCD_EL_KEY AS KEY
             ON PRC~KNUMV = KEY~KNUMV AND
                PRC~KPOSN = KEY~KPOSN
         FIELDS PRC~KNUMV,
                PRC~KPOSN,
                PRC~KSCHL,
                PRC~KBETR,
                PRC~KWERT
          WHERE PRC~KINAK = @SPACE
            AND PRC~KSCHL = @GC_KSCHL-COST_UNIT
     INTO TABLE @ET_UNIT_COST.

  ENDMETHOD.


  METHOD GET_PROJECT.

    CLEAR ET_PROJ.

    IF IT_PSPNR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM PRPS
     INNER JOIN @IT_PSPNR AS KEY
             ON PRPS~PSPNR = KEY~PSPNR
     INNER JOIN PROJ
             ON PRPS~PSPHI = PROJ~PSPNR
         FIELDS PRPS~PSPNR,
                PRPS~POSID,
                PRPS~PSPHI,
                PROJ~POST1 AS PSPHI_TX
     INTO TABLE @ET_PROJ.

  ENDMETHOD.


  METHOD GET_APPL_TEXT.

    CLEAR ET_TVLVT.

    IF IT_ABRVW IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVLVT
         FIELDS TVLVT~SPRAS,
                TVLVT~ABRVW,
                TVLVT~BEZEI
        FOR ALL ENTRIES IN @IT_ABRVW
          WHERE TVLVT~ABRVW = @IT_ABRVW-ABRVW
            AND TVLVT~SPRAS = @IF_LANGU
     INTO TABLE @ET_TVLVT.

  ENDMETHOD.


  METHOD GET_CUSTOMER.

    CLEAR: ET_ADRC_CUST,
           ET_KNB1,
           ET_T001S,
           ET_TKUKT,
           ET_ADR6_CUST.

    IF IT_KUNNR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM KNA1
     INNER JOIN KNB1
             ON KNA1~KUNNR = KNB1~KUNNR
         FIELDS KNA1~KUNNR,
                KNA1~ADRNR,
                KNA1~TELF2,
                KNA1~ERDAT,
                KNB1~BUSAB,
                KNB1~BUKRS,
                KNA1~KUKLA,
                KNA1~KTOKD                  "CH01.01+
        FOR ALL ENTRIES IN @IT_KUNNR
          WHERE KNA1~KUNNR  = @IT_KUNNR-KUNNR
            AND KNB1~BUKRS  = @IF_BUKRS
     INTO TABLE @ET_KNB1.

    IF ET_KNB1 IS INITIAL.
      RETURN.
    ENDIF.

    IF ET_TKUKT IS SUPPLIED.

      " Customer Classification
      SELECT FROM TKUKT
          FIELDS TKUKT~SPRAS,
                 TKUKT~KUKLA,
                 TKUKT~VTEXT
          FOR ALL ENTRIES IN @ET_KNB1
           WHERE TKUKT~KUKLA = @ET_KNB1-KUKLA
             AND TKUKT~SPRAS = @IF_LANGU
            INTO TABLE @ET_TKUKT.
    ENDIF.

    IF ET_T001S IS SUPPLIED.

      " Account Clerk
      SELECT FROM T001S
      FIELDS T001S~BUKRS,
             T001S~BUSAB,
             T001S~SNAME
     FOR ALL ENTRIES IN @ET_KNB1
       WHERE T001S~BUSAB = @ET_KNB1-BUSAB
         AND T001S~BUKRS = @ET_KNB1-BUKRS
        ORDER BY PRIMARY KEY
        INTO TABLE @ET_T001S.
    ENDIF.

    IF ET_ADRC_CUST IS SUPPLIED.

      " Get Address for Customer (Payer)
      SELECT FROM ADRC
       INNER JOIN @ET_KNB1 AS CUST
               ON ADRC~ADDRNUMBER = CUST~ADRNR
           FIELDS CUST~KUNNR,
                  ADRC~NATION,
                  ADRC~ADDRNUMBER,
                  ADRC~TEL_NUMBER,
                  CONCAT_WITH_SPACE( ADRC~NAME1, ADRC~NAME2, 1 ) AS NAME,
                  ADRC~STREET,
                  ADRC~STR_SUPPL3,
                  ADRC~LOCATION,
                  ADRC~STR_SUPPL1,
                  ADRC~STR_SUPPL2,
                  ADRC~CITY2,
                  ADRC~CITY1,
                  ADRC~POST_CODE1
      WHERE ( ADRC~DATE_FROM <= @IF_KEYDATE AND
              ADRC~DATE_TO   >= @IF_KEYDATE )
           INTO TABLE @ET_ADRC_CUST.
    ENDIF.

    IF ET_ADR6_CUST IS SUPPLIED.

*    " Get Email Address for Customer
      SELECT FROM ADR6
      INNER JOIN @ET_KNB1 AS CUST
              ON ADR6~ADDRNUMBER = CUST~ADRNR
          FIELDS CUST~KUNNR,
                 ADR6~ADDRNUMBER,
                 ADR6~SMTP_ADDR,
                 ADR6~FLGDEFAULT,
                 ADR6~HOME_FLAG
         WHERE ADR6~SMTP_ADDR IS NOT INITIAL
           ORDER BY KUNNR      ASCENDING,
                    FLGDEFAULT DESCENDING,
                    HOME_FLAG  DESCENDING
          INTO TABLE @DATA(LT_ADR6_CUST).
      IF SY-SUBRC IS INITIAL.
        ET_ADR6_CUST = CORRESPONDING #( LT_ADR6_CUST DISCARDING DUPLICATES ).
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD GET_PLANT_NAME.

    CLEAR ET_T001W.

    IF IT_WERKS IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM T001W
         FIELDS WERKS,
                NAME1
        FOR ALL ENTRIES IN @IT_WERKS
         WHERE WERKS = @IT_WERKS-WERKS
          INTO TABLE @ET_T001W.

  ENDMETHOD.


  METHOD GET_DIST_CHANNEL_TEXT.

    CLEAR ET_TVTWT.

    IF IT_VTWEG IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVTWT
         FIELDS TVTWT~SPRAS,
                TVTWT~VTWEG,
                TVTWT~VTEXT
     FOR ALL ENTRIES IN @IT_VTWEG
         WHERE TVTWT~VTWEG =  @IT_VTWEG-VTWEG
           AND TVTWT~SPRAS = @IF_LANGU
         INTO TABLE @ET_TVTWT.

  ENDMETHOD.


  METHOD GET_BILL_TYPE_TEXT.

    CLEAR ET_TVFKT.

    IF IT_FKART IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVFKT
    FIELDS TVFKT~SPRAS,
           TVFKT~FKART,
           TVFKT~VTEXT
   FOR ALL ENTRIES IN @IT_FKART
     WHERE TVFKT~SPRAS = @IF_LANGU
       AND TVFKT~FKART = @IT_FKART-FKART
   INTO TABLE @ET_TVFKT.

  ENDMETHOD.


  METHOD GET_PAYMT_TERM_TEXT.

    CLEAR ET_T052U.

    IF IT_ZTERM IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM T052U
         FIELDS T052U~SPRAS,
                T052U~ZTERM,
                T052U~TEXT1
        FOR ALL ENTRIES IN @IT_ZTERM
          WHERE T052U~ZTERM = @IT_ZTERM-ZTERM
            AND T052U~SPRAS = @IF_LANGU
            AND T052U~ZTAGG IS INITIAL
     INTO TABLE @ET_T052U.

  ENDMETHOD.


  METHOD GET_DIVISION_TEXT.

    CLEAR ET_TSPAT.

    IF IT_SPART IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TSPAT
        FIELDS TSPAT~SPRAS,
               TSPAT~SPART,
               TSPAT~VTEXT
        FOR ALL ENTRIES IN @IT_SPART
         WHERE TSPAT~SPART = @IT_SPART-SPART
           AND TSPAT~SPRAS = @IF_LANGU
          INTO TABLE @ET_TSPAT.

  ENDMETHOD.


  METHOD GET_CUST_GROUP_1_TEXT.

    CLEAR ET_TVV1T.

    IF IT_KVGR1 IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVV1T AS CUST_GRP1
         FIELDS CUST_GRP1~SPRAS,
                CUST_GRP1~KVGR1,
                CUST_GRP1~BEZEI
        FOR ALL ENTRIES IN @IT_KVGR1
          WHERE CUST_GRP1~SPRAS = @IF_LANGU
            AND CUST_GRP1~KVGR1 = @IT_KVGR1-KVGR1
           INTO TABLE @ET_TVV1T.

  ENDMETHOD.


  METHOD GET_CUST_GROUP_2_TEXT.

    CLEAR ET_TVV2T.

    IF IT_KVGR2 IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVV2T AS CUST_GRP2
         FIELDS CUST_GRP2~SPRAS,
                CUST_GRP2~KVGR2,
                CUST_GRP2~BEZEI
        FOR ALL ENTRIES IN @IT_KVGR2
          WHERE CUST_GRP2~SPRAS = @IF_LANGU
            AND CUST_GRP2~KVGR2 = @IT_KVGR2-KVGR2
          INTO TABLE @ET_TVV2T.

  ENDMETHOD.


  METHOD GET_STORAGE_LOCATION_TEXT.

    CLEAR ET_T001L.

    IF IT_T001L_KEY IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM T001L
      FIELDS T001L~WERKS,
             T001L~LGORT,
             T001L~LGOBE
     FOR ALL ENTRIES IN @IT_T001L_KEY
       WHERE T001L~WERKS = @IT_T001L_KEY-WERKS
         AND T001L~LGORT = @IT_T001L_KEY-LGORT
  INTO TABLE @ET_T001L.

  ENDMETHOD.


  METHOD GET_MD_MATERIAL.

    CLEAR ET_MARA.

    IF IT_MATNR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM MARA
    INNER JOIN @IT_MATNR AS KEY
            ON MARA~MATNR = KEY~MATNR
    FIELDS MARA~MATNR,
           MARA~ZZREFT,
           MARA~ZZSCF,
           MARA~MFRNR
     WHERE KEY~MATNR IS NOT INITIAL
      INTO TABLE @ET_MARA.

  ENDMETHOD.


  METHOD GET_DOCU_FLOW_FOR_BILL.

    DATA: LS_ADDR_PARTNER TYPE TS_ADDR_PARTNER. "CH01.01+

    CLEAR: ET_DELIVERY,
           ET_QUOTATION,
           ET_SHIPMENT,
           ET_SHIPTO,
           ET_CUST_ONETIME,   "CH01.01+
           ET_SERV_ORDER,     "CH02.01+
           ET_VBFA_ORD_RES.

    IF IT_VBELN IS INITIAL.
      RETURN.
    ENDIF.

    " Get Document Flow for Bill Document
    SELECT FROM VBFA
    INNER JOIN @IT_VBELN AS KEY
            ON KEY~VBELN = VBFA~VBELN
    FIELDS DISTINCT VBFA~VBELN,
                    VBFA~VBTYP_V,
                VBFA~VBTYP_N,
                VBFA~VBELV
    WHERE VBFA~VBTYP_V IN @IS_GENC-SD_DOCCAT_RANGE
    INTO TABLE @DATA(LT_VBFA).

*BOI CH02.01
    IF ET_SERV_ORDER IS SUPPLIED.
      " Get Service Order for Billing Request
      SELECT FROM VBFA AS SERV
      INNER JOIN @LT_VBFA AS BILL_REQ
              ON SERV~VBELN   = BILL_REQ~VBELV
          FIELDS  BILL_REQ~VBELN,
                  BILL_REQ~VBELV AS BILL_REQ,
                  SERV~VBELV AS SERV_ORDER
            WHERE BILL_REQ~VBTYP_V = @GC_VBTYP-BILL_REQ AND
                  SERV~VBTYP_V     = @GC_VBTYP-SERV_ORDER
            INTO TABLE @ET_SERV_ORDER.
    ENDIF.
*EOI CH02.01

    " Get Delivery Document for Billing Document
    SELECT FROM LIKP AS H
    INNER JOIN @LT_VBFA AS VBFA_DO
            ON VBFA_DO~VBELV   = H~VBELN
        FIELDS  VBFA_DO~VBELN,
                H~VBELN AS DO_VBELN,
                H~ERDAT,
                H~ERZET,
                H~LFDAT,
                H~VSTEL,
                H~LSTEL
          WHERE VBFA_DO~VBTYP_V = @GC_VBTYP-DELIVERY
          INTO TABLE @ET_DELIVERY.

    " Get the Shipment Document from Delivery
    SELECT FROM VBFA
    INNER JOIN @ET_DELIVERY AS DO
            ON VBFA~VBELV = DO~DO_VBELN
    FIELDS DO~VBELN,
           VBFA~VBELN AS TKNUM,
           DO~DO_VBELN
    WHERE VBFA~VBTYP_N    = @GC_VBTYP-SHIP_TO
    INTO TABLE @DATA(LT_VBFA_SHIP).

    SELECT FROM VTTK AS H
    INNER JOIN @LT_VBFA_SHIP AS KEY
            ON KEY~TKNUM = H~TKNUM
    INNER JOIN VTTP AS IT
            ON IT~TKNUM = H~TKNUM
    FIELDS KEY~VBELN,
           KEY~DO_VBELN,
           H~TKNUM,
           H~VSART,
           H~DTDIS,
           H~ROUTE,
           H~UZDIS,
           H~EXTI1,
           H~EXTI2,
           H~DATEN,
           H~UATEN
   INTO TABLE @ET_SHIPMENT.

    " Get SD Document for Quotation
    SELECT FROM VBAK
     INNER JOIN @LT_VBFA AS KEY
             ON VBAK~VBELN = KEY~VBELV
         FIELDS KEY~VBELN,
                KEY~VBTYP_V,
                VBAK~VBELN AS QT_VBELN,
                VBAK~AUART,
                VBAK~AUDAT,
                VBAK~ERNAM
          WHERE KEY~VBTYP_V = @GC_VBTYP-QUOTATION
     INTO TABLE @ET_QUOTATION.

    " Get Credit/Debit Memo Request and Request for Order Reason
    SELECT FROM VBFA
    INNER JOIN @IT_VBELN AS KEY
            ON VBFA~VBELN = KEY~VBELN
    FIELDS DISTINCT VBFA~VBELN,
                    VBFA~VBELV
     WHERE VBFA~VBTYP_V IN ( @GC_VBTYP-CREDIT_MEMO_REQ,
                             @GC_VBTYP-DEBIT_MEMO_REQ,
                             @GC_VBTYP-RETURN )
      ORDER BY VBFA~VBELN
      INTO TABLE @DATA(LT_VBFA_ORD_RES).

    IF LT_VBFA_ORD_RES IS NOT INITIAL.
      SELECT FROM VBAK
      INNER JOIN @LT_VBFA_ORD_RES AS KEY
              ON VBAK~VBELN = KEY~VBELV
      FIELDS KEY~VBELN,
             KEY~VBELV,
             VBAK~AUGRU
        INTO TABLE @ET_VBFA_ORD_RES.
    ENDIF.

    " Get Ship-to number and Address for Billing
    SELECT FROM VBPA AS PA
    INNER JOIN @IT_VBELN AS KEY
             ON PA~VBELN = KEY~VBELN
    INNER JOIN ADRC
             ON PA~ADRNR = ADRC~ADDRNUMBER
    FIELDS PA~VBELN,
           PA~PARVW,                              "CH01.01+
           ADRC~NATION,
           PA~KUNNR,
           PA~ADRNR,
           CONCAT_WITH_SPACE( ADRC~NAME1, ADRC~NAME2, 1 ) AS NAME,
           ADRC~STREET,
           ADRC~STR_SUPPL3,
           ADRC~LOCATION,
           ADRC~STR_SUPPL1,
           ADRC~STR_SUPPL2,
           ADRC~CITY2,
           ADRC~CITY1,
           ADRC~POST_CODE1,
           ADRC~TEL_NUMBER                        "CH01.01+
*    WHERE PA~PARVW = @GC_PARVW-SHIP_TO           "CH01.01-
    WHERE PA~PARVW       IN ( @GC_PARVW-SHIP_TO,  "CH01.01+
                              @GC_PARVW-PAYER )   "CH01.01+
      AND ADRC~DATE_FROM <= @IF_KEYDATE
      AND ADRC~DATE_TO   >= @IF_KEYDATE
*    INTO TABLE @ET_SHIPTO.                       "CH01.01-
    INTO TABLE @DATA(LT_VBPA).                    "CH01.01+

*BOI CH01.01
    IF LT_VBPA IS NOT INITIAL.

      " Get Email Address
      SELECT FROM ADR6
      INNER JOIN @LT_VBPA AS VBPA
              ON ADR6~ADDRNUMBER = VBPA~ADRNR
          FIELDS ADR6~ADDRNUMBER,
                 ADR6~SMTP_ADDR,
                 ADR6~FLGDEFAULT,
                 ADR6~HOME_FLAG
         WHERE ADR6~SMTP_ADDR IS NOT INITIAL
           AND VBPA~PARVW = @GC_PARVW-PAYER
           ORDER BY KUNNR      ASCENDING,
                    FLGDEFAULT DESCENDING,
                    HOME_FLAG  DESCENDING
       INTO TABLE @DATA(LT_ADR6).
      IF SY-SUBRC IS INITIAL.
        SORT LT_ADR6 BY ADDRNUMBER.
      ENDIF.


      " Mobile Phone
      SELECT FROM ADR2
      INNER JOIN @LT_VBPA AS VBPA
              ON ADR2~ADDRNUMBER = VBPA~ADRNR
          FIELDS ADR2~ADDRNUMBER,
                 ADR2~TEL_NUMBER
         WHERE VBPA~PARVW     = @GC_PARVW-PAYER
           AND ADR2~R3_USER   = @GC_MOBILE_IND
           AND ADR2~FLG_NOUSE = @SPACE
       INTO TABLE @DATA(LT_ADR2).
      IF SY-SUBRC IS INITIAL.
        SORT LT_ADR2 BY ADDRNUMBER.
      ENDIF.

    ENDIF.

    LOOP AT LT_VBPA ASSIGNING FIELD-SYMBOL(<L_VBPA>).
      CLEAR: LS_ADDR_PARTNER.

      LS_ADDR_PARTNER = CORRESPONDING #( <L_VBPA> ).

      CASE <L_VBPA>-PARVW.
        WHEN GC_PARVW-SHIP_TO.
          INSERT LS_ADDR_PARTNER INTO TABLE ET_SHIPTO.
        WHEN GC_PARVW-PAYER.

          READ TABLE LT_ADR6 ASSIGNING FIELD-SYMBOL(<L_ADR6>)
          WITH KEY ADDRNUMBER = <L_VBPA>-ADRNR
                   BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            LS_ADDR_PARTNER-SMTP_ADDR = <L_ADR6>-SMTP_ADDR.
          ENDIF.

          READ TABLE LT_ADR2 ASSIGNING FIELD-SYMBOL(<L_ADR2>)
          WITH KEY ADDRNUMBER = <L_VBPA>-ADRNR
                   BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            LS_ADDR_PARTNER-MOBILE = <L_ADR2>-TEL_NUMBER.
          ENDIF.

          INSERT LS_ADDR_PARTNER INTO TABLE ET_CUST_ONETIME.
      ENDCASE.
    ENDLOOP.
*EOI CH01.01

  ENDMETHOD.


  METHOD GET_LOAD_POINT_TEXT.

    CLEAR ET_TVLAT.

    IF IT_TVLAT_KEY IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVLAT
        FIELDS TVLAT~SPRAS,
               TVLAT~VSTEL,
               TVLAT~LSTEL,
               TVLAT~VTEXT
        FOR ALL ENTRIES IN @IT_TVLAT_KEY
         WHERE TVLAT~VSTEL = @IT_TVLAT_KEY-VSTEL
           AND TVLAT~LSTEL = @IT_TVLAT_KEY-LSTEL
           AND TVLAT~SPRAS = @IF_LANGU
          INTO TABLE @ET_TVLAT.

  ENDMETHOD.


  METHOD GET_ORD_REASON_TEXT.

    CLEAR ET_TVAUT.

    IF IT_AUGRU IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVAUT
          FIELDS TVAUT~SPRAS,
                 TVAUT~AUGRU,
                 TVAUT~BEZEI
   FOR ALL ENTRIES IN @IT_AUGRU
          WHERE TVAUT~SPRAS = @IF_LANGU
            AND TVAUT~AUGRU = @IT_AUGRU-AUGRU
          INTO TABLE @ET_TVAUT.

  ENDMETHOD.


  METHOD GET_SALE_GROUP_TEXT.

    CLEAR ET_TVGRT.

    IF IT_VKGRP IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVGRT
      FIELDS TVGRT~SPRAS,
             TVGRT~VKGRP,
             TVGRT~BEZEI
  FOR ALL ENTRIES IN @IT_VKGRP
       WHERE TVGRT~VKGRP = @IT_VKGRP-VKGRP
         AND TVGRT~SPRAS = @IF_LANGU
  INTO TABLE @ET_TVGRT.

  ENDMETHOD.


  METHOD GET_SALE_OFFICE_TEXT.

    CLEAR ET_TVKBT.

    IF IT_VKBUR IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM TVKBT
         FIELDS TVKBT~SPRAS,
                TVKBT~VKBUR,
                TVKBT~BEZEI
   FOR ALL ENTRIES IN @IT_VKBUR
          WHERE TVKBT~VKBUR = @IT_VKBUR-VKBUR
            AND TVKBT~SPRAS = @IF_LANGU
           INTO TABLE @ET_TVKBT.

  ENDMETHOD.


  METHOD GET_ADV_RECEIVE.

    CLEAR ET_ADV_RECT.

    IF IT_SO_VBELN IS INITIAL.
      RETURN.
    ENDIF.

    SELECT FROM ZSDSSDT010 AS ADV_RECT
    INNER JOIN VBAP
            ON VBAP~VBELN = ADV_RECT~VBELN AND
               VBAP~POSNR = ADV_RECT~POSNR
    INNER JOIN @IT_SO_VBELN AS KEY
            ON ADV_RECT~VBELN = KEY~VBELN
    FIELDS DISTINCT ADV_RECT~VBELN,
                    ADV_RECT~BELNR
     WHERE ADV_RECT~BUKRS = @IF_BUKRS
     ORDER BY ADV_RECT~VBELN
      INTO TABLE @ET_ADV_RECT.

  ENDMETHOD.


  METHOD GET_INVOICE.

    DATA: LF_PERNR TYPE VBPA-PERNR,
          LS_BILL  TYPE TS_BILL,
          LT_VBELN TYPE TT_VBELN.

    CLEAR ET_BILL.

    " Get Invoice
    SELECT DISTINCT BILL_H~VBELN,
           BILL_IT~POSNR,
           BILL_H~FKDAT,
           BILL_H~VKORG,
           BILL_H~VTWEG,
           BILL_H~KUNAG,
           BILL_H~XBLNR,
           BILL_H~ZTERM,
           BILL_H~WAERK,
           BILL_H~KNUMV,
           BILL_H~ZUONR,
           BILL_H~FKART,
           BILL_IT~SPART,
           BILL_IT~VKBUR,
           BILL_IT~VKGRP,
           BILL_IT~ABRVW,
           BILL_IT~MATNR,
           BILL_IT~ARKTX,
           BILL_IT~PRODH,
           BILL_IT~UEPOS,
           BILL_IT~WERKS,
           BILL_IT~LGORT,
           BILL_IT~PSTYV,
           BILL_IT~FKIMG,
           BILL_IT~NTGEW,
           BILL_IT~BRGEW,
           BILL_IT~VRKME,
           BILL_IT~VOLUM,
           BILL_IT~PRCTR,
           BILL_IT~PS_PSP_PNR,
           BILL_IT~MWSBP,
           BILL_IT~NETWR,
           BILL_IT~AUBEL,
           BILL_IT~UPMAT,
           BILL_IT~AUFNR   "CH02.01+
      FROM VBRK AS BILL_H
    INNER JOIN VBRP AS BILL_IT
            ON BILL_IT~VBELN = BILL_H~VBELN
    INNER JOIN VRPMA AS IDX
            ON IDX~VBELN = BILL_H~VBELN  AND
               IDX~POSNR = BILL_IT~POSNR AND
               IDX~MATNR = BILL_IT~MATNR AND
               IDX~VKORG = BILL_H~VKORG  AND
               IDX~FKDAT = BILL_H~FKDAT  AND
               IDX~VTWEG = BILL_H~VTWEG  AND
               IDX~FKART = BILL_H~FKART  AND
               IDX~KUNAG = BILL_H~KUNAG  AND
               IDX~VBTYP = BILL_H~VBTYP  AND
               IDX~ERNAM = BILL_H~ERNAM
    WHERE IDX~VKORG      = @IF_VKORG
      AND IDX~VTWEG     IN @IT_VTWEG_RANGE
      AND IDX~KUNAG     IN @IT_KUNAG_RANGE
      AND IDX~FKART     IN @IT_FKART_RANGE
      AND IDX~FKDAT     IN @IT_FKDAT_RANGE
      AND IDX~VBELN     IN @IT_VBELN_RANGE
      AND IDX~MATNR     IN @IT_MATNR_RANGE
      AND IDX~VBTYP     IN @IT_VBTYP_RANGE
      AND BILL_H~SPART  IN @IT_SPART_RANGE
      AND BILL_IT~VKBUR IN @IT_VKBUR_RANGE
      AND BILL_IT~VKGRP IN @IT_VKGRP_RANGE
      AND BILL_IT~PRODH IN @IT_PRODH_RANGE
     INTO TABLE @DATA(LT_BILL).

    IF LT_BILL IS INITIAL.
      RETURN.
    ENDIF.

    LT_VBELN = CORRESPONDING #( LT_BILL DISCARDING DUPLICATES ).

    IF LT_VBELN IS NOT INITIAL.
      "Get Sales Document: Partner
      SELECT FROM VBPA
          FIELDS VBELN,
                 PARVW,
                 PERNR
          FOR ALL ENTRIES IN @LT_VBELN
           WHERE VBELN = @LT_VBELN-VBELN
             AND PARVW IN ( @GC_PARVW-SALE_EMPLOYEE, @GC_PARVW-EMPLOYEE_RESP,
                            @GC_PARVW-PAYER )         "CH01.01+
            INTO TABLE @DATA(LT_PERS).

      IF SY-SUBRC IS INITIAL.
        SORT LT_PERS BY VBELN PARVW.
      ENDIF.
    ENDIF.

    "Get Sales Order from Document Flow of Billing
    DO 1 TIMES.

      SELECT FROM VBFA AS DOC_FLOW
       INNER JOIN @LT_VBELN AS KEY
               ON DOC_FLOW~VBELN = KEY~VBELN
  FIELDS DISTINCT DOC_FLOW~VBELN,
                  DOC_FLOW~VBELV AS SO_VBELN
            WHERE DOC_FLOW~VBTYP_V = @GC_VBTYP-SALE_ORDER
       INTO TABLE @DATA(LT_VBFA_SO).

      IF LT_VBFA_SO IS INITIAL.
        EXIT.
      ENDIF.

      SORT LT_VBFA_SO BY VBELN.

      SELECT FROM VBAK AS SO_H
      INNER JOIN @LT_VBFA_SO AS KEY
              ON KEY~SO_VBELN = SO_H~VBELN
          INNER JOIN VBKD
              ON VBKD~VBELN = SO_H~VBELN AND
                 VBKD~POSNR = ''
      FIELDS SO_H~VBELN AS SO_VBELN,
             SO_H~BNAME,
             SO_H~KVGR1,
             SO_H~KVGR2,
             SO_H~AUART,
             SO_H~AUDAT,
             SO_H~ERNAM,
             SO_H~IHREZ,
             SO_H~AUGRU,
             VBKD~BSTKD,
             VBKD~BSTKD_E
          WHERE SO_H~KVGR2 IN @IT_KVGR2_RANGE
            AND SO_H~BNAME IN @IT_BNAME_RANGE
            AND VBKD~BSTKD IN @IT_BSTKD_RANGE
       ORDER BY SO_H~VBELN
     INTO TABLE @DATA(LT_SO).

    ENDDO.

    LOOP AT LT_BILL ASSIGNING FIELD-SYMBOL(<L_BILL>).

      CLEAR: LF_PERNR,
             LS_BILL.

      "Get Personnel Number for Billing
      DO 1 TIMES.

        READ TABLE LT_PERS ASSIGNING FIELD-SYMBOL(<L_PERS>)
        WITH KEY VBELN = <L_BILL>-VBELN
                 PARVW = GC_PARVW-SALE_EMPLOYEE
                 BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LF_PERNR = <L_PERS>-PERNR.
        ENDIF.

        IF LF_PERNR IS NOT INITIAL.
          EXIT.
        ENDIF.

        READ TABLE LT_PERS ASSIGNING <L_PERS>
        WITH KEY VBELN = <L_BILL>-VBELN
                 PARVW = GC_PARVW-EMPLOYEE_RESP
                 BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LF_PERNR = <L_PERS>-PERNR.
        ENDIF.

      ENDDO.

      "Filter Billing by Personnel Number
      IF LF_PERNR IN IT_PERNR_RANGE.

        READ TABLE LT_VBFA_SO ASSIGNING FIELD-SYMBOL(<L_VBFA>)
        WITH KEY VBELN = <L_BILL>-VBELN
                 BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.

          "Filter Sale Order as selection criteria
          READ TABLE LT_SO ASSIGNING FIELD-SYMBOL(<L_SO>)
          WITH KEY SO_VBELN = <L_VBFA>-SO_VBELN
                   BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            LS_BILL = CORRESPONDING #( BASE ( LS_BILL ) <L_SO> ).
          ELSE.
            CONTINUE.
          ENDIF.

        ENDIF.

        LS_BILL       = CORRESPONDING #( BASE ( LS_BILL ) <L_BILL> ).
        LS_BILL-PERNR = LF_PERNR.

        APPEND LS_BILL TO ET_BILL.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.
ENDCLASS.
