*----------------------------------------------------------------------*
***INCLUDE ZSDSCMD0010_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form F_DISPLAY_INVOICE_CREATE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM F_DISPLAY_INVOICE_CREATE.

  DATA: LS_INV_CRE                  TYPE ZSDSCMS015,
        LT_WBS_ELEMENT_TABLE        TYPE TABLE OF BAPI_WBS_ELEMENT_EXP,
        LT_WBS_HIERARCHIE_TABLE     TYPE TABLE OF BAPI_WBS_HIERARCHIE,
        LT_WBS_ELEMENT_TABLE_ALL    TYPE TABLE OF BAPI_WBS_ELEMENT_EXP,
        LT_WBS_HIERARCHIE_TABLE_ALL TYPE TABLE OF BAPI_WBS_HIERARCHIE,
        LS_RETURN                   TYPE BAPIRETURN1 ##NEEDED,
        LR_PS_PSP_PNR               TYPE RANGE OF PS_PSP_PNR,
        LV_PS_PSP_PNR               TYPE PS_PSP_PNR,
        LV_WBS_ELEMENT              TYPE PS_POSID,
        LS_LAYOUT                   TYPE LVC_S_LAYO.

  SELECT POSID, STUFE, POST1 INTO TABLE @DATA(LT_POSID)
    FROM PRPS
*   WHERE POSID = @P_POSID.
   WHERE POSID IN @S_POSID.
  IF SY-SUBRC = 0.
    DELETE LT_POSID WHERE STUFE <> 1.

    IF LT_POSID IS INITIAL.
      MESSAGE TEXT-E01 TYPE 'S' DISPLAY LIKE 'E'. "You can only assign WBS elelments level 1
      RETURN.
    ENDIF.

    SORT LT_POSID BY POSID.
  ENDIF.

  LOOP AT LT_POSID INTO DATA(LS_POSID) ##INTO_OK.
    CALL FUNCTION 'BAPI_PROJECT_GETINFO'
      EXPORTING
        PROJECT_DEFINITION     = LS_POSID-POSID
*       WITH_ACTIVITIES        =
*       WITH_MILESTONES        =
*       WITH_SUBTREE           =
      IMPORTING
*       E_PROJECT_DEFINITION   =
        RETURN                 = LS_RETURN
      TABLES
*       I_WBS_ELEMENT_TABLE    =
        E_WBS_ELEMENT_TABLE    = LT_WBS_ELEMENT_TABLE
*       E_WBS_MILESTONE_TABLE  =
        E_WBS_HIERARCHIE_TABLE = LT_WBS_HIERARCHIE_TABLE
*       E_ACTIVITY_TABLE       =
*       E_MESSAGE_TABLE        =
      .
    APPEND LINES OF LT_WBS_ELEMENT_TABLE TO LT_WBS_ELEMENT_TABLE_ALL.
    APPEND LINES OF LT_WBS_HIERARCHIE_TABLE TO LT_WBS_HIERARCHIE_TABLE_ALL.
  ENDLOOP.

  SORT: LT_WBS_ELEMENT_TABLE_ALL BY WBS_ELEMENT,
        LT_WBS_HIERARCHIE_TABLE BY WBS_ELEMENT.

  LOOP AT LT_WBS_HIERARCHIE_TABLE_ALL ASSIGNING FIELD-SYMBOL(<LFS_WBS_HIERARCHIE>).
    CLEAR: LV_PS_PSP_PNR.
    CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
      EXPORTING
        INPUT     = <LFS_WBS_HIERARCHIE>-WBS_ELEMENT
      IMPORTING
        OUTPUT    = LV_PS_PSP_PNR
      EXCEPTIONS
        NOT_FOUND = 1
        OTHERS    = 2.
    IF SY-SUBRC <> 0 ##NEEDED.
* Implement suitable error handling here
    ENDIF.

    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = LV_PS_PSP_PNR ) TO LR_PS_PSP_PNR.
  ENDLOOP.


*Start of Del- 08.04.2025 420000406 >>>
*  SELECT VBRP~VBELN,
*         VBRP~POSNR,
*         VBRK~FKDAT,
*         VBRK~KUNAG,
*         VBRP~PS_PSP_PNR,
*         VBRP~VKGRP,
*         TVGRT~BEZEI,
*         VBPA~PERNR,
*         PA0001~ENAME
*    INTO TABLE @DATA(LT_INV)
*    FROM VBRP
*    INNER JOIN VBRK ON VBRP~VBELN EQ VBRK~VBELN
*    INNER JOIN SER01 ON SER01~LIEF_NR EQ VBRP~VGBEL AND SER01~POSNR EQ VBRP~VGPOS
*    INNER JOIN OBJK ON SER01~OBKNR EQ OBJK~OBKNR
*    INNER JOIN EQUI ON OBJK~EQUNR EQ EQUI~EQUNR
*    LEFT OUTER JOIN TVGRT ON VBRP~VKGRP = TVGRT~VKGRP AND TVGRT~SPRAS = 'E'
*    LEFT OUTER JOIN VBPA ON VBRP~VBELN = VBPA~VBELN AND PARVW = 'VE'
*    LEFT OUTER JOIN PA0001 ON VBPA~PERNR = PA0001~PERNR "#EC CI_BUFFJOIN
*    WHERE VBRP~PS_PSP_PNR IN @LR_PS_PSP_PNR.
*  IF SY-SUBRC = 0.
*<<< End of Del- 08.04.2025 420000406

*Start of add+ 08.04.2025 420000406 >>>
*Get D/O
  SELECT VBRP~VBELN,
         VBRP~POSNR,
         VBRP~PS_PSP_PNR,
         VBRP~AUBEL,
         VBRP~AUPOS,
         VBFA~VBELN AS VBELN_J,
         VBFA~POSNN AS POSNR_J
    INTO TABLE @DATA(LT_INV_TMP)
    FROM VBRP
    INNER JOIN VBRK ON VBRP~VBELN EQ VBRK~VBELN
    INNER JOIN VBFA ON VBFA~VBELV = VBRP~AUBEL AND VBFA~POSNV = VBRP~AUPOS AND VBFA~VBTYP_N = 'J'
    WHERE VBRP~PS_PSP_PNR IN @LR_PS_PSP_PNR.
  IF SY-SUBRC = 0.
    SORT LT_INV_TMP BY VBELN POSNR.

    SELECT VBRP~VBELN,
           VBRP~POSNR,
           VBRK~FKDAT,
           VBRK~KUNAG,
           VBRP~PS_PSP_PNR,
           VBRP~VKGRP,
           TVGRT~BEZEI,
           VBPA~PERNR,
           PA0001~ENAME
      FROM VBRP
      INNER JOIN VBRK ON VBRP~VBELN EQ VBRK~VBELN
      INNER JOIN SER01 ON SER01~LIEF_NR <> @SPACE AND SER01~POSNR <> @SPACE
      INNER JOIN OBJK ON SER01~OBKNR EQ OBJK~OBKNR
      INNER JOIN EQUI ON OBJK~EQUNR EQ EQUI~EQUNR
      LEFT OUTER JOIN TVGRT ON VBRP~VKGRP = TVGRT~VKGRP AND TVGRT~SPRAS = 'E'
      LEFT OUTER JOIN VBPA ON VBRP~VBELN = VBPA~VBELN AND PARVW = 'VE'
      LEFT OUTER JOIN PA0001 ON VBPA~PERNR = PA0001~PERNR "#EC CI_BUFFJOIN
        INTO TABLE @DATA(LT_INV)
          FOR ALL ENTRIES IN @LT_INV_TMP
      WHERE VBRP~VBELN = @LT_INV_TMP-VBELN
        AND VBRP~POSNR = @LT_INV_TMP-POSNR
        AND SER01~LIEF_NR = @LT_INV_TMP-VBELN_J
        AND SER01~POSNR = @LT_INV_TMP-POSNR_J.
    IF SY-SUBRC = 0.

      LOOP AT LT_INV INTO DATA(LS_INV).
        DATA(LV_TABIX) = SY-TABIX.
        READ TABLE LT_INV_TMP WITH KEY VBELN = LS_INV-VBELN
                                       POSNR = LS_INV-POSNR
                                       BINARY SEARCH
                                       TRANSPORTING NO FIELDS.
        IF SY-SUBRC <> 0.
          DELETE LT_INV INDEX LV_TABIX.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

  IF LT_INV IS NOT INITIAL.
*<<< End of add+ 08.04.2025 420000406
    SORT LT_INV BY VBELN POSNR.
    DELETE ADJACENT DUPLICATES FROM LT_INV COMPARING VBELN.

    SELECT KUNNR,NAME1 INTO TABLE @DATA(LT_KNA1)
      FROM KNA1
       FOR ALL ENTRIES IN @LT_INV
     WHERE KUNNR = @LT_INV-KUNAG.
    IF SY-SUBRC = 0.
      SORT LT_KNA1 BY KUNNR.
    ENDIF.

*Check if inv no already created warranty letter
    IF LT_INV IS NOT INITIAL.
      SELECT INV_NO,WL_ID INTO TABLE @DATA(LT_ZSDSCMT007)
        FROM ZSDSCMT007
         FOR ALL ENTRIES IN @LT_INV
       WHERE INV_NO = @LT_INV-VBELN.
      IF SY-SUBRC = 0.
        SORT LT_ZSDSCMT007 BY INV_NO WL_ID.
      ENDIF.
    ENDIF.

    CLEAR: GT_INV_CRE.
    LOOP AT LT_INV ASSIGNING FIELD-SYMBOL(<LFS_INV>).
      CLEAR: LS_INV_CRE.
      READ TABLE LT_ZSDSCMT007  WITH KEY INV_NO = <LFS_INV>-VBELN TRANSPORTING NO FIELDS BINARY SEARCH.
      IF SY-SUBRC = 0.
        CONTINUE.
      ENDIF.

      LS_INV_CRE-VBELN = <LFS_INV>-VBELN.
      LS_INV_CRE-KUNAG = <LFS_INV>-KUNAG.
      READ TABLE LT_KNA1 ASSIGNING FIELD-SYMBOL(<LFS_KNA1>) WITH KEY KUNNR = <LFS_INV>-KUNAG  BINARY SEARCH.
      IF SY-SUBRC = 0.
        LS_INV_CRE-NAME1 = <LFS_KNA1>-NAME1.
      ENDIF.
      LS_INV_CRE-FKDAT = <LFS_INV>-FKDAT.

      LS_INV_CRE-VKGRP        = <LFS_INV>-VKGRP.
      LS_INV_CRE-VKGRP_NAME   = <LFS_INV>-BEZEI.

      LS_INV_CRE-SALES_PERSON = <LFS_INV>-PERNR.
      LS_INV_CRE-SALES_NAME   = <LFS_INV>-ENAME.

      CLEAR: LV_WBS_ELEMENT.
      CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
        EXPORTING
          INPUT  = <LFS_INV>-PS_PSP_PNR
        IMPORTING
          OUTPUT = LV_WBS_ELEMENT.

      READ TABLE LT_WBS_HIERARCHIE_TABLE_ALL ASSIGNING FIELD-SYMBOL(<LFS_WBS>) WITH KEY WBS_ELEMENT = LV_WBS_ELEMENT.
      IF SY-SUBRC = 0.
        LS_INV_CRE-PROJWBS      = <LFS_WBS>-PROJECT_DEFINITION.
        READ TABLE LT_POSID ASSIGNING FIELD-SYMBOL(<LFS_WBSPROJ>) WITH KEY POSID = LS_INV_CRE-PROJWBS.
        IF SY-SUBRC = 0.
          LS_INV_CRE-PROJWBS_NAME = <LFS_WBSPROJ>-POST1.
        ENDIF.
      ENDIF.

      LS_INV_CRE-WBS          = LV_WBS_ELEMENT.

      CASE 'X'.
        WHEN R_INV.
          LS_INV_CRE-WLSTARTDATE = <LFS_INV>-FKDAT.
        WHEN R_INV_EX.
          LS_INV_CRE-WLSTARTDATE = <LFS_INV>-FKDAT + P_DAYS.
        WHEN R_MANUAL.
          LS_INV_CRE-WLSTARTDATE = P_START.
      ENDCASE.
      APPEND LS_INV_CRE TO GT_INV_CRE.
    ENDLOOP.

    IF OREF_DOCK IS NOT BOUND.

      CREATE OBJECT OREF_DOCK
        EXPORTING
          REPID                       = SY-REPID
          DYNNR                       = '1000'
          SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_BOTTOM
          RATIO                       = GC_ALV_HEIGHT_1
        EXCEPTIONS
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          OTHERS                      = 6.
      IF SY-SUBRC <> 0 ##NEEDED.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
    ENDIF.
    IF OREF_ALV IS NOT BOUND.

      IF OREF_DOCK IS BOUND.
        CREATE OBJECT OREF_ALV
          EXPORTING
            I_PARENT          = OREF_DOCK
          EXCEPTIONS
            ERROR_CNTL_CREATE = 1
            ERROR_CNTL_INIT   = 2
            ERROR_CNTL_LINK   = 3
            ERROR_DP_CREATE   = 4
            OTHERS            = 5.
        IF SY-SUBRC <> 0.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.

        IF OREF_ALV IS BOUND.

          PERFORM FIELDCAT_CRE.
          PERFORM TOOLBAR_EXCLUDING.
          LS_LAYOUT-CWIDTH_OPT = 'X'.

          CALL METHOD OREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
            EXPORTING
*             I_BUFFER_ACTIVE               =
*             I_BYPASSING_BUFFER            =
*             IS_VARIANT                    =
*             I_SAVE                        =
*             I_DEFAULT                     = 'X'
              IS_LAYOUT                     = LS_LAYOUT
              IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE
            CHANGING
              IT_OUTTAB                     = GT_INV_CRE
              IT_FIELDCATALOG               = GT_FCAT
*             IT_SORT                       =
            EXCEPTIONS
              INVALID_PARAMETER_COMBINATION = 1
              PROGRAM_ERROR                 = 2
              TOO_MANY_LINES                = 3
              OTHERS                        = 4.
          IF SY-SUBRC <> 0 ##NEEDED.
*       Implement suitable error handling here
          ENDIF.

*  Registering the EDIT Event
          CALL METHOD OREF_ALV->REGISTER_EDIT_EVENT
            EXPORTING
              I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
            EXCEPTIONS
              ERROR      = 1
              OTHERS     = 2.
          IF SY-SUBRC <> 0.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                       WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.

      CALL METHOD OREF_ALV->REFRESH_TABLE_DISPLAY
        EXCEPTIONS
          FINISHED = 1
          OTHERS   = 2.
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form F_DISPLAY_INVOICE_CHANGE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM F_DISPLAY_INVOICE_CHANGE .

  DATA: LR_WL_ID                    TYPE RANGE OF ZSDSDE_WL_ID,
        LR_POSID                    TYPE RANGE OF PS_POSID ##NEEDED,
        LS_INV_CHGDIS               TYPE ZSDSCMS015,
        LT_WBS_ELEMENT_TABLE        TYPE TABLE OF BAPI_WBS_ELEMENT_EXP ##NEEDED,
        LT_WBS_HIERARCHIE_TABLE     TYPE TABLE OF BAPI_WBS_HIERARCHIE ##NEEDED,
        LT_WBS_ELEMENT_TABLE_ALL    TYPE TABLE OF BAPI_WBS_ELEMENT_EXP ##NEEDED,
        LT_WBS_HIERARCHIE_TABLE_ALL TYPE TABLE OF BAPI_WBS_HIERARCHIE ##NEEDED,
        LS_RETURN                   TYPE BAPIRETURN1 ##NEEDED,
        LR_PS_PSP_PNR               TYPE RANGE OF PS_PSP_PNR ##NEEDED,
        LV_PS_PSP_PNR               TYPE PS_PSP_PNR ##NEEDED,
        LV_WBS_ELEMENT              TYPE PS_POSID,
        LS_LAYOUT                   TYPE LVC_S_LAYO.

  IF P_WL_ID IS NOT INITIAL.
    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = P_WL_ID ) TO LR_WL_ID.
  ENDIF.
*  IF P_POSID IS NOT INITIAL.
*    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = P_POSID ) TO LR_POSID.
*  ENDIF.


  SELECT * INTO TABLE @DATA(LT_ZSDSCMT005)
    FROM ZSDSCMT005
   WHERE WL_ID IN @LR_WL_ID
*     AND PROJWBS IN @LR_POSID.
     AND PROJWBS IN @S_POSID .
  IF SY-SUBRC = 0.

    SELECT POSID, STUFE, POST1 INTO TABLE @DATA(LT_POSID) "#EC CI_NO_TRANSFORM
      FROM PRPS
       FOR ALL ENTRIES IN @LT_ZSDSCMT005
     WHERE POSID = @LT_ZSDSCMT005-PROJWBS.
    IF SY-SUBRC = 0.
      SORT LT_POSID BY POSID.
    ENDIF.

    SORT LT_ZSDSCMT005 BY WL_ID.

    SELECT INV_NO,WL_ID INTO TABLE @DATA(LT_ZSDSCMT007)
      FROM ZSDSCMT007
       FOR ALL ENTRIES IN @LT_ZSDSCMT005
     WHERE WL_ID = @LT_ZSDSCMT005-WL_ID.
    IF SY-SUBRC = 0.
      SORT LT_ZSDSCMT007 BY INV_NO.
    ENDIF.
*GT_INV_CHGDIS
*    SELECT VBELN,
*           FKDAT,
*           KUNAG
*      INTO TABLE @DATA(LT_INV)
*      FROM VBRK
*       FOR ALL ENTRIES IN @LT_ZSDSCMT007
*      WHERE VBELN = @LT_ZSDSCMT007-INV_NO.

*Start of Del- 08.04.2025 420000406 >>>
*    SELECT VBRP~VBELN,
*           VBRP~POSNR,
*           VBRK~FKDAT,
*           VBRK~KUNAG,
*           VBRP~PS_PSP_PNR,
*           VBRP~VKGRP,
*           TVGRT~BEZEI,
*           VBPA~PERNR,
*           PA0001~ENAME
*      INTO TABLE @DATA(LT_INV)
*      FROM VBRP
*      INNER JOIN VBRK ON VBRP~VBELN EQ VBRK~VBELN
*      INNER JOIN SER01 ON SER01~LIEF_NR EQ VBRP~VGBEL AND SER01~POSNR EQ VBRP~VGPOS
*      INNER JOIN OBJK ON SER01~OBKNR EQ OBJK~OBKNR
*      INNER JOIN EQUI ON OBJK~EQUNR EQ EQUI~EQUNR
*      LEFT OUTER JOIN TVGRT ON VBRP~VKGRP = TVGRT~VKGRP AND TVGRT~SPRAS = 'E'
*      LEFT OUTER JOIN VBPA ON VBRP~VBELN = VBPA~VBELN AND PARVW = 'VE'
*      LEFT OUTER JOIN PA0001 ON VBPA~PERNR = PA0001~PERNR "#EC CI_BUFFJOIN
*         FOR ALL ENTRIES IN @LT_ZSDSCMT007
*        WHERE VBRK~VBELN = @LT_ZSDSCMT007-INV_NO.
*    IF SY-SUBRC = 0.
*<<< End of Del- 08.04.2025 420000406

*Start of add+ 08.04.2025 420000406 >>>
*Get D/O
    SELECT VBRP~VBELN,
           VBRP~POSNR,
           VBRP~PS_PSP_PNR,
           VBRP~AUBEL,
           VBRP~AUPOS,
           VBFA~VBELN AS VBELN_J,
           VBFA~POSNN AS POSNR_J
      INTO TABLE @DATA(LT_INV_TMP)
      FROM VBRP
      INNER JOIN VBRK ON VBRP~VBELN EQ VBRK~VBELN
      INNER JOIN VBFA ON VBFA~VBELV = VBRP~AUBEL AND VBFA~POSNV = VBRP~AUPOS AND VBFA~VBTYP_N = 'J'
           FOR ALL ENTRIES IN @LT_ZSDSCMT007
          WHERE VBRK~VBELN = @LT_ZSDSCMT007-INV_NO.
    IF SY-SUBRC = 0.
      SORT LT_INV_TMP BY VBELN POSNR.

      SELECT VBRP~VBELN,
             VBRP~POSNR,
             VBRK~FKDAT,
             VBRK~KUNAG,
             VBRP~PS_PSP_PNR,
             VBRP~VKGRP,
             TVGRT~BEZEI,
             VBPA~PERNR,
             PA0001~ENAME
        FROM VBRP
        INNER JOIN VBRK ON VBRP~VBELN EQ VBRK~VBELN
        INNER JOIN SER01 ON SER01~LIEF_NR <> @SPACE AND SER01~POSNR <> @SPACE
        INNER JOIN OBJK ON SER01~OBKNR EQ OBJK~OBKNR
        INNER JOIN EQUI ON OBJK~EQUNR EQ EQUI~EQUNR
        LEFT OUTER JOIN TVGRT ON VBRP~VKGRP = TVGRT~VKGRP AND TVGRT~SPRAS = 'E'
        LEFT OUTER JOIN VBPA ON VBRP~VBELN = VBPA~VBELN AND PARVW = 'VE'
        LEFT OUTER JOIN PA0001 ON VBPA~PERNR = PA0001~PERNR "#EC CI_BUFFJOIN
          INTO TABLE @DATA(LT_INV)
            FOR ALL ENTRIES IN @LT_INV_TMP
        WHERE VBRP~VBELN = @LT_INV_TMP-VBELN
          AND VBRP~POSNR = @LT_INV_TMP-POSNR
          AND SER01~LIEF_NR = @LT_INV_TMP-VBELN_J
          AND SER01~POSNR = @LT_INV_TMP-POSNR_J.
      IF SY-SUBRC = 0.

        LOOP AT LT_INV INTO DATA(LS_INV).
          DATA(LV_TABIX) = SY-TABIX.
          READ TABLE LT_INV_TMP WITH KEY VBELN = LS_INV-VBELN
                                         POSNR = LS_INV-POSNR
                                         BINARY SEARCH
                                         TRANSPORTING NO FIELDS.
          IF SY-SUBRC <> 0.
            DELETE LT_INV INDEX LV_TABIX.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF LT_INV IS NOT INITIAL.
*<<< End of add+ 08.04.2025 420000406
      SORT LT_INV BY VBELN POSNR.
      DELETE ADJACENT DUPLICATES FROM LT_INV COMPARING VBELN.

      SELECT KUNNR,NAME1 INTO TABLE @DATA(LT_KNA1)
        FROM KNA1
         FOR ALL ENTRIES IN @LT_INV
       WHERE KUNNR = @LT_INV-KUNAG.
      IF SY-SUBRC = 0.
        SORT LT_KNA1 BY KUNNR.
      ENDIF.

      CLEAR: GT_INV_CHGDIS.
      LOOP AT LT_INV ASSIGNING FIELD-SYMBOL(<LFS_INV>).
        CLEAR: LS_INV_CHGDIS.
        READ TABLE LT_ZSDSCMT007 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMT007>) WITH KEY INV_NO = <LFS_INV>-VBELN BINARY SEARCH.
        IF SY-SUBRC = 0.
          LS_INV_CHGDIS-WL_ID = <LFS_ZSDSCMT007>-WL_ID.

          READ TABLE LT_ZSDSCMT005 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMT005>) WITH KEY WL_ID = LS_INV_CHGDIS-WL_ID BINARY SEARCH.
          IF SY-SUBRC = 0.
            LS_INV_CHGDIS-WLSTARTDATE = <LFS_ZSDSCMT005>-WLSTARTDATE.
            LS_INV_CHGDIS-STATUS      = <LFS_ZSDSCMT005>-STATUS.
            PERFORM GET_STATUS_TEXT USING LS_INV_CHGDIS-STATUS CHANGING LS_INV_CHGDIS-STATUS_TEXT.

            LS_INV_CHGDIS-PROJWBS      = <LFS_ZSDSCMT005>-PROJWBS.
          ENDIF.
        ENDIF.

        LS_INV_CHGDIS-VBELN = <LFS_INV>-VBELN.
        LS_INV_CHGDIS-KUNAG = <LFS_INV>-KUNAG.
        READ TABLE LT_KNA1 ASSIGNING FIELD-SYMBOL(<LFS_KNA1>) WITH KEY KUNNR = LS_INV_CHGDIS-KUNAG  BINARY SEARCH.
        IF SY-SUBRC = 0.
          LS_INV_CHGDIS-NAME1 = <LFS_KNA1>-NAME1.
        ENDIF.
        LS_INV_CHGDIS-FKDAT = <LFS_INV>-FKDAT.

        LS_INV_CHGDIS-VKGRP        = <LFS_INV>-VKGRP.
        LS_INV_CHGDIS-VKGRP_NAME   = <LFS_INV>-BEZEI.

        LS_INV_CHGDIS-SALES_PERSON = <LFS_INV>-PERNR.
        LS_INV_CHGDIS-SALES_NAME   = <LFS_INV>-ENAME.

        READ TABLE LT_POSID ASSIGNING FIELD-SYMBOL(<LFS_WBSPROJ>) WITH KEY POSID = LS_INV_CHGDIS-PROJWBS.
        IF SY-SUBRC = 0.
          LS_INV_CHGDIS-PROJWBS_NAME = <LFS_WBSPROJ>-POST1.
        ENDIF.

        CLEAR: LV_WBS_ELEMENT.
        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
          EXPORTING
            INPUT  = <LFS_INV>-PS_PSP_PNR
          IMPORTING
            OUTPUT = LV_WBS_ELEMENT.
        LS_INV_CHGDIS-WBS          = LV_WBS_ELEMENT.


        APPEND LS_INV_CHGDIS TO GT_INV_CHGDIS.
      ENDLOOP.

    ENDIF.
  ENDIF.

  IF OREF_DOCK IS NOT BOUND.

    CREATE OBJECT OREF_DOCK
      EXPORTING
        REPID                       = SY-REPID
        DYNNR                       = '1000'
        SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_BOTTOM
        RATIO                       = GC_ALV_HEIGHT_1
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
  IF OREF_ALV IS NOT BOUND.

    IF OREF_DOCK IS BOUND.
      CREATE OBJECT OREF_ALV
        EXPORTING
          I_PARENT          = OREF_DOCK
        EXCEPTIONS
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          OTHERS            = 5.
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      IF OREF_ALV IS BOUND.

        PERFORM FIELDCAT_CHGDIS.
        PERFORM TOOLBAR_EXCLUDING.
        LS_LAYOUT-CWIDTH_OPT = 'X'.

        CALL METHOD OREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
          EXPORTING
*           I_BUFFER_ACTIVE               =
*           I_BYPASSING_BUFFER            =
            IS_LAYOUT                     = LS_LAYOUT
            IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE
          CHANGING
            IT_OUTTAB                     = GT_INV_CHGDIS
            IT_FIELDCATALOG               = GT_FCAT
*           IT_SORT                       =
          EXCEPTIONS
            INVALID_PARAMETER_COMBINATION = 1
            PROGRAM_ERROR                 = 2
            TOO_MANY_LINES                = 3
            OTHERS                        = 4.
        IF SY-SUBRC <> 0 ##NEEDED.
*       Implement suitable error handling here
        ENDIF.

*  Registering the EDIT Event
        CALL METHOD OREF_ALV->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
          EXCEPTIONS
            ERROR      = 1
            OTHERS     = 2.
        IF SY-SUBRC <> 0.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.

    CALL METHOD OREF_ALV->REFRESH_TABLE_DISPLAY
      EXCEPTIONS
        FINISHED = 1
        OTHERS   = 2.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fieldcat_cre
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM FIELDCAT_CRE .
  CLEAR:GT_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
*     I_BUFFER_ACTIVE        =
      I_STRUCTURE_NAME       = 'ZSDSCMS015'
*     I_CLIENT_NEVER_DISPLAY = 'X'
*     I_BYPASSING_BUFFER     =
*     I_INTERNAL_TABNAME     =
    CHANGING
      CT_FIELDCAT            = GT_FCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.
  IF SY-SUBRC <> 0 ##NEEDED.
* Implement suitable error handling here
  ENDIF.

  LOOP AT GT_FCAT ASSIGNING FIELD-SYMBOL(<LFS_FCAT>).
    CASE <LFS_FCAT>-FIELDNAME.
      WHEN 'CHK'.
        <LFS_FCAT>-CHECKBOX  = 'X'.
        <LFS_FCAT>-EDIT      = 'X'.
      WHEN 'VBELN'.

      WHEN 'KUNAG'.

      WHEN 'NAME1'.

      WHEN 'FKDAT'.

      WHEN 'WLSTARTDATE'.

      WHEN 'VKGRP'.

      WHEN 'VKGRP_NAME'.

      WHEN 'SALES_PERSON'.

      WHEN 'SALES_NAME  '.

      WHEN 'PROJWBS'.
        <LFS_FCAT>-COLTEXT = TEXT-T35.
      WHEN 'PROJWBS_NAME'.

      WHEN 'WBS'.

      WHEN OTHERS.
        <LFS_FCAT>-TECH = 'X'.
    ENDCASE.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fieldcat_chgdis
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM FIELDCAT_CHGDIS.
  CLEAR:GT_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
*     I_BUFFER_ACTIVE        =
      I_STRUCTURE_NAME       = 'ZSDSCMS015'
*     I_CLIENT_NEVER_DISPLAY = 'X'
*     I_BYPASSING_BUFFER     =
*     I_INTERNAL_TABNAME     =
    CHANGING
      CT_FIELDCAT            = GT_FCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.
  IF SY-SUBRC <> 0 ##NEEDED.
* Implement suitable error handling here
  ENDIF.

  LOOP AT GT_FCAT ASSIGNING FIELD-SYMBOL(<LFS_FCAT>).
    CASE <LFS_FCAT>-FIELDNAME.
      WHEN 'CHK'.
        <LFS_FCAT>-CHECKBOX  = 'X'.
        <LFS_FCAT>-EDIT      = 'X'.
      WHEN 'WL_ID'.

      WHEN 'VBELN'.

      WHEN 'KUNAG'.

      WHEN 'NAME1'.

      WHEN 'FKDAT'.

      WHEN 'WLSTARTDATE'.

      WHEN 'STATUS'.

      WHEN 'STATUS_TEXT'.

      WHEN 'VKGRP'.

      WHEN 'VKGRP_NAME'.

      WHEN 'SALES_PERSON'.

      WHEN 'SALES_NAME  '.

      WHEN 'PROJWBS'.
        <LFS_FCAT>-COLTEXT = TEXT-T35.

      WHEN 'PROJWBS_NAME'.

      WHEN 'WBS'.

      WHEN OTHERS.
        <LFS_FCAT>-TECH = 'X'.
    ENDCASE.
  ENDLOOP.

ENDFORM.
*---------------------------------------------------------------------*
*       FORM TOOLBAR_EXCLUDING                                        *
*---------------------------------------------------------------------*
*       To exclude some of standard buttons of ALV                    *
*---------------------------------------------------------------------*

FORM TOOLBAR_EXCLUDING.
  DATA LS_EXCLUDE TYPE UI_FUNC.

  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_MAXIMUM .
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_MINIMUM .
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SUBTOT .
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_SUM .
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_AVERAGE .
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_SUM .
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_SUBTOT.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOAD_VARIANT.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK.
  APPEND LS_EXCLUDE TO GT_EXCLUDE.
ENDFORM .
*&---------------------------------------------------------------------*
*& Form GET_WARR_COMP_DF
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_WARR_COMP_DF .
  SELECT * INTO TABLE GT_ZSDSCMC006                     "#EC CI_NOWHERE
    FROM ZSDSCMC006.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_WARR_CONDTEXT_DF
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_WARR_CONDTEXT_DF .
  IF GV_LANG_TH_EN IS NOT INITIAL.
    SELECT * INTO TABLE GT_ZSDSCMC007
      FROM ZSDSCMC007
     WHERE SPRAS = GV_LANG_TH_EN.
  ELSE.
    SELECT * INTO TABLE GT_ZSDSCMC007                   "#EC CI_NOWHERE
      FROM ZSDSCMC007.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_WARR_COMP_DF
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM DISPLAY_WARR_COMP_DF .
  LOOP AT GT_ZSDSCMC006 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMC006>).
    IF <LFS_ZSDSCMC006>-MATWLTYPE = '1'.
      GS_DF_WARR_COMP-SP_COMP1   = <LFS_ZSDSCMC006>-SP_COMP.
      GS_DF_WARR_COMP-SP_COND1   = <LFS_ZSDSCMC006>-SP_COND.
      GS_DF_WARR_COMP-SP_EVAP1   = <LFS_ZSDSCMC006>-SP_EVAP.
      GS_DF_WARR_COMP-SP_PCBIN1  = <LFS_ZSDSCMC006>-SP_PCBIN.
      GS_DF_WARR_COMP-SP_PCBOUT1 = <LFS_ZSDSCMC006>-SP_PCBOUT.
      GS_DF_WARR_COMP-SP_FAN1    = <LFS_ZSDSCMC006>-SP_FAN.
      GS_DF_WARR_COMP-SP_CASING1 = <LFS_ZSDSCMC006>-SP_CASING.
      GS_DF_WARR_COMP-SP_OTHER1  = <LFS_ZSDSCMC006>-SP_OTHER.
      GS_DF_WARR_COMP-SV_COMP1   = <LFS_ZSDSCMC006>-SV_COMP.
      GS_DF_WARR_COMP-SV_COND1   = <LFS_ZSDSCMC006>-SV_COND.
      GS_DF_WARR_COMP-SV_EVAP1   = <LFS_ZSDSCMC006>-SV_EVAP.
      GS_DF_WARR_COMP-SV_PCBIN1  = <LFS_ZSDSCMC006>-SV_PCBIN.
      GS_DF_WARR_COMP-SV_PCBOUT1 = <LFS_ZSDSCMC006>-SV_PCBOUT.
      GS_DF_WARR_COMP-SV_FAN1    = <LFS_ZSDSCMC006>-SV_FAN.
      GS_DF_WARR_COMP-SV_CASING1 = <LFS_ZSDSCMC006>-SV_CASING.
      GS_DF_WARR_COMP-SV_OTHER1  = <LFS_ZSDSCMC006>-SV_OTHER.
    ELSEIF <LFS_ZSDSCMC006>-MATWLTYPE = '2'.
      GS_DF_WARR_COMP-SP_COMP2   = <LFS_ZSDSCMC006>-SP_COMP.
      GS_DF_WARR_COMP-SP_COND2   = <LFS_ZSDSCMC006>-SP_COND.
      GS_DF_WARR_COMP-SP_EVAP2   = <LFS_ZSDSCMC006>-SP_EVAP.
      GS_DF_WARR_COMP-SP_PCBIN2  = <LFS_ZSDSCMC006>-SP_PCBIN.
      GS_DF_WARR_COMP-SP_PCBOUT2 = <LFS_ZSDSCMC006>-SP_PCBOUT.
      GS_DF_WARR_COMP-SP_FAN2    = <LFS_ZSDSCMC006>-SP_FAN.
      GS_DF_WARR_COMP-SP_CASING2 = <LFS_ZSDSCMC006>-SP_CASING.
      GS_DF_WARR_COMP-SP_OTHER2  = <LFS_ZSDSCMC006>-SP_OTHER.
      GS_DF_WARR_COMP-SV_COMP2   = <LFS_ZSDSCMC006>-SV_COMP.
      GS_DF_WARR_COMP-SV_COND2   = <LFS_ZSDSCMC006>-SV_COND.
      GS_DF_WARR_COMP-SV_EVAP2   = <LFS_ZSDSCMC006>-SV_EVAP.
      GS_DF_WARR_COMP-SV_PCBIN2  = <LFS_ZSDSCMC006>-SV_PCBIN.
      GS_DF_WARR_COMP-SV_PCBOUT2 = <LFS_ZSDSCMC006>-SV_PCBOUT.
      GS_DF_WARR_COMP-SV_FAN2    = <LFS_ZSDSCMC006>-SV_FAN.
      GS_DF_WARR_COMP-SV_CASING2 = <LFS_ZSDSCMC006>-SV_CASING.
      GS_DF_WARR_COMP-SV_OTHER2  = <LFS_ZSDSCMC006>-SV_OTHER.
    ELSEIF <LFS_ZSDSCMC006>-MATWLTYPE = '3'.
      GS_DF_WARR_COMP-SP_COMP3   = <LFS_ZSDSCMC006>-SP_COMP.
      GS_DF_WARR_COMP-SP_COND3   = <LFS_ZSDSCMC006>-SP_COND.
      GS_DF_WARR_COMP-SP_EVAP3   = <LFS_ZSDSCMC006>-SP_EVAP.
      GS_DF_WARR_COMP-SP_PCBIN3  = <LFS_ZSDSCMC006>-SP_PCBIN.
      GS_DF_WARR_COMP-SP_PCBOUT3 = <LFS_ZSDSCMC006>-SP_PCBOUT.
      GS_DF_WARR_COMP-SP_FAN3    = <LFS_ZSDSCMC006>-SP_FAN.
      GS_DF_WARR_COMP-SP_CASING3 = <LFS_ZSDSCMC006>-SP_CASING.
      GS_DF_WARR_COMP-SP_OTHER3  = <LFS_ZSDSCMC006>-SP_OTHER.
      GS_DF_WARR_COMP-SV_COMP3   = <LFS_ZSDSCMC006>-SV_COMP.
      GS_DF_WARR_COMP-SV_COND3   = <LFS_ZSDSCMC006>-SV_COND.
      GS_DF_WARR_COMP-SV_EVAP3   = <LFS_ZSDSCMC006>-SV_EVAP.
      GS_DF_WARR_COMP-SV_PCBIN3  = <LFS_ZSDSCMC006>-SV_PCBIN.
      GS_DF_WARR_COMP-SV_PCBOUT3 = <LFS_ZSDSCMC006>-SV_PCBOUT.
      GS_DF_WARR_COMP-SV_FAN3    = <LFS_ZSDSCMC006>-SV_FAN.
      GS_DF_WARR_COMP-SV_CASING3 = <LFS_ZSDSCMC006>-SV_CASING.
      GS_DF_WARR_COMP-SV_OTHER3  = <LFS_ZSDSCMC006>-SV_OTHER.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form save_9200_warr_comp_df
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM SAVE_9200_WARR_COMP_DF .
  DATA: LS_ZSDSCMC006   TYPE ZSDSCMC006.

  SELECT * INTO TABLE @DATA(LT_ZSDSCMC006) "#EC CI_ALL_FIELDS_NEEDED "#EC CI_NOWHERE
    FROM ZSDSCMC006.

  CLEAR: GT_ZSDSCMC006.
  LS_ZSDSCMC006-MATWLTYPE = '1'.
  LS_ZSDSCMC006-SP_COMP = GS_DF_WARR_COMP-SP_COMP1.
  LS_ZSDSCMC006-SP_COND = GS_DF_WARR_COMP-SP_COND1.
  LS_ZSDSCMC006-SP_EVAP = GS_DF_WARR_COMP-SP_EVAP1.
  LS_ZSDSCMC006-SP_PCBIN = GS_DF_WARR_COMP-SP_PCBIN1.
  LS_ZSDSCMC006-SP_PCBOUT = GS_DF_WARR_COMP-SP_PCBOUT1.
  LS_ZSDSCMC006-SP_FAN = GS_DF_WARR_COMP-SP_FAN1.
  LS_ZSDSCMC006-SP_CASING = GS_DF_WARR_COMP-SP_CASING1.
  LS_ZSDSCMC006-SP_OTHER = GS_DF_WARR_COMP-SP_OTHER1.
  LS_ZSDSCMC006-SV_COMP = GS_DF_WARR_COMP-SV_COMP1.
  LS_ZSDSCMC006-SV_COND = GS_DF_WARR_COMP-SV_COND1.
  LS_ZSDSCMC006-SV_EVAP = GS_DF_WARR_COMP-SV_EVAP1.
  LS_ZSDSCMC006-SV_PCBIN = GS_DF_WARR_COMP-SV_PCBIN1.
  LS_ZSDSCMC006-SV_PCBOUT = GS_DF_WARR_COMP-SV_PCBOUT1.
  LS_ZSDSCMC006-SV_FAN = GS_DF_WARR_COMP-SV_FAN1.
  LS_ZSDSCMC006-SV_CASING = GS_DF_WARR_COMP-SV_CASING1.
  LS_ZSDSCMC006-SV_OTHER = GS_DF_WARR_COMP-SV_OTHER1.
  READ TABLE LT_ZSDSCMC006 ASSIGNING FIELD-SYMBOL(<LFS_C006_TMP>) WITH KEY MATWLTYPE = '1'.
  IF SY-SUBRC = 0.
    LS_ZSDSCMC006-ZUPD_DATE = SY-DATUM.
    LS_ZSDSCMC006-ZUPD_TIME = SY-UZEIT.
    LS_ZSDSCMC006-ZUPD_USER = SY-UNAME.
  ELSE.
    LS_ZSDSCMC006-ZCRT_DATE = SY-DATUM.
    LS_ZSDSCMC006-ZCRT_TIME = SY-UZEIT.
    LS_ZSDSCMC006-ZCRT_USER = SY-UNAME.
  ENDIF.
  APPEND LS_ZSDSCMC006 TO GT_ZSDSCMC006.

  CLEAR: LS_ZSDSCMC006.
  LS_ZSDSCMC006-MATWLTYPE = '2'.
  LS_ZSDSCMC006-SP_COMP = GS_DF_WARR_COMP-SP_COMP2.
  LS_ZSDSCMC006-SP_COND = GS_DF_WARR_COMP-SP_COND2.
  LS_ZSDSCMC006-SP_EVAP = GS_DF_WARR_COMP-SP_EVAP2.
  LS_ZSDSCMC006-SP_PCBIN = GS_DF_WARR_COMP-SP_PCBIN2.
  LS_ZSDSCMC006-SP_PCBOUT = GS_DF_WARR_COMP-SP_PCBOUT2.
  LS_ZSDSCMC006-SP_FAN = GS_DF_WARR_COMP-SP_FAN2.
  LS_ZSDSCMC006-SP_CASING = GS_DF_WARR_COMP-SP_CASING2.
  LS_ZSDSCMC006-SP_OTHER = GS_DF_WARR_COMP-SP_OTHER2.
  LS_ZSDSCMC006-SV_COMP = GS_DF_WARR_COMP-SV_COMP2.
  LS_ZSDSCMC006-SV_COND = GS_DF_WARR_COMP-SV_COND2.
  LS_ZSDSCMC006-SV_EVAP = GS_DF_WARR_COMP-SV_EVAP2.
  LS_ZSDSCMC006-SV_PCBIN = GS_DF_WARR_COMP-SV_PCBIN2.
  LS_ZSDSCMC006-SV_PCBOUT = GS_DF_WARR_COMP-SV_PCBOUT2.
  LS_ZSDSCMC006-SV_FAN = GS_DF_WARR_COMP-SV_FAN2.
  LS_ZSDSCMC006-SV_CASING = GS_DF_WARR_COMP-SV_CASING2.
  LS_ZSDSCMC006-SV_OTHER = GS_DF_WARR_COMP-SV_OTHER2.
  READ TABLE LT_ZSDSCMC006 ASSIGNING <LFS_C006_TMP> WITH KEY MATWLTYPE = '2'.
  IF SY-SUBRC = 0.
    LS_ZSDSCMC006-ZUPD_DATE = SY-DATUM.
    LS_ZSDSCMC006-ZUPD_TIME = SY-UZEIT.
    LS_ZSDSCMC006-ZUPD_USER = SY-UNAME.
  ELSE.
    LS_ZSDSCMC006-ZCRT_DATE = SY-DATUM.
    LS_ZSDSCMC006-ZCRT_TIME = SY-UZEIT.
    LS_ZSDSCMC006-ZCRT_USER = SY-UNAME.
  ENDIF.
  APPEND LS_ZSDSCMC006 TO GT_ZSDSCMC006.

  CLEAR: LS_ZSDSCMC006.
  LS_ZSDSCMC006-MATWLTYPE = '3'.
  LS_ZSDSCMC006-SP_COMP = GS_DF_WARR_COMP-SP_COMP3.
  LS_ZSDSCMC006-SP_COND = GS_DF_WARR_COMP-SP_COND3.
  LS_ZSDSCMC006-SP_EVAP = GS_DF_WARR_COMP-SP_EVAP3.
  LS_ZSDSCMC006-SP_PCBIN = GS_DF_WARR_COMP-SP_PCBIN3.
  LS_ZSDSCMC006-SP_PCBOUT = GS_DF_WARR_COMP-SP_PCBOUT3.
  LS_ZSDSCMC006-SP_FAN = GS_DF_WARR_COMP-SP_FAN3.
  LS_ZSDSCMC006-SP_CASING = GS_DF_WARR_COMP-SP_CASING3.
  LS_ZSDSCMC006-SP_OTHER = GS_DF_WARR_COMP-SP_OTHER3.
  LS_ZSDSCMC006-SV_COMP = GS_DF_WARR_COMP-SV_COMP3.
  LS_ZSDSCMC006-SV_COND = GS_DF_WARR_COMP-SV_COND3.
  LS_ZSDSCMC006-SV_EVAP = GS_DF_WARR_COMP-SV_EVAP3.
  LS_ZSDSCMC006-SV_PCBIN = GS_DF_WARR_COMP-SV_PCBIN3.
  LS_ZSDSCMC006-SV_PCBOUT = GS_DF_WARR_COMP-SV_PCBOUT3.
  LS_ZSDSCMC006-SV_FAN = GS_DF_WARR_COMP-SV_FAN3.
  LS_ZSDSCMC006-SV_CASING = GS_DF_WARR_COMP-SV_CASING3.
  LS_ZSDSCMC006-SV_OTHER = GS_DF_WARR_COMP-SV_OTHER3.
  READ TABLE LT_ZSDSCMC006 ASSIGNING <LFS_C006_TMP> WITH KEY MATWLTYPE = '3'.
  IF SY-SUBRC = 0.
    LS_ZSDSCMC006-ZUPD_DATE = SY-DATUM.
    LS_ZSDSCMC006-ZUPD_TIME = SY-UZEIT.
    LS_ZSDSCMC006-ZUPD_USER = SY-UNAME.
  ELSE.
    LS_ZSDSCMC006-ZCRT_DATE = SY-DATUM.
    LS_ZSDSCMC006-ZCRT_TIME = SY-UZEIT.
    LS_ZSDSCMC006-ZCRT_USER = SY-UNAME.
  ENDIF.
  APPEND LS_ZSDSCMC006 TO GT_ZSDSCMC006.


  CALL FUNCTION 'ENQUEUE_EZSDSCMC006'
    EXPORTING
      MODE_ZSDSCMC006 = 'E'
      MANDT           = SY-MANDT
*     MATWLTYPE       =
*     X_MATWLTYPE     = ' '
*     _SCOPE          = '2'
*     _WAIT           = ' '
*     _COLLECT        = ' '
    EXCEPTIONS
      FOREIGN_LOCK    = 1
      SYSTEM_FAILURE  = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  MODIFY ZSDSCMC006 FROM TABLE GT_ZSDSCMC006.

  CALL FUNCTION 'DEQUEUE_EZSDSCMC006'
    EXPORTING
      MODE_ZSDSCMC006 = 'E'
      MANDT           = SY-MANDT
*     MATWLTYPE       =
*     X_MATWLTYPE     = ' '
*     _SCOPE          = '3'
*     _SYNCHRON       = ' '
*     _COLLECT        = ' '
    .


ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_WARR_CONDTEXT_DF
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM DISPLAY_WARR_CONDTEXT_DF .

  CLEAR: GS_ZSDSCMC007.
  IF GV_LANG_TH_EN IS NOT INITIAL.
    READ TABLE GT_ZSDSCMC007 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMC007>) WITH KEY SPRAS = GV_LANG_TH_EN. "#EC CI_NOORDER
  ELSE.
    READ TABLE GT_ZSDSCMC007 ASSIGNING <LFS_ZSDSCMC007> INDEX 1. "#EC CI_NOORDER
  ENDIF.
  IF SY-SUBRC = 0.
    GV_LANG_TH_EN = <LFS_ZSDSCMC007>-SPRAS.
    GS_ZSDSCMC007-SPRAS        = <LFS_ZSDSCMC007>-SPRAS.
    GS_ZSDSCMC007-HEADERTEXT1  = <LFS_ZSDSCMC007>-HEADERTEXT1.
    GS_ZSDSCMC007-HEADERTEXT2  = <LFS_ZSDSCMC007>-HEADERTEXT2.
    GS_ZSDSCMC007-FOOTERTEXT1  = <LFS_ZSDSCMC007>-FOOTERTEXT1.
    GS_ZSDSCMC007-FOOTERTEXT2  = <LFS_ZSDSCMC007>-FOOTERTEXT2.
    GS_ZSDSCMC007-FOOTERTEXT3  = <LFS_ZSDSCMC007>-FOOTERTEXT3.
    GS_ZSDSCMC007-FOOTERTEXT4  = <LFS_ZSDSCMC007>-FOOTERTEXT4.
    GS_ZSDSCMC007-FOOTERTEXT5  = <LFS_ZSDSCMC007>-FOOTERTEXT5.
    GS_ZSDSCMC007-FOOTERTEXT6  = <LFS_ZSDSCMC007>-FOOTERTEXT6.
    GS_ZSDSCMC007-FOOTERTEXT7  = <LFS_ZSDSCMC007>-FOOTERTEXT7.
    GS_ZSDSCMC007-FOOTERTEXT8  = <LFS_ZSDSCMC007>-FOOTERTEXT8.
    GS_ZSDSCMC007-FOOTERTEXT9  = <LFS_ZSDSCMC007>-FOOTERTEXT9.
    GS_ZSDSCMC007-FOOTERTEXT10 = <LFS_ZSDSCMC007>-FOOTERTEXT10.
    GS_ZSDSCMC007-FOOTERTEXT11 = <LFS_ZSDSCMC007>-FOOTERTEXT11.
    GS_ZSDSCMC007-FOOTERTEXT12 = <LFS_ZSDSCMC007>-FOOTERTEXT12.
    GS_ZSDSCMC007-FOOTERTEXT13 = <LFS_ZSDSCMC007>-FOOTERTEXT13.
    GS_ZSDSCMC007-FOOTERTEXT14 = <LFS_ZSDSCMC007>-FOOTERTEXT14.
    GS_ZSDSCMC007-FOOTERTEXT15 = <LFS_ZSDSCMC007>-FOOTERTEXT15.
    GS_ZSDSCMC007-FOOTERTEXT16 = <LFS_ZSDSCMC007>-FOOTERTEXT16.
    GS_ZSDSCMC007-FOOTERTEXT17 = <LFS_ZSDSCMC007>-FOOTERTEXT17.
    GS_ZSDSCMC007-FOOTERTEXT18 = <LFS_ZSDSCMC007>-FOOTERTEXT18.
    GS_ZSDSCMC007-FOOTERTEXT19 = <LFS_ZSDSCMC007>-FOOTERTEXT19.
    GS_ZSDSCMC007-FOOTERTEXT20 = <LFS_ZSDSCMC007>-FOOTERTEXT20.
    GS_ZSDSCMC007-SUBJECT      = <LFS_ZSDSCMC007>-SUBJECT.
    GS_ZSDSCMC007-ATTENTION    = <LFS_ZSDSCMC007>-ATTENTION.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SAVE_9100_WARR_CONDTEXT_DF
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM SAVE_9100_WARR_CONDTEXT_DF .

  GS_ZSDSCMC007-SPRAS = GV_LANG_TH_EN.

  READ TABLE GT_ZSDSCMC007 ASSIGNING FIELD-SYMBOL(<LFS_C007_TMP>) WITH KEY SPRAS = GS_ZSDSCMC007-SPRAS.
  IF SY-SUBRC = 0.
    <LFS_C007_TMP> = GS_ZSDSCMC007.
    GS_ZSDSCMC007-ZUPD_DATE = SY-DATUM.
    GS_ZSDSCMC007-ZUPD_TIME = SY-UZEIT.
    GS_ZSDSCMC007-ZUPD_USER = SY-UNAME.
  ELSE.
    GS_ZSDSCMC007-ZCRT_DATE = SY-DATUM.
    GS_ZSDSCMC007-ZCRT_TIME = SY-UZEIT.
    GS_ZSDSCMC007-ZCRT_USER = SY-UNAME.
    APPEND GS_ZSDSCMC007 TO GT_ZSDSCMC007.
  ENDIF.

  CALL FUNCTION 'ENQUEUE_EZSDSCMC007'
    EXPORTING
      MODE_ZSDSCMC007 = 'E'
      MANDT           = SY-MANDT
*     SPRAS           =
*     X_SPRAS         = ' '
*     _SCOPE          = '2'
*     _WAIT           = ' '
*     _COLLECT        = ' '
    EXCEPTIONS
      FOREIGN_LOCK    = 1
      SYSTEM_FAILURE  = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  MODIFY ZSDSCMC007 FROM GS_ZSDSCMC007.

  CALL FUNCTION 'DEQUEUE_EZSDSCMC007'
    EXPORTING
      MODE_ZSDSCMC007 = 'E'
      MANDT           = SY-MANDT
*     SPRAS           =
*     X_SPRAS         = ' '
*     _SCOPE          = '3'
*     _SYNCHRON       = ' '
*     _COLLECT        = ' '
    .

ENDFORM.
*&---------------------------------------------------------------------*
*& Form Validate_9100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM VALIDATE_9100 .
  IF GV_LANG_TH_EN IS INITIAL.
    MESSAGE TEXT-E02 TYPE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form validate_genc
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM VALIDATE_GENC .

  DATA:LRT_WARRANTY TYPE RANGE OF ZSDSDE_WL_ID.

  ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = SY-CPROG
                                                  IF_PARAM = GC_WARRANTY
                                        IMPORTING ET_RANGE = LRT_WARRANTY ).
  IF LRT_WARRANTY IS NOT INITIAL.
    TRY.
        GV_WARRANTY_NO_TEXT = LRT_WARRANTY[ 1 ]-LOW.
      CATCH CX_SY_ITAB_LINE_NOT_FOUND.
        "Please maintain constant value WARRANTY in Table ZSDSCAC001
        MESSAGE TEXT-E03 TYPE 'E'.
    ENDTRY.
  ENDIF.

* Get Data
  SELECT *                                    "#EC CI_ALL_FIELDS_NEEDED
    INTO TABLE @GT_GENC_PROD_WRTTYP
    FROM ZSDSCAC001
   WHERE REPID = @GC_ZSDSCMR0020
     AND PARAM = @GC_PROD_WRTTYP
     AND ZDEL_FLG  = @SPACE.
  IF SY-SUBRC <> 0.
    "Please maintain constant value PROD_WRTTYP in Table ZSDSCAC001
    MESSAGE TEXT-E07 TYPE 'E'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form adjust_warranty_start_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM ADJUST_WARRANTY_START_100 .
  LOOP AT GT_INV_100 ASSIGNING FIELD-SYMBOL(<LFS_INV_100>).
    CASE 'X'.
      WHEN R_INV100.
        <LFS_INV_100>-WLSTARTDATE = <LFS_INV_100>-FKDAT.
      WHEN R_INV_EX100.
        <LFS_INV_100>-WLSTARTDATE = <LFS_INV_100>-FKDAT + GV_DAYS100.
      WHEN R_MANUAL100.
        IF GV_WLDATE100 IS NOT INITIAL.
          <LFS_INV_100>-WLSTARTDATE = GV_WLDATE100.
        ENDIF.
    ENDCASE.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form VALIDATE_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM VALIDATE_100 .

*Warranty Text Data
  IF GV_LANG_TH_EN IS INITIAL AND GS_ZSDSCMT008-SPRAS IS INITIAL.
    CLEAR OK_CODE.
    MESSAGE TEXT-E04 TYPE 'E'."Please input document language
  ENDIF.

*Status space,1 created, 4 reject can be saved
  IF GS_ZSDSCMT005-STATUS = '2'  OR  GS_ZSDSCMT005-STATUS = '5'. "OR  GS_ZSDSCMT005-STATUS = '3'.
    CLEAR OK_CODE.
    MESSAGE TEXT-E08 TYPE 'E'."Status 'Send to Approve', 'Approved', and 'Cancelled' cannot be saved
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SAVE_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM SAVE_100 .
  CLEAR: GV_SUBRC_ENQUEUE.

  IF GV_WL_ID IS INITIAL .
    PERFORM GET_NUMBER_RANGE.
  ELSE.
    GS_ZSDSCMT005-WL_ID = GV_WL_ID .
  ENDIF.

  IF GV_WL_ID IS NOT INITIAL.
    PERFORM ENQUEUE_TABLES CHANGING GV_SUBRC_ENQUEUE.
    IF GV_SUBRC_ENQUEUE = 0.
      PERFORM MANUPULATE_DATA_100.
      PERFORM SAVE_DATA_100.
    ENDIF.

*Save data to Warranty Master Data Table ZSDSCMT003
*method ZCL_SDSCM_WARRANTY_UTIL=> MODIFY_WARRANTY_MASTER
*Warranty Letter must be saved first
*GS_ZSDSCMT005-STATUS = '3'
*Get DO for each billing
    PERFORM UPDATE_WARRANTY_MASTER.

    PERFORM DEQUEUE_ALL.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_number_range
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_NUMBER_RANGE .
  DATA: LV_NUMBER_RANGE(6) TYPE N.

  CLEAR: GV_WL_ID.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      NR_RANGE_NR             = GC_NUMBER_RANGE-NR
      OBJECT                  = GC_NUMBER_RANGE-OBJ
      TOYEAR                  = SY-DATUM+0(4)
*     IGNORE_BUFFER           = ' '
    IMPORTING
      NUMBER                  = LV_NUMBER_RANGE
*     RETURNCODE              =
    EXCEPTIONS
      INTERVAL_NOT_FOUND      = 1
      NUMBER_RANGE_NOT_INTERN = 2
      OBJECT_NOT_FOUND        = 3
      QUANTITY_IS_0           = 4
      QUANTITY_IS_NOT_1       = 5
      INTERVAL_OVERFLOW       = 6
      BUFFER_OVERFLOW         = 7
      OTHERS                  = 8.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    RETURN.
  ENDIF.

  IF LV_NUMBER_RANGE IS NOT INITIAL.

    GV_WL_ID = |{ GV_WARRANTY_NO_TEXT }-{ SY-DATUM+0(4) }-{ LV_NUMBER_RANGE }|.
    GS_ZSDSCMT005-WL_ID = GV_WL_ID.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form ENQUEUE_TABLES
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM ENQUEUE_TABLES CHANGING PV_SUBRC TYPE SUBRC.

  CALL FUNCTION 'ENQUEUE_EZSDSCMT005'
    EXPORTING
      MODE_ZSDSCMT005 = 'E'
      MANDT           = SY-MANDT
*     WL_ID           =
*     X_WL_ID         = ' '
*     _SCOPE          = '2'
*     _WAIT           = ' '
*     _COLLECT        = ' '
    EXCEPTIONS
      FOREIGN_LOCK    = 1
      SYSTEM_FAILURE  = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
    PV_SUBRC = SY-SUBRC.
  ENDIF.
  CALL FUNCTION 'ENQUEUE_EZSDSCMT006'
    EXPORTING
      MODE_ZSDSCMT006 = 'E'
      MANDT           = SY-MANDT
*     WL_ID           =
*     MATWLTYPE       =
*     X_WL_ID         = ' '
*     X_MATWLTYPE     = ' '
*     _SCOPE          = '2'
*     _WAIT           = ' '
*     _COLLECT        = ' '
    EXCEPTIONS
      FOREIGN_LOCK    = 1
      SYSTEM_FAILURE  = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
    PV_SUBRC = SY-SUBRC.
  ENDIF.
  CALL FUNCTION 'ENQUEUE_EZSDSCMT007'
    EXPORTING
      MODE_ZSDSCMT007 = 'E'
      MANDT           = SY-MANDT
*     WL_ID           =
*     INV_NO          =
*     X_WL_ID         = ' '
*     X_INV_NO        = ' '
*     _SCOPE          = '2'
*     _WAIT           = ' '
*     _COLLECT        = ' '
    EXCEPTIONS
      FOREIGN_LOCK    = 1
      SYSTEM_FAILURE  = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
    PV_SUBRC = SY-SUBRC.
  ENDIF.
  CALL FUNCTION 'ENQUEUE_EZSDSCMT008'
    EXPORTING
      MODE_ZSDSCMT008 = 'E'
      MANDT           = SY-MANDT
*     WL_ID           =
*     SPRAS           =
*     X_WL_ID         = ' '
*     X_SPRAS         = ' '
*     _SCOPE          = '2'
*     _WAIT           = ' '
*     _COLLECT        = ' '
    EXCEPTIONS
      FOREIGN_LOCK    = 1
      SYSTEM_FAILURE  = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
    PV_SUBRC = SY-SUBRC.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form DEQUEUE_ALL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM DEQUEUE_ALL .
  CALL FUNCTION 'DEQUEUE_ALL'
*   EXPORTING
*     _SYNCHRON       = ' '
    .

ENDFORM.

*&---------------------------------------------------------------------*
*& Form Manupulate_data_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM MANUPULATE_DATA_100 .

*General data
  PERFORM GEN_DATA_100.

*Warranty Detail
  PERFORM WARRANTY_DETAIL_100.

*Mapping WL Number and Invoice
  PERFORM WL_INV_MAPPING_100.

*Warranty Text Data
  PERFORM WARRANTY_TEXT_100.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form gen_data_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GEN_DATA_100 .

  GS_ZSDSCMT005-WL_ID   = GV_WL_ID.

  PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING GV_STATUS_TXT.

*  GS_ZSDSCMT005-PROJWBS = P_POSID.
*  GS_ZSDSCMT005-PROJWBS = GS_ZSDSCMT005-PROJWBS.

  SORT GT_INV_100 BY WLSTARTDATE DESCENDING.

  GS_ZSDSCMT005-WLSTARTDATE = GT_INV_100[ 1 ]-WLSTARTDATE.

  IF R_INV100 = 'X'.
    GS_ZSDSCMT005-R_WARR1 = R_INV100.
    CLEAR: GS_ZSDSCMT005-R_WARR2,GS_ZSDSCMT005-R_WARR2_DAYS,
           GS_ZSDSCMT005-R_WARR3,GS_ZSDSCMT005-R_WARR3_DATE.
  ELSEIF R_INV_EX100 = 'X'.
    GS_ZSDSCMT005-R_WARR2 = R_INV_EX100.
    GS_ZSDSCMT005-R_WARR2_DAYS = GV_DAYS100.

    CLEAR: GS_ZSDSCMT005-R_WARR1,
           GS_ZSDSCMT005-R_WARR3,GS_ZSDSCMT005-R_WARR3_DATE.

  ELSEIF R_MANUAL100 = 'X'.
    GS_ZSDSCMT005-R_WARR3 = R_MANUAL100.
    GS_ZSDSCMT005-R_WARR3_DATE = GV_WLDATE100.
    CLEAR: GS_ZSDSCMT005-R_WARR1,
           GS_ZSDSCMT005-R_WARR2,GS_ZSDSCMT005-R_WARR2_DAYS.
  ENDIF.


  IF GS_ZSDSCMT005-ERDAT IS INITIAL.
    GS_ZSDSCMT005-ERDAT = SY-DATUM.
    GS_ZSDSCMT005-ERTIM = SY-UZEIT.
    GS_ZSDSCMT005-ERNAM = SY-UNAME.
  ELSE.
    GS_ZSDSCMT005-AEDAT = SY-DATUM.
    GS_ZSDSCMT005-AETIM = SY-UZEIT.
    GS_ZSDSCMT005-AENAM = SY-UNAME.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form Warranty_Text_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM WARRANTY_TEXT_100 .
  IF GT_ZSDSCMT008 IS INITIAL.
    GS_ZSDSCMT008-SPRAS = GV_LANG_TH_EN.
    GS_ZSDSCMT008-WL_ID = GV_WL_ID.
    APPEND GS_ZSDSCMT008 TO GT_ZSDSCMT008.
  ELSE.
    LOOP AT GT_ZSDSCMT008 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMT008>).
      <LFS_ZSDSCMT008>-WL_ID = GV_WL_ID.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form Warranty_Detail_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM WARRANTY_DETAIL_100 .

  CLEAR: GT_ZSDSCMT006.
  GS_ZSDSCMT006-WL_ID     = GV_WL_ID.
  GS_ZSDSCMT006-MATWLTYPE = '1'.
  GS_ZSDSCMT006-SP_COMP   = GS_DF_WARR_COMP-SP_COMP1.
  GS_ZSDSCMT006-SP_COND   = GS_DF_WARR_COMP-SP_COND1.
  GS_ZSDSCMT006-SP_EVAP   = GS_DF_WARR_COMP-SP_EVAP1.
  GS_ZSDSCMT006-SP_PCBIN  = GS_DF_WARR_COMP-SP_PCBIN1.
  GS_ZSDSCMT006-SP_PCBOUT = GS_DF_WARR_COMP-SP_PCBOUT1.
  GS_ZSDSCMT006-SP_FAN    = GS_DF_WARR_COMP-SP_FAN1.
  GS_ZSDSCMT006-SP_CASING = GS_DF_WARR_COMP-SP_CASING1.
  GS_ZSDSCMT006-SP_OTHER  = GS_DF_WARR_COMP-SP_OTHER1.
  GS_ZSDSCMT006-SV_COMP   = GS_DF_WARR_COMP-SV_COMP1.
  GS_ZSDSCMT006-SV_COND   = GS_DF_WARR_COMP-SV_COND1.
  GS_ZSDSCMT006-SV_EVAP   = GS_DF_WARR_COMP-SV_EVAP1.
  GS_ZSDSCMT006-SV_PCBIN  = GS_DF_WARR_COMP-SV_PCBIN1.
  GS_ZSDSCMT006-SV_PCBOUT = GS_DF_WARR_COMP-SV_PCBOUT1.
  GS_ZSDSCMT006-SV_FAN    = GS_DF_WARR_COMP-SV_FAN1.
  GS_ZSDSCMT006-SV_CASING = GS_DF_WARR_COMP-SV_CASING1.
  GS_ZSDSCMT006-SV_OTHER  = GS_DF_WARR_COMP-SV_OTHER1.
  IF GS_ZSDSCMT006-ERDAT IS INITIAL.
    GS_ZSDSCMT006-ERDAT = SY-DATUM.
    GS_ZSDSCMT006-ERTIM = SY-UZEIT.
    GS_ZSDSCMT006-ERNAM = SY-UNAME.
  ELSE.
    GS_ZSDSCMT006-AEDAT = SY-DATUM.
    GS_ZSDSCMT006-AETIM = SY-UZEIT.
    GS_ZSDSCMT006-AENAM = SY-UNAME.
  ENDIF.
  APPEND GS_ZSDSCMT006 TO GT_ZSDSCMT006.

  GS_ZSDSCMT006-WL_ID     = GV_WL_ID.
  GS_ZSDSCMT006-MATWLTYPE = '2'.
  GS_ZSDSCMT006-SP_COMP = GS_DF_WARR_COMP-SP_COMP2.
  GS_ZSDSCMT006-SP_COND = GS_DF_WARR_COMP-SP_COND2.
  GS_ZSDSCMT006-SP_EVAP = GS_DF_WARR_COMP-SP_EVAP2.
  GS_ZSDSCMT006-SP_PCBIN = GS_DF_WARR_COMP-SP_PCBIN2.
  GS_ZSDSCMT006-SP_PCBOUT = GS_DF_WARR_COMP-SP_PCBOUT2.
  GS_ZSDSCMT006-SP_FAN = GS_DF_WARR_COMP-SP_FAN2.
  GS_ZSDSCMT006-SP_CASING = GS_DF_WARR_COMP-SP_CASING2.
  GS_ZSDSCMT006-SP_OTHER = GS_DF_WARR_COMP-SP_OTHER2.
  GS_ZSDSCMT006-SV_COMP = GS_DF_WARR_COMP-SV_COMP2.
  GS_ZSDSCMT006-SV_COND = GS_DF_WARR_COMP-SV_COND2.
  GS_ZSDSCMT006-SV_EVAP = GS_DF_WARR_COMP-SV_EVAP2.
  GS_ZSDSCMT006-SV_PCBIN = GS_DF_WARR_COMP-SV_PCBIN2.
  GS_ZSDSCMT006-SV_PCBOUT = GS_DF_WARR_COMP-SV_PCBOUT2.
  GS_ZSDSCMT006-SV_FAN = GS_DF_WARR_COMP-SV_FAN2.
  GS_ZSDSCMT006-SV_CASING = GS_DF_WARR_COMP-SV_CASING2.
  GS_ZSDSCMT006-SV_OTHER = GS_DF_WARR_COMP-SV_OTHER2.
  IF GS_ZSDSCMT006-ERDAT IS INITIAL.
    GS_ZSDSCMT006-ERDAT = SY-DATUM.
    GS_ZSDSCMT006-ERTIM = SY-UZEIT.
    GS_ZSDSCMT006-ERNAM = SY-UNAME.
  ELSE.
    GS_ZSDSCMT006-AEDAT = SY-DATUM.
    GS_ZSDSCMT006-AETIM = SY-UZEIT.
    GS_ZSDSCMT006-AENAM = SY-UNAME.
  ENDIF.
  APPEND GS_ZSDSCMT006 TO GT_ZSDSCMT006.

  GS_ZSDSCMT006-WL_ID     = GV_WL_ID.
  GS_ZSDSCMT006-MATWLTYPE = '3'.
  GS_ZSDSCMT006-SP_COMP = GS_DF_WARR_COMP-SP_COMP3.
  GS_ZSDSCMT006-SP_COND = GS_DF_WARR_COMP-SP_COND3.
  GS_ZSDSCMT006-SP_EVAP = GS_DF_WARR_COMP-SP_EVAP3.
  GS_ZSDSCMT006-SP_PCBIN = GS_DF_WARR_COMP-SP_PCBIN3.
  GS_ZSDSCMT006-SP_PCBOUT = GS_DF_WARR_COMP-SP_PCBOUT3.
  GS_ZSDSCMT006-SP_FAN = GS_DF_WARR_COMP-SP_FAN3.
  GS_ZSDSCMT006-SP_CASING = GS_DF_WARR_COMP-SP_CASING3.
  GS_ZSDSCMT006-SP_OTHER = GS_DF_WARR_COMP-SP_OTHER3.
  GS_ZSDSCMT006-SV_COMP = GS_DF_WARR_COMP-SV_COMP3.
  GS_ZSDSCMT006-SV_COND = GS_DF_WARR_COMP-SV_COND3.
  GS_ZSDSCMT006-SV_EVAP = GS_DF_WARR_COMP-SV_EVAP3.
  GS_ZSDSCMT006-SV_PCBIN = GS_DF_WARR_COMP-SV_PCBIN3.
  GS_ZSDSCMT006-SV_PCBOUT = GS_DF_WARR_COMP-SV_PCBOUT3.
  GS_ZSDSCMT006-SV_FAN = GS_DF_WARR_COMP-SV_FAN3.
  GS_ZSDSCMT006-SV_CASING = GS_DF_WARR_COMP-SV_CASING3.
  GS_ZSDSCMT006-SV_OTHER = GS_DF_WARR_COMP-SV_OTHER3.
  IF GS_ZSDSCMT006-ERDAT IS INITIAL.
    GS_ZSDSCMT006-ERDAT = SY-DATUM.
    GS_ZSDSCMT006-ERTIM = SY-UZEIT.
    GS_ZSDSCMT006-ERNAM = SY-UNAME.
  ELSE.
    GS_ZSDSCMT006-AEDAT = SY-DATUM.
    GS_ZSDSCMT006-AETIM = SY-UZEIT.
    GS_ZSDSCMT006-AENAM = SY-UNAME.
  ENDIF.
  APPEND GS_ZSDSCMT006 TO GT_ZSDSCMT006.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form WL_INV_MAPPING_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM WL_INV_MAPPING_100 .

  CLEAR:GT_ZSDSCMT007.
  LOOP AT GT_INV_100 ASSIGNING FIELD-SYMBOL(<LFS_INV>).
    CLEAR: GS_ZSDSCMT007.
    GS_ZSDSCMT007-WL_ID  = GV_WL_ID.
    GS_ZSDSCMT007-INV_NO = <LFS_INV>-VBELN.

    APPEND GS_ZSDSCMT007 TO GT_ZSDSCMT007.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form Append_warranty_text_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM APPEND_WARRANTY_TEXT_100 .

  READ TABLE GT_ZSDSCMT008 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMT008>) WITH KEY SPRAS = GS_ZSDSCMT008-SPRAS.
  IF SY-SUBRC = 0.
    MOVE-CORRESPONDING GS_ZSDSCMT008 TO <LFS_ZSDSCMT008>.
  ELSE.
    APPEND GS_ZSDSCMT008 TO GT_ZSDSCMT008.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SAVE_DATA_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM SAVE_DATA_100 .
  DATA: LV_ERROR TYPE C.
  IF GS_ZSDSCMT005-STATUS <> '3'.
    MODIFY ZSDSCMT005 FROM GS_ZSDSCMT005.
    IF SY-SUBRC = 0.
      MODIFY ZSDSCMT006 FROM TABLE GT_ZSDSCMT006.
      IF SY-SUBRC = 0.
        MODIFY ZSDSCMT008 FROM TABLE GT_ZSDSCMT008.
        IF SY-SUBRC = 0.
          SELECT * INTO TABLE @DATA(LT_007) ##NEEDED "#EC CI_ALL_FIELDS_NEEDED "#EC CI_FAE_NO_LINES_OK ##NEEDED
            FROM ZSDSCMT007
             FOR ALL ENTRIES IN @GT_ZSDSCMT007
           WHERE WL_ID = @GT_ZSDSCMT007-WL_ID
             AND INV_NO = @GT_ZSDSCMT007-INV_NO.
          IF SY-SUBRC <> 0.
            INSERT ZSDSCMT007 FROM TABLE GT_ZSDSCMT007.
            IF SY-SUBRC = 0.
              COMMIT WORK.
              MESSAGE S056(3X). "Data Update was successful.
            ELSE.
              LV_ERROR = 'X'.
            ENDIF.
          ELSE.
            COMMIT WORK.
            MESSAGE S056(3X). "Data Update was successful.
          ENDIF.
        ELSE.
          LV_ERROR = 'X'.
        ENDIF.
      ELSE.
        LV_ERROR = 'X'.
      ENDIF.
    ELSE.
      LV_ERROR = 'X'.
    ENDIF.
  ELSE.
    "Status = 3  Approve -> can be saved only warranty text data
    MODIFY ZSDSCMT008 FROM TABLE GT_ZSDSCMT008.
    IF SY-SUBRC = 0.
      COMMIT WORK.
      MESSAGE S056(3X). "Data Update was successful.
    ELSE.
      LV_ERROR = 'X'.
    ENDIF.
  ENDIF.

  IF LV_ERROR = 'X'.
    ROLLBACK WORK.                                     "#EC CI_ROLLBACK

    MESSAGE E876(3F)."Update error: data not saved
  ELSE.
    IF R_CHGDIS = 'X'.
      READ TABLE GT_INV_CHGDIS ASSIGNING FIELD-SYMBOL(<LFS_CHGDIS>) WITH KEY WL_ID = GS_ZSDSCMT005-WL_ID.
      IF SY-SUBRC = 0.
        <LFS_CHGDIS>-WLSTARTDATE = GS_ZSDSCMT005-WLSTARTDATE.
        <LFS_CHGDIS>-STATUS      = GS_ZSDSCMT005-STATUS.
        PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING <LFS_CHGDIS>-STATUS_TEXT.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_DATA_CHGDIS_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_DATA_CHGDIS_100 .
  DATA: LV_WL_ID   TYPE ZSDSDE_WL_ID,
        LS_INV_100 TYPE ZSDSCMS015.

  "Default radio button
  R_INV100 = SPACE.
  R_INV_EX100 = SPACE.
  R_MANUAL100 = SPACE.

  READ TABLE GT_INV_CHGDIS ASSIGNING FIELD-SYMBOL(<LFS_INV_CHGDIS>) WITH KEY CHK = 'X'.
  IF SY-SUBRC = 0.
    LV_WL_ID = <LFS_INV_CHGDIS>-WL_ID.
    GV_WL_ID = <LFS_INV_CHGDIS>-WL_ID.
  ENDIF.

  "General data
  SELECT SINGLE * INTO @GS_ZSDSCMT005
    FROM ZSDSCMT005
   WHERE WL_ID = @LV_WL_ID.
  IF SY-SUBRC = 0.
    PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING GV_STATUS_TXT.

    IF GS_ZSDSCMT005-R_WARR1 = 'X'.
      R_INV100 =  GS_ZSDSCMT005-R_WARR1.

    ELSEIF GS_ZSDSCMT005-R_WARR2 = 'X'.
      R_INV_EX100 = GS_ZSDSCMT005-R_WARR2.
      GV_DAYS100  = GS_ZSDSCMT005-R_WARR2_DAYS.

    ELSEIF GS_ZSDSCMT005-R_WARR3 = 'X'.
      R_MANUAL100 = GS_ZSDSCMT005-R_WARR3.
      GV_WLDATE100 = GS_ZSDSCMT005-R_WARR3_DATE.
    ENDIF.

  ENDIF.


  "Warranty detail
  SELECT * INTO TABLE @GT_ZSDSCMT006
    FROM ZSDSCMT006
   WHERE  WL_ID = @LV_WL_ID.
  IF SY-SUBRC = 0.
    PERFORM DISPLAY_WARR_COMP_DF_CHGDIS.
  ENDIF.

  "Reference document
  LOOP AT GT_INV_CHGDIS ASSIGNING <LFS_INV_CHGDIS> WHERE WL_ID = LV_WL_ID.
    CLEAR: LS_INV_100.
    MOVE-CORRESPONDING <LFS_INV_CHGDIS> TO LS_INV_100.
    APPEND LS_INV_100 TO GT_INV_100.
  ENDLOOP.
*
  "Warranty Text Data
  SELECT * INTO TABLE @GT_ZSDSCMT008
    FROM ZSDSCMT008
   WHERE WL_ID = @LV_WL_ID.
  IF SY-SUBRC = 0.
    READ TABLE GT_ZSDSCMT008 INTO GS_ZSDSCMT008 INDEX 1. "#EC CI_NOORDER
    IF SY-SUBRC = 0.
      GV_LANG_TH_EN  = GS_ZSDSCMT008-SPRAS.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_WARR_COMP_DF_CHGDIS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM DISPLAY_WARR_COMP_DF_CHGDIS.
  LOOP AT GT_ZSDSCMT006 ASSIGNING FIELD-SYMBOL(<LFS_ZSDSCMT006>).
    IF <LFS_ZSDSCMT006>-MATWLTYPE = '1'.
      GS_DF_WARR_COMP-SP_COMP1   = <LFS_ZSDSCMT006>-SP_COMP.
      GS_DF_WARR_COMP-SP_COND1   = <LFS_ZSDSCMT006>-SP_COND.
      GS_DF_WARR_COMP-SP_EVAP1   = <LFS_ZSDSCMT006>-SP_EVAP.
      GS_DF_WARR_COMP-SP_PCBIN1  = <LFS_ZSDSCMT006>-SP_PCBIN.
      GS_DF_WARR_COMP-SP_PCBOUT1 = <LFS_ZSDSCMT006>-SP_PCBOUT.
      GS_DF_WARR_COMP-SP_FAN1    = <LFS_ZSDSCMT006>-SP_FAN.
      GS_DF_WARR_COMP-SP_CASING1 = <LFS_ZSDSCMT006>-SP_CASING.
      GS_DF_WARR_COMP-SP_OTHER1  = <LFS_ZSDSCMT006>-SP_OTHER.
      GS_DF_WARR_COMP-SV_COMP1   = <LFS_ZSDSCMT006>-SV_COMP.
      GS_DF_WARR_COMP-SV_COND1   = <LFS_ZSDSCMT006>-SV_COND.
      GS_DF_WARR_COMP-SV_EVAP1   = <LFS_ZSDSCMT006>-SV_EVAP.
      GS_DF_WARR_COMP-SV_PCBIN1  = <LFS_ZSDSCMT006>-SV_PCBIN.
      GS_DF_WARR_COMP-SV_PCBOUT1 = <LFS_ZSDSCMT006>-SV_PCBOUT.
      GS_DF_WARR_COMP-SV_FAN1    = <LFS_ZSDSCMT006>-SV_FAN.
      GS_DF_WARR_COMP-SV_CASING1 = <LFS_ZSDSCMT006>-SV_CASING.
      GS_DF_WARR_COMP-SV_OTHER1  = <LFS_ZSDSCMT006>-SV_OTHER.
    ELSEIF <LFS_ZSDSCMT006>-MATWLTYPE = '2'.
      GS_DF_WARR_COMP-SP_COMP2   = <LFS_ZSDSCMT006>-SP_COMP.
      GS_DF_WARR_COMP-SP_COND2   = <LFS_ZSDSCMT006>-SP_COND.
      GS_DF_WARR_COMP-SP_EVAP2   = <LFS_ZSDSCMT006>-SP_EVAP.
      GS_DF_WARR_COMP-SP_PCBIN2  = <LFS_ZSDSCMT006>-SP_PCBIN.
      GS_DF_WARR_COMP-SP_PCBOUT2 = <LFS_ZSDSCMT006>-SP_PCBOUT.
      GS_DF_WARR_COMP-SP_FAN2    = <LFS_ZSDSCMT006>-SP_FAN.
      GS_DF_WARR_COMP-SP_CASING2 = <LFS_ZSDSCMT006>-SP_CASING.
      GS_DF_WARR_COMP-SP_OTHER2  = <LFS_ZSDSCMT006>-SP_OTHER.
      GS_DF_WARR_COMP-SV_COMP2   = <LFS_ZSDSCMT006>-SV_COMP.
      GS_DF_WARR_COMP-SV_COND2   = <LFS_ZSDSCMT006>-SV_COND.
      GS_DF_WARR_COMP-SV_EVAP2   = <LFS_ZSDSCMT006>-SV_EVAP.
      GS_DF_WARR_COMP-SV_PCBIN2  = <LFS_ZSDSCMT006>-SV_PCBIN.
      GS_DF_WARR_COMP-SV_PCBOUT2 = <LFS_ZSDSCMT006>-SV_PCBOUT.
      GS_DF_WARR_COMP-SV_FAN2    = <LFS_ZSDSCMT006>-SV_FAN.
      GS_DF_WARR_COMP-SV_CASING2 = <LFS_ZSDSCMT006>-SV_CASING.
      GS_DF_WARR_COMP-SV_OTHER2  = <LFS_ZSDSCMT006>-SV_OTHER.
    ELSEIF <LFS_ZSDSCMT006>-MATWLTYPE = '3'.
      GS_DF_WARR_COMP-SP_COMP3   = <LFS_ZSDSCMT006>-SP_COMP.
      GS_DF_WARR_COMP-SP_COND3   = <LFS_ZSDSCMT006>-SP_COND.
      GS_DF_WARR_COMP-SP_EVAP3   = <LFS_ZSDSCMT006>-SP_EVAP.
      GS_DF_WARR_COMP-SP_PCBIN3  = <LFS_ZSDSCMT006>-SP_PCBIN.
      GS_DF_WARR_COMP-SP_PCBOUT3 = <LFS_ZSDSCMT006>-SP_PCBOUT.
      GS_DF_WARR_COMP-SP_FAN3    = <LFS_ZSDSCMT006>-SP_FAN.
      GS_DF_WARR_COMP-SP_CASING3 = <LFS_ZSDSCMT006>-SP_CASING.
      GS_DF_WARR_COMP-SP_OTHER3  = <LFS_ZSDSCMT006>-SP_OTHER.
      GS_DF_WARR_COMP-SV_COMP3   = <LFS_ZSDSCMT006>-SV_COMP.
      GS_DF_WARR_COMP-SV_COND3   = <LFS_ZSDSCMT006>-SV_COND.
      GS_DF_WARR_COMP-SV_EVAP3   = <LFS_ZSDSCMT006>-SV_EVAP.
      GS_DF_WARR_COMP-SV_PCBIN3  = <LFS_ZSDSCMT006>-SV_PCBIN.
      GS_DF_WARR_COMP-SV_PCBOUT3 = <LFS_ZSDSCMT006>-SV_PCBOUT.
      GS_DF_WARR_COMP-SV_FAN3    = <LFS_ZSDSCMT006>-SV_FAN.
      GS_DF_WARR_COMP-SV_CASING3 = <LFS_ZSDSCMT006>-SV_CASING.
      GS_DF_WARR_COMP-SV_OTHER3  = <LFS_ZSDSCMT006>-SV_OTHER.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form mass_change_warranty_date
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*

FORM MASS_CHANGE_WARRANTY_DATE .
  SORT GT_INV_CHGDIS_MASS_UPD BY WL_ID.
  DELETE ADJACENT DUPLICATES FROM GT_INV_CHGDIS_MASS_UPD.
  LOOP AT GT_INV_CHGDIS_MASS_UPD ASSIGNING FIELD-SYMBOL(<LFS_MASS_UPD>).
    UPDATE ZSDSCMT005
           SET WLSTARTDATE = <LFS_MASS_UPD>-WLSTARTDATE
           WHERE WL_ID = <LFS_MASS_UPD>-WL_ID.
    IF SY-SUBRC = 0.
      COMMIT WORK.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form POPUP_GET_VALUES_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM POPUP_GET_VALUES_100 .
  DATA: LT_FIELDS TYPE TABLE OF SVAL,
        LV_EMPID  TYPE PA0002-PERNR.

  APPEND VALUE #( TABNAME = 'PA0002'
                  FIELDNAME = 'PERNR' ) TO LT_FIELDS.
  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
*     NO_VALUE_CHECK  = ' '
      POPUP_TITLE     = TEXT-T04 "Fill Employee ID
*     START_COLUMN    = '5'
*     START_ROW       = '5'
* IMPORTING
*     RETURNCODE      =
    TABLES
      FIELDS          = LT_FIELDS
    EXCEPTIONS
      ERROR_IN_FIELDS = 1
      OTHERS          = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ELSE.
    LV_EMPID = LT_FIELDS[ 1 ]-VALUE.
    SELECT SINGLE PERNR INTO @DATA(LS_PA0002) ##NEEDED ##WARN_OK
      FROM PA0002
     WHERE PERNR = @LV_EMPID.
    IF SY-SUBRC = 0.
      GS_ZSDSCMT005-EMPID = LV_EMPID.
    ELSE.
      MESSAGE E012(HRWPC_CP)."No employees found
    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form submit_to_K2
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM SUBMIT_TO_K2 .
  DATA: LF_KEYDATA  TYPE ZSDSDE_KEYDATA,
        LS_REQUEST  TYPE ZSDSCMS017,
        LS_RESPONSE TYPE ZSDSCMS017,
        LS_REQ_KEY  TYPE ZSDSCAS005 ##NEEDED,
        LT_NUMC2    TYPE TABLE OF NUMC2.

  "Send to K2
  LF_KEYDATA = GS_ZSDSCMT005-WL_ID && GS_ZSDSCMT005-EMPID.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      INPUT  = GS_ZSDSCMT005-EMPID
    IMPORTING
      OUTPUT = LS_REQUEST-EMPLOYEECODE.

  LS_REQUEST-WARRANTYLETTERID = GS_ZSDSCMT005-WL_ID.
  LS_REQUEST-PROJECTWBS       = GS_ZSDSCMT005-PROJWBS.
  LS_REQUEST-PROJECTNAME      = GS_ZSDSCMT008-PROJNAME.
  READ TABLE GT_INV_100 INTO DATA(LS_INV) INDEX 1.
  IF SY-SUBRC = 0.
    LS_REQUEST-WARRANTYSTART  = |{ LS_INV-WLSTARTDATE+0(4) }-{ LS_INV-WLSTARTDATE+4(2) }-{ LS_INV-WLSTARTDATE+6(2) } |.
    LS_REQUEST-CUSTOMERCODE   = LS_INV-KUNAG.
    LS_REQUEST-CUSTOMERNAME   = LS_INV-NAME1.
    LS_REQUEST-INVOICENO      = LS_INV-VBELN.
  ENDIF.
  "Find max
  APPEND: GS_DF_WARR_COMP-SP_COMP1 TO LT_NUMC2,
          GS_DF_WARR_COMP-SP_COMP2 TO LT_NUMC2,
          GS_DF_WARR_COMP-SP_COMP3 TO LT_NUMC2.
  SORT LT_NUMC2 DESCENDING.
  READ TABLE LT_NUMC2 INTO DATA(LS_NUMC2) INDEX 1.
  IF SY-SUBRC = 0.
    LS_REQUEST-COMPRESSORWARRANTYYEAR = LS_NUMC2.
  ENDIF.

  CLEAR: LT_NUMC2.
  APPEND: GS_DF_WARR_COMP-SP_OTHER1 TO LT_NUMC2,
          GS_DF_WARR_COMP-SP_OTHER2 TO LT_NUMC2,
          GS_DF_WARR_COMP-SP_OTHER3 TO LT_NUMC2.
  SORT LT_NUMC2 DESCENDING.
  READ TABLE LT_NUMC2 INTO LS_NUMC2 INDEX 1.
  IF SY-SUBRC = 0.
    LS_REQUEST-OTHERWARRANTYYEAR = LS_NUMC2.
  ENDIF.


  ZCL_SDSCA_REST_INTF_UTILITY=>CALL_REST_INTF(
    EXPORTING
      IF_INTFNO           = GC_INTFNO "'SDE031_1'
      IS_REQUEST          = LS_REQUEST
      IF_KEYDATA          = LF_KEYDATA
      IF_SHOW_PROCESS_LOG = ''
    IMPORTING
      ES_RESPONSE         = LS_RESPONSE
      ES_REQUEST_KEY      = LS_REQ_KEY
    EXCEPTIONS
      INVALID_INTFNO      = 1
      ERROR_DATA_TO_JSON  = 2
      URL_ERROR           = 3
      SEND_ERROR          = 4
      REQNO_ERROR         = 5
      LOG_ERROR           = 6
      ERROR_JSON_TO_DATA  = 7
      OTHERS              = 8 ).
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY
            NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2
                 SY-MSGV3 SY-MSGV4.
  ELSE.
*    SELECT SINGLE REQNO,
*                  HTTP_CODE,
*                  HTTP_REASON
*    FROM ZSDSCAT001
*    WHERE INTFNO = @LS_REQ_KEY-INTFNO
*    AND   REQNO  = @LS_REQ_KEY-REQNO
*    AND   GJAHR  = @LS_REQ_KEY-GJAHR
*    INTO  ( @LS_REP-REQNO,
*            @LS_REP-HTTP_CODE,
*            @LS_REP-HTTP_REASON ).
*
*    LS_REP-RESP_STATUS = LS_RESPONSE-MESSAGETYPE.
*    LS_REP-RESP_MESSAGE = LS_RESPONSE-MESSAGETEXT.

    MESSAGE LS_RESPONSE-MESSAGETEXT TYPE LS_RESPONSE-MESSAGETYPE.
  ENDIF.

  IF LS_RESPONSE-MESSAGETYPE = 'S'.
    "if sy-subrc = 0 -> Change status to 2 - Send to Approve
    GS_ZSDSCMT005-STATUS = '2'.
    PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING GV_STATUS_TXT.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form default_create_100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM DEFAULT_CREATE_100 .
  "Default radio button
  R_INV100 = 'X'.
  R_INV_EX100 = SPACE.
  R_MANUAL100 = SPACE.

  "Default Language
  GV_LANG_TH_EN = '2'.
  GS_ZSDSCMT008-SPRAS = '2'.
  GV_INV_PRINT  = 'X'.

  "Default Subject and Attention
  SELECT SINGLE SUBJECT,ATTENTION
    FROM ZSDSCMC007
   WHERE SPRAS = @GV_LANG_TH_EN
    INTO ( @GS_ZSDSCMT008-SUBJECT , @GS_ZSDSCMT008-ATTENTION ).


  "Default Project and Project name
  READ TABLE GT_INV_CRE INTO DATA(LS_INV_CRE) INDEX 1.
  IF SY-SUBRC = 0.
    P_POSID = LS_INV_CRE-PROJWBS.
    GS_ZSDSCMT008-PROJNAME = LS_INV_CRE-PROJWBS_NAME.

    IF LS_INV_CRE-NAME1 <> SPACE.
      GS_ZSDSCMT008-ATTENTION = LS_INV_CRE-NAME1.
    ENDIF.
  ENDIF.



  "Get default Warranty detail
  PERFORM GET_WARR_COMP_DF.
  PERFORM DISPLAY_WARR_COMP_DF.

  MOVE-CORRESPONDING GT_ZSDSCMC006 TO GT_ZSDSCMT006.
  "Default status
  GS_ZSDSCMT005-STATUS  = '1'. "Created
  PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING GV_STATUS_TXT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_status_text
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_STATUS_TEXT  USING    PV_STATUS TYPE CHAR1
                      CHANGING PV_STATUS_TXT TYPE TEXT15.
  DATA: LT_FIXED_VALUE TYPE STANDARD TABLE OF DD07V.
  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      NAME          = 'ZSDSDM_WL_STATUS'
      LANGU         = 'E'
    TABLES
      DD07V_TAB     = LT_FIXED_VALUE
    EXCEPTIONS
      ILLEGAL_INPUT = 1
      OTHERS        = 2.
  IF SY-SUBRC = 0.
    READ TABLE LT_FIXED_VALUE ASSIGNING FIELD-SYMBOL(<LFS_VALUE>) WITH KEY DOMVALUE_L = PV_STATUS.
    IF SY-SUBRC = 0.
      PV_STATUS_TXT = <LFS_VALUE>-DDTEXT.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_WARRANTY_LETTER_SPLIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM CREATE_WARRANTY_LETTER_SPLIT .
  PERFORM DEFAULT_CREATE_SPLIT.

  CLEAR: GT_INV_CHGDIS.
  LOOP AT GT_INV_CRE ASSIGNING FIELD-SYMBOL(<LFS_INV_CRE>).
    CLEAR: GV_SUBRC_ENQUEUE,GS_ZSDSCMT005.

    PERFORM GET_NUMBER_RANGE.

    <LFS_INV_CRE>-CHK   = SPACE.
    <LFS_INV_CRE>-WL_ID = GS_ZSDSCMT005-WL_ID.
    <LFS_INV_CRE>-STATUS = '1'. "Create

    IF GS_ZSDSCMT005-WL_ID IS NOT INITIAL.
      PERFORM ENQUEUE_TABLES CHANGING GV_SUBRC_ENQUEUE.
      IF GV_SUBRC_ENQUEUE = 0.
*      General data

        GS_ZSDSCMT005-STATUS = '1'. "Create
        PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING <LFS_INV_CRE>-STATUS_TEXT.
*        GS_ZSDSCMT005-PROJWBS = P_POSID.
*        GS_ZSDSCMT005-PROJWBS = GS_ZSDSCMT005-PROJWBS.
        GS_ZSDSCMT005-DOCDATE = SY-DATUM.
        GS_ZSDSCMT005-WLSTARTDATE = <LFS_INV_CRE>-WLSTARTDATE.
        GS_ZSDSCMT005-ERDAT = SY-DATUM.
        GS_ZSDSCMT005-ERTIM = SY-UZEIT.
        GS_ZSDSCMT005-ERNAM = SY-UNAME.

*      Warranty Detail -> Get from Default Table ZSDSCMC006
        PERFORM GET_WARR_COMP_DF.
        PERFORM DISPLAY_WARR_COMP_DF.
        PERFORM WARRANTY_DETAIL_100.

*      Mapping WL Number and Invoice
        CLEAR:GT_ZSDSCMT007,GS_ZSDSCMT007.
        GS_ZSDSCMT007-WL_ID  = GV_WL_ID.
        GS_ZSDSCMT007-INV_NO = <LFS_INV_CRE>-VBELN.
        APPEND GS_ZSDSCMT007 TO GT_ZSDSCMT007.

        PERFORM SAVE_DATA_SPLIT.
      ENDIF.

      PERFORM DEQUEUE_ALL.
    ENDIF.

    APPEND <LFS_INV_CRE> TO GT_INV_CHGDIS.
  ENDLOOP.

  CLEAR: GV_WL_ID,GT_INV_CRE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DEFAULT_CREATE_SPLIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM DEFAULT_CREATE_SPLIT .
  "Get default Warranty detail
  PERFORM GET_WARR_COMP_DF.
  PERFORM DISPLAY_WARR_COMP_DF.

  "Default status
  GS_ZSDSCMT005-STATUS  = '1'. "Created
  PERFORM GET_STATUS_TEXT USING GS_ZSDSCMT005-STATUS CHANGING GV_STATUS_TXT.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SAVE_DATA_SPLIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM SAVE_DATA_SPLIT .
  DATA: LV_ERROR TYPE C.
  MODIFY ZSDSCMT005 FROM GS_ZSDSCMT005.
  IF SY-SUBRC = 0.
    MODIFY ZSDSCMT006 FROM TABLE GT_ZSDSCMT006.
    IF SY-SUBRC = 0.
      INSERT ZSDSCMT007 FROM TABLE GT_ZSDSCMT007.
      IF SY-SUBRC = 0.
        COMMIT WORK.
      ELSE.
        LV_ERROR = 'X'.
      ENDIF.
    ELSE.
      LV_ERROR = 'X'.
    ENDIF.
  ELSE.
    LV_ERROR = 'X'.
  ENDIF.

  IF LV_ERROR = 'X'.
    ROLLBACK WORK.                                     "#EC CI_ROLLBACK
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form F_DISPLAY_INVOICE_SPLIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM F_DISPLAY_INVOICE_SPLIT .

*  DATA: LREF_EVENT_RECEIVER TYPE REF TO LCL_EVENT_RECEIVER.

  IF OREF_DOCK IS NOT BOUND.

    CREATE OBJECT OREF_DOCK
      EXPORTING
        REPID                       = SY-REPID
        DYNNR                       = '1000'
        SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_BOTTOM
        RATIO                       = GC_ALV_HEIGHT_1
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
  IF OREF_ALV IS NOT BOUND.

    IF OREF_DOCK IS BOUND.
      CREATE OBJECT OREF_ALV
        EXPORTING
          I_PARENT          = OREF_DOCK
        EXCEPTIONS
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          OTHERS            = 5.
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      IF OREF_ALV IS BOUND.

        PERFORM FIELDCAT_CHGDIS.
        PERFORM TOOLBAR_EXCLUDING.

        CALL METHOD OREF_ALV->SET_TABLE_FOR_FIRST_DISPLAY
          EXPORTING
*           I_BUFFER_ACTIVE               =
*           I_BYPASSING_BUFFER            =
            IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE
          CHANGING
            IT_OUTTAB                     = GT_INV_CHGDIS
            IT_FIELDCATALOG               = GT_FCAT
*           IT_SORT                       =
          EXCEPTIONS
            INVALID_PARAMETER_COMBINATION = 1
            PROGRAM_ERROR                 = 2
            TOO_MANY_LINES                = 3
            OTHERS                        = 4.
        IF SY-SUBRC <> 0 ##NEEDED.
*       Implement suitable error handling here
        ENDIF.

*  Registering the EDIT Event
        CALL METHOD OREF_ALV->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
          EXCEPTIONS
            ERROR      = 1
            OTHERS     = 2.
        IF SY-SUBRC <> 0.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.

    CALL METHOD OREF_ALV->REFRESH_TABLE_DISPLAY
      EXCEPTIONS
        FINISHED = 1
        OTHERS   = 2.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form print_form
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM PRINT_FORM .
  DATA: LV_ANSWER TYPE C.

  CLEAR GV_LOGO.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = 'Warranty Letter'(T06)
      TEXT_QUESTION         = 'Do you want to print a document without display Logo and address in header?'(T07)
      TEXT_BUTTON_1         = 'Yes'(T08)
      TEXT_BUTTON_2         = 'No'(T09)
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = ' '
    IMPORTING
      ANSWER                = LV_ANSWER.

  IF LV_ANSWER = '1'.
    GV_LOGO = 'X'.
  ENDIF.

  PERFORM PREPARE_DATA_PRINT_FORM.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_data_print_form
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM PREPARE_DATA_PRINT_FORM .

  DATA: LV_FM_NAME  TYPE  RS38L_FNAM,
        LV_FORMNAME TYPE  TDSFNAME.

  CASE GV_LANG_TH_EN.
    WHEN 'E'.
      LV_FORMNAME = GC_FORM_EN.
      SELECT SINGLE * INTO GS_ZSDSCMC007      "#EC CI_ALL_FIELDS_NEEDED
        FROM ZSDSCMC007
       WHERE SPRAS = 'E'.
    WHEN '2'.
      LV_FORMNAME = GC_FORM_TH.
      SELECT SINGLE * INTO GS_ZSDSCMC007      "#EC CI_ALL_FIELDS_NEEDED
        FROM ZSDSCMC007
       WHERE SPRAS = '2'.
  ENDCASE.

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      FORMNAME           = LV_FORMNAME
    IMPORTING
      FM_NAME            = LV_FM_NAME
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.
  IF SY-SUBRC = 0.
    CALL FUNCTION LV_FM_NAME
      EXPORTING
*       archive_index    = toa_dara
*       archive_parameters   = arc_params
*       control_parameters   = gwa_control_parameters
*       output_options   = gwa_output_options
*       user_settings    = ' '
        WL_HEADER        = GS_ZSDSCMT005
        WL_PROJECT       = GS_ZSDSCMT008
        WL_CONDITION     = GS_ZSDSCMC007
*    IMPORTING
*       job_output_info  = t_output_info
      TABLES
        WL_DETAILS       = GT_ZSDSCMT006
      EXCEPTIONS
        FORMATTING_ERROR = 1
        INTERNAL_ERROR   = 2
        SEND_ERROR       = 3
        USER_CANCELED    = 4
        OTHERS           = 5.
    IF SY-SUBRC NE 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  init_data_form
*&---------------------------------------------------------------------*
*       Called from SMARTFORM
*----------------------------------------------------------------------*
FORM INIT_DATA_FORM TABLES PT_HEADER TYPE GTTY_HEADER ##CALLED
                           PT_ITEMS  TYPE GTTY_ITEMS
                           PT_COND   TYPE GTTY_COND
                  CHANGING PV_INV_PRINT   TYPE C
                           PV_LOGO        TYPE C.


  DATA: LS_HEADER TYPE GTY_HEADER,
*-420000475 Beg of MOD
*        LV_SERNR  TYPE CHAR50,
        LV_SERNR  TYPE STRING,
*-420000475 End of Mod
        LV_WRTF1  TYPE DATUM,
        LV_WRTE1  TYPE DATUM,
        LV_WRTF2  TYPE DATUM,
        LV_WRTE2  TYPE DATUM.
*-Beg of INS by Jutamas Y.
  DATA LF_FKIMG TYPE CHAR19 .
*-End of INS by Jutamas Y.
  CHECK GT_INV_100[] IS NOT INITIAL.

  PV_INV_PRINT = GV_INV_PRINT.
  PV_LOGO      = GV_LOGO.

*--------------- Set Items ------------------
  SELECT A~VBELN,POSNR,MATNR,FKIMG,A~VGBEL,VGPOS,PRODH,B~BUKRS INTO TABLE @DATA(LT_INV) "#EC CI_ALL_FIELDS_NEEDED
    FROM VBRP AS A INNER JOIN VBRK AS B
        ON A~VBELN = B~VBELN
     FOR ALL ENTRIES IN @GT_INV_100
   WHERE A~VBELN = @GT_INV_100-VBELN.
  IF SY-SUBRC = 0.
    SELECT OBKNR,LIEF_NR,POSNR INTO TABLE @DATA(LT_SER01) "#EC CI_NO_TRANSFORM
      FROM SER01
       FOR ALL ENTRIES IN @LT_INV
     WHERE LIEF_NR = @LT_INV-VGBEL
       AND POSNR   = @LT_INV-VGPOS.
    IF SY-SUBRC = 0.
      SELECT OBKNR,OBZAE,SERNR INTO TABLE @DATA(LT_OBJK) "#EC CI_NO_TRANSFORM
        FROM OBJK
         FOR ALL ENTRIES IN @LT_SER01
       WHERE OBKNR = @LT_SER01-OBKNR.
    ENDIF.
    LOOP AT LT_INV ASSIGNING FIELD-SYMBOL(<LFS_INV>).
      CLEAR: LV_SERNR.

      LOOP AT LT_SER01 ASSIGNING FIELD-SYMBOL(<LFS_SER01>) WHERE LIEF_NR = <LFS_INV>-VGBEL
                                                             AND POSNR   = <LFS_INV>-VGPOS.
        LOOP AT LT_OBJK ASSIGNING FIELD-SYMBOL(<LFS_OBJK>) WHERE OBKNR = <LFS_SER01>-OBKNR.
*-420000475 Beg of DEL
*          IF LV_SERNR IS INITIAL.
*            LV_SERNR =  |{ <LFS_OBJK>-SERNR  ALPHA = OUT }|.
*          ELSE.
*            LV_SERNR = | { LV_SERNR },{ <LFS_OBJK>-SERNR  ALPHA = OUT }|.
*          ENDIF.
*-420000475 End of DEL
*-420000475 Beg of INS

          <LFS_OBJK>-SERNR =  |{ <LFS_OBJK>-SERNR  ALPHA = OUT }|.
          CONDENSE <LFS_OBJK>-SERNR  .
          IF LV_SERNR IS INITIAL.
            LV_SERNR = <LFS_OBJK>-SERNR .
          ELSE.
            CONCATENATE LV_SERNR <LFS_OBJK>-SERNR INTO LV_SERNR
              SEPARATED BY ', ' .
          ENDIF.
*-420000475 End of INS
        ENDLOOP.
      ENDLOOP.

      PERFORM GET_WARRANTY_PERIOD USING <LFS_INV>-VBELN
                                        <LFS_INV>-PRODH
                               CHANGING LV_WRTF1
                                        LV_WRTE1
                                        LV_WRTF2
                                        LV_WRTE2.
*-Beg of INS by Jutamas Y.
      CLEAR LF_FKIMG .
      LF_FKIMG = CEIL( <LFS_INV>-FKIMG ) .
      SHIFT LF_FKIMG LEFT DELETING LEADING SPACE.
*-End of INS by Jutamas Y.
      APPEND VALUE #( MATNR  = |{ <LFS_INV>-MATNR  ALPHA = OUT }|
*                      FKIMG  = <LFS_INV>-FKIMG
                      FKIMG  = LF_FKIMG
                      SERNR  = LV_SERNR
                      VBELN  = |{ <LFS_INV>-VBELN ALPHA = OUT }|
                      WRTF1  = LV_WRTF1
                      WRTE1  = LV_WRTE1
                      WRTF2  = LV_WRTF2
                      WRTE2  = LV_WRTE2
                      BUKRS  = <LFS_INV>-BUKRS
                      )
                      TO PT_ITEMS.
    ENDLOOP.
  ENDIF.

*--------------- Set Header ------------------
  CLEAR LS_HEADER .
  LS_HEADER-NUMBER  = GS_ZSDSCMT005-WL_ID.

  IF  GS_ZSDSCMT005-DOCDATE  IS NOT INITIAL .
    PERFORM CONVERT_DATE USING GS_ZSDSCMT005-DOCDATE CHANGING LS_HEADER-DOCDATE.
  ENDIF.
  LS_HEADER-ATTENTION = GS_ZSDSCMT008-ATTENTION.
  LS_HEADER-SUBJECT   = GS_ZSDSCMT008-SUBJECT.
  LS_HEADER-PROJECT   = GS_ZSDSCMT008-PROJNAME.
  LS_HEADER-ADDRESS   = GS_ZSDSCMT008-PROJADDR.
  LS_HEADER-APNAM     = GS_ZSDSCMT008-APPROVE_NAME.
  LS_HEADER-POS       = GS_ZSDSCMT008-EMP_POSITION.
  LS_HEADER-REMARK    = GS_ZSDSCMT008-REMARK .

*-420000361 Beg of INS
  IF GV_LANG_TH_EN = 'E' .
*-420000361 End of INS

    CONCATENATE GS_ZSDSCMC007-HEADERTEXT1 GS_ZSDSCMC007-HEADERTEXT2
           INTO LS_HEADER-ACCORDING SEPARATED BY SPACE.

*-420000361 Beg of INS
  ELSE.
    LS_HEADER-ACCORDING =  GS_ZSDSCMC007-HEADERTEXT1.
    LS_HEADER-ACCORDING2 = GS_ZSDSCMC007-HEADERTEXT2.
  ENDIF.
*-420000361 End of INS
  REPLACE '&1' IN LS_HEADER-ACCORDING WITH LS_HEADER-PROJ .

  READ TABLE PT_ITEMS ASSIGNING FIELD-SYMBOL(<LFS_ITEM>) INDEX 1.
  IF SY-SUBRC = 0.
    SELECT BUKRS,ADDRNUMBER,DATE_FROM,NATION,NAME1, NAME2, NAME3, NAME4,
      STREET,CITY2,CITY1, POST_CODE1,T005T~LANDX,TEL_NUMBER,FAX_NUMBER
      FROM T001 INNER JOIN ADRC
        ON T001~ADRNR = ADRC~ADDRNUMBER
            LEFT OUTER JOIN T005T                      "#EC CI_BUFFJOIN
            ON T001~LAND1 = T005T~LAND1
           AND T005T~SPRAS = 'E'
     WHERE NATION IN ( 'I',@SPACE )
       AND BUKRS = @<LFS_ITEM>-BUKRS
      INTO TABLE @DATA(LT_ADDRESS).
    IF SY-SUBRC = 0.
      READ TABLE LT_ADDRESS ASSIGNING FIELD-SYMBOL(<LFS_ADDRESS>)
                                      WITH KEY NATION = 'I'.
      IF SY-SUBRC = 0.
        "Text-T36: (Head Office)
        LS_HEADER-COMP_EN = |{ <LFS_ADDRESS>-NAME1 } { <LFS_ADDRESS>-NAME2 } { <LFS_ADDRESS>-NAME3 } { <LFS_ADDRESS>-NAME4 } { TEXT-T36 } |.
        CONCATENATE <LFS_ADDRESS>-STREET
                    <LFS_ADDRESS>-CITY2
                    <LFS_ADDRESS>-CITY1
                    <LFS_ADDRESS>-POST_CODE1
                    <LFS_ADDRESS>-LANDX
                    'TEL'
                    <LFS_ADDRESS>-TEL_NUMBER
                    'FAX'
                    <LFS_ADDRESS>-FAX_NUMBER
                 INTO LS_HEADER-ADDR1_EN SEPARATED BY SPACE.

        LS_HEADER-ADDR2_EN =
        'FAX.(DEALER SALES) 0-2721-7604, 0-2721-6685 (GEN SALES) 0-2721-7605, 0-2721-7690-1 (ENGINEERING) 0-2721-7682'.
      ENDIF.

      READ TABLE LT_ADDRESS ASSIGNING <LFS_ADDRESS>
                                      WITH KEY NATION = SPACE.
      IF SY-SUBRC = 0.
        "Text-T36: (สำนักงานใหญ่่)
        LS_HEADER-COMP_TH = |{ <LFS_ADDRESS>-NAME1 } { <LFS_ADDRESS>-NAME2 } { <LFS_ADDRESS>-NAME3 } { <LFS_ADDRESS>-NAME4 } { TEXT-T37 } |.

        CONCATENATE <LFS_ADDRESS>-STREET
                    <LFS_ADDRESS>-CITY2
                    <LFS_ADDRESS>-CITY1
                    <LFS_ADDRESS>-POST_CODE1
                    'TEL'
                    <LFS_ADDRESS>-TEL_NUMBER
                    'FAX'
                    <LFS_ADDRESS>-FAX_NUMBER
                 INTO LS_HEADER-ADDR1_TH SEPARATED BY SPACE.
        LS_HEADER-ADDR2_TH =
        'FAX.(DEALER SALES) 0-2721-7604, 0-2721-6685 (GEN SALES) 0-2721-7605, 0-2721-7690-1 (ENGINEERING) 0-2721-7682'.
      ENDIF.
    ENDIF.
  ENDIF.

*-Beg of INS
  TRANSLATE LS_HEADER-SUBJECT TO UPPER CASE .
*-End of INS

  APPEND LS_HEADER TO PT_HEADER.

*----------------- Warranty Condition--------------------
  IF GS_ZSDSCMC007-FOOTERTEXT1 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT1 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT2 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT2 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT3 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT3 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT4 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT4 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT5 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT5 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT6 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT6 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT7 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT7 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT8 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT8 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT9 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT9 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT10 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT10 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT11 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT11 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT12 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT12 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT13 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT13 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT14 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT14 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT15 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT15 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT16 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT16 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT17 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT17 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT18 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT18 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT19 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT19 ) TO PT_COND.
  ENDIF.
  IF GS_ZSDSCMC007-FOOTERTEXT20 IS NOT INITIAL.
    APPEND VALUE #( LINE = GS_ZSDSCMC007-FOOTERTEXT20 ) TO PT_COND.
  ENDIF.

ENDFORM.                    "init_data
*&---------------------------------------------------------------------*
*& Form CONVERT_DATE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM CONVERT_DATE USING PV_DATE TYPE DATUM CHANGING PV_FULLDATE TYPE CHAR50.

  DATA: LV_DAY        TYPE STRING,
        LV_MONTH      TYPE STRING,
        LV_YEAR       TYPE STRING,
        LV_MONTH_NAME TYPE STRING.

  SPLIT PV_DATE AT '.' INTO LV_DAY LV_MONTH LV_YEAR.
  LV_DAY   = PV_DATE+6(2).
  LV_MONTH = PV_DATE+4(2).
  LV_YEAR  = PV_DATE+0(4).

  IF GV_LANG_TH_EN = 'E'.
    CASE LV_MONTH.
      WHEN '01'. LV_MONTH_NAME = 'January'(T10).
      WHEN '02'. LV_MONTH_NAME = 'February'(T11).
      WHEN '03'. LV_MONTH_NAME = 'March'(T12).
      WHEN '04'. LV_MONTH_NAME = 'April'(T13).
      WHEN '05'. LV_MONTH_NAME = 'May'(T14).
      WHEN '06'. LV_MONTH_NAME = 'June'(T15).
      WHEN '07'. LV_MONTH_NAME = 'July'(T16).
      WHEN '08'. LV_MONTH_NAME = 'August'(T17).
      WHEN '09'. LV_MONTH_NAME = 'September'(T18).
      WHEN '10'. LV_MONTH_NAME = 'October'(T19).
      WHEN '11'. LV_MONTH_NAME = 'November'(T20).
      WHEN '12'. LV_MONTH_NAME = 'December'(T21).
      WHEN OTHERS. LV_MONTH_NAME = 'Invalid Month'(T22).
    ENDCASE.
*-Beg of INS by Jutamas Y.
    TRANSLATE LV_MONTH_NAME TO UPPER CASE .
*-End of INS by Jutamas Y.
  ELSEIF GV_LANG_TH_EN = '2'.
    CASE LV_MONTH.
      WHEN '01'. LV_MONTH_NAME = 'มกราคม'(T23).
      WHEN '02'. LV_MONTH_NAME = 'กุมภาพันธ์'(T24).
      WHEN '03'. LV_MONTH_NAME = 'มีนาคม'(T25).
      WHEN '04'. LV_MONTH_NAME = 'เมษายน'(T26).
      WHEN '05'. LV_MONTH_NAME = 'พฤษภาคม'(T27).
      WHEN '06'. LV_MONTH_NAME = 'มิถุนายน'(T28).
      WHEN '07'. LV_MONTH_NAME = 'กรกฎาคม'(T29).
      WHEN '08'. LV_MONTH_NAME = 'สิงหาคม'(T30).
      WHEN '09'. LV_MONTH_NAME = 'กันยายน'(T31).
      WHEN '10'. LV_MONTH_NAME = 'ตุลาคม'(T32).
      WHEN '11'. LV_MONTH_NAME = 'พฤศจิกายน'(T33).
      WHEN '12'. LV_MONTH_NAME = 'ธันวาคม'(T34).
      WHEN OTHERS. LV_MONTH_NAME = 'Invalid Month'(T22).
    ENDCASE.
  ENDIF.

  CONCATENATE LV_DAY ' ' LV_MONTH_NAME ' ' LV_YEAR INTO PV_FULLDATE SEPARATED BY SPACE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_WARRANTY_PERIOD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_WARRANTY_PERIOD  USING    PV_VBELN TYPE VBRP-VBELN
                                   PV_PRODH TYPE VBRP-PRODH
                          CHANGING PV_WRTF1 TYPE DATUM
                                   PV_WRTE1 TYPE DATUM
                                   PV_WRTF2 TYPE DATUM
                                   PV_WRTE2 TYPE DATUM.
  DATA: LV_PROD_WRTTYP TYPE C,
        LV_PRODH       TYPE CHAR3,
        LV_OTHER       TYPE CHAR3 ##NEEDED.

  CLEAR: PV_WRTF1,PV_WRTE1,PV_WRTF2,PV_WRTE2.

  SPLIT PV_PRODH AT SPACE INTO: LV_PRODH LV_OTHER.

  READ TABLE GT_GENC_PROD_WRTTYP ASSIGNING FIELD-SYMBOL(<LS_PROD_WRTTYP>) WITH KEY PARAM_EXT = LV_PRODH.
  IF SY-SUBRC = 0.
    LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
  ENDIF.

*  IF PV_PRODH+0(3) = 'VRV'.
*    READ TABLE GT_GENC_PROD_WRTTYP ASSIGNING FIELD-SYMBOL(<LS_PROD_WRTTYP>) WITH KEY PARAM_EXT = 'VRV'.
*    IF SY-SUBRC = 0.
*      LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
*    ENDIF.
*  ELSEIF PV_PRODH+0(2) = 'PA'.
*    READ TABLE GT_GENC_PROD_WRTTYP  ASSIGNING <LS_PROD_WRTTYP> WITH KEY PARAM_EXT = 'PA'.
*    IF SY-SUBRC = 0.
*      LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
*    ENDIF.
*  ELSEIF PV_PRODH+0(2) = 'AP'.
*    READ TABLE GT_GENC_PROD_WRTTYP  ASSIGNING <LS_PROD_WRTTYP> WITH KEY PARAM_EXT = 'AP'.
*    IF SY-SUBRC = 0.
*      LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
*    ENDIF.
*  ENDIF.

  "Start
  READ TABLE GT_INV_100 ASSIGNING FIELD-SYMBOL(<LFS_INV_100>) WITH KEY VBELN = PV_VBELN.
  IF SY-SUBRC = 0.
    PV_WRTF1 = <LFS_INV_100>-WLSTARTDATE.
    PV_WRTF2 = <LFS_INV_100>-WLSTARTDATE.
  ENDIF.


  CASE LV_PROD_WRTTYP.
    WHEN 1.
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE      = PV_WRTF2
          DAYS      = 0
          MONTHS    = 0
*         SIGNUM    = '+'
          YEARS     = GS_DF_WARR_COMP-SP_COMP1
        IMPORTING
          CALC_DATE = PV_WRTE2.
      PV_WRTE2 -= 1.

      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE      = PV_WRTF1
          DAYS      = 0
          MONTHS    = 0
*         SIGNUM    = '+'
          YEARS     = GS_DF_WARR_COMP-SP_OTHER1
        IMPORTING
          CALC_DATE = PV_WRTE1.
      PV_WRTE1 -= 1.

    WHEN 2.
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE      = PV_WRTF2
          DAYS      = 0
          MONTHS    = 0
*         SIGNUM    = '+'
          YEARS     = GS_DF_WARR_COMP-SP_COMP2
        IMPORTING
          CALC_DATE = PV_WRTE2.
      PV_WRTE2 -= 1.

      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE      = PV_WRTF1
          DAYS      = 0
          MONTHS    = 0
*         SIGNUM    = '+'
          YEARS     = GS_DF_WARR_COMP-SP_OTHER2
        IMPORTING
          CALC_DATE = PV_WRTE1.
      PV_WRTE1 -= 1.

    WHEN 3.
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE      = PV_WRTF2
          DAYS      = 0
          MONTHS    = 0
*         SIGNUM    = '+'
          YEARS     = GS_DF_WARR_COMP-SP_COMP3
        IMPORTING
          CALC_DATE = PV_WRTE2.
      PV_WRTE2 -= 1.

      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE      = PV_WRTF1
          DAYS      = 0
          MONTHS    = 0
*         SIGNUM    = '+'
          YEARS     = GS_DF_WARR_COMP-SP_OTHER3
        IMPORTING
          CALC_DATE = PV_WRTE1.
      PV_WRTE1 -= 1.

  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_warranty_master
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM UPDATE_WARRANTY_MASTER .

  DATA: LT_ZSDSCMT003  TYPE STANDARD TABLE OF ZSDSCMT003,
        LS_EXIST       TYPE ZSDSCMT003 ##NEEDED,
        LS_RETURN      TYPE BAPIRET1 ##NEEDED,
        LV_PROD_WRTTYP TYPE C,
        LV_MAX_WARR    TYPE DLYYR,
        LV_YEAR_NUMC   TYPE DLYYR.
  FIELD-SYMBOLS: <LFS_ZSDSCMT003> TYPE ZSDSCMT003.

  LOOP AT GT_INV_100 ASSIGNING FIELD-SYMBOL(<LFS_INV>).
    SELECT SINGLE VBELV,POSNV,VBELN,POSNN,VBTYP_N   ##WARN_OK "#EC CI_NOORDER
      FROM VBFA
     WHERE VBELN = @<LFS_INV>-VBELN
       AND VBTYP_N = 'M'
       AND VBTYP_V = 'J'
      INTO @DATA(LS_VBFA).
    IF SY-SUBRC = 0.
      SELECT *                "#EC CI_ALL_FIELDS_NEEDED  #EC CI_NOFIELD
        FROM ZSDSCMT003
       WHERE VBELN_VL = @LS_VBFA-VBELV
        INTO TABLE @LT_ZSDSCMT003.
      IF SY-SUBRC = 0.
        LOOP AT LT_ZSDSCMT003 ASSIGNING <LFS_ZSDSCMT003>.
          LS_EXIST = <LFS_ZSDSCMT003>.

          <LFS_ZSDSCMT003>-WRTLT = GV_WL_ID.

          SELECT MAX( STWRT )
            FROM ZSDSCMC002
           WHERE WRTPK = @<LFS_ZSDSCMT003>-WRTPK
             AND ZDEL_FLG = @SPACE
            INTO @DATA(LV_STWRT).
          IF SY-SUBRC = 0.
            <LFS_ZSDSCMT003>-STD_WRT_BEG = <LFS_INV>-WLSTARTDATE.

            LV_YEAR_NUMC = LV_STWRT.
            CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
              EXPORTING
                DATE      = <LFS_ZSDSCMT003>-STD_WRT_BEG
                DAYS      = 0
                MONTHS    = 0
*               SIGNUM    = '+'
                YEARS     = LV_YEAR_NUMC
              IMPORTING
                CALC_DATE = <LFS_ZSDSCMT003>-STD_WRT_END.

            <LFS_ZSDSCMT003>-STD_WRT_END -= 1.

            <LFS_ZSDSCMT003>-EXT_WRT_BEG = <LFS_ZSDSCMT003>-STD_WRT_END + 1.

            "Get type
            SELECT SINGLE A~VBELN,POSNR,MATNR,FKIMG,A~VGBEL,VGPOS,PRODH,B~BUKRS INTO @DATA(LS_INV) ##WARN_OK "#EC CI_ALL_FIELDS_NEEDED
              FROM VBRP AS A INNER JOIN VBRK AS B
                  ON A~VBELN = B~VBELN
             WHERE A~VBELN = @<LFS_INV>-VBELN
               AND A~PRODH <> @SPACE.
            IF SY-SUBRC = 0.
              IF LS_INV-PRODH+0(3) = 'VRV'.
                READ TABLE GT_GENC_PROD_WRTTYP ASSIGNING FIELD-SYMBOL(<LS_PROD_WRTTYP>) WITH KEY PARAM_EXT = 'VRV'.
                IF SY-SUBRC = 0.
                  LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
                ENDIF.
              ELSEIF LS_INV-PRODH+0(2) = 'PA'.
                READ TABLE GT_GENC_PROD_WRTTYP  ASSIGNING <LS_PROD_WRTTYP> WITH KEY PARAM_EXT = 'PA'.
                IF SY-SUBRC = 0.
                  LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
                ENDIF.
              ELSEIF LS_INV-PRODH+0(2) = 'AP'.
                READ TABLE GT_GENC_PROD_WRTTYP  ASSIGNING <LS_PROD_WRTTYP> WITH KEY PARAM_EXT = 'AP'.
                IF SY-SUBRC = 0.
                  LV_PROD_WRTTYP = <LS_PROD_WRTTYP>-VALUE_LOW.
                ENDIF.
              ENDIF.
              "Get max year spare part
              PERFORM FIND_MAX_VALUE_WARRANTY USING LV_PROD_WRTTYP CHANGING LV_MAX_WARR.

            ENDIF.

            CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
              EXPORTING
                DATE      = <LFS_ZSDSCMT003>-STD_WRT_BEG
                DAYS      = 0
                MONTHS    = 0
*               SIGNUM    = '+'
                YEARS     = LV_MAX_WARR
              IMPORTING
                CALC_DATE = <LFS_ZSDSCMT003>-EXT_WRT_END.

            <LFS_ZSDSCMT003>-EXT_WRT_END -= 1.
          ENDIF.

          ZCL_SDSCM_WARRANTY_UTIL=>UPDATE_WARRANTY_LETTER(
            EXPORTING
              IS_INPUT   = <LFS_ZSDSCMT003>
              IF_TEST   = SPACE
              IF_COMMIT = SPACE
            IMPORTING
              ES_RETURN = LS_RETURN ).
*WRTPK = STD2401   -> เก็บที่ ZSDSCMC002   ให้ดูตัวที่สูงสุดในSTD2401 table ZSDSCMC002
*วิธี update ->
*ZSDSCMT003-STD_WRT_BEG = Warranty Letter Start
*ZSDSCMT003-STD_WRT_END = Warranty Letter Start + 5 ปี ( MAX table ZSDSCMC002-STWRT)
*
*ZSDSCMT003-EXT_WRT_BEG = ZSDSCMT003-STD_WRT_END + 1 Day
*ZSDSCMT003-EXT_WRT_END = Warranty Letter Start + Max สุดของ Spare partหรือlabor ตามกลุ่มของ Material ของ ทุกช่อง - 1 day
        ENDLOOP.
      ENDIF.

    ENDIF.


  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form find_max_value_warranty
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM FIND_MAX_VALUE_WARRANTY  USING    PV_PROD_WRTTYP TYPE C
                              CHANGING PV_MAX_WARR    TYPE NUMC2.
  DATA: BEGIN OF LS_YEAR,
          YEAR TYPE NUMC2,
        END OF LS_YEAR,
        LT_YEAR LIKE TABLE OF LS_YEAR.
  CASE PV_PROD_WRTTYP.
    WHEN '1'.
      CLEAR: LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_COMP1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_COND1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_EVAP1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_PCBIN1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_PCBOUT1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_FAN1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_CASING1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_OTHER1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_COMP1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_COND1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_EVAP1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_PCBIN1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_PCBOUT1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_FAN1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_CASING1 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_OTHER1 ) TO LT_YEAR.
      SORT LT_YEAR BY YEAR DESCENDING.
      READ TABLE LT_YEAR INTO LS_YEAR INDEX 1.
      IF SY-SUBRC = 0.
        PV_MAX_WARR = LS_YEAR-YEAR.
      ENDIF.
    WHEN '2'.
      CLEAR: LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_COMP2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_COND2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_EVAP2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_PCBIN2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_PCBOUT2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_FAN2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_CASING2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_OTHER2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_COMP2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_COND2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_EVAP2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_PCBIN2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_PCBOUT2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_FAN2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_CASING2 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_OTHER2 ) TO LT_YEAR.
      SORT LT_YEAR BY YEAR DESCENDING.
      READ TABLE LT_YEAR INTO LS_YEAR INDEX 1.
      IF SY-SUBRC = 0.
        PV_MAX_WARR = LS_YEAR-YEAR.
      ENDIF.
    WHEN '3'.
      CLEAR: LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_COMP3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_COND3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_EVAP3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_PCBIN3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_PCBOUT3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_FAN3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_CASING3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SP_OTHER3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_COMP3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_COND3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_EVAP3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_PCBIN3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_PCBOUT3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_FAN3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_CASING3 ) TO LT_YEAR.
      APPEND VALUE #( YEAR = GS_DF_WARR_COMP-SV_OTHER3 ) TO LT_YEAR.
      SORT LT_YEAR BY YEAR DESCENDING.
      READ TABLE LT_YEAR INTO LS_YEAR INDEX 1.
      IF SY-SUBRC = 0.
        PV_MAX_WARR = LS_YEAR-YEAR.
      ENDIF.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_WARR_CONDTEXT_DF_DISPLAY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM GET_WARR_CONDTEXT_DF_DISPLAY .

  SELECT SINGLE * INTO GS_ZSDSCMC007     ##WARN_OK "#EC CI_NOORDER   "#EC WARNOK  "#EC CI_NOWHERE
    FROM ZSDSCMC007.
  IF SY-SUBRC = 0.
    GV_LANG_TH_EN = GS_ZSDSCMC007-SPRAS.
  ENDIF.

ENDFORM.
