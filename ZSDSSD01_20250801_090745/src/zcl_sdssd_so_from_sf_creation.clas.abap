class ZCL_SDSSD_SO_FROM_SF_CREATION definition
  public
  final
  create public .

public section.

  types TS_SALESORDER type ZCL_ZSDSSD_SO_FROM_SF_MPC_EXT=>TS_SALESORDER .
  types TS_SALESORDERITEM type ZCL_ZSDSSD_SO_FROM_SF_MPC_EXT=>TS_SALESORDERITEM .
  types:
    TT_SALESORDERITEM TYPE STANDARD TABLE OF TS_SALESORDERITEM WITH DEFAULT KEY .
  types TS_SCHEDULELINE type ZCL_ZSDSSD_SO_FROM_SF_MPC_EXT=>TS_SCHEDULELINE .
  types:
    TT_SCHEDULELINE TYPE STANDARD TABLE OF  ZCL_ZSDSSD_SO_FROM_SF_MPC_EXT=>TS_SCHEDULELINE WITH DEFAULT KEY .
  types TS_RESPONSE type ZCL_ZSDSSD_SO_FROM_SF_MPC_EXT=>TS_RESPONSE .
  types:
    TT_RESPONSE TYPE STANDARD TABLE OF TS_RESPONSE WITH DEFAULT KEY .
  types:
    BEGIN OF TS_BILLINGPLAN,
             BILLINGPLANSTARTDATE   TYPE C LENGTH 10,
             BILLINGPLANSTARTDATE1  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT1     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE2  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT2     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE3  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT3     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE4  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT4     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE5  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT5     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE6  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT6     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE7  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT7     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE8  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT8     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE9  TYPE C LENGTH 10,
             BILLINGPLANAMOUNT9     TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE10 TYPE C LENGTH 10,
             BILLINGPLANAMOUNT10    TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE11 TYPE C LENGTH 10,
             BILLINGPLANAMOUNT11    TYPE P LENGTH 6 DECIMALS 2,
             BILLINGPLANSTARTDATE12 TYPE C LENGTH 10,
             BILLINGPLANAMOUNT12    TYPE P LENGTH 6 DECIMALS 2,
           END OF TS_BILLINGPLAN .
  types:
    TT_BILLINGPLAN TYPE TABLE OF TS_BILLINGPLAN .

  constants GC_CREATE type CHAR1 value 'C' ##NO_TEXT.
  constants GC_UPDATE type CHAR1 value 'U' ##NO_TEXT.
  constants GC_SUCCESS type CHAR1 value 'S' ##NO_TEXT.
  constants GC_ERROR type CHAR1 value 'E' ##NO_TEXT.
  constants GC_WARNING type CHAR1 value 'W' ##NO_TEXT.

  class-methods SALES_ORDER_PROCESS
    importing
      !IF_TESTRUN type FLAG optional
    exporting
      !EF_SALES_DOC type VBELN
    changing
      !CS_SALESORDER type TS_SALESORDER
      !CT_SALESORDERITEM type TT_SALESORDERITEM optional
      !CT_SCHEDULELINE type TT_SCHEDULELINE optional
      !CT_RESPONSE type TT_RESPONSE .
  class-methods VALIDATE_INPUT
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      !EF_INVALID type FLAG
    changing
      !CS_SALESORDER type TS_SALESORDER
      !CT_SALESORDERITEM type TT_SALESORDERITEM
      !CT_SCHEDULELINE type TT_SCHEDULELINE
      !CT_RESPONSE type TT_RESPONSE .
  class-methods VALIDATE_HEADER_CREATE
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      !EF_INVALID type FLAG
    changing
      !CS_SALESORDER type TS_SALESORDER
      !CT_RESPONSE type TT_RESPONSE .
  class-methods VALIDATE_ITEM_CREATE
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      !EF_INVALID type FLAG
    changing
      !CS_SALESORDER type TS_SALESORDER
      !CT_SALESORDERITEM type TT_SALESORDERITEM
      !CT_SCHEDULELINE type TT_SCHEDULELINE
      !CT_RESPONSE type TT_RESPONSE .
  class-methods VALIDATE_HEADER
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      !EF_INVALID type FLAG
    changing
      !CS_SALESORDER type TS_SALESORDER
      !CT_RESPONSE type TT_RESPONSE .
  class-methods VALIDATE_BILLINGPLAN
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      !EF_INVALID type FLAG
    changing
      !CS_BILLINGPLAN type TS_BILLINGPLAN
      !CT_RESPONSE type TT_RESPONSE .
  class-methods VALIDATE_ITEM
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      !EF_INVALID type FLAG
    changing
      !CS_SALESORDER type TS_SALESORDER
      !CT_SALESORDERITEM type TT_SALESORDERITEM
      !CT_SCHEDULELINE type TT_SCHEDULELINE
      !CT_RESPONSE type TT_RESPONSE .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-DATA GT_BDCDATA TYPE BDCDATA_TAB .
    CLASS-DATA GRT_SALESORG TYPE CMM_T_VKORG_RANGE .
    CLASS-DATA GRT_DIVISION TYPE CMM_T_SPART_RANGE .
    CLASS-DATA GRT_ONETIMECUST TYPE CUST_MAT_T_RANGESKUNNR .
    CLASS-DATA GRT_COMPANYCODE TYPE BUKRS_RAN_ITAB .
    CLASS-DATA GRT_SALESTYPEPRJ TYPE FIP_T_AUART_RANGE .
    CLASS-DATA GRT_ITEMCATBILLINGPLAN TYPE CKMCSO_PSTYV_T .
    CLASS-DATA GC_PURCH_NO_BLANK TYPE CHAR1 VALUE '-' ##NO_TEXT.

    CLASS-METHODS VALIDATE_DATE
      IMPORTING
        !DATE_IN     TYPE CHAR10
      EXPORTING
        !DATE_OUT    TYPE CHAR10
        !CS_RESPONSE TYPE TS_RESPONSE .
    CLASS-METHODS GET_CONSTANTS
      CHANGING
        !CT_RESPONSE TYPE TT_RESPONSE .
    CLASS-METHODS APPEND_RESPONSE
      IMPORTING
        !IF_STATUS     TYPE CHAR1
        !IF_MESSAGE    TYPE BAPI_MSG
      CHANGING
        !CT_RESPONSE   TYPE TT_RESPONSE
        !CS_SALESORDER TYPE TS_SALESORDER OPTIONAL .
    CLASS-METHODS SALES_ORDER_CREATE
      IMPORTING
        !IF_TESTRUN        TYPE FLAG OPTIONAL
      EXPORTING
        !EF_SALES_DOC      TYPE VBELN
      CHANGING
        !CS_SALESORDER     TYPE TS_SALESORDER
        !CT_SALESORDERITEM TYPE TT_SALESORDERITEM OPTIONAL
        !CT_SCHEDULELINE   TYPE TT_SCHEDULELINE OPTIONAL
        !CT_RESPONSE       TYPE TT_RESPONSE .
    CLASS-METHODS SALES_ORDER_CHANGE
      IMPORTING
        !IF_TESTRUN        TYPE FLAG OPTIONAL
      CHANGING
        !CS_SALESORDER     TYPE TS_SALESORDER
        !CT_SALESORDERITEM TYPE TT_SALESORDERITEM OPTIONAL
        !CT_SCHEDULELINE   TYPE TT_SCHEDULELINE OPTIONAL
        !CT_RESPONSE       TYPE TT_RESPONSE .
    CLASS-METHODS BDC_DYNPRO
      IMPORTING
        !PROGRAM TYPE CHAR30
        !DYNPRO  TYPE CHAR4 .
    CLASS-METHODS BDC_FIELD
      IMPORTING
        !FNAM TYPE CHAR30
        !FVAL TYPE CHAR30 .
    CLASS-METHODS VALIDATE_AMOUNT
      IMPORTING
        !AMOUNT_IN   TYPE CHAR20
      EXPORTING
        !AMOUNT_OUT  TYPE CHAR20
        !CS_RESPONSE TYPE TS_RESPONSE .
ENDCLASS.



CLASS ZCL_SDSSD_SO_FROM_SF_CREATION IMPLEMENTATION.


  METHOD APPEND_RESPONSE.

    DATA: LS_RESPONSE TYPE TS_RESPONSE.

    LS_RESPONSE-RESPONSESTATUS = IF_STATUS.
    LS_RESPONSE-RESPONSEMESSAGE = IF_MESSAGE.

    APPEND LS_RESPONSE TO CT_RESPONSE.

    IF CS_SALESORDER-RESPONSESTATUS IS INITIAL AND
       CS_SALESORDER-RESPONSEMESSAGE IS INITIAL.
      CS_SALESORDER-RESPONSESTATUS = IF_STATUS.
      CS_SALESORDER-RESPONSEMESSAGE = IF_MESSAGE.
    ENDIF.

  ENDMETHOD.


  METHOD BDC_DYNPRO.
    DATA LS_BDCDATA TYPE BDCDATA.
    LS_BDCDATA-PROGRAM  = PROGRAM.
    LS_BDCDATA-DYNPRO   = DYNPRO.
    LS_BDCDATA-DYNBEGIN = 'X'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
  ENDMETHOD.


  METHOD BDC_FIELD.
    DATA: LS_BDCDATA TYPE BDCDATA.
    IF FVAL <> '/'.
      LS_BDCDATA-FNAM = FNAM.
      LS_BDCDATA-FVAL = FVAL.
      APPEND LS_BDCDATA TO GT_BDCDATA.
    ENDIF.
  ENDMETHOD.


  METHOD GET_CONSTANTS.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION / GET_CONSTANTS
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Get general constants from table ZSDSCAC001
*  Purpose            : Get general constants from table ZSDSCAC001
*                       Maintenance view: ZSDSV_GEN_C
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LV_MSG TYPE BAPI_MSG.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_SO_FROM_SF_CREATION'
                                                    IF_PARAM = 'SALESORG'
                                          IMPORTING ET_RANGE = GRT_SALESORG ).
    IF GRT_SALESORG IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T01.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_SO_FROM_SF_CREATION'
                                                    IF_PARAM = 'DIVISION'
                                          IMPORTING ET_RANGE = GRT_DIVISION ).
    IF GRT_DIVISION IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T02.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_SO_FROM_SF_CREATION'
                                                    IF_PARAM = 'COMPANYCODE'
                                          IMPORTING ET_RANGE = GRT_COMPANYCODE ).
    IF GRT_COMPANYCODE IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T03.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_SO_FROM_SF_CREATION'
                                                    IF_PARAM = 'ONETIMECUST'
                                          IMPORTING ET_RANGE = GRT_ONETIMECUST ).
    IF GRT_ONETIMECUST IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T04.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_SO_FROM_SF_CREATION'
                                                    IF_PARAM = 'SALESTYPEPRJ'
                                          IMPORTING ET_RANGE = GRT_SALESTYPEPRJ ).
    IF GRT_SALESTYPEPRJ IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T05.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_SO_FROM_SF_CREATION'
                                                    IF_PARAM = 'ITEMCATBILLINGPLAN'
                                          IMPORTING ET_RANGE = GRT_ITEMCATBILLINGPLAN ).
    IF GRT_ITEMCATBILLINGPLAN IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T06.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

  ENDMETHOD.


  METHOD SALES_ORDER_CHANGE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION
*  Creation Date      : 16.05.2024
*  Author             : Zulkiff B.(Eviden)
*  Add-on ID          : N/A
*  Description        : CHANGE SALES ORDER
*  Purpose            :
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA:
      LT_ITEM             TYPE STANDARD TABLE OF BAPISDITM,
      LT_ITEMX            TYPE STANDARD TABLE OF BAPISDITMX,
      LT_RETURN           TYPE STANDARD TABLE OF BAPIRET2,
      LT_PARTNERS         TYPE STANDARD TABLE OF BAPIPARNR,
      LT_PARTNERADDRESSES TYPE STANDARD TABLE OF BAPIADDR1,
      LS_PARTNERADDRESSES TYPE BAPIADDR1,
      LT_PARTNERCHANGES   TYPE STANDARD TABLE OF BAPIPARNRC,
      LS_PARTNERCHANGES   TYPE BAPIPARNRC,
      LT_ITEMS_COND       TYPE STANDARD TABLE OF BAPICOND,
      LT_ITEMS_CONDX      TYPE STANDARD TABLE OF BAPICONDX,
      LT_SCHEDULE_LINES   TYPE STANDARD TABLE OF BAPISCHDL,
      LT_SCHEDULE_LINESX  TYPE STANDARD TABLE OF BAPISCHDLX,
      LT_TEXTS            TYPE STANDARD TABLE OF BAPISDTEXT,
      LS_BAPE_VBAP        TYPE BAPE_VBAP,
      LS_BAPE_VBAPX       TYPE BAPE_VBAPX,
      LS_EXTENSIONIN      TYPE BAPIPAREX,
      LT_EXTENSIONIN      TYPE BAPIPAREX_T,
      LS_EXTENSIONEX      TYPE BAPIPAREX,
      LT_EXTENSIONEX      TYPE STANDARD TABLE OF BAPIPAREX,
      LS_HEADER           TYPE BAPISDH1,
      LS_HEADERX          TYPE BAPISDH1X,
      LS_ITEM             TYPE BAPISDITM,
      LS_ITEMX            TYPE BAPISDITMX,
      LV_SALES_UNIT_CONV  TYPE VRKME,
      LV_SALES_DOC        TYPE VBELN,
      LS_RESPONSE         TYPE ZSDSCAS006,
      LV_ONETIME_FLAG     TYPE C,
      LS_VBPA3KOM         TYPE VBPA3KOM,
      LT_VBPA3KOM         TYPE STANDARD TABLE OF VBPA3KOM,
      LV_SALESORG         TYPE VKORG,
      LV_DIVISION         TYPE SPART,
      LT_CONDITION_ITEM   TYPE ZSDSSDS006_TT,
      LV_BILLPLAN_HD_FLAG TYPE CHAR1.

    TYPES:
      BEGIN OF LTY_BILLING_PLAN_ITEM,
        ITEMNUMBER        TYPE POSNR,
        BILLING_PLAN_FLAG TYPE CHAR1,
      END OF LTY_BILLING_PLAN_ITEM,
      LTY_BILLING_PLAN_ITEM_TT TYPE STANDARD TABLE OF LTY_BILLING_PLAN_ITEM.

    DATA: LS_BILLING_PLAN_ITEM TYPE LTY_BILLING_PLAN_ITEM,
          LT_BILLING_PLAN_ITEM TYPE LTY_BILLING_PLAN_ITEM_TT.


*for extension
    CONSTANTS:
      LC_PART1 TYPE I                    VALUE 240,
      LC_PART2 TYPE I                    VALUE 480,
      LC_PART3 TYPE I                    VALUE 720,
      LC_PART4 TYPE I                    VALUE 960.

    FIELD-SYMBOLS:
                   <LF_STRUCTURE> TYPE ANY.
    DATA:
      LF_OFF1        TYPE I,
      LF_OFF2        TYPE I,
      LF_OFF3        TYPE I,
      LF_OFF4        TYPE I,
      LF_LEN1        TYPE I,
      LF_LEN2        TYPE I,
      LF_LEN3        TYPE I,
      LF_LEN4        TYPE I,
      LF_LENGTH      TYPE I,
      LF_LENGTH1     TYPE I,
      LF_LENGTH2     TYPE I,
      LF_LENGTH3     TYPE I,
      LF_LENGTH4     TYPE I,
      LF_LENGTH_COMP TYPE I,
      LF_FLG_PART2   TYPE FLAG,
      LF_FLG_PART3   TYPE FLAG,
      LF_FLG_PART4   TYPE FLAG.


*Constants
    READ TABLE GRT_SALESORG INTO DATA(LR_SALESORG) INDEX 1.
    IF SY-SUBRC = 0.
      LV_SALESORG = LR_SALESORG-LOW.
    ENDIF.

    READ TABLE GRT_DIVISION INTO DATA(LR_DIVISION) INDEX 1.
    IF SY-SUBRC = 0.
      LV_DIVISION = LR_DIVISION-LOW.
    ENDIF.


    "Header
    LS_HEADER-DOC_DATE  = COND #( WHEN CS_SALESORDER-CREATEDATE IS NOT INITIAL THEN CS_SALESORDER-CREATEDATE ).
    LS_HEADER-PURCH_NO_C  = COND #( WHEN CS_SALESORDER-PONUMBER IS NOT INITIAL THEN CS_SALESORDER-PONUMBER ).
    LS_HEADER-PMNTTRMS  = COND #( WHEN CS_SALESORDER-PAYMENTTERMS IS NOT INITIAL THEN CS_SALESORDER-PAYMENTTERMS ).

    LS_HEADERX-UPDATEFLAG  = 'U'.
    LS_HEADERX-DOC_DATE    = COND #( WHEN CS_SALESORDER-CREATEDATE IS NOT INITIAL THEN ABAP_TRUE ).
    LS_HEADERX-PURCH_NO_C   = COND #( WHEN CS_SALESORDER-PONUMBER IS NOT INITIAL THEN ABAP_TRUE ).
    LS_HEADERX-PMNTTRMS   = COND #( WHEN CS_SALESORDER-PAYMENTTERMS IS NOT INITIAL THEN ABAP_TRUE ).

    "Partner
    SELECT SINGLE *
      FROM KNVV
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER
       AND VKORG = @LV_SALESORG
*       AND VTWEG = @CS_SALESORDER-DISTRIBUTIONCHANNEL
*       AND SPART = @LV_DIVISION
      INTO @DATA(LS_KNVV).

    SELECT *
      FROM VBPA
     WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
      AND  POSNR = '000000'
      INTO TABLE @DATA(LT_VBPA).
    IF SY-SUBRC = 0.
      SELECT SINGLE KUNNR,ADRNR,KTOKD INTO @DATA(LS_KNA1)
        FROM KNA1
       WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER.
      IF SY-SUBRC = 0.
        LOOP AT LT_VBPA INTO DATA(LS_VBPA).
          CLEAR: LS_PARTNERCHANGES.

          CASE LS_VBPA-PARVW.
            WHEN 'AG'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPSOLDTONUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPSOLDTONUMBER ALPHA = IN }|.

                IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
                  LS_PARTNERCHANGES-ADDR_LINK = LS_VBPA-ADRNR.
                  LV_ONETIME_FLAG = ABAP_TRUE.
                ENDIF.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'RE'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPBILLTONUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPBILLTONUMBER ALPHA = IN }|.

                IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
                  LS_PARTNERCHANGES-ADDR_LINK = LS_VBPA-ADRNR.
                  LV_ONETIME_FLAG = ABAP_TRUE.
                ENDIF.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'RG'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPPAYERNUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPPAYERNUMBER ALPHA = IN }|.

                IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
                  LS_PARTNERCHANGES-ADDR_LINK = LS_VBPA-ADRNR.
                  LV_ONETIME_FLAG = ABAP_TRUE.
                ENDIF.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'WE'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPSHIPTONUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPSHIPTONUMBER ALPHA = IN }|.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'VE'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPSALESEMPLOYEE.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPSALESEMPLOYEE ALPHA = IN }|.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
          ENDCASE.
        ENDLOOP.
      ENDIF.
    ENDIF.
    IF LV_ONETIME_FLAG = ABAP_TRUE.
      READ TABLE LT_VBPA INTO LS_VBPA  WITH KEY PARVW = 'AG'.
      IF SY-SUBRC = 0.
        LS_PARTNERADDRESSES-ADDR_NO = LS_VBPA-ADRNR.
      ENDIF.

      LS_PARTNERADDRESSES-NAME         = CS_SALESORDER-ONETIMENAME1.
      LS_PARTNERADDRESSES-NAME_2       = CS_SALESORDER-ONETIMENAME2.
      LS_PARTNERADDRESSES-NAME_3       = CS_SALESORDER-ONETIMENAME3.
      LS_PARTNERADDRESSES-NAME_4       = CS_SALESORDER-ONETIMENAME4.
      LS_PARTNERADDRESSES-STREET       = CS_SALESORDER-STREET.
      LS_PARTNERADDRESSES-STR_SUPPL3   = CS_SALESORDER-STREET4.
      LS_PARTNERADDRESSES-LOCATION     = CS_SALESORDER-STREET5.
      LS_PARTNERADDRESSES-STR_SUPPL1   = CS_SALESORDER-STREET2.
      LS_PARTNERADDRESSES-STR_SUPPL2   = CS_SALESORDER-STREET3.
      LS_PARTNERADDRESSES-DISTRICT     = CS_SALESORDER-DISTRICT.
      LS_PARTNERADDRESSES-CITY         = CS_SALESORDER-CITY.
      LS_PARTNERADDRESSES-POSTL_COD1   = CS_SALESORDER-POSTALCODE.
      APPEND LS_PARTNERADDRESSES TO LT_PARTNERADDRESSES.

    ENDIF.

* HD Texts
    CLEAR: LT_TEXTS.

    IF CS_SALESORDER-HDTEXTREASON IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH01'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTREASON ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTLOCATION IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH03'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTLOCATION ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTPROJECTTEXT IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH06'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTPROJECTTEXT ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTREQUESTREMARK IS INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH10'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTREQUESTREMARK ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTCOMMENT IS  NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH13'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTCOMMENT ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTPERSONINCHARGENAME IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH15'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTPERSONINCHARGENAME ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTCONTACTPERSON IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH19'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTCONTACTPERSON ) TO LT_TEXTS.
    ENDIF.

*Tax3 one-time customer
*(PARTN_ROLE) = ‘SP’ Sold-to  AG
*(PARTN_ROLE) = ‘BP’ Bill-to  RE
*(PARTN_ROLE) = ‘PY’ Payer    RG
    IF CS_SALESORDER-TAXNO IS NOT INITIAL.
      DO 3 TIMES.
        CLEAR LS_VBPA3KOM.

        LS_VBPA3KOM-POSNR = '000000'.

        CASE SY-INDEX.
          WHEN 1.
            LS_VBPA3KOM-PARVW = 'AG'.
          WHEN 2.
            LS_VBPA3KOM-PARVW = 'RE'.
          WHEN 3.
            LS_VBPA3KOM-PARVW = 'RG'.
        ENDCASE.

        LS_VBPA3KOM-STCD3 = CS_SALESORDER-TAXNO.

        APPEND LS_VBPA3KOM TO LT_VBPA3KOM.

      ENDDO.
    ENDIF.

    IF LT_VBPA3KOM IS NOT INITIAL.
      "Export to MV45AFZZ  FORM USEREXIT_SAVE_DOCUMENT_PREPARE.
      EXPORT LT_VBPA3KOM FROM LT_VBPA3KOM TO MEMORY ID 'ONETIMECUST_TAX3'.
    ENDIF.

*Billing Plan Header
    CLEAR: LV_BILLPLAN_HD_FLAG.
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.

      LV_BILLPLAN_HD_FLAG = 'X'.
    ENDIF.
    CLEAR: LT_ITEM,LT_CONDITION_ITEM,LT_BILLING_PLAN_ITEM.

    SELECT * FROM VBAP
      WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
      INTO TABLE @DATA(LT_VBAP).
    IF SY-SUBRC = 0.
      SORT LT_VBAP BY VBELN POSNR.
    ENDIF.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).
      CLEAR: LS_BILLING_PLAN_ITEM.

*      <LFS_ITEM>-FLAGITEM


*Items
      "Convert Sales Unit to Internal Value
      IF <LFS_ITEM>-SALESUNIT IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            INPUT          = <LFS_ITEM>-SALESUNIT
          IMPORTING
            OUTPUT         = LV_SALES_UNIT_CONV
          EXCEPTIONS
            UNIT_NOT_FOUND = 1
            OTHERS         = 2.
        IF SY-SUBRC <> 0.
          "DO NOTHING
        ENDIF.
      ENDIF.

*      READ TABLE LT_VBAP INTO DATA(LS_VBAP) WITH KEY VBELN = CS_SALESORDER-SAPSALESORDERNO
*                                                     POSNR = <LFS_ITEM>-ITEMNUMBER
*                                                     BINARY SEARCH.
*      IF SY-SUBRC = 0.

      APPEND VALUE #( ITM_NUMBER  = <LFS_ITEM>-ITEMNUMBER
                      REF_DOC_IT  = <LFS_ITEM>-ITEMNUMBER
*                      = <LFS_ITEM>-FlagItem
                      MATERIAL    = <LFS_ITEM>-MATERIALNUMBER
                      HG_LV_ITEM  = <LFS_ITEM>-HIGHERLEVEL
                      TARGET_QTY  = <LFS_ITEM>-QUANTITY
                      SALES_UNIT  = LV_SALES_UNIT_CONV
                      PLANT       = <LFS_ITEM>-PLANT
                      STORE_LOC   = <LFS_ITEM>-STORAGELOCATION
*                        ITEM_CATEG  = <LFS_ITEM>-ITEMCATEGORY
*                      <LFS_ITEM>-OrderID
                      WBS_ELEM    = <LFS_ITEM>-WBS
*                      <LFS_ITEM>-LOB
                      REASON_REJ  = <LFS_ITEM>-REASONFORREJECT
                      )
                      TO LT_ITEM.
      APPEND VALUE #( UPDATEFLAG  = <LFS_ITEM>-FLAGITEM
                      ITM_NUMBER  = <LFS_ITEM>-ITEMNUMBER
                      REF_DOC_IT  =  ABAP_TRUE
                      MATERIAL    =  ABAP_TRUE
                      HG_LV_ITEM  =  ABAP_TRUE
                      TARGET_QTY  =  ABAP_TRUE
                      SALES_UNIT  =  ABAP_TRUE
                      PLANT       =  ABAP_TRUE
                      STORE_LOC   =  ABAP_TRUE
*                        ITEM_CATEG  =  ABAP_TRUE
*                      <LFS_ITEM>-OrderID
                      WBS_ELEM    =  ABAP_TRUE
*                      <LFS_ITEM>-LOB
                      REASON_REJ  =  ABAP_TRUE
                      )
                      TO LT_ITEMX.

      IF <LFS_ITEM>-FLAGITEM = 'I' OR <LFS_ITEM>-FLAGITEM = 'U'.
*  Conditions
*ZPR1
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZPR1'
                        KBETR = <LFS_ITEM>-LISTPRICE
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI1' ITEM DISCOUNT (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZDI1'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTPER * 10
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI2' ITEM DISCOUNT (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZDI2'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTVAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD01' ITEM DISCOUNT LEVEL 1 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD01'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD02' ITEM DISCOUNT LEVEL 1 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD02'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD03' ITEM DISCOUNT LEVEL 2 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD03'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD04' ITEM DISCOUNT LEVEL 2 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD04'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD05' ITEM DISCOUNT LEVEL 3 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD05'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3PER * 10
                        ) TO LT_CONDITION_ITEM.

*'ZD06' ITEM DISCOUNT LEVEL 3 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD06'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD07' ITEM DISCOUNT LEVEL 4 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD07'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD08' ITEM DISCOUNT LEVEL 4 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD08'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD09' ITEM DISCOUNT LEVEL 5 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD09'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD10' ITEM DISCOUNT LEVEL 5 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                        KSCHL = 'ZD10'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

        "Export to routine 902 IN VOFM  -> FRM_KONDI_WERT_902
        EXPORT LT_CONDITION_ITEM FROM LT_CONDITION_ITEM TO MEMORY ID 'CONDTYP_SO_FROM_SF'.

      ELSEIF <LFS_ITEM>-FLAGITEM = 'D'.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZPR1'
                        COND_VALUE = <LFS_ITEM>-LISTPRICE
                        CURRENCY   = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZPR1'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZDI1'
                        COND_VALUE    = <LFS_ITEM>-ITEMDISCOUNTPER * 10
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZDI1'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZDI2'
                        COND_VALUE    = <LFS_ITEM>-ITEMDISCOUNTVAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZDI2'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD01'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV1PER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD01'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD02'
                        COND_VALUE   = <LFS_ITEM>-ITEMDISCOUNTLV1VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD02'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD03'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV2PER * 10
                         ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD03'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD04'
                        COND_VALUE     = <LFS_ITEM>-ITEMDISCOUNTLV2VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD04'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD05'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV3PER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD05'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD06'
                        COND_VALUE     = <LFS_ITEM>-ITEMDISCOUNTLV3VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD06'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD07'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV4PER * 10
                         ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD07'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD08'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV4VAL
                        CURRENCY   = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD08'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD09'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV5PER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD09'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD10'
                        COND_VALUE     = <LFS_ITEM>-ITEMDISCOUNTLV5VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-ITEMNUMBER
                        COND_TYPE  = 'ZD10'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.
      ENDIF.


*Billing plan
      IF <LFS_ITEM>-ITEMCATEGORY IN GRT_ITEMCATBILLINGPLAN.
        IF  <LFS_ITEM>-BILLINGPLANSTARTDATE IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT12 IS NOT INITIAL.
          LS_BILLING_PLAN_ITEM-ITEMNUMBER        = <LFS_ITEM>-ITEMNUMBER.
          LS_BILLING_PLAN_ITEM-BILLING_PLAN_FLAG = 'X'.
          APPEND LS_BILLING_PLAN_ITEM TO LT_BILLING_PLAN_ITEM.
        ENDIF.
      ENDIF.
      DATA(LV_LINES_BILLING_PLAN_ITEM) = LINES( LT_BILLING_PLAN_ITEM ).

*Schedule line
      LOOP AT CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WHERE ITEMNUMBER = <LFS_ITEM>-ITEMNUMBER.
        APPEND VALUE #( ITM_NUMBER = <LFS_SCHEDULELINE>-ITEMNUMBER
                        SCHED_LINE = <LFS_SCHEDULELINE>-SCHEDULELINENUMBER
                        REQ_QTY    = <LFS_SCHEDULELINE>-REQUESTQUANTITY
                        REQ_DATE   = <LFS_SCHEDULELINE>-REQUESTDATE )
                        TO LT_SCHEDULE_LINES.
        APPEND VALUE #( ITM_NUMBER = <LFS_SCHEDULELINE>-ITEMNUMBER
                        SCHED_LINE = <LFS_SCHEDULELINE>-SCHEDULELINENUMBER
                        REQ_QTY    = ABAP_TRUE
                        REQ_DATE   = ABAP_TRUE
                        UPDATEFLAG = <LFS_SCHEDULELINE>-FLAG  )
                        TO LT_SCHEDULE_LINESX.
      ENDLOOP.

*  Extensions
      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAP-POSNR          = <LFS_ITEM>-ITEMNUMBER.
      LS_BAPE_VBAP-ZZ1_LOB_SO_SDI = <LFS_ITEM>-LOB.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAP'.

      CLEAR: LF_LENGTH,LF_LENGTH1,LF_LENGTH2,LF_LENGTH3,LF_LENGTH4,
             LF_FLG_PART2,LF_FLG_PART3,LF_FLG_PART4.
      ASSIGN LS_BAPE_VBAP TO <LF_STRUCTURE>.
      IF <LF_STRUCTURE> IS ASSIGNED.
        DO.
          ASSIGN COMPONENT SY-INDEX OF STRUCTURE <LF_STRUCTURE> TO FIELD-SYMBOL(<LF_FIELD>).
          DESCRIBE FIELD <LF_FIELD> LENGTH LF_LENGTH_COMP IN CHARACTER MODE.

          IF SY-SUBRC <> 0.
            EXIT.
          ENDIF.
          LF_LENGTH = LF_LENGTH + LF_LENGTH_COMP.
          IF LF_LENGTH <= LC_PART1.
            LF_LENGTH1  = LF_LENGTH.
          ENDIF.
          IF LF_LENGTH >= LC_PART1 AND
             LF_LENGTH <= LC_PART2.
            LF_OFF2 = LF_LENGTH1.
            LF_LENGTH2  = LF_LENGTH.
            LF_FLG_PART2 = ABAP_ON.
          ENDIF.
          IF LF_LENGTH >= LC_PART2 AND
             LF_LENGTH <= LC_PART3.
            LF_OFF3 = LF_LENGTH2.
            LF_LENGTH3  = LF_LENGTH.
            LF_FLG_PART3 = ABAP_ON.
          ENDIF.
          IF LF_LENGTH >= LC_PART3 AND
             LF_LENGTH <= LC_PART4.
            LF_OFF4 = LF_LENGTH3.
            LF_LENGTH4  = LF_LENGTH.
            LF_FLG_PART4 = ABAP_ON.
          ENDIF.
        ENDDO.
        CLEAR: LF_LEN1,LF_LEN2,LF_LEN3,LF_LEN4.
        LF_LEN1 = LF_LENGTH1.
        LF_LEN2 = LF_LENGTH2.
        LF_LEN3 = LF_LENGTH3.
        LF_LEN4 = LF_LENGTH4.

        LS_EXTENSIONIN-VALUEPART1 = <LF_STRUCTURE>+LF_OFF1(LF_LEN1).
        IF LF_FLG_PART2 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART2 = <LF_STRUCTURE>+LF_OFF2(LF_LEN2).
        ENDIF.
        IF LF_FLG_PART3 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART3 = <LF_STRUCTURE>+LF_OFF3(LF_LEN3).
        ENDIF.
        IF LF_FLG_PART4 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART4 = <LF_STRUCTURE>+LF_OFF4(LF_LEN4).
        ENDIF.
      ENDIF.

      APPEND LS_EXTENSIONIN TO LT_EXTENSIONIN.

*  ExtensionsX
      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAPX-POSNR          = <LFS_ITEM>-ITEMNUMBER.
      LS_BAPE_VBAPX-ZZ1_LOB_SO_SDI = ABAP_TRUE.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAPX'.

      CLEAR: LF_LENGTH,LF_LENGTH1,LF_LENGTH2,LF_LENGTH3,LF_LENGTH4,
             LF_FLG_PART2,LF_FLG_PART3,LF_FLG_PART4.
      ASSIGN LS_BAPE_VBAPX TO <LF_STRUCTURE>.
      IF <LF_STRUCTURE> IS ASSIGNED.
        DO.
          ASSIGN COMPONENT SY-INDEX OF STRUCTURE <LF_STRUCTURE> TO <LF_FIELD>.
          DESCRIBE FIELD <LF_FIELD> LENGTH LF_LENGTH_COMP IN CHARACTER MODE.

          IF SY-SUBRC <> 0.
            EXIT.
          ENDIF.
          LF_LENGTH = LF_LENGTH + LF_LENGTH_COMP.
          IF LF_LENGTH <= LC_PART1.
            LF_LENGTH1  = LF_LENGTH.
          ENDIF.
          IF LF_LENGTH >= LC_PART1 AND
             LF_LENGTH <= LC_PART2.
            LF_OFF2 = LF_LENGTH1.
            LF_LENGTH2  = LF_LENGTH.
            LF_FLG_PART2 = ABAP_ON.
          ENDIF.
          IF LF_LENGTH >= LC_PART2 AND
             LF_LENGTH <= LC_PART3.
            LF_OFF3 = LF_LENGTH2.
            LF_LENGTH3  = LF_LENGTH.
            LF_FLG_PART3 = ABAP_ON.
          ENDIF.
          IF LF_LENGTH >= LC_PART3 AND
             LF_LENGTH <= LC_PART4.
            LF_OFF4 = LF_LENGTH3.
            LF_LENGTH4  = LF_LENGTH.
            LF_FLG_PART4 = ABAP_ON.
          ENDIF.
        ENDDO.
        CLEAR: LF_LEN1,LF_LEN2,LF_LEN3,LF_LEN4.
        LF_LEN1 = LF_LENGTH1.
        LF_LEN2 = LF_LENGTH2.
        LF_LEN3 = LF_LENGTH3.
        LF_LEN4 = LF_LENGTH4.

        LS_EXTENSIONIN-VALUEPART1 = <LF_STRUCTURE>+LF_OFF1(LF_LEN1).
        IF LF_FLG_PART2 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART2 = <LF_STRUCTURE>+LF_OFF2(LF_LEN2).
        ENDIF.
        IF LF_FLG_PART3 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART3 = <LF_STRUCTURE>+LF_OFF3(LF_LEN3).
        ENDIF.
        IF LF_FLG_PART4 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART4 = <LF_STRUCTURE>+LF_OFF4(LF_LEN4).
        ENDIF.
      ENDIF.

      APPEND LS_EXTENSIONIN TO LT_EXTENSIONIN.


      CLEAR:
        LV_SALES_UNIT_CONV.

*      ENDIF.

    ENDLOOP.
*-------------------------------------
* Sales Order Change
*-------------------------------------
    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
      EXPORTING
        SALESDOCUMENT    = CS_SALESORDER-SAPSALESORDERNO
        ORDER_HEADER_IN  = LS_HEADER
        ORDER_HEADER_INX = LS_HEADERX
        SIMULATION       = IF_TESTRUN
*       BEHAVE_WHEN_ERROR           = ' '
*       INT_NUMBER_ASSIGNMENT       = ' '
*       LOGIC_SWITCH     =
*       NO_STATUS_BUF_INIT          = ' '
      TABLES
        RETURN           = LT_RETURN
        ORDER_ITEM_IN    = LT_ITEM
        ORDER_ITEM_INX   = LT_ITEMX
        PARTNERS         = LT_PARTNERS
        PARTNERCHANGES   = LT_PARTNERCHANGES
        PARTNERADDRESSES = LT_PARTNERADDRESSES
        SCHEDULE_LINES   = LT_SCHEDULE_LINES
        SCHEDULE_LINESX  = LT_SCHEDULE_LINESX
        ORDER_TEXT       = LT_TEXTS
*       ORDER_KEYS       =
        CONDITIONS_IN    = LT_ITEMS_COND
        CONDITIONS_INX   = LT_ITEMS_CONDX
        EXTENSIONIN      = LT_EXTENSIONIN
        EXTENSIONEX      = LT_EXTENSIONEX.
    IF LINE_EXISTS( LT_RETURN[ TYPE = 'A' ] ) OR
       LINE_EXISTS( LT_RETURN[ TYPE = 'E' ] ).

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

    ELSE.

      READ TABLE LT_RETURN INTO DATA(LS_RETURN) WITH KEY TYPE   = 'S'
                                                         ID     = 'V1'
                                                         NUMBER = '311'.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'
*         IMPORTING
*           RETURN        =
          .
        WAIT UP TO 3 SECONDS.

        DATA: LV_FVAL    TYPE CHAR30,
              LV_FNAM    TYPE BDCDATA-FNAM,
              LV_NUMC    TYPE NUMC2,
              CTU_PARAMS TYPE CTU_PARAMS,
              CTUMODE    TYPE CTU_PARAMS-DISMODE,
              CUPDATE    TYPE CTU_PARAMS-UPDMODE,
              MESSTAB    TYPE TABLE OF BDCMSGCOLL.


*Insert billing plan Header
        IF LV_BILLPLAN_HD_FLAG = 'X'.
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '0102' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'   FVAL = 'VBAK-VBELN' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=ENT2' ).

          LV_FVAL = CS_SALESORDER-SAPSALESORDERNO.
          BDC_FIELD( EXPORTING FNAM = 'VBAK-VBELN' FVAL = LV_FVAL ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=KFPL' ).

          SELECT SINGLE * INTO @DATA(LS_FPLA)
            FROM FPLA
           WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO.
          IF SY-SUBRC = 0.
            "If Billing plan exist -> No this popup message
*          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
*          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '/EESC' ).
          ELSE.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '/EESC' ).
          ENDIF.

*Delete all billing plan  : Mark all items and delete all
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=MARK' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=KOLO' ).


*Add new
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '/00' ).


          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE.
          BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAT' FVAL =  LV_FVAL ).
          BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAR' FVAL = '01' ).
*Page1

*Date
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE1.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL = LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE2.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE3.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE4.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE5.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT1.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT2.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT3.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT4.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT5.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).

*page2
          IF CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL.

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).


*Date
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE6.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE7.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE8.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE9.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT6.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT7.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL =  LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT8.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT9.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).

          ENDIF.

*page3
          IF CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE10.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL =  LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE11.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE12.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).

*Value
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT10.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL =  LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT11.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT12.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
          ENDIF.


          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=S\BACK' ).

*Click back and save

*          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
*          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '/EESC' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=SICH' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLSLVC_FULLSCREEN'  DYNPRO = '0700' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=&ONT' ).

        ELSEIF LV_LINES_BILLING_PLAN_ITEM <> 0.

*Billing Plan Item
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '0102' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'  FVAL = 'VBAK-VBELN' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=ENT2' ).
          LV_FVAL = CS_SALESORDER-SAPSALESORDERNO.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'VBAK-VBELN'  FVAL = LV_FVAL ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=PFPL' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'  FVAL = 'RV45A-MABNR(01)' ).

*If Billing plan exist -> No this popup message
*          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
*          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/EESC' ).




*LT_BILLING_PLAN_ITEM
          LOOP AT CT_SALESORDERITEM INTO DATA(LS_SALESORDERITEM).
            DATA(LV_TABIX) = SY-TABIX.
            IF LV_TABIX <> 1.
              BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
              BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=S\POS+' ).
*If Billing plan exist -> No this popup message
*              BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
*              BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).
            ENDIF.

            READ TABLE LT_BILLING_PLAN_ITEM INTO LS_BILLING_PLAN_ITEM WITH KEY ITEMNUMBER = LS_SALESORDERITEM-ITEMNUMBER.
            IF SY-SUBRC = 0.
              IF LS_BILLING_PLAN_ITEM-BILLING_PLAN_FLAG = 'X'.
*Delete all billing plan  : Mark all items and delete all
                BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
                BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=MARK' ).

                BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
                BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=KOLO' ).

*add
                BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
                BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/00' ).

                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAT'  FVAL = LV_FVAL ).
                BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAR'  FVAL = '01' ).
*Page1

*Date
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE1.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE2.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE3.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE4.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE5.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT1.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT2.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT3.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT4.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT5.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).


*page2
                IF LS_SALESORDERITEM-BILLINGPLANSTARTDATE6 IS NOT INITIAL AND LS_SALESORDERITEM-BILLINGPLANAMOUNT6 IS NOT INITIAL.

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).


*Date
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE6.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE7.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE8.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE9.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT6.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT7.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL =  LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT8.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT9.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).

                ENDIF.

*page3
                IF LS_SALESORDERITEM-BILLINGPLANSTARTDATE10 IS NOT INITIAL AND LS_SALESORDERITEM-BILLINGPLANAMOUNT10 IS NOT INITIAL.
                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE10.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL =  LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE11.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE12.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).

*Value
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT10.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL =  LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT11.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT12.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
                ENDIF.

              ENDIF.
            ENDIF.
          ENDLOOP.

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=S\BACK' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=SICH' ).

        ENDIF.

        IF GT_BDCDATA IS NOT INITIAL.
          CTU_PARAMS = VALUE CTU_PARAMS( DISMODE = 'N'
                                         DEFSIZE = 'X' ).
          CALL TRANSACTION 'VA02' WITH AUTHORITY-CHECK USING GT_BDCDATA
                           OPTIONS FROM CTU_PARAMS
                           MESSAGES INTO MESSTAB.
        ENDIF.
      ENDIF.
    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC = 0.
      CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
      CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
    ELSE.
      READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'S'
                                                   ID = 'V1'
                                                   NUMBER = '311'.
      IF SY-SUBRC = 0.
        CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
        CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
      ELSE.
        READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
        IF SY-SUBRC = 0.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
        ENDIF.
      ENDIF.
    ENDIF.
    LOOP AT LT_RETURN INTO LS_RETURN.
*      LS_RESPONSE-SFSALESORDERNO  = EF_SALES_DOC.
      LS_RESPONSE-RESP_STATUS  = LS_RETURN-TYPE.
      LS_RESPONSE-RESP_MESSAGE = LS_RETURN-MESSAGE.
      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.

  ENDMETHOD.


  METHOD SALES_ORDER_CREATE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION
*  Creation Date      : 16.05.2024
*  Author             : Zulkiff B.(Eviden)
*  Add-on ID          : N/A
*  Description        : CREATE SALES ORDER
*  Purpose            :
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA:
      LT_ITEM             TYPE STANDARD TABLE OF BAPISDITM,
      LT_ITEMX            TYPE STANDARD TABLE OF BAPISDITMX,
      LT_RETURN           TYPE STANDARD TABLE OF BAPIRET2,
      LT_PARTNERS         TYPE STANDARD TABLE OF BAPIPARNR,
      LT_PARTNERADDRESSES TYPE STANDARD TABLE OF BAPIADDR1,
      LT_ITEMS_COND       TYPE STANDARD TABLE OF BAPICOND,
      LT_ITEMS_CONDX      TYPE STANDARD TABLE OF BAPICONDX,
      LT_SCHEDULE_LINES   TYPE STANDARD TABLE OF BAPISCHDL,
      LT_TEXTS            TYPE STANDARD TABLE OF BAPISDTEXT,
      LS_BAPE_VBAP        TYPE BAPE_VBAP,
      LS_VBPA3KOM         TYPE VBPA3KOM,
      LT_VBPA3KOM         TYPE STANDARD TABLE OF VBPA3KOM,
      LS_EXTENSIONIN      TYPE BAPIPAREX,
      LT_EXTENSIONIN      TYPE BAPIPAREX_T,
      LS_HEADER           TYPE BAPISDHD1,
      LS_HEADERX          TYPE BAPISDHD1X,
      LS_ITEM             TYPE BAPISDITM,
      LS_ITEMX            TYPE BAPISDITMX,
      LV_SALES_UNIT_CONV  TYPE VRKME,
      LV_SALES_DOC        TYPE VBELN,
      LS_RESPONSE         TYPE ZCL_ZSDSSD_SO_FROM_SF_MPC_EXT=>TS_RESPONSE,
      LV_SALESORG         TYPE VKORG,
      LV_DIVISION         TYPE SPART,
      LT_CONDITION_ITEM   TYPE ZSDSSDS006_TT,
      LV_BILLPLAN_HD_FLAG TYPE CHAR1.
*      LV_BILLPLAN_ITEM_FLAG TYPE CHAR1.

    TYPES:
      BEGIN OF LTY_BILLING_PLAN_ITEM,
        ITEMNUMBER        TYPE POSNR,
        BILLING_PLAN_FLAG TYPE CHAR1,
      END OF LTY_BILLING_PLAN_ITEM,
      LTY_BILLING_PLAN_ITEM_TT TYPE STANDARD TABLE OF LTY_BILLING_PLAN_ITEM.

    DATA: LS_BILLING_PLAN_ITEM TYPE LTY_BILLING_PLAN_ITEM,
          LT_BILLING_PLAN_ITEM TYPE LTY_BILLING_PLAN_ITEM_TT.

*for extension
    CONSTANTS:
      LC_PART1 TYPE I                    VALUE 240,
      LC_PART2 TYPE I                    VALUE 480,
      LC_PART3 TYPE I                    VALUE 720,
      LC_PART4 TYPE I                    VALUE 960.

    FIELD-SYMBOLS:
                   <LF_STRUCTURE> TYPE ANY.
    DATA:
      LF_OFF1        TYPE I,
      LF_OFF2        TYPE I,
      LF_OFF3        TYPE I,
      LF_OFF4        TYPE I,
      LF_LEN1        TYPE I,
      LF_LEN2        TYPE I,
      LF_LEN3        TYPE I,
      LF_LEN4        TYPE I,
      LF_LENGTH      TYPE I,
      LF_LENGTH1     TYPE I,
      LF_LENGTH2     TYPE I,
      LF_LENGTH3     TYPE I,
      LF_LENGTH4     TYPE I,
      LF_LENGTH_COMP TYPE I,
      LF_FLG_PART2   TYPE FLAG,
      LF_FLG_PART3   TYPE FLAG,
      LF_FLG_PART4   TYPE FLAG.


*Constants
    READ TABLE GRT_SALESORG INTO DATA(LR_SALESORG) INDEX 1.
    IF SY-SUBRC = 0.
      LV_SALESORG = LR_SALESORG-LOW.
    ENDIF.

    READ TABLE GRT_DIVISION INTO DATA(LR_DIVISION) INDEX 1.
    IF SY-SUBRC = 0.
      LV_DIVISION = LR_DIVISION-LOW.
    ENDIF.


* Header
    LS_HEADER = VALUE #( NAME       = CS_SALESORDER-SFSALESORDERNO
                         DOC_DATE   = CS_SALESORDER-CREATEDATE
*******************************                         SALESDOCUMENT = CS_SALESORDER-SAPSALESORDERNO
*******************************                         UPDATEFLAG = CS_SALESORDER-FLAG
                         REF_DOC_L  = CS_SALESORDER-REFERENCESDDOCUMENT
                         DOC_TYPE   = CS_SALESORDER-DOCUMENTTYPE
                         SALES_ORG  = LV_SALESORG "Default ‘1000’ SDS Siam Daikin Sale
                         DISTR_CHAN = CS_SALESORDER-DISTRIBUTIONCHANNEL
                         DIVISION   = LV_DIVISION "Default '00' Common
                         SALES_OFF  = CS_SALESORDER-SALESOFFICE
                         SALES_GRP  = CS_SALESORDER-SALESGROUP
                         PURCH_NO_C = CS_SALESORDER-PONUMBER
                         PMNTTRMS   = CS_SALESORDER-PAYMENTTERMS
                       ).


* Partner
    "Currency
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = CS_SALESORDER-BPSOLDTONUMBER
      IMPORTING
        OUTPUT = CS_SALESORDER-BPSOLDTONUMBER.
    SELECT SINGLE *
      FROM KNVV
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER
       AND VKORG = @LV_SALESORG
       AND VTWEG = @CS_SALESORDER-DISTRIBUTIONCHANNEL
       AND SPART = @LV_DIVISION
      INTO @DATA(LS_KNVV).

    SELECT SINGLE KUNNR,ADRNR,KTOKD INTO @DATA(LS_KNA1)
      FROM KNA1
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER.
    IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
      IF CS_SALESORDER-BPSOLDTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'AG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPSOLDTONUMBER ALPHA = IN }|
                        ADDR_LINK  = LS_KNA1-ADRNR ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPBILLTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RE'
                        PARTN_NUMB = |{ CS_SALESORDER-BPBILLTONUMBER ALPHA = IN }|
                        ADDR_LINK  = LS_KNA1-ADRNR ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPPAYERNUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPPAYERNUMBER ALPHA = IN }|
                        ADDR_LINK  = LS_KNA1-ADRNR ) TO LT_PARTNERS.
      ENDIF.

    ELSE.
      IF CS_SALESORDER-BPSOLDTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'AG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPSOLDTONUMBER ALPHA = IN }| ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPBILLTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RE'
                        PARTN_NUMB = |{ CS_SALESORDER-BPBILLTONUMBER ALPHA = IN }| ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPPAYERNUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPPAYERNUMBER ALPHA = IN }| ) TO LT_PARTNERS.
      ENDIF.


    ENDIF.

    IF CS_SALESORDER-BPSHIPTONUMBER IS NOT INITIAL.
      APPEND VALUE #( PARTN_ROLE = 'WE'
                      PARTN_NUMB = |{ CS_SALESORDER-BPSHIPTONUMBER ALPHA = IN }| ) TO LT_PARTNERS.
    ENDIF.


    IF CS_SALESORDER-BPSALESEMPLOYEE IS NOT INITIAL.
      APPEND VALUE #( PARTN_ROLE = 'VE'
                      PARTN_NUMB = |{ CS_SALESORDER-BPSALESEMPLOYEE ALPHA = IN }| ) TO LT_PARTNERS.
    ENDIF.

    "Partner Address
    CLEAR: LT_PARTNERADDRESSES.
******************************CS_SALESORDER-TaxNo
    SELECT SINGLE KUNNR,ADRNR,KTOKD INTO @LS_KNA1
      FROM KNA1
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER.
*    IF SY-SUBRC = 0.
    IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
      APPEND VALUE #( ADDR_NO      = LS_KNA1-ADRNR
                      NAME         = CS_SALESORDER-ONETIMENAME1
                      NAME_2       = CS_SALESORDER-ONETIMENAME2
                      NAME_3       = CS_SALESORDER-ONETIMENAME3
                      NAME_4       = CS_SALESORDER-ONETIMENAME4
                      STREET       = CS_SALESORDER-STREET
                      STR_SUPPL3   = CS_SALESORDER-STREET4
                      LOCATION     = CS_SALESORDER-STREET5
                      STR_SUPPL1   = CS_SALESORDER-STREET2
                      STR_SUPPL2   = CS_SALESORDER-STREET3
                      DISTRICT     = CS_SALESORDER-DISTRICT
                      CITY         = CS_SALESORDER-CITY
                      POSTL_COD1   = CS_SALESORDER-POSTALCODE
                   ) TO LT_PARTNERADDRESSES.
    ENDIF.
*    ENDIF.
* HD Texts
    CLEAR: LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH01'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTREASON ) TO LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH03'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTLOCATION ) TO LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH06'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTPROJECTTEXT ) TO LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH10'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTREQUESTREMARK ) TO LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH13'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTCOMMENT ) TO LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH15'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTPERSONINCHARGENAME ) TO LT_TEXTS.

    APPEND VALUE #( TEXT_ID   = 'ZH19'
                    LANGU     = 'EN'
                    TEXT_LINE = CS_SALESORDER-HDTEXTCONTACTPERSON ) TO LT_TEXTS.

*Tax3 one-time customer
*(PARTN_ROLE) = ‘SP’ Sold-to  AG
*(PARTN_ROLE) = ‘BP’ Bill-to  RE
*(PARTN_ROLE) = ‘PY’ Payer    RG
    IF CS_SALESORDER-TAXNO IS NOT INITIAL.
      DO 3 TIMES.
        CLEAR LS_VBPA3KOM.

        LS_VBPA3KOM-POSNR = '000000'.

        CASE SY-INDEX.
          WHEN 1.
            LS_VBPA3KOM-PARVW = 'AG'.
          WHEN 2.
            LS_VBPA3KOM-PARVW = 'RE'.
          WHEN 3.
            LS_VBPA3KOM-PARVW = 'RG'.
        ENDCASE.

        LS_VBPA3KOM-STCD3 = CS_SALESORDER-TAXNO.

        APPEND LS_VBPA3KOM TO LT_VBPA3KOM.

      ENDDO.
    ENDIF.

    IF LT_VBPA3KOM IS NOT INITIAL.
      "Export to MV45AFZZ  FORM USEREXIT_SAVE_DOCUMENT_PREPARE.
      EXPORT LT_VBPA3KOM FROM LT_VBPA3KOM TO MEMORY ID 'ONETIMECUST_TAX3'.
    ENDIF.

*Billing Plan Header
    CLEAR: LV_BILLPLAN_HD_FLAG.
*IF <LFS_ITEM>-ITEMCATEGORY NOT IN GRT_ITEMCATBILLINGPLAN
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.

      LV_BILLPLAN_HD_FLAG = 'X'.
    ENDIF.

    CLEAR: LT_ITEM,LT_CONDITION_ITEM,LT_BILLING_PLAN_ITEM.
    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).
      CLEAR: LS_BILLING_PLAN_ITEM.
*Items
      "Convert Sales Unit to Internal Value
      IF <LFS_ITEM>-SALESUNIT IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            INPUT          = <LFS_ITEM>-SALESUNIT
          IMPORTING
            OUTPUT         = LV_SALES_UNIT_CONV
          EXCEPTIONS
            UNIT_NOT_FOUND = 1
            OTHERS         = 2.
        IF SY-SUBRC <> 0.
          "DO NOTHING
        ENDIF.
      ENDIF.

      APPEND VALUE #( ITM_NUMBER  = <LFS_ITEM>-ITEMNUMBER
                      REF_DOC_IT  = <LFS_ITEM>-ITEMNUMBER
*                      = <LFS_ITEM>-FlagItem
                      MATERIAL    = <LFS_ITEM>-MATERIALNUMBER
                      HG_LV_ITEM  = <LFS_ITEM>-HIGHERLEVEL
                      TARGET_QTY  = <LFS_ITEM>-QUANTITY
                      SALES_UNIT  = LV_SALES_UNIT_CONV
                      PLANT       = <LFS_ITEM>-PLANT
                      STORE_LOC   = <LFS_ITEM>-STORAGELOCATION
                      ITEM_CATEG  = <LFS_ITEM>-ITEMCATEGORY
*                      <LFS_ITEM>-OrderID
                      WBS_ELEM    = <LFS_ITEM>-WBS
*                      <LFS_ITEM>-LOB
                      REASON_REJ  = <LFS_ITEM>-REASONFORREJECT
                      )
                      TO LT_ITEM.

*  Conditions

*ZPR1
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZPR1'
                      KBETR = <LFS_ITEM>-LISTPRICE
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI1' ITEM DISCOUNT (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZDI1'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTPER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI2' ITEM DISCOUNT (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZDI2'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTVAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD01' ITEM DISCOUNT LEVEL 1 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD01'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1PER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD02' ITEM DISCOUNT LEVEL 1 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD02'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD03' ITEM DISCOUNT LEVEL 2 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD03'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2PER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD04' ITEM DISCOUNT LEVEL 2 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD04'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD05' ITEM DISCOUNT LEVEL 3 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD05'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3PER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD06' ITEM DISCOUNT LEVEL 3 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD06'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD07' ITEM DISCOUNT LEVEL 4 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD07'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4PER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD08' ITEM DISCOUNT LEVEL 4 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD08'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD09' ITEM DISCOUNT LEVEL 5 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD09'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5PER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD10' ITEM DISCOUNT LEVEL 5 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-ITEMNUMBER
                      KSCHL = 'ZD10'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

      "Export to routine 902 IN VOFM  -> FRM_KONDI_WERT_902
      EXPORT LT_CONDITION_ITEM FROM LT_CONDITION_ITEM TO MEMORY ID 'CONDTYP_SO_FROM_SF'.


*Billing plan
      IF <LFS_ITEM>-ITEMCATEGORY IN GRT_ITEMCATBILLINGPLAN.
        IF  <LFS_ITEM>-BILLINGPLANSTARTDATE IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
            <LFS_ITEM>-BILLINGPLANAMOUNT12 IS NOT INITIAL.
          LS_BILLING_PLAN_ITEM-ITEMNUMBER        = <LFS_ITEM>-ITEMNUMBER.
          LS_BILLING_PLAN_ITEM-BILLING_PLAN_FLAG = 'X'.
          APPEND LS_BILLING_PLAN_ITEM TO LT_BILLING_PLAN_ITEM.
        ENDIF.
      ENDIF.
      DATA(LV_LINES_BILLING_PLAN_ITEM) = LINES( LT_BILLING_PLAN_ITEM ).
*BillingPlanStartDate
*BillingPlanStartDate1
*BillingPlanAmount1
*BillingPlanStartDate2
*BillingPlanAmount2
*BillingPlanStartDate3
*BillingPlanAmount3
*BillingPlanStartDate4
*BillingPlanAmount4
*BillingPlanStartDate5
*BillingPlanAmount5
*BillingPlanStartDate6
*BillingPlanAmount6
*BillingPlanStartDate7
*BillingPlanAmount7
*BillingPlanStartDate8
*BillingPlanAmount8
*BillingPlanStartDate9
*BillingPlanAmount9
*BillingPlanStartDate10
*BillingPlanAmount10
*BillingPlanStartDate11
*BillingPlanAmount11
*BillingPlanStartDate12
*BillingPlanAmount12



*Schedule line
      LOOP AT CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WHERE ITEMNUMBER = <LFS_ITEM>-ITEMNUMBER.
        APPEND VALUE #( ITM_NUMBER = <LFS_SCHEDULELINE>-ITEMNUMBER
                        SCHED_LINE = <LFS_SCHEDULELINE>-SCHEDULELINENUMBER
                        REQ_QTY    = <LFS_SCHEDULELINE>-REQUESTQUANTITY
                        REQ_DATE   = <LFS_SCHEDULELINE>-REQUESTDATE )
                        TO LT_SCHEDULE_LINES.
      ENDLOOP.




*  Extensions
      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAP-POSNR          = <LFS_ITEM>-ITEMNUMBER.
      LS_BAPE_VBAP-ZZ1_LOB_SO_SDI = <LFS_ITEM>-LOB.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAP'.

      CLEAR: LF_LENGTH,LF_LENGTH1,LF_LENGTH2,LF_LENGTH3,LF_LENGTH4,
             LF_FLG_PART2,LF_FLG_PART3,LF_FLG_PART4.
      ASSIGN LS_BAPE_VBAP TO <LF_STRUCTURE>.
      IF <LF_STRUCTURE> IS ASSIGNED.
        DO.
          ASSIGN COMPONENT SY-INDEX OF STRUCTURE <LF_STRUCTURE> TO FIELD-SYMBOL(<LF_FIELD>).
          DESCRIBE FIELD <LF_FIELD> LENGTH LF_LENGTH_COMP IN CHARACTER MODE.

          IF SY-SUBRC <> 0.
            EXIT.
          ENDIF.
          LF_LENGTH = LF_LENGTH + LF_LENGTH_COMP.
          IF LF_LENGTH <= LC_PART1.
            LF_LENGTH1  = LF_LENGTH.
          ENDIF.
          IF LF_LENGTH >= LC_PART1 AND
             LF_LENGTH <= LC_PART2.
            LF_OFF2 = LF_LENGTH1.
            LF_LENGTH2  = LF_LENGTH.
            LF_FLG_PART2 = ABAP_ON.
          ENDIF.
          IF LF_LENGTH >= LC_PART2 AND
             LF_LENGTH <= LC_PART3.
            LF_OFF3 = LF_LENGTH2.
            LF_LENGTH3  = LF_LENGTH.
            LF_FLG_PART3 = ABAP_ON.
          ENDIF.
          IF LF_LENGTH >= LC_PART3 AND
             LF_LENGTH <= LC_PART4.
            LF_OFF4 = LF_LENGTH3.
            LF_LENGTH4  = LF_LENGTH.
            LF_FLG_PART4 = ABAP_ON.
          ENDIF.
        ENDDO.
        CLEAR: LF_LEN1,LF_LEN2,LF_LEN3,LF_LEN4.
        LF_LEN1 = LF_LENGTH1.
        LF_LEN2 = LF_LENGTH2.
        LF_LEN3 = LF_LENGTH3.
        LF_LEN4 = LF_LENGTH4.

        LS_EXTENSIONIN-VALUEPART1 = <LF_STRUCTURE>+LF_OFF1(LF_LEN1).
        IF LF_FLG_PART2 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART2 = <LF_STRUCTURE>+LF_OFF2(LF_LEN2).
        ENDIF.
        IF LF_FLG_PART3 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART3 = <LF_STRUCTURE>+LF_OFF3(LF_LEN3).
        ENDIF.
        IF LF_FLG_PART4 = ABAP_ON.
          LS_EXTENSIONIN-VALUEPART4 = <LF_STRUCTURE>+LF_OFF4(LF_LEN4).
        ENDIF.
      ENDIF.

      APPEND LS_EXTENSIONIN TO LT_EXTENSIONIN.


      CLEAR:
        LV_SALES_UNIT_CONV.

    ENDLOOP.

*-------------------------------------
* Sales Order Create
*-------------------------------------
    CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
      EXPORTING
        ORDER_HEADER_IN     = LS_HEADER
        TESTRUN             = IF_TESTRUN
      IMPORTING
        SALESDOCUMENT       = EF_SALES_DOC
      TABLES
        RETURN              = LT_RETURN
        ORDER_ITEMS_IN      = LT_ITEM
        ORDER_SCHEDULES_IN  = LT_SCHEDULE_LINES
        ORDER_PARTNERS      = LT_PARTNERS
        ORDER_CONDITIONS_IN = LT_ITEMS_COND
        ORDER_TEXT          = LT_TEXTS
        PARTNERADDRESSES    = LT_PARTNERADDRESSES
        EXTENSIONIN         = LT_EXTENSIONIN.

    IF LINE_EXISTS( LT_RETURN[ TYPE = 'A' ] ) OR
       LINE_EXISTS( LT_RETURN[ TYPE = 'E' ] ).

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.


    ELSE.

      READ TABLE LT_RETURN INTO DATA(LS_RETURN) WITH KEY TYPE   = 'S'
                                                         ID     = 'V1'
                                                         NUMBER = '311'.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'
*         IMPORTING
*           RETURN        =
          .
        WAIT UP TO 3 SECONDS.

        DATA: LV_FVAL    TYPE CHAR30,
              LV_FNAM    TYPE BDCDATA-FNAM,
              LV_NUMC    TYPE NUMC2,
              CTU_PARAMS TYPE CTU_PARAMS,
              CTUMODE    TYPE CTU_PARAMS-DISMODE,
              CUPDATE    TYPE CTU_PARAMS-UPDMODE,
              MESSTAB    TYPE TABLE OF BDCMSGCOLL.

*Insert billing plan Header
        IF LV_BILLPLAN_HD_FLAG = 'X'.
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '0102' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'   FVAL = 'VBAK-VBELN' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=ENT2' ).

          LV_FVAL = EF_SALES_DOC.
          BDC_FIELD( EXPORTING FNAM = 'VBAK-VBELN' FVAL = LV_FVAL ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=KFPL' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '/EESC' ).

*          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
*          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=S\BACK' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '/00' ).

          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE.
          BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAT' FVAL =  LV_FVAL ).
          BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAR' FVAL = '01' ).
*Page1
*                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
*                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
                LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE1.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL = LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE2.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE3.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE4.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE5.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT1.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT2.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT3.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT4.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT5.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).



*page2
                IF CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL.

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).


*Date
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE6.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE7.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE8.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE9.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT6.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT7.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL =  LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT8.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT9.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).

                ENDIF.

*page3
                IF CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL.
                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE10.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL =  LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE11.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE12.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).

*Value
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT10.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL =  LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT11.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
                  LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT12.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
                ENDIF.

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=S\BACK' ).
**Date
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE1.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE2.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE3.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE4.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE5.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE6.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(06)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE7.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(07)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE8.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(08)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE9.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(09)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE10.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(10)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE11.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(11)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE12.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(12)' FVAL = LV_FVAL ).
*
**Value
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT1.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT2.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT3.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT4.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT5.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT6.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(06)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT7.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(07)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT8.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(08)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT9.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(09)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT10.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(10)' FVAL =  LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT11.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(11)' FVAL = LV_FVAL ).
*          LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT12.
*          CONDENSE LV_FVAL.
*          BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(12)' FVAL = LV_FVAL ).

*Click back and save

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '/EESC' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=SICH' ).

*          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLSLVC_FULLSCREEN'  DYNPRO = '0700' ).
*          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=&ONT' ).

        ELSEIF LV_LINES_BILLING_PLAN_ITEM <> 0.

*Billing Plan Item
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '0102' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'  FVAL = 'VBAK-VBELN' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=ENT2' ).
          LV_FVAL = EF_SALES_DOC.
          CONDENSE LV_FVAL.
          BDC_FIELD( EXPORTING FNAM = 'VBAK-VBELN'  FVAL = LV_FVAL ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=PFPL' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'  FVAL = 'RV45A-MABNR(01)' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/EESC' ).




*LT_BILLING_PLAN_ITEM
          LOOP AT CT_SALESORDERITEM INTO DATA(LS_SALESORDERITEM).
            DATA(LV_TABIX) = SY-TABIX.
            IF LV_TABIX <> 1.
              BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
              BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=S\POS+' ).

              BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
              BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).
            ENDIF.

            READ TABLE LT_BILLING_PLAN_ITEM INTO LS_BILLING_PLAN_ITEM WITH KEY ITEMNUMBER = LS_SALESORDERITEM-ITEMNUMBER.
            IF SY-SUBRC = 0.
              IF LS_BILLING_PLAN_ITEM-BILLING_PLAN_FLAG = 'X'.

                BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
                BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/00' ).

                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAT'  FVAL = LV_FVAL ).
                BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAR'  FVAL = '01' ).
*Page1
*                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
*                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE1.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE2.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE3.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE4.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE5.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT1.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT2.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT3.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT4.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
                LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT5.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).


*page2
                IF LS_SALESORDERITEM-BILLINGPLANSTARTDATE6 IS NOT INITIAL AND LS_SALESORDERITEM-BILLINGPLANAMOUNT6 IS NOT INITIAL.

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).


*Date
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE6.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE7.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE8.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE9.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
*Value
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT6.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT7.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL =  LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT8.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT9.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).

                ENDIF.

*page3
                IF LS_SALESORDERITEM-BILLINGPLANSTARTDATE10 IS NOT INITIAL AND LS_SALESORDERITEM-BILLINGPLANAMOUNT10 IS NOT INITIAL.
                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

                  BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
                  BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE10.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL =  LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE11.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANSTARTDATE12.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).

*Value
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT10.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL =  LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT11.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
                  LV_FVAL = LS_SALESORDERITEM-BILLINGPLANAMOUNT12.
                  CONDENSE LV_FVAL.
                  BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
                ENDIF.

              ENDIF.
            ENDIF.
          ENDLOOP.

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=S\BACK' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=SICH' ).

        ENDIF.

        CTU_PARAMS = VALUE CTU_PARAMS( DISMODE = 'N'
                                       DEFSIZE = 'X' ).
        CALL TRANSACTION 'VA02' WITH AUTHORITY-CHECK USING GT_BDCDATA
                         OPTIONS FROM CTU_PARAMS
                         MESSAGES INTO MESSTAB.
      ENDIF.

    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC = 0.
      CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
      CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
    ELSE.
      READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'S'
                                                   ID = 'V1'
                                                   NUMBER = '311'.
      IF SY-SUBRC = 0.
        CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
        CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
      ELSE.
        READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
        IF SY-SUBRC = 0.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
        ENDIF.
      ENDIF.
    ENDIF.
    LOOP AT LT_RETURN INTO LS_RETURN.
      LS_RESPONSE-SFSALESORDERNO  = EF_SALES_DOC.
      LS_RESPONSE-RESPONSESTATUS  = LS_RETURN-TYPE.
      LS_RESPONSE-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.


  ENDMETHOD.


  METHOD SALES_ORDER_PROCESS.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION
*  Creation Date      : 15.05.2024
*  Author             : Zulkiff B.(Eviden)
*  Add-on ID          : N/A
*  Description        : Sales Order Create/Change via BAPI
*                     : SEGW: ZSDSSD_SO_FROM_SF
*  Purpose            :
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LV_INVALID TYPE FLAG.

* Get constant from table ZSDSCAC001
    GET_CONSTANTS( CHANGING CT_RESPONSE = CT_RESPONSE ).

    READ TABLE CT_RESPONSE INTO DATA(LS_RESPONSE) WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      RETURN.
    ENDIF.

    IF CS_SALESORDER-FLAG IS INITIAL OR NOT ( CS_SALESORDER-FLAG = 'X' OR CS_SALESORDER-FLAG = 'I' OR CS_SALESORDER-FLAG = 'U' ).
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E07
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
      RETURN.
    ENDIF.

* Process input validation
    VALIDATE_INPUT(
      EXPORTING
        IF_RECORD_MODE    = CS_SALESORDER-FLAG
      IMPORTING
        EF_INVALID        = LV_INVALID
      CHANGING
        CS_SALESORDER     = CS_SALESORDER
        CT_SALESORDERITEM = CT_SALESORDERITEM
        CT_SCHEDULELINE   = CT_SCHEDULELINE
        CT_RESPONSE       = CT_RESPONSE
        ).


    IF LV_INVALID = SPACE. "No Error
      CASE CS_SALESORDER-FLAG.
        WHEN  'X' OR 'I'.
          CALL METHOD ZCL_SDSSD_SO_FROM_SF_CREATION=>SALES_ORDER_CREATE
            EXPORTING
              IF_TESTRUN        = IF_TESTRUN
            IMPORTING
              EF_SALES_DOC      = EF_SALES_DOC
            CHANGING
              CS_SALESORDER     = CS_SALESORDER
              CT_SALESORDERITEM = CT_SALESORDERITEM
              CT_SCHEDULELINE   = CT_SCHEDULELINE
              CT_RESPONSE       = CT_RESPONSE.


        WHEN 'U'.
          CALL METHOD ZCL_SDSSD_SO_FROM_SF_CREATION=>SALES_ORDER_CHANGE
            EXPORTING
              IF_TESTRUN        = IF_TESTRUN
            CHANGING
              CS_SALESORDER     = CS_SALESORDER
              CT_SALESORDERITEM = CT_SALESORDERITEM
              CT_SCHEDULELINE   = CT_SCHEDULELINE
              CT_RESPONSE       = CT_RESPONSE.
      ENDCASE.

    ENDIF.


  ENDMETHOD.


  METHOD VALIDATE_AMOUNT.

    CLEAR: CS_RESPONSE.

* Only when value exist
    IF AMOUNT_IN IS NOT INITIAL.

      CALL FUNCTION 'CATS_NUMERIC_INPUT_CHECK'
        EXPORTING
          INPUT      = AMOUNT_IN
*         INTERNAL   = 'X'
*   IMPORTING
*         OUTPUT     =
        EXCEPTIONS
          NO_NUMERIC = 1
          OTHERS     = 2.
      IF SY-SUBRC <> 0.
        "Please input valid amount
        CS_RESPONSE-RESPONSESTATUS  = GC_ERROR.
        CS_RESPONSE-RESPONSEMESSAGE = TEXT-E34.
        RETURN.
      ELSE.
        AMOUNT_OUT = AMOUNT_IN.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_BILLINGPLAN.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION / VALIDATE_INPUT
*  Creation Date      : 24.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate billing plan for both header and item
*  Purpose            : Validate Billing plan Header/Item
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE TYPE  TS_RESPONSE,
          LV_AMOUNT   TYPE CHAR20.

*    DATA: LS_RESPONSE TYPE ZSDSCAS006,
*          LV_AMOUNT   TYPE CHAR20.

*Billing Plan -> process via BDC VA02 -> must check date format and number
*date format -> yyyy/mm/dd
*number -> no comma(,) and no alphabet

    "Check date
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate1":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 IS  NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE1
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE1
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate2":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE2
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE2
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate3":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE3
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE3
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate4":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE4
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE4
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate5":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE5
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE5
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate6":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE6
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE6
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate7":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE7
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE7
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate8":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE8
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE8
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate9":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE9
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE9
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate10":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE10
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE10
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate11":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE11
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE11
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate12":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE12
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE12
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
*        CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+0(4) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+4(2) }/{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+6(2) }|.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+0(4) }|.
      ENDIF.
    ENDIF.

*AMOUNT
    "BillingPlanAmount1":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT1 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT1.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT1 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount2":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT2 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT2.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT2 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount3":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT3 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT3.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT3 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount4":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT4 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT4.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT4 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount5":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT5 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT5.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT5 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount6":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT6 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT6.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT6 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount7":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT7 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT7.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT7 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount8":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT8 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT8.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT8 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount9":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT9 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT9.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT9 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount10":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT10 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT10.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT10 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount11":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT11 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT11.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT11 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount12":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT12 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT12.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT12 = LV_AMOUNT.
      ENDIF.
    ENDIF.


    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.


  ENDMETHOD.


  METHOD VALIDATE_DATE.
    DATA:
      LV_LENGTH  TYPE  I.

    CLEAR: CS_RESPONSE.

* Length?
    LV_LENGTH = STRLEN( DATE_IN ).
    IF LV_LENGTH NE 8.
*   Wrong Date format. Please use format YYYYMMDD
      CS_RESPONSE-RESPONSESTATUS  = GC_ERROR.
      CS_RESPONSE-RESPONSEMESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

    IF NOT DATE_IN+6(2) BETWEEN 01 AND 31.
*   Wrong Date format. Please use format YYYYMMDD
      CS_RESPONSE-RESPONSESTATUS  = GC_ERROR.
      CS_RESPONSE-RESPONSEMESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

* Check month
    IF NOT DATE_IN+4(2) BETWEEN 01 AND 12.
*   Wrong Date format. Please use format YYYYMMDD
      CS_RESPONSE-RESPONSESTATUS  = GC_ERROR.
      CS_RESPONSE-RESPONSEMESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

* 1-4th digit is year
    IF NOT DATE_IN+0(4) BETWEEN 1900 AND 2200 AND
       DATE_IN+0(4) NE '9999'.
*   Wrong Date format. Please use format YYYYMMDD
      CS_RESPONSE-RESPONSESTATUS  = GC_ERROR.
      CS_RESPONSE-RESPONSEMESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

* Assign Output
    DATE_OUT = DATE_IN.

  ENDMETHOD.


  METHOD VALIDATE_HEADER.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION / VALIDATE_INPUT
*  Creation Date      : 24.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE  TYPE	TS_RESPONSE,
          LV_VBELN_REF TYPE VBAK-VBELN,
          LV_AMOUNT    TYPE CHAR20,
          ls_BILLINGPLAN type TS_BILLINGPLAN.

    IF CS_SALESORDER-CREATEDATE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E04
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      "Check date
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_SALESORDER-CREATEDATE
                     IMPORTING DATE_OUT    = CS_SALESORDER-CREATEDATE
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_SALESORDER-CREATEDATE IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.


    "Create Sales Order Ref. Quotation No.
    IF CS_SALESORDER-REFERENCESDDOCUMENT IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-REFERENCESDDOCUMENT
        IMPORTING
          OUTPUT = LV_VBELN_REF.

      SELECT SINGLE VBELN
        FROM VBAK
       WHERE VBELN = @LV_VBELN_REF
        INTO @LV_VBELN_REF.
      IF SY-SUBRC <> 0.
        CLEAR: LS_RESPONSE.
        "Quotation No. & does not exist
        LS_RESPONSE-RESPONSEMESSAGE = TEXT-E08.
        LS_RESPONSE-RESPONSEMESSAGE  = REPLACE( VAL = LS_RESPONSE-RESPONSEMESSAGE
                                                SUB = '&'
                                                WITH = CS_SALESORDER-REFERENCESDDOCUMENT
                                                OCC = 0 ).
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Sales Order Type
    IF CS_SALESORDER-DOCUMENTTYPE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E09
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE AUART
        FROM TVAK
       WHERE AUART = @CS_SALESORDER-DOCUMENTTYPE
        INTO @DATA(LV_AUART).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E10
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "DistributionChannel
    IF CS_SALESORDER-DISTRIBUTIONCHANNEL IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E11
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VTWEG
        FROM TVTW
       WHERE VTWEG = @CS_SALESORDER-DISTRIBUTIONCHANNEL
        INTO @DATA(LV_VTWEG).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E12
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Sales Office
    IF CS_SALESORDER-SALESOFFICE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E13
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VKBUR
        FROM TVBUR
       WHERE VKBUR = @CS_SALESORDER-SALESOFFICE
        INTO @DATA(LV_VKBUR).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E14
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Sales Group
    IF CS_SALESORDER-SALESGROUP IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E15
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VKGRP
        FROM TVKGR
       WHERE VKGRP = @CS_SALESORDER-SALESGROUP
        INTO @DATA(LV_VKGRP).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E16
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Customer PO Number
    IF CS_SALESORDER-PONUMBER = SPACE.
      CS_SALESORDER-PONUMBER = '-'.
    ENDIF.


    "Terms of Payment
    IF CS_SALESORDER-PAYMENTTERMS IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E17
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE *
        FROM T052
       WHERE ZTERM = @CS_SALESORDER-PAYMENTTERMS
        INTO @DATA(LS_SF_ZTERM).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E18
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        "Compare 'Days from Baseline Date for Payment' between BP Master and data from salesforce
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = CS_SALESORDER-BPPAYERNUMBER
          IMPORTING
            OUTPUT = CS_SALESORDER-BPPAYERNUMBER.

        SELECT SINGLE ZTERM
          FROM KNB1
          WHERE KUNNR = @CS_SALESORDER-BPPAYERNUMBER
            AND BUKRS IN @GRT_COMPANYCODE
           INTO @DATA(LV_KNB1_ZTERM).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E21
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          SELECT SINGLE *
            FROM T052
           WHERE ZTERM = @LV_KNB1_ZTERM
            INTO @DATA(LS_KNB1_ZTERM).
          IF SY-SUBRC = 0.
            "Compare between BP Master and data from salesforce
            IF LS_SF_ZTERM-ZTAG1 > LS_KNB1_ZTERM-ZTAG1.
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = TEXT-E22
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    "Customer Sold-to
    IF CS_SALESORDER-BPSOLDTONUMBER IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E23
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      "Check One-time customer in (KNA1) If customer account (KNA1-KTOKD) = ‘Z060’ One Time
      "Define require field : OnetimeName1, Street
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPSOLDTONUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPSOLDTONUMBER.

      SELECT SINGLE KUNNR,KTOKD,ADRNR
        FROM KNA1
       WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER
        INTO @DATA(LS_KNA1).
      IF SY-SUBRC <> 0.
        "Customer Sold-to does not exist
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E25
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
          IF CS_SALESORDER-ONETIMENAME1 IS INITIAL.
            "Please Input customer name (one-time)
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E26
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.

          IF CS_SALESORDER-STREET IS INITIAL.
            "Please Input customer address (one-time)
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E27
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-BPSHIPTONUMBER IS INITIAL.
      "Missing Customer Ship-to
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E28
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPSHIPTONUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPSHIPTONUMBER.
    ENDIF.

    IF CS_SALESORDER-BPBILLTONUMBER IS INITIAL.
      "Missing Customer Bill-to
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E29
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPBILLTONUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPBILLTONUMBER.
    ENDIF.

    IF CS_SALESORDER-BPPAYERNUMBER IS INITIAL.
      "Missing Customer Payer
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E30
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPPAYERNUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPPAYERNUMBER.
    ENDIF.

    IF CS_SALESORDER-BPSALESEMPLOYEE IS INITIAL.
      "Missing Customer Sales Employee
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E31
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPSALESEMPLOYEE
        IMPORTING
          OUTPUT = CS_SALESORDER-BPSALESEMPLOYEE.
    ENDIF.


*Billing Plan -> process via BDC VA02 -> must check date format and number
*date format -> yyyy/mm/dd
*number -> no comma(,) and no alphabet
    MOVE-CORRESPONDING CS_SALESORDER to ls_BILLINGPLAN.
    VALIDATE_BILLINGPLAN(
      EXPORTING
        IF_RECORD_MODE = IF_RECORD_MODE
      IMPORTING
        EF_INVALID     = EF_INVALID
      CHANGING
        CS_BILLINGPLAN = ls_BILLINGPLAN
        CT_RESPONSE    = CT_RESPONSE
        ).
    MOVE-CORRESPONDING ls_BILLINGPLAN to CS_SALESORDER .
    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.


  ENDMETHOD.


  METHOD VALIDATE_HEADER_CREATE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION / VALIDATE_INPUT
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE  TYPE	TS_RESPONSE,
          LV_VBELN_REF TYPE VBAK-VBELN,
          LV_AMOUNT    TYPE CHAR20.

    "Salesforce Order ID
    IF CS_SALESORDER-SFSALESORDERNO IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E02
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ENDIF.

    "Check if duplicate
    IF CS_SALESORDER-SFSALESORDERNO IS NOT INITIAL.
      SELECT SINGLE BNAME
        FROM VBAK
       WHERE BNAME = @CS_SALESORDER-SFSALESORDERNO
        INTO @DATA(LV_BNAME).
      IF SY-SUBRC = 0.
        "// Error duplicate
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E03
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-CREATEDATE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E04
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      "Check date
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_SALESORDER-CREATEDATE
                     IMPORTING DATE_OUT    = CS_SALESORDER-CREATEDATE
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_SALESORDER-CREATEDATE IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-SAPSALESORDERNO IS NOT INITIAL.
      "Sales Order No. must be empty for create mode
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E06
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ENDIF.

    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.


  ENDMETHOD.


  METHOD VALIDATE_INPUT.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_SO_FROM_SF_CREATION / VALIDATE_INPUT
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data input from Salesforce
*  Purpose            : Validate Header / Item
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

* Initialize Output
    CLEAR: EF_INVALID.

    CASE CS_SALESORDER-FLAG.
      WHEN  'X' OR 'I'.
        VALIDATE_HEADER_CREATE(
           EXPORTING
             IF_RECORD_MODE    = CS_SALESORDER-FLAG
           IMPORTING
             EF_INVALID        = EF_INVALID
           CHANGING
             CS_SALESORDER     = CS_SALESORDER
             CT_RESPONSE       = CT_RESPONSE
       ).

        IF EF_INVALID = SPACE." No Error
          VALIDATE_ITEM_CREATE(
             EXPORTING
               IF_RECORD_MODE    = CS_SALESORDER-FLAG
             IMPORTING
               EF_INVALID        = EF_INVALID
             CHANGING
               CS_SALESORDER     = CS_SALESORDER
               CT_SALESORDERITEM = CT_SALESORDERITEM
               CT_SCHEDULELINE   = CT_SCHEDULELINE
               CT_RESPONSE       = CT_RESPONSE
         ).
        ENDIF.

      WHEN 'U'.


    ENDCASE.

    "Validate both Create and Change
    VALIDATE_HEADER(
           EXPORTING
             IF_RECORD_MODE    = CS_SALESORDER-FLAG
           IMPORTING
             EF_INVALID        = EF_INVALID
           CHANGING
             CS_SALESORDER     = CS_SALESORDER
             CT_RESPONSE       = CT_RESPONSE
       ).

    VALIDATE_ITEM(
       EXPORTING
         IF_RECORD_MODE    = CS_SALESORDER-FLAG
       IMPORTING
         EF_INVALID        = EF_INVALID
       CHANGING
         CS_SALESORDER     = CS_SALESORDER
         CT_SALESORDERITEM = CT_SALESORDERITEM
         CT_SCHEDULELINE   = CT_SCHEDULELINE
         CT_RESPONSE       = CT_RESPONSE
   ).

    READ TABLE CT_RESPONSE INTO DATA(LS_RESPONSE) WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.


  ENDMETHOD.


  METHOD VALIDATE_ITEM.

    DATA: LS_RESPONSE    TYPE TS_RESPONSE,
          LV_MATNR       TYPE MATNR,
          LV_AMOUNT      TYPE CHAR20,
          LV_MEINS       TYPE MEINS,
          LV_MSG         TYPE BAPI_MSG,
          LS_BILLINGPLAN TYPE TS_BILLINGPLAN.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_SALESORDERITEM>).

      IF <LFS_SALESORDERITEM>-ITEMNUMBER IS INITIAL.
        "Missing Item Number
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E35
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMNUMBER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E51
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMNUMBER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      IF <LFS_SALESORDERITEM>-HIGHERLEVEL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-HIGHERLEVEL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E50
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-HIGHERLEVEL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      IF <LFS_SALESORDERITEM>-MATERIALNUMBER IS INITIAL.
        "Missing material number
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E36
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
          EXPORTING
            INPUT        = <LFS_SALESORDERITEM>-MATERIALNUMBER
          IMPORTING
            OUTPUT       = LV_MATNR
          EXCEPTIONS
            LENGTH_ERROR = 1
            OTHERS       = 2.
        IF SY-SUBRC <> 0.
* Implement suitable error handling here
        ENDIF.

        SELECT SINGLE MATNR
          FROM MVKE
         WHERE MATNR = @LV_MATNR
*           AND VKORG IN @GRT_SALESORG
*           AND VTWEG = @CS_SALESORDER-DISTRIBUTIONCHANNEL
         INTO @DATA(LS_MVKE).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E37
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "Quantity
      IF <LFS_SALESORDERITEM>-QUANTITY IS INITIAL.
        "Missing target quantity
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E38
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-QUANTITY.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE   = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-QUANTITY = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "SalesUnit
      IF <LFS_SALESORDERITEM>-SALESUNIT IS INITIAL.
        "Missing Sales Unit
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E39
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_MEINS.
         LV_MEINS = <LFS_SALESORDERITEM>-SALESUNIT.

* Validate in table
          SELECT SINGLE MSEHI
            INTO LV_MEINS
            FROM T006
           WHERE MSEHI EQ LV_MEINS.
          IF SY-SUBRC NE 0.
            CLEAR: LV_MSG.
*         Invalid unit:
            LV_MSG = |{ TEXT-E40 } { <LFS_SALESORDERITEM>-SALESUNIT }|.
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = LV_MSG
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
      ENDIF.

      "Plant
      IF <LFS_SALESORDERITEM>-PLANT IS INITIAL.
        "Missing Plant
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E41
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        SELECT SINGLE WERKS
          FROM T001W
         WHERE WERKS = @<LFS_SALESORDERITEM>-PLANT
          INTO @DATA(LV_WERKS).
        IF SY-SUBRC <> 0.
          "Plant does not exist
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E42
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.


      "StorageLocation
      IF <LFS_SALESORDERITEM>-STORAGELOCATION IS NOT INITIAL.
        SELECT SINGLE WERKS,LGORT
          FROM T001L
         WHERE WERKS = @<LFS_SALESORDERITEM>-PLANT
           AND LGORT = @<LFS_SALESORDERITEM>-STORAGELOCATION
          INTO @DATA(LS_T001L).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E43
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "ItemCategory
      IF <LFS_SALESORDERITEM>-ITEMCATEGORY IS INITIAL.
        "Missing Item Category
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E44
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        SELECT SINGLE PSTYV
          FROM TVAP
         WHERE PSTYV = @<LFS_SALESORDERITEM>-ITEMCATEGORY
          INTO @DATA(LV_PSTYV).
        IF SY-SUBRC <> 0.
          "Item Category does not exist
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E45
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "WBS
      IF CS_SALESORDER-DOCUMENTTYPE IN GRT_SALESTYPEPRJ. "SDS Project Order
        IF <LFS_SALESORDERITEM>-WBS IS INITIAL.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E46
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "LOB
      IF <LFS_SALESORDERITEM>-LOB IS NOT INITIAL.
        SELECT SINGLE LOB
          FROM ZDSMMC033
         WHERE LOB = @<LFS_SALESORDERITEM>-LOB
          INTO @DATA(LS_LOB).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E47
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "ReasonForReject
      IF <LFS_SALESORDERITEM>-REASONFORREJECT IS NOT INITIAL.
        SELECT SINGLE ABGRU
          FROM TVAG
         WHERE ABGRU = @<LFS_SALESORDERITEM>-REASONFORREJECT
          INTO @DATA(LS_ABGRU).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E48
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.


      "ListPrice":
      IF <LFS_SALESORDERITEM>-LISTPRICE IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-LISTPRICE.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-LISTPRICE = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountPer":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTPER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTPER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTPER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountVal":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTVAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTVAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTVAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV1Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV1Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV2Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV2Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV3Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV3Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV4Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV4Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV5Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV5Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "Freight":
      IF <LFS_SALESORDERITEM>-FREIGHT IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-FREIGHT.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-FREIGHT = LV_AMOUNT.
        ENDIF.
      ENDIF.


*Billing plan : Item
*Billing Plan -> process via BDC VA02 -> must check date format and number
*date format -> yyyy/mm/dd
*number -> no comma(,) and no alphabet
      "If item category (ITEM_CATE)   field (ITEM_CATE) = 'ZSM1' SDS Serv Billingplan or 'ZSM2' SDS Serv Billingplan
      IF <LFS_SALESORDERITEM>-ITEMCATEGORY IN GRT_ITEMCATBILLINGPLAN.
*        "Check Billing Plan at Header level -> if it is not initial, return error (these item cats are for billing plan item only)
        IF  CS_SALESORDER-BILLINGPLANSTARTDATE IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
            CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.
*          "This item category is for billing plan item only. Please check billing plan header
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E57
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.

        CLEAR: LS_BILLINGPLAN.
        MOVE-CORRESPONDING <LFS_SALESORDERITEM> TO LS_BILLINGPLAN.
        IF LS_BILLINGPLAN IS NOT INITIAL.
          VALIDATE_BILLINGPLAN(
            EXPORTING
              IF_RECORD_MODE = IF_RECORD_MODE
            IMPORTING
              EF_INVALID     = EF_INVALID
            CHANGING
              CS_BILLINGPLAN = LS_BILLINGPLAN
              CT_RESPONSE    = CT_RESPONSE
              ).
              MOVE-CORRESPONDING ls_BILLINGPLAN to <LFS_SALESORDERITEM> .
        ENDIF.
      ENDIF.

*Schedule line
      READ TABLE CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WITH KEY ITEMNUMBER = <LFS_SALESORDERITEM>-ITEMNUMBER.
      IF SY-SUBRC <> 0.
        "Missing Item Number in Schedule Line
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E32
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE ITEMNUMBER = <LFS_SALESORDERITEM>-ITEMNUMBER.

          "ScheduleLineNumber": "0001",
          IF <LFS_SCHEDULELINE>-SCHEDULELINENUMBER IS INITIAL.
            "Missing Schedule Line Number
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E53
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ELSE.
            CLEAR: LV_AMOUNT .
            LV_AMOUNT = <LFS_SCHEDULELINE>-SCHEDULELINENUMBER.
            CONDENSE LV_AMOUNT.
            VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                             IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                       CS_RESPONSE = LS_RESPONSE
                            ).
            IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = TEXT-E52
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ELSE.
              <LFS_SCHEDULELINE>-SCHEDULELINENUMBER = LV_AMOUNT.
            ENDIF.
          ENDIF.

          "RequestDate":
          IF <LFS_SCHEDULELINE>-REQUESTDATE IS INITIAL.
            "Schedule Line: Missing Request Date
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E54
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ELSE.
            VALIDATE_DATE( EXPORTING DATE_IN     = <LFS_SCHEDULELINE>-REQUESTDATE
                           IMPORTING DATE_OUT    = <LFS_SCHEDULELINE>-REQUESTDATE
                                     CS_RESPONSE = LS_RESPONSE
            ).
            IF <LFS_SCHEDULELINE>-REQUESTDATE IS INITIAL OR LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = LS_RESPONSE-RESPONSEMESSAGE
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ENDIF.
          ENDIF.

          "RequestQuantity":
          IF <LFS_SCHEDULELINE>-REQUESTQUANTITY IS INITIAL.
            "Schedule Line: Missing Request Quantity
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E55
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ELSE.
            CLEAR: LV_AMOUNT .
            LV_AMOUNT = <LFS_SCHEDULELINE>-REQUESTQUANTITY.
            CONDENSE LV_AMOUNT.
            VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                             IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                       CS_RESPONSE = LS_RESPONSE
                            ).
            IF LS_RESPONSE-RESPONSESTATUS = GC_ERROR.
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = TEXT-E56
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ELSE.
              <LFS_SCHEDULELINE>-REQUESTQUANTITY = LV_AMOUNT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.


    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_ITEM_CREATE.

    DATA: LS_RESPONSE TYPE TS_RESPONSE,
          LV_MATNR    TYPE MATNR,
          LV_AMOUNT   TYPE CHAR20,
          LV_MEINS    TYPE MEINS,
          LV_MSG      TYPE BAPI_MSG.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_SALESORDERITEM>).

      IF <LFS_SALESORDERITEM>-FLAGITEM IS INITIAL OR NOT ( <LFS_SALESORDERITEM>-FLAGITEM = 'X' OR <LFS_SALESORDERITEM>-FLAGITEM = 'I' ).
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E33
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.



*Schedule line
      READ TABLE CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WITH KEY ITEMNUMBER = <LFS_SALESORDERITEM>-ITEMNUMBER.
      IF SY-SUBRC <> 0.
        "Missing Item Number in Schedule Line
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E32
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE ITEMNUMBER = <LFS_SALESORDERITEM>-ITEMNUMBER.


          "Flag":
          IF <LFS_SCHEDULELINE>-FLAG IS INITIAL OR NOT ( <LFS_SCHEDULELINE>-FLAG = 'X' OR <LFS_SCHEDULELINE>-FLAG = 'I' ).
            "Schedule Line: Missing indicator flag : 'X' for Create or 'U' for Change
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E49
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESPONSESTATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
