*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CONVERT_AMOUNT_TO_TEXT IMPORTING I_NETWR  TYPE ANY
                                       I_CURR   TYPE ANY
                                       I_LANGU  TYPE ANY
                             RETURNING VALUE(R) TYPE STRING,
      CONVERT_ALPHA_IN  IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      CONVERT_ALPHA_OUT IMPORTING I_DATA TYPE ANY
                        EXPORTING E_DATA TYPE ANY,
      GET_SERAIL_TAB IMPORTING I_DO      TYPE VBELN_VL
                               IT_DO_TAB TYPE LB_T_BIL_IT_REF
                     RETURNING VALUE(R)  TYPE ZSDSFIS006_TT,
      GET_LOADING_POINT_DESC IMPORTING I_LODING TYPE CHAR2
                                       I_SHIPPG TYPE CHAR4
                             RETURNING VALUE(R) TYPE BEZEI20,
      READ_SERIAL IMPORTING IT_DATA  TYPE LE_T_DLV_IT_SERNR
                            I_DO     TYPE VBELN_VL
                            I_ITEM   TYPE POSNR
                            I_TEXT   TYPE ARKTX
                            I_CHECK  TYPE CHAR1
                  RETURNING VALUE(R) TYPE STRING,
      READ_LOCATION IMPORTING IT_DATA  TYPE LE_T_DLV_IT_ORG
                              I_DO     TYPE ANY
                              I_ITEM   TYPE ANY
                    RETURNING VALUE(R) TYPE STRING,
      GEN_DO_NO IMPORTING IT_data  TYPE LB_T_BIL_IT_REFDLV
                RETURNING VALUE(R) TYPE CHAR255,
      GEN_SO_NO IMPORTING IT_DATA  TYPE LB_T_BIL_IT_REFORD
                RETURNING VALUE(R) TYPE CHAR255,
      GET_SALES_GROUP_DESC IMPORTING I_DATA   TYPE VBAK-VBELN
                           RETURNING VALUE(R) TYPE STRING,
      GET_WBS IMPORTING I_DATA   TYPE VBRK-VBELN
              RETURNING VALUE(R) TYPE CHAR24,
      GET_PROFIT IMPORTING I_DATA   TYPE VBRK-VBELN
                 RETURNING VALUE(R) TYPE CHAR30,
      GET_SINGLE_VBRP IMPORTING I_DATA TYPE VBRK-VBELN
                      CHANGING  C_DATA TYPE ZSDSFIS005,
      CHECK_RETURN IMPORTING I_DATA   TYPE LIKP-VBELN
                   RETURNING VALUE(R) TYPE CHAR1,
      GET_REF_DOC IMPORTING I_DATA   TYPE LIKP-VBELN
                  RETURNING VALUE(R) TYPE CHAR10,
      CHECK_NO_SERIAL IMPORTING I_CUST   TYPE KNA1-KUNNR
                                I_SO     TYPE VBAK-VBELN
                      RETURNING VALUE(R) TYPE FLAG,
      GET_SALES_EMP_BY_SO IMPORTING I_DATA   TYPE VBELN
                          RETURNING VALUE(R) TYPE CHAR70,
      CONVERT_DATE IMPORTING I_DATA   TYPE SY-DATUM
                   RETURNING VALUE(R) TYPE CHAR20,
      GET_PAYTERM IMPORTING I_DATA   TYPE VBKD-VBELN
                  RETURNING VALUE(R) TYPE DZTERM,
      GET_PAYTERM_TEXT IMPORTING I_DATA   TYPE DZTERM
                       RETURNING VALUE(R) TYPE CHAR30,
      GET_SALES_GROUP_OFFICE IMPORTING I_DATA TYPE VBKD-VBELN
                             CHANGING  C_OFF  TYPE CHAR50
                                       C_GRO  TYPE CHAR50,
      GET_BNAME IMPORTING I_DATA   TYPE VBAK-VBELN
                RETURNING VALUE(R) TYPE VBAK-BNAME,
      GET_CONFIG_WARRANTY CHANGING CT_DATA TYPE ANY TABLE,
      SET_WARRANTY IMPORTING I_SODOC    TYPE VBAK-VBELN
                             I_WARRANTY TYPE ANY TABLE
                   RETURNING VALUE(R)   TYPE FLAG,
      GET_BRANCH IMPORTING I_DATA   TYPE VBRK-VBELN
                 RETURNING VALUE(R) TYPE VBRK-BUPLA,
      GET_CONDITION_HEADER_COMPANY IMPORTING I_DATA TYPE VBKD-VBELN
                                   CHANGING  C_DATA TYPE VBRK-BUPLA,
      GET_MTD_MHA IMPORTING I_DATA   TYPE VBAK-VBELN
                  RETURNING VALUE(R) TYPE CHAR3.

ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.



  ENDMETHOD.
  METHOD CONVERT_AMOUNT_TO_TEXT.
    DATA: LV_AMOUNT      TYPE BSEG-WRBTR, " Assuming bseg-wrbtr as the type for amount
          LV_TEXT        TYPE STRING,
          LV_CURRENCY    TYPE WAERS, " Currency key
          LV_LANGUAGE    LIKE SY-LANGU VALUE '2',
          LT_SPELL_LINES TYPE TABLE OF TLINE.

    DATA: LS_IN_WORDS TYPE SPELL.

    DATA: LV_SPELL_WORD  TYPE  CHAR255.

    LV_AMOUNT   = I_NETWR.
    LV_CURRENCY = I_CURR.
    LV_LANGUAGE = I_LANGU.

    CALL FUNCTION 'Z_SDSCA_SPELL_AMOUNT'
      EXPORTING
        AMOUNT     = LV_AMOUNT
        CURRENCY   = LV_CURRENCY
        LANGUAGE   = LV_LANGUAGE
      IMPORTING
        SPELL_WORD = LV_SPELL_WORD
      EXCEPTIONS
        NOT_FOUND  = 1
        TOO_LARGE  = 2
        OTHERS     = 3.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ELSE.
      R = LV_SPELL_WORD.
    ENDIF.
*    CALL FUNCTION 'SPELL_AMOUNT'
*      EXPORTING
*        AMOUNT   = LV_AMOUNT
*        CURRENCY = LV_CURRENCY
*        LANGUAGE = LV_LANGUAGE
*      IMPORTING
*        IN_WORDS = LS_IN_WORDS.
*    IF SY-SUBRC = 0.
*      R = |{ LS_IN_WORDS-WORD }| & |{ SPACE }| & |{ TEXT-101 }|.
*      IF LS_IN_WORDS-DECWORD IS NOT INITIAL.
*        LS_IN_WORDS-DECWORD = |{ LS_IN_WORDS-DECWORD }| & |{ SPACE }| & |{ TEXT-102 }|.
*        CONCATENATE R LS_IN_WORDS-DECWORD INTO R SEPARATED BY SPACE.
*      ENDIF.
*    ENDIF.
  ENDMETHOD.
  METHOD CONVERT_ALPHA_IN.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD CONVERT_ALPHA_OUT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = I_DATA
      IMPORTING
        OUTPUT = E_DATA.

  ENDMETHOD.
  METHOD GET_SERAIL_TAB.
    DATA LS_DATA LIKE LINE OF R.

    DATA : LS_DO_TAB LIKE LINE OF IT_DO_TAB.

    DATA : BEGIN OF LS_SER01,
             OBKNR   TYPE SER01-OBKNR,
             LIEF_NR TYPE SER01-LIEF_NR,
             POSNR   TYPE SER01-POSNR,
             SERNR   TYPE OBJK-SERNR,
             MATNR   TYPE OBJK-MATNR,
           END OF LS_SER01.
    DATA LT_SER01 LIKE TABLE OF LS_SER01.

    CONSTANTS : LC_601   TYPE C LENGTH 3 VALUE '601',
                LC_SER01 TYPE C LENGTH 5 VALUE 'SER01',
                LC_J     TYPE C LENGTH 1 VALUE 'J'.

    SELECT SER01~OBKNR,
           SER01~LIEF_NR,
           SER01~POSNR,
           OBJK~SERNR,
           OBJK~MATNR
      FROM SER01
      INNER JOIN OBJK ON SER01~OBKNR EQ OBJK~OBKNR AND
                         OBJK~TASER  EQ @LC_SER01
      INTO TABLE @LT_SER01
      WHERE LIEF_NR EQ @I_DO
        AND BWART   EQ @LC_601.


    LOOP AT LT_SER01 INTO LS_SER01.
      READ TABLE IT_DO_TAB  INTO LS_DO_TAB
      WITH KEY REF_DOC      = LS_SER01-LIEF_NR
               REF_DOC_IT   = LS_SER01-POSNR
               REF_DOC_TYPE = LC_J.
      IF SY-SUBRC EQ 0.
        LS_DATA-VBELN = LS_DO_TAB-BIL_NUMBER.
        LS_DATA-POSNR = LS_DO_TAB-ITM_NUMBER.
      ENDIF.
      LS_DATA-MATNR = LS_SER01-MATNR.
      LS_DATA-MAKTX = LS_SER01-SERNR.
      APPEND LS_DATA TO R.
    ENDLOOP.
  ENDMETHOD.
  METHOD GET_LOADING_POINT_DESC.
    SELECT SINGLE VTEXT
      FROM TVLAT
      INTO R
      WHERE SPRAS EQ SY-LANGU
        AND VSTEL EQ I_SHIPPG
        AND LSTEL EQ I_LODING.
  ENDMETHOD.
  METHOD READ_SERIAL.
    DATA LS_DATA LIKE LINE OF IT_DATA.

    DATA LV_POSNR TYPE LIPS-POSNR.

    DATA LV_LEN TYPE I.

*    READ TABLE IT_DATA INTO LS_DATA
*    WITH KEY DELIV_NUMB = I_DO
*             ITM_NUMBER = I_ITEM.
*    IF SY-SUBRC EQ 0.
*      R = LS_DATA-SERIAL_NUM.
*    ENDIF.

    LV_POSNR = |{ I_ITEM ALPHA = IN }|.

    LOOP AT IT_DATA INTO LS_DATA WHERE DELIV_NUMB EQ I_DO AND
                                       ITM_NUMBER EQ LV_POSNR.
      IF R IS INITIAL.
        R = LS_DATA-SERIAL_NUM.
      ELSE.
        CONCATENATE : R LS_DATA-SERIAL_NUM INTO R SEPARATED BY SPACE.
      ENDIF.
    ENDLOOP.
*    IF SY-SUBRC EQ 0.
*      IF I_CHECK EQ SPACE.
*        CONCATENATE I_TEXT R INTO R SEPARATED BY SPACE.
*      ENDIF.
*    ENDIF.
  ENDMETHOD.
  METHOD READ_LOCATION.
    DATA LS_DATA LIKE LINE OF IT_DATA.

    DATA(LV_ITEM) = |{ I_ITEM ALPHA = IN }|.

    READ TABLE IT_DATA INTO LS_DATA
    WITH KEY DELIV_NUMB = I_DO
             ITM_NUMBER = LV_ITEM.
    IF SY-SUBRC EQ 0.
      R = LS_DATA-STGE_LOC.
    ENDIF.
  ENDMETHOD.
  METHOD GEN_DO_NO.
    DATA : LS_DATA LIKE LINE OF IT_DATA.

    DATA : LT_TMP LIKE IT_DATA.

    LT_TMP = IT_DATA.
    DELETE ADJACENT DUPLICATES FROM LT_TMP COMPARING DELIV_NUMB.

    LOOP AT LT_TMP INTO LS_DATA.
      IF R IS INITIAL.
        R = LS_DATA-DELIV_NUMB.
      ELSE.
        CONCATENATE R LS_DATA-DELIV_NUMB INTO R SEPARATED BY SPACE.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
  METHOD GEN_SO_NO.
    DATA : LS_DATA LIKE LINE OF IT_DATA.

    DATA : LT_TMP LIKE IT_DATA.

    LT_TMP = IT_DATA.
    DELETE ADJACENT DUPLICATES FROM LT_TMP COMPARING ORDER_NUMB.

    LOOP AT LT_TMP INTO LS_DATA.
      IF R IS INITIAL.
        R = LS_DATA-ORDER_NUMB.
      ELSE.
        CONCATENATE R LS_DATA-ORDER_NUMB INTO R SEPARATED BY SPACE.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
  METHOD GET_SALES_GROUP_DESC.
    SELECT SINGLE TVGRT~BEZEI
    FROM VBAK
    INNER JOIN TVGRT  ON ( VBAK~VKGRP  EQ TVGRT~VKGRP AND "get sale group description
                           TVGRT~SPRAS EQ SY-LANGU )
    INTO R
    WHERE VBAK~VBELN EQ I_DATA.
  ENDMETHOD.
  METHOD GET_WBS.
    SELECT SINGLE PS_PSP_PNR
      FROM VBRP
      INTO R
      WHERE VBELN = I_DATA.

    CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
      EXPORTING
        INPUT  = R
      IMPORTING
        OUTPUT = R.
  ENDMETHOD.
  METHOD GET_PROFIT.
    SELECT SINGLE PRCTR
      FROM VBRP
      INTO R
      WHERE VBELN = I_DATA.
  ENDMETHOD.
  METHOD GET_SINGLE_VBRP.
    SELECT SINGLE PS_PSP_PNR,PRCTR
      FROM VBRP
      INTO (@C_DATA-WBS_NO,@C_DATA-PROFIT)
      WHERE VBELN = @I_DATA.

    CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
      EXPORTING
        INPUT  = C_DATA-WBS_NO
      IMPORTING
        OUTPUT = C_DATA-WBS_NO.

    C_DATA-PROFIT = |{ C_DATA-PROFIT ALPHA = OUT }|.

  ENDMETHOD.
  METHOD CHECK_RETURN.
    CONSTANTS : LC_T TYPE C LENGTH 1 VALUE 'T'.
    SELECT COUNT(*)
      FROM LIKP
      WHERE VBELN EQ I_DATA
        AND VBTYP EQ LC_T.
    IF SY-SUBRC EQ 0.
      R = ABAP_TRUE.
    ELSE.
      R = ABAP_FALSE.
    ENDIF.

  ENDMETHOD.
  METHOD GET_REF_DOC.
    SELECT SINGLE VGBEL
      FROM VBAK
      INTO R
      WHERE VBELN EQ I_DATA.
  ENDMETHOD.
  METHOD CHECK_NO_SERIAL.

    SELECT COUNT(*)
      FROM ZSDSSDT007
      WHERE KUNNR EQ I_CUST
        AND NOSER EQ ABAP_TRUE.
    IF SY-SUBRC EQ 0.
      R = ABAP_TRUE.
    ELSE.
      R = ABAP_FALSE.
    ENDIF.

    IF R EQ ABAP_FALSE.
      SELECT SINGLE VKBUR,
                    VKGRP
      FROM VBAK
      WHERE VBELN EQ @I_SO
      INTO (@DATA(LV_VKBUR),@DATA(LV_VKGRP)).
      IF SY-SUBRC EQ 0.
        SELECT COUNT(*)
          FROM ZSDSSDT008
          WHERE VKBUR EQ LV_VKBUR
            AND VKGRP EQ LV_VKGRP
            AND NOSER EQ ABAP_TRUE.
        IF SY-SUBRC EQ 0.
          R = ABAP_TRUE.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD GET_SALES_EMP_BY_SO.

    DATA : LV_PERSNO TYPE PERSNO.

    DATA : LCL_UTIL TYPE REF TO ZCL_SDSCA_UTIL_SDS.

    CONSTANTS : BEGIN OF LC_CON,
                  VE TYPE C LENGTH 2 VALUE 'VE',
                END OF LC_CON.

    IF LCL_UTIL IS NOT BOUND.
      CREATE OBJECT LCL_UTIL.
    ENDIF.

    SELECT SINGLE PERNR
      FROM VBPA
      INTO LV_PERSNO
      WHERE VBELN EQ I_DATA
        AND PARVW EQ LC_CON-VE.

    LCL_UTIL->GET_SALE_NAME( EXPORTING I_SALE_NO    = LV_PERSNO
                             IMPORTING E_NAME_FIRST = R ).

  ENDMETHOD.
  METHOD CONVERT_DATE.
    DATA: LV_MONTH              TYPE MONTH,
          LV_DATE_CONVERTED(11) TYPE C,
          LV_DATE(2)            TYPE C,
          LV_YEAR(4)            TYPE C.
    DATA: LWA_T247 TYPE T247.

    CLEAR: LV_MONTH, LV_DATE, LV_YEAR, LV_DATE_CONVERTED.
    MOVE I_DATA+6(2) TO LV_DATE.
    MOVE I_DATA+0(4) TO LV_YEAR.
    MOVE I_DATA+4(2) TO LV_MONTH.

    CALL FUNCTION 'IDWT_READ_MONTH_TEXT'
      EXPORTING
        LANGU = SY-LANGU
        MONTH = LV_MONTH
      IMPORTING
        T247  = LWA_T247.

    IF LWA_T247-KTX IS NOT INITIAL.
      CONCATENATE LV_DATE LWA_T247-KTX LV_YEAR INTO LV_DATE_CONVERTED SEPARATED BY '-'.
    ENDIF.

    MOVE LV_DATE_CONVERTED TO R.

  ENDMETHOD.
  METHOD GET_PAYTERM.
    SELECT SINGLE ZTERM
      FROM VBKD
      INTO R
      WHERE VBELN EQ i_Data
        AND POSNR EQ 0.
  ENDMETHOD.
  METHOD GET_PAYTERM_TEXT.

    SELECT SINGLE VTEXT
      FROM TVZBT
      INTO @R
      WHERE SPRAS EQ @SY-LANGU
        AND ZTERM EQ @I_DATA.

  ENDMETHOD.
  METHOD GET_SALES_GROUP_OFFICE.

    SELECT SINGLE TVKBT~BEZEI,
                  TVGRT~BEZEI
    FROM VBAK
    INNER JOIN TVGRT  ON ( VBAK~VKGRP  EQ TVGRT~VKGRP AND "get sale group description
                           TVGRT~SPRAS EQ @SY-LANGU )
    INNER JOIN TVKBT  ON ( VBAK~VKBUR  EQ TVKBT~VKBUR AND "get sale office description
                           TVKBT~SPRAS EQ @SY-LANGU )
    INTO (@C_GRO,@C_OFF)
    WHERE VBAK~VBELN EQ @I_DATA.

  ENDMETHOD.
  METHOD GET_BNAME.
    SELECT SINGLE BNAME
      FROM VBAK
      INTO R
      WHERE VBELN EQ I_DATA.
  ENDMETHOD.
  METHOD GET_CONFIG_WARRANTY.
    CONSTANTS : BEGIN OF LC_CON,
                  REPID TYPE ZSDSCAC001-REPID VALUE 'WARRANTY_CARD',
                  PARAM TYPE ZSDSCAC001-PARAM VALUE 'SALES_GROUP',
                END OF LC_CON.

    ZCL_SDSCA_UTIL_SDS=>GET_CONFIG_001( EXPORTING I_REPID             = LC_CON-REPID
                                                  I_PARAM             = LC_CON-PARAM
                                        CHANGING  CR_RETURN           = CT_DATA ).

  ENDMETHOD.
  METHOD SET_WARRANTY.
    IF I_WARRANTY[] IS INITIAL.
      R = ABAP_FALSE.
    ELSE.
      SELECT COUNT( * )
      FROM VBAK
      WHERE VBAK~VBELN EQ I_SODOC
        AND VBAK~VKGRP IN I_WARRANTY[].
      IF SY-SUBRC EQ 0.
        R = ABAP_TRUE.
      ELSE.
        R = ABAP_FALSE.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD GET_BRANCH.
    SELECT SINGLE BUPLA
      FROM VBRK
      INTO R
      WHERE VBELN EQ I_DATA.
  ENDMETHOD.
  METHOD GET_CONDITION_HEADER_COMPANY.
    SELECT SINGLE PARAM_EXT,
                  VALUE_LOW
      FROM ZSDSCAC001
      INTO @DATA(LS_BRANCH_COM)
      WHERE REPID EQ 'ZSDSSDR0100'
        AND PARAM EQ 'COMP_BRANCH_CHANNEL'.
    IF SY-SUBRC EQ 0.
      SELECT COUNT(*)
      FROM VBAK
      WHERE VBAK~VBELN EQ I_DATA
        AND VBAK~VTWEG EQ LS_BRANCH_COM-VALUE_LOW.
      IF SY-SUBRC NE 0.
        C_DATA = LS_BRANCH_COM-PARAM_EXT.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD GET_MTD_MHA.
    SELECT SINGLE KVGR5
      FROM VBAK
      WHERE VBELN EQ @I_DATA
      INTO @R.
  ENDMETHOD.
ENDCLASS.
