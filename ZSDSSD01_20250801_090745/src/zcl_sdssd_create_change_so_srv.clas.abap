class ZCL_SDSSD_CREATE_CHANGE_SO_SRV definition
  public
  inheriting from ZCL_SDSCA_REST_SERVICE
  final
  create public .

public section.

  types:
    BEGIN OF TS_BILLINGPLAN,
        BILLINGPLANSTARTDATE   TYPE C LENGTH 10,
        BILLINGPLANSTARTDATE1  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT1     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE2  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT2     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE3  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT3     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE4  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT4     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE5  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT5     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE6  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT6     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE7  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT7     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE8  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT8     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE9  TYPE C LENGTH 10,
        BILLINGPLANAMOUNT9     TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE10 TYPE C LENGTH 10,
        BILLINGPLANAMOUNT10    TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE11 TYPE C LENGTH 10,
        BILLINGPLANAMOUNT11    TYPE P LENGTH 6 DECIMALS 2,
        BILLINGPLANSTARTDATE12 TYPE C LENGTH 10,
        BILLINGPLANAMOUNT12    TYPE P LENGTH 6 DECIMALS 2,
      END OF TS_BILLINGPLAN .
  types:
    TT_BILLINGPLAN TYPE STANDARD TABLE OF TS_BILLINGPLAN .

  constants GC_CREATE type CHAR1 value 'C' ##NO_TEXT.
  constants GC_UPDATE type CHAR1 value 'U' ##NO_TEXT.
  constants GC_SUCCESS type CHAR1 value 'S' ##NO_TEXT.
  constants GC_ERROR type CHAR1 value 'E' ##NO_TEXT.
  constants GC_WARNING type CHAR1 value 'W' ##NO_TEXT.

  class-methods SALES_ORDER_PROCESS
    importing
      value(IF_TESTRUN) type FLAG optional
    exporting
      value(EF_SALES_DOC) type VBELN
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT optional
      !CT_SCHEDULELINE type ZSDSSDS016_TT optional
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_INPUT
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT
      !CT_SCHEDULELINE type ZSDSSDS016_TT
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_HEADER_CREATE
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_ITEM_CREATE
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT
      !CT_SCHEDULELINE type ZSDSSDS016_TT
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_HEADER
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_BILLINGPLAN
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_BILLINGPLAN type TS_BILLINGPLAN
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_ITEM
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT
      !CT_SCHEDULELINE type ZSDSSDS016_TT
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_HEADER_CHANGE
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods VALIDATE_ITEM_CHANGE
    importing
      !IF_RECORD_MODE type CHAR1
    exporting
      value(EF_INVALID) type FLAG
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT
      !CT_SCHEDULELINE type ZSDSSDS016_TT
      !CT_RESPONSE type ZSDSCAS006_TT .

  methods PROCESS_DATA
    redefinition .
  PROTECTED SECTION.
private section.

  class-data GT_BDCDATA type BDCDATA_TAB .
  class-data GRT_SALESORG type CMM_T_VKORG_RANGE .
  class-data GRT_DIVISION type CMM_T_SPART_RANGE .
  class-data GRT_ONETIMECUST type CUST_MAT_T_RANGESKUNNR .
  class-data GRT_COMPANYCODE type BUKRS_RAN_ITAB .
  class-data GRT_SALESTYPEPRJ type FIP_T_AUART_RANGE .
  class-data GRT_ITEMCATBILLINGPLAN type CKMCSO_PSTYV_T .
  class-data GRT_SALESTYPEPRJ_ITEMCAT type CKMCSO_PSTYV_T .
  class-data GRT_CONDITION_TYPE type COND_TYPE_RANGE_ERP_T .
  class-data GRT_ITEMCAT_HEADER_BOM type CKMCSO_PSTYV_T .

  class-methods VALIDATE_DATE
    importing
      !DATE_IN type CHAR10
    exporting
      value(DATE_OUT) type CHAR10
      !CS_RESPONSE type ZSDSCAS006 .
  class-methods GET_CONSTANTS
    changing
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods APPEND_RESPONSE
    importing
      !IF_STATUS type CHAR1
      !IF_MESSAGE type ZSDSDE_REST_MESSAGE
    changing
      !CT_RESPONSE type ZSDSCAS006_TT
      !CS_SALESORDER type ZSDSSDS048 optional .
  class-methods SALES_ORDER_CREATE
    importing
      !IF_TESTRUN type FLAG optional
    exporting
      !EF_SALES_DOC type VBELN
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT optional
      !CT_SCHEDULELINE type ZSDSSDS016_TT optional
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods SALES_ORDER_CHANGE
    importing
      !IF_TESTRUN type FLAG optional
    changing
      !CS_SALESORDER type ZSDSSDS048
      !CT_SALESORDERITEM type ZSDSSDS015_TT optional
      !CT_SCHEDULELINE type ZSDSSDS016_TT optional
      !CT_RESPONSE type ZSDSCAS006_TT .
  class-methods BDC_DYNPRO
    importing
      !PROGRAM type CHAR30
      !DYNPRO type CHAR4 .
  class-methods BDC_FIELD
    importing
      !FNAM type CHAR30
      !FVAL type CHAR30 .
  class-methods VALIDATE_AMOUNT
    importing
      value(AMOUNT_IN) type CHAR20
    exporting
      value(AMOUNT_OUT) type CHAR20
      !CS_RESPONSE type ZSDSCAS006 .
  class-methods APPEND_EXTENSION
    importing
      !BAPE_STRUCTURE type ANY
    changing
      !EXTENSIONIN type BAPIPAREX
      !EXTENSIONIN_T type BAPIPAREX_T .
  class-methods APPEND_TEXT
    importing
      !TEXT_ID type TDID
      !LANGU type SPRAS
      !TEXT_LINE type MS_RFC0800
    exporting
      value(TEXTS) type BAPISDTEXT_T .
  class-methods GET_ITEM_SCHEDULE_LINE
    importing
      value(MESSAGE_ID) type ARBGB
      value(MESSAGE_NUMBER) type SYMSGNO
      value(MESSAGE) type BAPI_MSG
    exporting
      value(ITEM_NO) type POSNR_VA
      value(SCHEDULE_LINE_NO) type ETENR .
  class-methods GET_CREDIT_MESSAGE
    importing
      value(AUART) type AUART
    exporting
      value(MESSAGE_STATUS) type MSGTY
      value(MESSAGE) type TEXT1024
      value(FSCM_CREDIT_MESSAGES) type UKM_T_PI_CREDIT_MESSAGE .
  class-methods AVAILABILITY_CHECK_S4
    importing
      !MATNR type MATNR
      !WERKS type WERKS_D
    exporting
      !AVAL_STOCK type SUMIS .
  class-methods BILLING_SCHEDULE_SAVE
    importing
      value(CS_SALESORDER) type ZSDSSDS048 .
  class-methods AVAILABILITY_CHECK_S4_UPD
    importing
      !MATNR type MATNR
      !WERKS type WERKS_D
      !BMENG type BMENG
    exporting
      !AVAL_STOCK type SUMIS .
ENDCLASS.



CLASS ZCL_SDSSD_CREATE_CHANGE_SO_SRV IMPLEMENTATION.


  METHOD APPEND_EXTENSION.

*for extension
    CONSTANTS:
      LC_PART1 TYPE I                    VALUE 240,
      LC_PART2 TYPE I                    VALUE 480,
      LC_PART3 TYPE I                    VALUE 720,
      LC_PART4 TYPE I                    VALUE 960.

    FIELD-SYMBOLS: <LF_STRUCTURE> TYPE ANY.
    DATA:
      LF_OFF1        TYPE I,
      LF_OFF2        TYPE I,
      LF_OFF3        TYPE I,
      LF_OFF4        TYPE I,
      LF_LEN1        TYPE I,
      LF_LEN2        TYPE I,
      LF_LEN3        TYPE I,
      LF_LEN4        TYPE I,
      LF_LENGTH      TYPE I,
      LF_LENGTH1     TYPE I,
      LF_LENGTH2     TYPE I,
      LF_LENGTH3     TYPE I,
      LF_LENGTH4     TYPE I,
      LF_LENGTH_COMP TYPE I,
      LF_FLG_PART2   TYPE FLAG,
      LF_FLG_PART3   TYPE FLAG,
      LF_FLG_PART4   TYPE FLAG.


    ASSIGN BAPE_STRUCTURE TO <LF_STRUCTURE>.

    IF <LF_STRUCTURE> IS ASSIGNED.
      DO.
        ASSIGN COMPONENT SY-INDEX OF STRUCTURE <LF_STRUCTURE> TO FIELD-SYMBOL(<LF_FIELD>).
        DESCRIBE FIELD <LF_FIELD> LENGTH LF_LENGTH_COMP IN CHARACTER MODE.

        IF SY-SUBRC <> 0.
          EXIT.
        ENDIF.
        LF_LENGTH = LF_LENGTH + LF_LENGTH_COMP.
        IF LF_LENGTH <= LC_PART1.
          LF_LENGTH1  = LF_LENGTH.
        ENDIF.
        IF LF_LENGTH >= LC_PART1 AND
           LF_LENGTH <= LC_PART2.
          LF_OFF2 = LF_LENGTH1.
          LF_LENGTH2  = LF_LENGTH.
          LF_FLG_PART2 = ABAP_ON.
        ENDIF.
        IF LF_LENGTH >= LC_PART2 AND
           LF_LENGTH <= LC_PART3.
          LF_OFF3 = LF_LENGTH2.
          LF_LENGTH3  = LF_LENGTH.
          LF_FLG_PART3 = ABAP_ON.
        ENDIF.
        IF LF_LENGTH >= LC_PART3 AND
           LF_LENGTH <= LC_PART4.
          LF_OFF4 = LF_LENGTH3.
          LF_LENGTH4  = LF_LENGTH.
          LF_FLG_PART4 = ABAP_ON.
        ENDIF.
      ENDDO.
      CLEAR: LF_LEN1,LF_LEN2,LF_LEN3,LF_LEN4.
      LF_LEN1 = LF_LENGTH1.
      LF_LEN2 = LF_LENGTH2.
      LF_LEN3 = LF_LENGTH3.
      LF_LEN4 = LF_LENGTH4.

      EXTENSIONIN-VALUEPART1 = <LF_STRUCTURE>+LF_OFF1(LF_LEN1).
      IF LF_FLG_PART2 = ABAP_ON.
         EXTENSIONIN-VALUEPART2 = <LF_STRUCTURE>+LF_OFF2(LF_LEN2).
      ENDIF.
      IF LF_FLG_PART3 = ABAP_ON.
         EXTENSIONIN-VALUEPART3 = <LF_STRUCTURE>+LF_OFF3(LF_LEN3).
      ENDIF.
      IF LF_FLG_PART4 = ABAP_ON.
         EXTENSIONIN-VALUEPART4 = <LF_STRUCTURE>+LF_OFF4(LF_LEN4).
      ENDIF.
    ENDIF.

    APPEND  EXTENSIONIN TO EXTENSIONIN_T.

  ENDMETHOD.


  METHOD APPEND_RESPONSE.

    DATA: LS_RESPONSE TYPE ZSDSCAS006.

    LS_RESPONSE-RESP_STATUS = IF_STATUS.
    LS_RESPONSE-RESP_MESSAGE = IF_MESSAGE.

    APPEND LS_RESPONSE TO CT_RESPONSE.

    IF CS_SALESORDER-RESPONSESTATUS IS INITIAL AND
       CS_SALESORDER-RESPONSEMESSAGE IS INITIAL.
      CS_SALESORDER-RESPONSESTATUS = IF_STATUS.
      CS_SALESORDER-RESPONSEMESSAGE = IF_MESSAGE.
    ENDIF.

  ENDMETHOD.


  METHOD APPEND_TEXT.

    TYPES: BEGIN OF LTY_TEXT132,
             TEXT TYPE TEXT132,
           END OF LTY_TEXT132.
    DATA: LT_TEXT132 TYPE TABLE OF LTY_TEXT132.

    CALL FUNCTION 'RKD_WORD_WRAP'
      EXPORTING
        TEXTLINE            = TEXT_LINE
*       DELIMITER           = ' '
        OUTPUTLEN           = 132         ##NUMBER_OK
      TABLES
        OUT_LINES           = LT_TEXT132
      EXCEPTIONS                          ##FM_SUBRC_OK
        OUTPUTLEN_TOO_LARGE = 1
        OTHERS              = 2.

    LOOP AT LT_TEXT132 ASSIGNING FIELD-SYMBOL(<LFS_TEXT132>).
      APPEND VALUE #( TEXT_ID   = TEXT_ID
                      LANGU     = LANGU
                      TEXT_LINE = <LFS_TEXT132>-TEXT ) TO TEXTS.
    ENDLOOP.
  ENDMETHOD. "#EC CI_VALPAR


  METHOD AVAILABILITY_CHECK_S4.


    DATA: LT_ATPCSX      TYPE  TABLE OF ATPCS,
          LT_ATPCSX_DSP  TYPE  TABLE OF ATPCS,
          LT_ATPDSX      TYPE  TABLE OF ATPDS,
          LT_ATPREX      TYPE  TABLE OF ATPRE,
          LT_ATPTERMX    TYPE  TABLE OF ATPTERM,
          LT_MDVEX       TYPE  TABLE OF MDVE,
          LT_MDVEX_DSP   TYPE  TABLE OF MDVE,
          LT_MDVEX_FINAL TYPE  TABLE OF MDVE,
          LS_ATPCA       TYPE  ATPCA,
          LS_ATPCB       TYPE  ATPCB,
          LS_ATPCC       TYPE  ATPCC.

    CLEAR: AVAL_STOCK.

    APPEND VALUE #(  MATNR  = MATNR
                     WERKS  = WERKS
                     BERID  = WERKS
                     PRREG  = 'A'
                     CHMOD  = 'EXP'
                     DELKZ  = 'VC'
                     XLINE  = '1'
                     TRTYP  = 'A'
                     IDXATP = '1'
                     RESMD  = 'X'
                     CHKFLG = 'X' ) TO LT_ATPCSX.

    LS_ATPCA-ANWDG       = '8'.
    LS_ATPCA-ANWDG_ORIG  = 'A'.
    LS_ATPCA-AZERG       = 'T'.
    LS_ATPCA-RDMOD       = 'A'.
    LS_ATPCA-XENQMD      = 'N'.

    CALL FUNCTION 'AVAILABILITY_CHECK_S4'
      TABLES
        P_ATPCSX   = LT_ATPCSX
        P_ATPDSX   = LT_ATPDSX
        P_MDVEX    = LT_MDVEX
        P_ATPTERMX = LT_ATPTERMX
        P_ATPREX   = LT_ATPREX
      CHANGING
        P_ATPCA    = LS_ATPCA     "ANWDG, AZERG, PLAUF RDMOD
        P_ATPCB    = LS_ATPCB     "MEINS
      EXCEPTIONS
        ERROR      = 1
        OTHERS     = 2.

    READ TABLE LT_ATPCSX INTO DATA(LS_ATPCSX) INDEX 1.
    IF SY-SUBRC = 0.
      AVAL_STOCK = LS_ATPCSX-SUMZG - LS_ATPCSX-SUMAG.
    ENDIF.

  ENDMETHOD.


  METHOD AVAILABILITY_CHECK_S4_UPD.


    DATA: LT_ATPCSX      TYPE  TABLE OF ATPCS,
          LT_ATPCSX_DSP  TYPE  TABLE OF ATPCS,
          LT_ATPDSX      TYPE  TABLE OF ATPDS,
          LT_ATPREX      TYPE  TABLE OF ATPRE,
          LT_ATPTERMX    TYPE  TABLE OF ATPTERM,
          LT_MDVEX       TYPE  TABLE OF MDVE,
          LT_MDVEX_DSP   TYPE  TABLE OF MDVE,
          LT_MDVEX_FINAL TYPE  TABLE OF MDVE,
          LS_ATPCA       TYPE  ATPCA,
          LS_ATPCB       TYPE  ATPCB,
          LS_ATPCC       TYPE  ATPCC.

    CLEAR: AVAL_STOCK.

    APPEND VALUE #(  MATNR  = MATNR
                     WERKS  = WERKS
                     BERID  = WERKS
                     PRREG  = 'A'
                     CHMOD  = '011'
                     DELKZ  = 'VC'
                     XLINE  = '1'
                     TRTYP  = 'V' "Change Mode
                     IDXATP = '1'
                     RESMD  = 'X'
                     CHKFLG = 'X'  ENQFLG = 'X' SUMBD = 'A' ) TO LT_ATPCSX.
    LS_ATPCA-ANWDG2      = '5'.
    LS_ATPCA-ANWDG       = '8'.
    LS_ATPCA-ANWDG_ORIG  = '5'.
    LS_ATPCA-AZERG       = 'S'.
    LS_ATPCA-RDMOD       = 'A'.
    LS_ATPCA-XENQMD      = 'R'.

    CALL FUNCTION 'AVAILABILITY_CHECK_S4'
      TABLES
        P_ATPCSX   = LT_ATPCSX
        P_ATPDSX   = LT_ATPDSX
        P_MDVEX    = LT_MDVEX
        P_ATPTERMX = LT_ATPTERMX
        P_ATPREX   = LT_ATPREX
      CHANGING
        P_ATPCA    = LS_ATPCA     "ANWDG, AZERG, PLAUF RDMOD
        P_ATPCB    = LS_ATPCB     "MEINS
      EXCEPTIONS
        ERROR      = 1
        OTHERS     = 2.

    READ TABLE LT_ATPCSX INTO DATA(LS_ATPCSX) INDEX 1.
    IF SY-SUBRC = 0.
      "07/05/2025  deduct total confirm qty with confirm stock from vbep first.
      AVAL_STOCK = LS_ATPCSX-SUMZG - ( LS_ATPCSX-SUMBA - BMENG ).
    ENDIF.

  ENDMETHOD.


  METHOD BDC_DYNPRO.
    DATA LS_BDCDATA TYPE BDCDATA.
    LS_BDCDATA-PROGRAM  = PROGRAM.
    LS_BDCDATA-DYNPRO   = DYNPRO.
    LS_BDCDATA-DYNBEGIN = 'X'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
  ENDMETHOD.


  METHOD BDC_FIELD.
    DATA: LS_BDCDATA TYPE BDCDATA.
    IF FVAL <> '/'.
      LS_BDCDATA-FNAM = FNAM.
      LS_BDCDATA-FVAL = FVAL.
      APPEND LS_BDCDATA TO GT_BDCDATA.
    ENDIF.
  ENDMETHOD.


  METHOD BILLING_SCHEDULE_SAVE.

    DATA :
      LI_FPLA_OLD     TYPE TABLE OF FPLAVB,
      LI_FPLA_OLD_ALL TYPE TABLE OF FPLAVB,
      LI_FPLT_OLD     TYPE TABLE OF FPLTVB,
      LI_FPLT_OLD_ALL TYPE TABLE OF FPLTVB,
      LI_FPLA_NEW     TYPE TABLE OF FPLAVB,
      LI_FPLA_NEW_ALL TYPE TABLE OF FPLAVB,
      LI_FPLT_NEW     TYPE TABLE OF FPLTVB,
      LI_FPLT_NEW_ALL TYPE TABLE OF FPLTVB,
      LS_FPLT_NEW     TYPE FPLTVB.
*      LS_FPLT_OLD     TYPE FPLTVB.

    DATA : LV_FPLNR TYPE FPLNR,
           LV_FPLTR TYPE FPLTR.

    DATA : LS_FPLA_OLD TYPE FPLAVB,
           LS_FPLA_NEW TYPE FPLAVB.
*           LS_FPLA     TYPE FPLA.


    SELECT FPLNR INTO TABLE @DATA(LT_FPLA)
      FROM FPLA
     WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
       AND RFPLN <> @SPACE.
    IF SY-SUBRC = 0.
      SELECT FPLNR,FPLTR INTO TABLE @DATA(LT_FPLT)
        FROM FPLT
         FOR ALL ENTRIES IN @LT_FPLA
       WHERE FPLNR = @LT_FPLA-FPLNR.
      IF SY-SUBRC = 0.
        SORT LT_FPLT BY FPLTR.
        DELETE ADJACENT DUPLICATES FROM LT_FPLT COMPARING FPLTR.
      ENDIF.
*Check status, if status = C  (completed) -> no need to update
      READ TABLE LT_FPLA INTO DATA(LS_FPLA) INDEX 1.
      IF SY-SUBRC = 0.
        CLEAR: LI_FPLA_OLD,LI_FPLT_OLD,LI_FPLT_NEW,LS_FPLT_NEW.
        CALL FUNCTION 'BILLING_SCHEDULE_READ'
          EXPORTING
            FPLNR = LS_FPLA-FPLNR
*           I_VFKDAT       =
*           I_BFKDAT       =
          TABLES
            ZFPLA = LI_FPLA_OLD
            ZFPLT = LI_FPLT_OLD.

        APPEND LINES OF LI_FPLA_OLD TO LI_FPLA_NEW_ALL.
        APPEND LINES OF LI_FPLA_OLD TO LI_FPLA_OLD_ALL.

        APPEND LINES OF LI_FPLT_OLD TO LI_FPLT_OLD_ALL.
      ENDIF.
    ENDIF.
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE1 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL.
      READ TABLE LI_FPLT_OLD INTO DATA(LS_FPLT_OLD) INDEX 1.
      IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF <> 'C'.
        MOVE-CORRESPONDING LS_FPLT_OLD TO LS_FPLT_NEW.
        LS_FPLT_NEW-UPDKZ   = 'U'.
        LS_FPLT_NEW-AFDAT   = |{ CS_SALESORDER-BILLINGPLANSTARTDATE1+6(4) }{ CS_SALESORDER-BILLINGPLANSTARTDATE1+3(2) }{ CS_SALESORDER-BILLINGPLANSTARTDATE1+0(2) }| .
        APPEND LS_FPLT_NEW TO LI_FPLT_NEW_ALL.
      ENDIF.
    ENDIF.
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE2 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL.
      READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD INDEX 2.
      IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF <> 'C'.
        MOVE-CORRESPONDING LS_FPLT_OLD TO LS_FPLT_NEW.
        LS_FPLT_NEW-UPDKZ   = 'U'.
        LS_FPLT_NEW-AFDAT   = |{ CS_SALESORDER-BILLINGPLANSTARTDATE2+6(4) }{ CS_SALESORDER-BILLINGPLANSTARTDATE2+3(2) }{ CS_SALESORDER-BILLINGPLANSTARTDATE2+0(2) }| .
        APPEND LS_FPLT_NEW TO LI_FPLT_NEW_ALL.
      ENDIF.
    ENDIF.
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE3 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL.
      READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD INDEX 3.
      IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF <> 'C'.
        MOVE-CORRESPONDING LS_FPLT_OLD TO LS_FPLT_NEW.
        LS_FPLT_NEW-UPDKZ   = 'U'.
        LS_FPLT_NEW-AFDAT   = |{ CS_SALESORDER-BILLINGPLANSTARTDATE3+6(4) }{ CS_SALESORDER-BILLINGPLANSTARTDATE3+3(2) }{ CS_SALESORDER-BILLINGPLANSTARTDATE3+0(2) }| .
        APPEND LS_FPLT_NEW TO LI_FPLT_NEW_ALL.
      ENDIF.
    ENDIF.
    IF LI_FPLT_NEW_ALL IS NOT INITIAL.
      CALL FUNCTION 'BILLING_SCHEDULE_SAVE'
        TABLES
          FPLA_NEW = LI_FPLA_NEW_ALL
          FPLA_OLD = LI_FPLA_OLD_ALL
          FPLT_NEW = LI_FPLT_NEW_ALL
          FPLT_OLD = LI_FPLT_OLD_ALL.

      COMMIT WORK AND WAIT.
    ENDIF.
*CS_SALESORDER-SBILLINGPLANSTARTDATE2
*CS_SALESORDER-SBILLINGPLANAMOUNT2
*CS_SALESORDER-SBILLINGPLANSTARTDATE3
*CS_SALESORDER-SBILLINGPLANAMOUNT3
*CS_SALESORDER-SBILLINGPLANSTARTDATE4
*CS_SALESORDER-SBILLINGPLANAMOUNT4
*CS_SALESORDER-SBILLINGPLANSTARTDATE5
*CS_SALESORDER-SBILLINGPLANAMOUNT5
*CS_SALESORDER-SBILLINGPLANSTARTDATE6
*CS_SALESORDER-SBILLINGPLANAMOUNT6
*CS_SALESORDER-SBILLINGPLANSTARTDATE7
*CS_SALESORDER-SBILLINGPLANAMOUNT7
*CS_SALESORDER-SBILLINGPLANSTARTDATE8
*CS_SALESORDER-SBILLINGPLANAMOUNT8
*CS_SALESORDER-SBILLINGPLANSTARTDATE9
*CS_SALESORDER-SBILLINGPLANAMOUNT9
*CS_SALESORDER-SBILLINGPLANSTARTDATE10
*CS_SALESORDER-SBILLINGPLANAMOUNT10
*CS_SALESORDER-SBILLINGPLANSTARTDATE11
*CS_SALESORDER-SBILLINGPLANAMOUNT11
*CS_SALESORDER-SBILLINGPLANSTARTDATE12
*CS_SALESORDER-SBILLINGPLANAMOUNT12

  ENDMETHOD.


  METHOD GET_CONSTANTS.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / GET_CONSTANTS
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Get general constants from table ZSDSCAC001
*  Purpose            : Get general constants from table ZSDSCAC001
*                       Maintenance view: ZSDSV_GEN_C
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LV_MSG TYPE ZSDSDE_REST_MESSAGE.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'SALESORG'
                                          IMPORTING ET_RANGE = GRT_SALESORG ).
    IF GRT_SALESORG IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T01.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'DIVISION'
                                          IMPORTING ET_RANGE = GRT_DIVISION ).
    IF GRT_DIVISION IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T02.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'COMPANYCODE'
                                          IMPORTING ET_RANGE = GRT_COMPANYCODE ).
    IF GRT_COMPANYCODE IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T03.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'ONETIMECUST'
                                          IMPORTING ET_RANGE = GRT_ONETIMECUST ).
    IF GRT_ONETIMECUST IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T04.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'SALESTYPEPRJ'
                                          IMPORTING ET_RANGE = GRT_SALESTYPEPRJ ).
    IF GRT_SALESTYPEPRJ IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T05.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'ITEMCATBILLINGPLAN'
                                          IMPORTING ET_RANGE = GRT_ITEMCATBILLINGPLAN ).
    IF GRT_ITEMCATBILLINGPLAN IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T06.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'SALESTYPEPRJ_ITEMCAT'
                                          IMPORTING ET_RANGE = GRT_SALESTYPEPRJ_ITEMCAT ).
    IF GRT_SALESTYPEPRJ_ITEMCAT IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T07.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'CONDITION_TYPE'
                                          IMPORTING ET_RANGE = GRT_CONDITION_TYPE ).
    IF GRT_CONDITION_TYPE IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T08.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C_RANGE( EXPORTING IF_REPID = 'ZCL_SDSSD_CREATE_CHANGE_SO_SRV'
                                                    IF_PARAM = 'ITEMCAT_HEADER_BOM'
                                          IMPORTING ET_RANGE = GRT_ITEMCAT_HEADER_BOM ).
    IF GRT_ITEMCAT_HEADER_BOM IS INITIAL.
      LV_MSG = TEXT-E01.
      REPLACE '&' IN LV_MSG WITH TEXT-T10.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = LV_MSG
                        CHANGING CT_RESPONSE = CT_RESPONSE ).
    ENDIF.
  ENDMETHOD.


  METHOD GET_CREDIT_MESSAGE.

    DATA: LV_SUBRC                TYPE SYSUBRC,
          LS_CREDIT_VALUE         TYPE ZSDSFIS133,
          LT_VBAP                 TYPE VA_VBAPVB_T,
          LT_MESSAGE              TYPE UKM_T_PI_CREDIT_MESSAGE,
*          LV_CREDIT_DATE          TYPE BAPI_MSG,
          LT_FSCM_CREDIT_MESSAGES TYPE UKM_T_PI_CREDIT_MESSAGE.

    IF ZCL_SDSFICM_UKM_SD_FSCM=>CHECK_ACTIVE_WBS_ORDER_TYPE( AUART ) = ABAP_TRUE.
      IMPORT CREDIT_MESSAGE = LT_FSCM_CREDIT_MESSAGES  FROM MEMORY ID 'ZSDS_FSCM'.
      LOOP AT LT_FSCM_CREDIT_MESSAGES INTO DATA(LS_MESSAGE) ##INTO_OK.
        IF SY-TABIX = 1.
          MESSAGE = LS_MESSAGE-MSG_TEXT.
          MESSAGE_STATUS = 'W'.
        ELSE.
          CONCATENATE MESSAGE LS_MESSAGE-MSG_TEXT INTO MESSAGE SEPARATED BY '/'.
        ENDIF.
      ENDLOOP.
      FSCM_CREDIT_MESSAGES = LT_FSCM_CREDIT_MESSAGES.
    ENDIF.

  ENDMETHOD.                                             "#EC CI_VALPAR


  METHOD GET_ITEM_SCHEDULE_LINE.

    DATA: LV_ITEM          TYPE STRING,
          LV_SCHEDULE_LINE TYPE STRING,
          LO_REGEX         TYPE REF TO CL_ABAP_REGEX,
          LO_MATCHER       TYPE REF TO CL_ABAP_MATCHER.

    SELECT SINGLE TEXT
      FROM T100
     WHERE SPRSL = 'E'
       AND ARBGB = @MESSAGE_ID
       AND MSGNR = @MESSAGE_NUMBER
      INTO @DATA(LV_TEXT).
    IF SY-SUBRC = 0.
      REPLACE '&1' IN LV_TEXT WITH '(\d+)'.
      REPLACE '&2' IN LV_TEXT WITH '(\d+)'.
      " Define the regular expression pattern
      " (\d+) matches any sequence of digits
      LO_REGEX = CL_ABAP_REGEX=>CREATE_POSIX( PATTERN = LV_TEXT ) ##REGEX_POSIX."

      " Create the matcher object
      LO_MATCHER = LO_REGEX->CREATE_MATCHER( TEXT = MESSAGE ).

      " Find all matches and store them in lt_matches
      IF LO_MATCHER->MATCH( ) = ABAP_TRUE.
        CALL METHOD LO_MATCHER->GET_SUBMATCH
          EXPORTING
            INDEX    = 1
          RECEIVING
            SUBMATCH = LV_ITEM.

        CALL METHOD LO_MATCHER->GET_SUBMATCH
          EXPORTING
            INDEX    = 2
          RECEIVING
            SUBMATCH = LV_SCHEDULE_LINE.
        ITEM_NO = LV_ITEM.
        SCHEDULE_LINE_NO  = LV_SCHEDULE_LINE.

      ENDIF.
    ENDIF.
  ENDMETHOD. "#EC CI_VALPAR


  METHOD PROCESS_DATA.
*CALL METHOD SUPER->PROCESS_DATA
*  EXPORTING
*    IREF_REQUEST_DATA  =
**  IMPORTING
**    EREF_RESPONSE_DATA =
**    EF_STATUS          =
**    EF_MESSAGE         =
**    EF_HTTP_ERROR      =
*    .


    DATA: LS_REQUEST            TYPE ZSDSSDS017,
          LS_REQUEST_OLD        TYPE ZSDSSDS017  ##NEEDED,
          LS_SALESORDER_OLD     TYPE ZSDSSDS014,
          LS_SALESORDER         TYPE ZSDSSDS048,
          LT_BILLINGPLAN        TYPE ZSDSSDS047_TT,
          LT_SALESORDERITEM     TYPE ZSDSSDS015_TT,
          LT_SALESORDERITEM_OLD TYPE ZSDSSDS015_TT ##NEEDED,
          LT_SCHEDULELINE       TYPE ZSDSSDS016_TT,
          LT_SCHEDULELINE_TMP   TYPE ZSDSSDS016_TT,
          LT_SCHEDULELINE_OLD   TYPE ZSDSSDS016_TT ##NEEDED.

    FIELD-SYMBOLS: <L_RESPONSE> TYPE ZSDSSDS017.

* Initialize Output
    CLEAR: EF_STATUS,
           EF_MESSAGE,
           EF_HTTP_ERROR.

    LS_REQUEST = IREF_REQUEST_DATA->*.

    ASSIGN EREF_RESPONSE_DATA->* TO <L_RESPONSE>.
    IF SY-SUBRC NE 0.
*   Critical error
      RETURN.
    ENDIF.

    LS_REQUEST_OLD = LS_REQUEST.

*//Transform structure
    MOVE-CORRESPONDING LS_REQUEST TO LS_SALESORDER_OLD.
    MOVE-CORRESPONDING LS_REQUEST TO LS_SALESORDER.
    MOVE-CORRESPONDING LS_REQUEST-BILLINGPLAN TO LT_BILLINGPLAN.
    LOOP AT LT_BILLINGPLAN ASSIGNING FIELD-SYMBOL(<LFS_BILLINGPLAN>).
      CASE SY-TABIX.
        WHEN 1.
          LS_SALESORDER-BILLINGPLANSTARTDATE1 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT1 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 2.
          LS_SALESORDER-BILLINGPLANSTARTDATE2 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT2 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 3.
          LS_SALESORDER-BILLINGPLANSTARTDATE3 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT3 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 4.
          LS_SALESORDER-BILLINGPLANSTARTDATE4 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT4 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 5.
          LS_SALESORDER-BILLINGPLANSTARTDATE5 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT5 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 6.
          LS_SALESORDER-BILLINGPLANSTARTDATE6 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT6 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 7.
          LS_SALESORDER-BILLINGPLANSTARTDATE7 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT7 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 8.
          LS_SALESORDER-BILLINGPLANSTARTDATE8 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT8 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 9.
          LS_SALESORDER-BILLINGPLANSTARTDATE9 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT9 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 10.
          LS_SALESORDER-BILLINGPLANSTARTDATE10 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT10 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 11 ##NUMBER_OK.
          LS_SALESORDER-BILLINGPLANSTARTDATE11 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT11 = <LFS_BILLINGPLAN>-AMOUNT.
        WHEN 12 ##NUMBER_OK.
          LS_SALESORDER-BILLINGPLANSTARTDATE12 = <LFS_BILLINGPLAN>-BILLINGDATE.
          LS_SALESORDER-BILLINGPLANAMOUNT12 = <LFS_BILLINGPLAN>-AMOUNT.
      ENDCASE.
    ENDLOOP.

    MOVE-CORRESPONDING LS_REQUEST-SALESORDERITEM[] TO LT_SALESORDERITEM_OLD.
    MOVE-CORRESPONDING LS_REQUEST-SALESORDERITEM[] TO LT_SALESORDERITEM.

    LT_SCHEDULELINE_OLD = LT_SCHEDULELINE.

*// Main Program
    SALES_ORDER_PROCESS(
      EXPORTING
        IF_TESTRUN        = ''
      IMPORTING
        EF_SALES_DOC      = LS_SALESORDER-SAPSALESORDERNO
      CHANGING
        CS_SALESORDER     = LS_SALESORDER
        CT_SALESORDERITEM = LT_SALESORDERITEM
        CT_SCHEDULELINE   = LT_SCHEDULELINE
        CT_RESPONSE       = <L_RESPONSE>-RESPONSE ).


*//Output to SFDC
    "Header
    MOVE-CORRESPONDING LS_SALESORDER TO <L_RESPONSE>.
    <L_RESPONSE>-CREATEDATE           = LS_SALESORDER_OLD-CREATEDATE.
    <L_RESPONSE>-BILLINGPLANSTARTDATE = LS_SALESORDER_OLD-BILLINGPLANSTARTDATE.

    "Item
    MOVE-CORRESPONDING LT_SALESORDERITEM TO <L_RESPONSE>-SALESORDERITEM.
    LOOP AT <L_RESPONSE>-SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_SALESORDERITEM>).
      LT_SCHEDULELINE_TMP = LT_SCHEDULELINE.
      DELETE LT_SCHEDULELINE_TMP WHERE  SAPITEMNUMBER <> <LFS_SALESORDERITEM>-SAPITEMNUMBER.
      <LFS_SALESORDERITEM>-SCHEDULELINE = LT_SCHEDULELINE_TMP.
    ENDLOOP.

    "Billing Plan
    LOOP AT LT_BILLINGPLAN ASSIGNING <LFS_BILLINGPLAN>.
      <LFS_BILLINGPLAN>-SAPBILLINGID = LS_SALESORDER-SAPBILLINGID.
    ENDLOOP.
    MOVE-CORRESPONDING LT_BILLINGPLAN TO <L_RESPONSE>-BILLINGPLAN.


* Assign Log status from Response structure
    IF <L_RESPONSE>-RESPONSESTATUS EQ 'W'.
      <L_RESPONSE>-RESPONSESTATUS = 'S'.
    ENDIF.

    EF_STATUS  = <L_RESPONSE>-RESPONSESTATUS.
    EF_MESSAGE = <L_RESPONSE>-RESPONSEMESSAGE.

    DATA : LS_TMP LIKE LINE OF <L_RESPONSE>-RESPONSE.

    LS_TMP-RESP_STATUS = 'S'.
    MODIFY <L_RESPONSE>-RESPONSE FROM LS_TMP TRANSPORTING RESP_STATUS
                                             WHERE RESP_STATUS EQ 'W'.

    IF <L_RESPONSE>-RESPONSESTATUS EQ 'S'.
      DATA(LV_MESSAGE) = LCL_DATA=>CHECK_CO_CONFIRM_QTY( LS_SALESORDER-SFSALESORDERNO ).
      IF LV_MESSAGE IS NOT INITIAL.
        CONCATENATE EF_MESSAGE LV_MESSAGE INTO EF_MESSAGE SEPARATED BY SPACE.
      ENDIF.
      LCL_DATA=>UPDATE_CONFIRM_QTY( I_DATA = LT_SALESORDERITEM
                                    I_HEAD = LS_SALESORDER ).
    ENDIF.

* If not partial error, error for whole service
*    IF LF_PARTIAL_ERROR IS INITIAL AND
*       EF_STATUS EQ ZCL_SDSCA_REST_INTF_UTILITY=>GC_ERROR.
*      EF_HTTP_ERROR = 'X'.
*    ENDIF.

  ENDMETHOD.


  METHOD SALES_ORDER_CHANGE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV
*  Creation Date      : 16.05.2024
*  Author             : Zulkiff B.(Eviden)
*  Add-on ID          : N/A
*  Description        : CHANGE SALES ORDER
*  Purpose            :
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------
*  04.03.2025  420000464   Zulkiff B.  Add credit status
*  19.03.2025  420000498   Zulkiff B.  Adjust header message
*                                      Add credit status to header message
*-----------------------------------------------------------------------

    DATA:
      LT_ITEM                  TYPE STANDARD TABLE OF BAPISDITM,
      LT_ITEMX                 TYPE STANDARD TABLE OF BAPISDITMX,
      LS_ITEMX                 TYPE BAPISDITMX,
      LT_ITEM_DEL_WBS          TYPE STANDARD TABLE OF BAPISDITM,
      LT_ITEMX_DEL_WBS         TYPE STANDARD TABLE OF BAPISDITMX,
      LT_RETURN                TYPE STANDARD TABLE OF BAPIRET2,
      LT_RETURN_DEL_WBS        TYPE STANDARD TABLE OF BAPIRET2,
      LT_PARTNERS              TYPE STANDARD TABLE OF BAPIPARNR,
      LT_PARTNERADDRESSES      TYPE STANDARD TABLE OF BAPIADDR1,
      LS_PARTNERADDRESSES      TYPE BAPIADDR1,
      LT_PARTNERCHANGES        TYPE STANDARD TABLE OF BAPIPARNRC,
      LS_PARTNERCHANGES        TYPE BAPIPARNRC,
      LT_ITEMS_COND            TYPE STANDARD TABLE OF BAPICOND,
      LT_ITEMS_CONDX           TYPE STANDARD TABLE OF BAPICONDX,
      LT_SCHEDULE_LINES        TYPE STANDARD TABLE OF BAPISCHDL,
      LT_SCHEDULE_LINESX       TYPE STANDARD TABLE OF BAPISCHDLX,
      LT_TEXTS                 TYPE STANDARD TABLE OF BAPISDTEXT,
      LS_BAPE_VBAP             TYPE BAPE_VBAP,
      LS_BAPE_VBAPX            TYPE BAPE_VBAPX,
      LS_BAPE_VBAK             TYPE BAPE_VBAK,
      LS_BAPE_VBAKX            TYPE BAPE_VBAKX,
      LS_EXTENSIONIN           TYPE BAPIPAREX,
      LT_EXTENSIONIN           TYPE BAPIPAREX_T,
      LS_HEADER                TYPE BAPISDH1,
      LS_HEADERX               TYPE BAPISDH1X,
      LV_SALES_UNIT_CONV       TYPE VRKME,
      LS_RESPONSE              TYPE ZSDSCAS006,
      LV_ONETIME_FLAG          TYPE C,
      LS_VBPA3KOM              TYPE VBPA3KOM,
      LT_VBPA3KOM              TYPE STANDARD TABLE OF VBPA3KOM,
      LV_SALESORG              TYPE VKORG,
      LV_DIVISION              TYPE SPART    ##NEEDED,
      LT_CONDITION_ITEM        TYPE ZSDSSDS006_TT,
      LV_BILLPLAN_HD_FLAG      TYPE CHAR1,
      LV_BDC_FLAG              TYPE CHAR1,
      LS_RETURN_MSG            TYPE ZSDSSDS110 ##NEEDED,
      LT_RETURN_MSG            TYPE STANDARD TABLE OF ZSDSSDS110,
      LT_WMDVSX                TYPE TABLE OF BAPIWMDVS,
      LT_WMDVEX                TYPE TABLE OF BAPIWMDVE,
      LV_PLANT                 TYPE BAPIMATVP-WERKS,
      LV_MATERIAL              TYPE MATNR40, "BAPI_MRP_MAT_PARAM-MATERIAL_LONG, "MATNR18,
      LV_UNIT                  TYPE BAPIADMM-UNIT,
      LV_REQ_DLV_BL            TYPE LIFSP_EP,
      LV_SCHED_TYPE            TYPE ETTYP,
      LV_AV_QTY_PLT            TYPE SUMIS, "BAPICM61V-WKBST,
      LS_MRP_STOCK_DETAIL      TYPE BAPI_MRP_STOCK_DETAIL,
      LV_CREDIT_MESSAGE        TYPE TEXT1024,
      LV_CREDIT_MESSAGE_STATUS TYPE MSGTY,
      LT_FSCM_CREDIT_MESSAGES  TYPE UKM_T_PI_CREDIT_MESSAGE,
      LV_BOM                   TYPE C.


*Constants
    READ TABLE GRT_SALESORG INTO DATA(LR_SALESORG) INDEX 1.
    IF SY-SUBRC = 0.
      LV_SALESORG = LR_SALESORG-LOW.
    ENDIF.

    READ TABLE GRT_DIVISION INTO DATA(LR_DIVISION) INDEX 1.
    IF SY-SUBRC = 0.
      LV_DIVISION = LR_DIVISION-LOW.
    ENDIF.


    "Header
    LS_HEADER-DOC_DATE  = COND #( WHEN CS_SALESORDER-CREATEDATE IS NOT INITIAL THEN CS_SALESORDER-CREATEDATE ).
    LS_HEADER-PURCH_NO_C  = COND #( WHEN CS_SALESORDER-PONUMBER IS NOT INITIAL THEN CS_SALESORDER-PONUMBER ).
    LS_HEADER-PMNTTRMS  = COND #( WHEN CS_SALESORDER-PAYMENTTERMS IS NOT INITIAL THEN CS_SALESORDER-PAYMENTTERMS ).

    LS_HEADERX-UPDATEFLAG  = 'U'.
    LS_HEADERX-DOC_DATE    = COND #( WHEN CS_SALESORDER-CREATEDATE IS NOT INITIAL THEN ABAP_TRUE ).
    LS_HEADERX-PURCH_NO_C   = COND #( WHEN CS_SALESORDER-PONUMBER IS NOT INITIAL THEN ABAP_TRUE ).
    LS_HEADERX-PMNTTRMS   = COND #( WHEN CS_SALESORDER-PAYMENTTERMS IS NOT INITIAL THEN ABAP_TRUE ).

    "Partner
    SELECT SINGLE KUNNR,VKORG,VTWEG,SPART,WAERS
      FROM KNVV
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER
       AND VKORG = @LV_SALESORG
       AND VTWEG = '00'  "Common
       AND SPART = '00'  "Common
      INTO @DATA(LS_KNVV).

    SELECT VBELN,POSNR,PARVW,KUNNR,ADRNR
      FROM VBPA
     WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
      AND  POSNR = '000000'
      INTO TABLE @DATA(LT_VBPA).
    IF SY-SUBRC = 0.
      SELECT SINGLE KUNNR,ADRNR,KTOKD INTO @DATA(LS_KNA1)
        FROM KNA1
       WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER.
      IF SY-SUBRC = 0.
        LOOP AT LT_VBPA INTO DATA(LS_VBPA).
          CLEAR: LS_PARTNERCHANGES.

          CASE LS_VBPA-PARVW.
            WHEN 'AG'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPSOLDTONUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPSOLDTONUMBER ALPHA = IN }|.

                IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
                  LS_PARTNERCHANGES-ADDR_LINK = LS_VBPA-ADRNR.
                  LV_ONETIME_FLAG = ABAP_TRUE.
                ENDIF.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'RE'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPBILLTONUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPBILLTONUMBER ALPHA = IN }|.

                IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
                  LS_PARTNERCHANGES-ADDR_LINK = LS_VBPA-ADRNR.
                  LV_ONETIME_FLAG = ABAP_TRUE.
                ENDIF.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'RG'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPPAYERNUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPPAYERNUMBER ALPHA = IN }|.

                IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
                  LS_PARTNERCHANGES-ADDR_LINK = LS_VBPA-ADRNR.
                  LV_ONETIME_FLAG = ABAP_TRUE.
                ENDIF.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'WE'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPSHIPTONUMBER.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPSHIPTONUMBER ALPHA = IN }|.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
            WHEN 'VE'.
              IF LS_VBPA-KUNNR <> CS_SALESORDER-BPSALESEMPLOYEE.
                LS_PARTNERCHANGES-DOCUMENT   = CS_SALESORDER-SAPSALESORDERNO.
                LS_PARTNERCHANGES-ITM_NUMBER = LS_VBPA-POSNR.
                LS_PARTNERCHANGES-UPDATEFLAG = 'U'.
                LS_PARTNERCHANGES-PARTN_ROLE = LS_VBPA-PARVW.
                LS_PARTNERCHANGES-P_NUMB_OLD = LS_VBPA-KUNNR.
                LS_PARTNERCHANGES-P_NUMB_NEW = |{ CS_SALESORDER-BPSALESEMPLOYEE ALPHA = IN }|.
                APPEND LS_PARTNERCHANGES TO LT_PARTNERCHANGES.
              ENDIF.
          ENDCASE.
        ENDLOOP.
      ENDIF.
    ENDIF.
    IF LV_ONETIME_FLAG = ABAP_TRUE.
      READ TABLE LT_VBPA INTO LS_VBPA  WITH KEY PARVW = 'AG'.
      IF SY-SUBRC = 0.
        LS_PARTNERADDRESSES-ADDR_NO = LS_VBPA-ADRNR.
      ENDIF.

      LS_PARTNERADDRESSES-NAME         = CS_SALESORDER-ONETIMENAME1.
      LS_PARTNERADDRESSES-NAME_2       = CS_SALESORDER-ONETIMENAME2.
      LS_PARTNERADDRESSES-NAME_3       = CS_SALESORDER-ONETIMENAME3.
      LS_PARTNERADDRESSES-NAME_4       = CS_SALESORDER-ONETIMENAME4.
      LS_PARTNERADDRESSES-STREET       = CS_SALESORDER-STREET.
      LS_PARTNERADDRESSES-STR_SUPPL3   = CS_SALESORDER-STREET4.
      LS_PARTNERADDRESSES-LOCATION     = CS_SALESORDER-STREET5.
      LS_PARTNERADDRESSES-STR_SUPPL1   = CS_SALESORDER-STREET2.
      LS_PARTNERADDRESSES-STR_SUPPL2   = CS_SALESORDER-STREET3.
      LS_PARTNERADDRESSES-DISTRICT     = CS_SALESORDER-DISTRICT.
      LS_PARTNERADDRESSES-CITY         = CS_SALESORDER-CITY.
      LS_PARTNERADDRESSES-POSTL_COD1   = CS_SALESORDER-POSTALCODE.
      APPEND LS_PARTNERADDRESSES TO LT_PARTNERADDRESSES.

    ENDIF.

* HD Texts
    CLEAR: LT_TEXTS.

    IF CS_SALESORDER-HDTEXTREASON IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH01'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTREASON ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTLOCATION IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH03'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTLOCATION ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTPROJECTTEXT IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH06'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTPROJECTTEXT ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTREQUESTREMARK IS NOT INITIAL.
      DATA: LV_HDTEXTREQUESTREMARK TYPE MS_RFC0800.
      LV_HDTEXTREQUESTREMARK = CS_SALESORDER-HDTEXTREQUESTREMARK.
      APPEND_TEXT(
        EXPORTING
          TEXT_ID    = 'ZH10'
          LANGU      = 'E'
          TEXT_LINE  = LV_HDTEXTREQUESTREMARK
        IMPORTING
          TEXTS      = LT_TEXTS ).
    ENDIF.

    IF CS_SALESORDER-HDTEXTCOMMENT IS  NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH13'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTCOMMENT ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTPERSONINCHARGENAME IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH15'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTPERSONINCHARGENAME ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTCONTACTPERSON IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH19'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTCONTACTPERSON ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-LANDNUMBER IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH11'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-LANDNUMBER ) TO LT_TEXTS.
    ENDIF.

*Tax3 one-time customer
*(PARTN_ROLE) = ‘SP’ Sold-to  AG
*(PARTN_ROLE) = ‘BP’ Bill-to  RE
*(PARTN_ROLE) = ‘PY’ Payer    RG
    IF CS_SALESORDER-TAXNO IS NOT INITIAL.
      DO 3 TIMES.
        CLEAR LS_VBPA3KOM.

        LS_VBPA3KOM-POSNR = '000000'.

        CASE SY-INDEX.
          WHEN 1.
            LS_VBPA3KOM-PARVW = 'AG'.
          WHEN 2.
            LS_VBPA3KOM-PARVW = 'RE'.
          WHEN 3.
            LS_VBPA3KOM-PARVW = 'RG'.
        ENDCASE.

        LS_VBPA3KOM-STCD3 = CS_SALESORDER-TAXNO.

        APPEND LS_VBPA3KOM TO LT_VBPA3KOM.

      ENDDO.
    ENDIF.

    IF LT_VBPA3KOM IS NOT INITIAL.
      "Export to MV45AFZZ  FORM USEREXIT_SAVE_DOCUMENT_PREPARE.
      EXPORT LT_VBPA3KOM FROM LT_VBPA3KOM TO MEMORY ID 'ONETIMECUST_TAX3'.
    ENDIF.


*Billing Plan Header
    CLEAR: LV_BILLPLAN_HD_FLAG.
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.

      LV_BILLPLAN_HD_FLAG = 'X'.
    ENDIF.

    CLEAR LS_EXTENSIONIN.
    LS_BAPE_VBAK-VBELN          = CS_SALESORDER-SAPSALESORDERNO.
    LS_BAPE_VBAK-ZZPOB          = CS_SALESORDER-POB.
    LS_BAPE_VBAK-ZZWARRANTY_L   = CS_SALESORDER-WARRANTYLETTER.
    LS_BAPE_VBAK-ZZRUNNING      = CS_SALESORDER-RUNNING .

    LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAK'.
    APPEND_EXTENSION(
      EXPORTING
        BAPE_STRUCTURE = LS_BAPE_VBAK
      CHANGING
        EXTENSIONIN   = LS_EXTENSIONIN
        EXTENSIONIN_T = LT_EXTENSIONIN
   ).
    CLEAR LS_EXTENSIONIN.
    LS_BAPE_VBAKX-VBELN         = CS_SALESORDER-SAPSALESORDERNO.
    LS_BAPE_VBAKX-ZZPOB         = 'X'.
    LS_BAPE_VBAKX-ZZWARRANTY_L  = 'X'.
    LS_BAPE_VBAKX-ZZRUNNING     = 'X'.

    LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAKX'.
    APPEND_EXTENSION(
      EXPORTING
        BAPE_STRUCTURE = LS_BAPE_VBAKX
      CHANGING
        EXTENSIONIN   = LS_EXTENSIONIN
        EXTENSIONIN_T = LT_EXTENSIONIN
   ).


*-------- Item ------------------------
    CLEAR: LT_ITEM,LT_CONDITION_ITEM.

    SELECT VBELN,POSNR,PS_PSP_PNR FROM VBAP
      WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
      INTO TABLE @DATA(LT_VBAP).
    IF SY-SUBRC = 0.
      SORT LT_VBAP BY VBELN POSNR.
    ENDIF.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).

      "25/11/2024 if schedule line item has already been create DO, skip the item.
      SELECT SINGLE VBELV,POSNV,VBELN,POSNN,VBTYP_N
        FROM VBFA
       WHERE VBELV = @CS_SALESORDER-SAPSALESORDERNO
         AND POSNV = @<LFS_ITEM>-SAPITEMNUMBER
         AND VBTYP_N = 'J'
        INTO @DATA(LS_VBFA).
      IF SY-SUBRC = 0.
        "09/12/2025 additional requirement: if schedule line item has already been create DO but
        "there are some schedule line not deliver, it can be changed item and schedule line.
        SELECT SINGLE VBELN,POSNR,ETENR,EDATU,WMENG,DLVQTY_BU
          FROM VBEP
       WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
         AND POSNR = @<LFS_ITEM>-SAPITEMNUMBER
         AND DLVQTY_BU = 0
        INTO @DATA(LS_VBEP_CHK_DO).
        IF SY-SUBRC <> 0.
          READ TABLE CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WITH KEY SAPITEMNUMBER = <LFS_ITEM>-SAPITEMNUMBER
                                                                                         FLAG = 'I' .
          IF SY-SUBRC <> 0.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

*Items
      "Convert Sales Unit to Internal Value
      IF <LFS_ITEM>-SALESUNIT IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            INPUT          = <LFS_ITEM>-SALESUNIT
          IMPORTING
            OUTPUT         = LV_SALES_UNIT_CONV
          EXCEPTIONS
            UNIT_NOT_FOUND = 1
            OTHERS         = 2.
        IF SY-SUBRC <> 0.
          CLEAR: LV_SALES_UNIT_CONV.
        ENDIF.
      ENDIF.

      READ TABLE LT_VBAP INTO DATA(LS_VBAP) WITH KEY VBELN = CS_SALESORDER-SAPSALESORDERNO
                                                     POSNR = <LFS_ITEM>-SAPITEMNUMBER           ##WARN_OK
                                                     BINARY SEARCH.
      IF SY-SUBRC = 0.

        APPEND VALUE #( ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER
                        REF_DOC     = CS_SALESORDER-REFERENCESDDOCUMENT
                        REF_DOC_IT  = <LFS_ITEM>-SAPITEMNUMBER
                        MATERIAL_LONG = <LFS_ITEM>-MATERIALNUMBER
                        HG_LV_ITEM  = <LFS_ITEM>-HIGHERLEVEL
                        TARGET_QTY  = <LFS_ITEM>-QUANTITY
                        SALES_UNIT  = LV_SALES_UNIT_CONV
                        PLANT       = <LFS_ITEM>-PLANT
                        STORE_LOC   = <LFS_ITEM>-STORAGELOCATION
                        ITEM_CATEG  = <LFS_ITEM>-ITEMCATEGORY
                        WBS_ELEM    = <LFS_ITEM>-WBS
                        REASON_REJ  = <LFS_ITEM>-REASONFORREJECT
                        )
                        TO LT_ITEM.

        CLEAR: LS_ITEMX.

        LS_ITEMX-UPDATEFLAG  = <LFS_ITEM>-FLAGITEM.
        LS_ITEMX-ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER.
        LS_ITEMX-REF_DOC     = ABAP_TRUE.
        LS_ITEMX-REF_DOC_IT  =  ABAP_TRUE.
        LS_ITEMX-MATERIAL_LONG  =  ABAP_TRUE.
        LS_ITEMX-HG_LV_ITEM  =  ABAP_TRUE.
        LS_ITEMX-TARGET_QTY  =  ABAP_TRUE.
        LS_ITEMX-SALES_UNIT  =  ABAP_TRUE.
        LS_ITEMX-PLANT       =  ABAP_TRUE.
        LS_ITEMX-STORE_LOC   =  ABAP_TRUE.
        IF <LFS_ITEM>-ITEMCATEGORY IN GRT_ITEMCAT_HEADER_BOM.
          LS_ITEMX-ITEM_CATEG  =  ABAP_FALSE.
        ELSE.
          LS_ITEMX-ITEM_CATEG  =  ABAP_TRUE.
        ENDIF.
        LS_ITEMX-WBS_ELEM    =  ABAP_TRUE.
        LS_ITEMX-REASON_REJ  =  ABAP_TRUE.
        APPEND LS_ITEMX TO LT_ITEMX.


*to avoid cost error when delete item with WBS, change wbs to space and update via BAPI
        IF <LFS_ITEM>-FLAGITEM = 'D' AND LS_VBAP-PS_PSP_PNR IS NOT INITIAL.
          APPEND VALUE #( ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER
                          REF_DOC_IT  = <LFS_ITEM>-SAPITEMNUMBER
                          WBS_ELEM    = SPACE
                          )
                          TO LT_ITEM_DEL_WBS.
          APPEND VALUE #( UPDATEFLAG  = 'U'
                          ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER
                          REF_DOC_IT  =  ABAP_TRUE
                          WBS_ELEM    =  ABAP_TRUE
                          )
                          TO LT_ITEMX_DEL_WBS.
        ENDIF.
      ELSE.
        IF <LFS_ITEM>-FLAGITEM = 'I'.
          APPEND VALUE #( ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER
                          REF_DOC     = CS_SALESORDER-REFERENCESDDOCUMENT
                          REF_DOC_IT  = <LFS_ITEM>-SAPITEMNUMBER
                          REF_DOC_CA  = 'B'
*                          MATERIAL    = <LFS_ITEM>-MATERIALNUMBER
                          MATERIAL_LONG  = <LFS_ITEM>-MATERIALNUMBER
                          HG_LV_ITEM  = <LFS_ITEM>-HIGHERLEVEL
                          TARGET_QTY  = <LFS_ITEM>-QUANTITY
                          SALES_UNIT  = LV_SALES_UNIT_CONV
                          PLANT       = <LFS_ITEM>-PLANT
                          STORE_LOC   = <LFS_ITEM>-STORAGELOCATION
                          ITEM_CATEG  = <LFS_ITEM>-ITEMCATEGORY
                          WBS_ELEM    = <LFS_ITEM>-WBS
                          REASON_REJ  = <LFS_ITEM>-REASONFORREJECT
                          )
                          TO LT_ITEM.
          APPEND VALUE #( UPDATEFLAG  = <LFS_ITEM>-FLAGITEM
                          ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER
                          REF_DOC     = ABAP_TRUE
                          REF_DOC_IT  = ABAP_TRUE
                          REF_DOC_CA  = ABAP_TRUE
*                          MATERIAL    =  ABAP_TRUE
                          MATERIAL_LONG   =  ABAP_TRUE
                          HG_LV_ITEM  =  ABAP_TRUE
                          TARGET_QTY  =  ABAP_TRUE
                          SALES_UNIT  =  ABAP_TRUE
                          PLANT       =  ABAP_TRUE
                          STORE_LOC   =  ABAP_TRUE
                          ITEM_CATEG  =  ABAP_TRUE      "Add item cat
                          WBS_ELEM    =  ABAP_TRUE
                          REASON_REJ  =  ABAP_TRUE
                          )
                          TO LT_ITEMX.
        ENDIF.
      ENDIF.
      IF <LFS_ITEM>-FLAGITEM = 'I' OR <LFS_ITEM>-FLAGITEM = 'U'.
*  Conditions
*ZDH6
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZDH6'
                        KBETR = <LFS_ITEM>-ONTOPDISCOUNTAMOUNT
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.
*ZPR1
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZPR1'
                        KBETR = <LFS_ITEM>-LISTPRICE
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI1' ITEM DISCOUNT (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZDI1'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTPER * 10
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI2' ITEM DISCOUNT (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZDI2'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTVAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD01' ITEM DISCOUNT LEVEL 1 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD01'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD02' ITEM DISCOUNT LEVEL 1 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD02'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD03' ITEM DISCOUNT LEVEL 2 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD03'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD04' ITEM DISCOUNT LEVEL 2 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD04'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD05' ITEM DISCOUNT LEVEL 3 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD05'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3PER * 10
                        ) TO LT_CONDITION_ITEM.

*'ZD06' ITEM DISCOUNT LEVEL 3 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD06'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD07' ITEM DISCOUNT LEVEL 4 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD07'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD08' ITEM DISCOUNT LEVEL 4 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD08'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD09' ITEM DISCOUNT LEVEL 5 (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD09'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5PER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZD10' ITEM DISCOUNT LEVEL 5 (VAL.)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZD10'
                        KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5VAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZSI1' SVItemDiscountPer (%)
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZSI1'
                        KBETR = <LFS_ITEM>-SVITEMDISCOUNTPER * 10
                         ) TO LT_CONDITION_ITEM.

*'ZSI2' SVItemDiscountVal
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZSI2'
                        KBETR = <LFS_ITEM>-SVITEMDISCOUNTVAL
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS1' Installation
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZPS1'
                        KBETR = <LFS_ITEM>-INSTALLATION
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS2' Maintenance
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZPS2'
                        KBETR = <LFS_ITEM>-MAINTENANCE
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS3' SLA
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZPS3'
                        KBETR = <LFS_ITEM>-SLA
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.
*'ZWR1' STDWarranty
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZWR1'
                        KBETR = <LFS_ITEM>-STDWARRANTY
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

**'ZWR2' ExtendWarranty
*        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
*                        KSCHL = 'ZWR2'
*                        KBETR = <LFS_ITEM>-EXTENDWARRANTY
*                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.
*'ZWR3' ExtendWarranty
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZWR3'
                        KBETR = <LFS_ITEM>-EXTENDWARRANTY
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS4' ModifyService
        APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                        KSCHL = 'ZPS4'
                        KBETR = <LFS_ITEM>-MODIFYSERVICE
                        WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.


      ELSEIF <LFS_ITEM>-FLAGITEM = 'D'.

*ZDH6
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZDH6'
                        COND_VALUE = <LFS_ITEM>-ONTOPDISCOUNTAMOUNT
                        CURRENCY   = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZDH6'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZPR1'
                        COND_VALUE = <LFS_ITEM>-LISTPRICE
                        CURRENCY   = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZPR1'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZDI1'
                        COND_VALUE    = <LFS_ITEM>-ITEMDISCOUNTPER * 10
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZDI1'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZDI2'
                        COND_VALUE    = <LFS_ITEM>-ITEMDISCOUNTVAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZDI2'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD01'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV1PER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD01'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD02'
                        COND_VALUE   = <LFS_ITEM>-ITEMDISCOUNTLV1VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD02'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD03'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV2PER * 10
                         ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD03'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD04'
                        COND_VALUE     = <LFS_ITEM>-ITEMDISCOUNTLV2VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD04'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD05'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV3PER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD05'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD06'
                        COND_VALUE     = <LFS_ITEM>-ITEMDISCOUNTLV3VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD06'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD07'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV4PER * 10
                         ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD07'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD08'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV4VAL
                        CURRENCY   = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD08'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD09'
                        COND_VALUE = <LFS_ITEM>-ITEMDISCOUNTLV5PER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD09'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD10'
                        COND_VALUE     = <LFS_ITEM>-ITEMDISCOUNTLV5VAL
                        CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZD10'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZSI1'
                        COND_VALUE = <LFS_ITEM>-SVITEMDISCOUNTPER * 10
                        ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZSI1'
                        COND_VALUE = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZSI2'
                        COND_VALUE = <LFS_ITEM>-SVITEMDISCOUNTVAL
                        CURRENCY   = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZSI2'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                         COND_TYPE  = 'ZPS1'
                         COND_VALUE     = <LFS_ITEM>-INSTALLATION
                         CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZPS1'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                         COND_TYPE  = 'ZPS2'
                         COND_VALUE     = <LFS_ITEM>-MAINTENANCE
                         CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZPS2'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                         COND_TYPE  = 'ZPS3'
                         COND_VALUE = <LFS_ITEM>-SLA
                         CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZPS3'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                         COND_TYPE  = 'ZWR1'
                         COND_VALUE = <LFS_ITEM>-STDWARRANTY
                         CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZWR1'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                         COND_TYPE  = 'ZWR3'
                         COND_VALUE = <LFS_ITEM>-EXTENDWARRANTY
                         CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZWR3'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.

        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                         COND_TYPE  = 'ZPS4'
                         COND_VALUE = <LFS_ITEM>-MODIFYSERVICE
                         CURRENCY = LS_KNVV-WAERS ) TO LT_ITEMS_COND.
        APPEND VALUE #( ITM_NUMBER = <LFS_ITEM>-SAPITEMNUMBER
                        COND_TYPE  = 'ZPS4'
                        COND_VALUE = ABAP_TRUE
                        CURRENCY   = ABAP_TRUE
                        UPDATEFLAG = 'D' ) TO LT_ITEMS_CONDX.
      ENDIF.

*Schedule line
      SELECT VBELN,POSNR,ETENR,ETTYP,LFREL,EDATU,EZEIT,WMENG,BMENG
        FROM VBEP
       WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
         AND POSNR = @<LFS_ITEM>-SAPITEMNUMBER
         AND WMENG <> 0
        INTO TABLE @DATA(LT_VBEP_CHK).
      LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_ITEM>-SAPITEMNUMBER.
        "14/11/2024 New Req: if Indicator = U and Delivery date = VBEP-EDATU and Quantity = VBEP-WMENG,  No need to update schedule line

        IF <LFS_SCHEDULELINE>-FLAG = 'U' OR <LFS_SCHEDULELINE>-FLAG = 'D'.
          READ TABLE LT_VBEP_CHK  WITH KEY ETENR = <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER
                                           TRANSPORTING NO FIELDS.
          IF SY-SUBRC <> 0.
            CONTINUE.
          ENDIF.
        ENDIF.

        IF <LFS_SCHEDULELINE>-FLAG = 'U'.
          READ TABLE LT_VBEP_CHK  WITH KEY ETENR = <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER
                                           EDATU = <LFS_SCHEDULELINE>-REQUESTDATE
                                           WMENG = <LFS_SCHEDULELINE>-REQUESTQUANTITY
                                           TRANSPORTING NO FIELDS.
          IF SY-SUBRC = 0.
            CONTINUE.
          ENDIF.

          "19/11/2024 if schedule line item has already been create DO, skip the item.
          SELECT SINGLE VBELV,POSNV,VBELN,POSNN,VBTYP_N
            FROM VBFA
           WHERE VBELV   = @CS_SALESORDER-SAPSALESORDERNO
             AND POSNV   = @<LFS_ITEM>-SAPITEMNUMBER
             AND VBTYP_N = 'J'
            INTO @LS_VBFA.
          IF SY-SUBRC = 0.
            "09/12/2025 additional requirement: if schedule line item has already been create DO but
            "there are some schedule line not deliver, it can be changed item and schedule line.
            SELECT SINGLE VBELN,POSNR,ETENR,EDATU,WMENG,DLVQTY_BU
              FROM VBEP
           WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
             AND POSNR = @<LFS_ITEM>-SAPITEMNUMBER
             AND DLVQTY_BU = 0
            INTO @LS_VBEP_CHK_DO.
            IF SY-SUBRC <> 0.
              CONTINUE.
            ENDIF.
          ENDIF.
        ENDIF.

        IF <LFS_ITEM>-ITEMCATEGORY+0(3) = 'ZSB'.
          <LFS_SCHEDULELINE>-CONFIRMQUANTITY = <LFS_SCHEDULELINE>-REQUESTQUANTITY.
        ELSE.
          IF <LFS_SCHEDULELINE>-FLAG = 'I'. "If Insert new, check stock before create SO (if update, check stock after changing SO)
            CLEAR: LV_AV_QTY_PLT.

            LV_PLANT    = <LFS_ITEM>-PLANT.
            LV_MATERIAL = <LFS_ITEM>-MATERIALNUMBER.

            AVAILABILITY_CHECK_S4(
              EXPORTING
                MATNR    = LV_MATERIAL
                WERKS    = LV_PLANT
              IMPORTING
                AVAL_STOCK = LV_AV_QTY_PLT
                ).

            IF <LFS_SCHEDULELINE>-REQUESTQUANTITY > LV_AV_QTY_PLT.
              <LFS_SCHEDULELINE>-CONFIRMQUANTITY = 0.
            ELSE.
              <LFS_SCHEDULELINE>-CONFIRMQUANTITY =  <LFS_SCHEDULELINE>-REQUESTQUANTITY.
            ENDIF.
          ENDIF.
        ENDIF.

        "20/05/2025 INC-420000628 Delete Schedule line for BOM when 'I' insert (insert quantity only higher level)
        IF <LFS_SCHEDULELINE>-FLAG = 'I'.
          IF <LFS_ITEM>-HIGHERLEVEL IS NOT INITIAL.
            LV_BOM = 'X'.
            CONTINUE.
          ENDIF.
        ENDIF.

        CLEAR: LV_REQ_DLV_BL,
               LV_SCHED_TYPE.
        SELECT SINGLE TVEP~ETTYP,
                      TVEP~LIFSP
          FROM TVEP INNER JOIN TVEPZ ON TVEP~ETTYP = TVEPZ~ETTYP
         WHERE PSTYV = @<LFS_ITEM>-ITEMCATEGORY
           AND DISMM = ( SELECT DISMM
                           FROM MARC
                          WHERE MATNR = @<LFS_ITEM>-MATERIALNUMBER
                            AND WERKS = @<LFS_ITEM>-PLANT )
          INTO ( @LV_SCHED_TYPE,@LV_REQ_DLV_BL ).
        APPEND VALUE #( ITM_NUMBER = <LFS_SCHEDULELINE>-SAPITEMNUMBER
                        SCHED_LINE = <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER
                        REQ_QTY    = <LFS_SCHEDULELINE>-REQUESTQUANTITY
                        REQ_DATE   = <LFS_SCHEDULELINE>-REQUESTDATE
                        REQ_DLV_BL = LV_REQ_DLV_BL
                        SCHED_TYPE = LV_SCHED_TYPE )
                        TO LT_SCHEDULE_LINES.
        APPEND VALUE #( ITM_NUMBER = <LFS_SCHEDULELINE>-SAPITEMNUMBER
                        SCHED_LINE = <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER
                        REQ_QTY    = ABAP_TRUE
                        REQ_DATE   = ABAP_TRUE
                        UPDATEFLAG = <LFS_SCHEDULELINE>-FLAG
                        REQ_DLV_BL = ABAP_TRUE
                        SCHED_TYPE = ABAP_TRUE )
                        TO LT_SCHEDULE_LINESX.

      ENDLOOP.

*  Extensions
      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAP-VBELN          = CS_SALESORDER-SAPSALESORDERNO.
      LS_BAPE_VBAP-POSNR          = <LFS_ITEM>-SAPITEMNUMBER.
      LS_BAPE_VBAP-ZZ1_LOB_SO_SDI = <LFS_ITEM>-LOB.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAP'.

      APPEND_EXTENSION(
        EXPORTING
          BAPE_STRUCTURE = LS_BAPE_VBAP
        CHANGING
          EXTENSIONIN   = LS_EXTENSIONIN
          EXTENSIONIN_T = LT_EXTENSIONIN
     ).

      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAPX-VBELN          = CS_SALESORDER-SAPSALESORDERNO.
      LS_BAPE_VBAPX-POSNR          = <LFS_ITEM>-SAPITEMNUMBER.
      LS_BAPE_VBAPX-ZZ1_LOB_SO_SDI = 'X'.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAPX'.
      APPEND_EXTENSION(
        EXPORTING
          BAPE_STRUCTURE = LS_BAPE_VBAPX
        CHANGING
          EXTENSIONIN   = LS_EXTENSIONIN
          EXTENSIONIN_T = LT_EXTENSIONIN
     ).

      CLEAR:
        LV_SALES_UNIT_CONV.

    ENDLOOP.

    "Export to routine 902 IN VOFM  -> FRM_KONDI_WERT_902
    EXPORT LT_CONDITION_ITEM FROM LT_CONDITION_ITEM TO MEMORY ID 'CONDTYP_SO_FROM_SF'.
    EXPORT GRT_CONDITION_TYPE FROM GRT_CONDITION_TYPE TO MEMORY ID 'CONDTYP_SO_MASTER'.
*-------------------------------------
* Sales Order Change
*-------------------------------------
    IF LT_ITEM_DEL_WBS IS NOT INITIAL AND LT_ITEMX_DEL_WBS IS NOT INITIAL.
      CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
        EXPORTING
          SALESDOCUMENT    = CS_SALESORDER-SAPSALESORDERNO
          ORDER_HEADER_IN  = LS_HEADER
          ORDER_HEADER_INX = LS_HEADERX
          SIMULATION       = IF_TESTRUN
        TABLES
          RETURN           = LT_RETURN_DEL_WBS
          ORDER_ITEM_IN    = LT_ITEM_DEL_WBS
          ORDER_ITEM_INX   = LT_ITEMX_DEL_WBS.
      IF LINE_EXISTS( LT_RETURN[ TYPE = 'A' ] ) OR
         LINE_EXISTS( LT_RETURN[ TYPE = 'E' ] ).

        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'
*         IMPORTING
*           RETURN        =
          .
      ENDIF.
    ENDIF.
    DATA: LOGIC_SWITCH  TYPE BAPISDLS.

    IF LV_BOM = SPACE. "Add+ 05.06.2025  INC420000645 : If BOM, nonstructure must be space
      LOGIC_SWITCH-NOSTRUCTURE = 'X'.
    ENDIF.

    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
      EXPORTING
        SALESDOCUMENT    = CS_SALESORDER-SAPSALESORDERNO
        ORDER_HEADER_IN  = LS_HEADER
        ORDER_HEADER_INX = LS_HEADERX
        SIMULATION       = IF_TESTRUN
        LOGIC_SWITCH     = LOGIC_SWITCH
      TABLES
        RETURN           = LT_RETURN
        ORDER_ITEM_IN    = LT_ITEM
        ORDER_ITEM_INX   = LT_ITEMX
        PARTNERS         = LT_PARTNERS
        PARTNERCHANGES   = LT_PARTNERCHANGES
        PARTNERADDRESSES = LT_PARTNERADDRESSES
        SCHEDULE_LINES   = LT_SCHEDULE_LINES
        SCHEDULE_LINESX  = LT_SCHEDULE_LINESX
        ORDER_TEXT       = LT_TEXTS
*       ORDER_KEYS       =
        CONDITIONS_IN    = LT_ITEMS_COND
        CONDITIONS_INX   = LT_ITEMS_CONDX
        EXTENSIONIN      = LT_EXTENSIONIN.
    IF LINE_EXISTS( LT_RETURN[ TYPE = 'A' ] ) OR
       LINE_EXISTS( LT_RETURN[ TYPE = 'E' ] ).

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

*Message for schedule line
      DATA: LV_ITEM_NO          TYPE POSNR_VA ##NEEDED,
            LV_SCHEDULE_LINE_NO TYPE ETENR ##NEEDED.

      READ TABLE LT_RETURN ASSIGNING FIELD-SYMBOL(<LFS_RETURN>) WITH KEY TYPE   = 'E'
                                                                         ID     = 'ZSDSSD01'
                                                                         NUMBER = '026'.
      IF SY-SUBRC = 0.
*       Import all return message from quota check to
*       Class ZCL_SDSSD_CREATE_CHANGE_SO_SRV , Method SALES_ORDER_CREATE, SALES_ORDER_CHANGE
        IMPORT LT_RETURN_MSG = LT_RETURN_MSG FROM MEMORY ID 'CHECK_QUOTA_VBEP'.

        LOOP AT LT_RETURN_MSG ASSIGNING FIELD-SYMBOL(<LFS_RETURN_MSG>) WHERE MSGTY = 'E'
                                                                         AND MSGID = 'ZSDSSD01'
                                                                         AND MSGNO = '026'.

          LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_RETURN_MSG>-POSNR
                                                                 AND SAPSCHEDULELINENUMBER = <LFS_RETURN_MSG>-ETENR.

            <LFS_SCHEDULELINE>-STATUS          = 'B'.
            CALL FUNCTION 'MESSAGE_TEXT_BUILD'
              EXPORTING
                MSGID               = <LFS_RETURN_MSG>-MSGID
                MSGNR               = <LFS_RETURN_MSG>-MSGNO
                MSGV1               = <LFS_RETURN_MSG>-MSGV1
                MSGV2               = <LFS_RETURN_MSG>-MSGV2
                MSGV3               = <LFS_RETURN_MSG>-MSGV3
                MSGV4               = <LFS_RETURN_MSG>-MSGV4
              IMPORTING
                MESSAGE_TEXT_OUTPUT = <LFS_SCHEDULELINE>-MESSAGE.

          ENDLOOP.
        ENDLOOP.
      ENDIF.

    ELSE.

      READ TABLE LT_RETURN INTO DATA(LS_RETURN) WITH KEY TYPE   = 'S'
                                                         ID     = 'V1'
                                                         NUMBER = '311'.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'
*         IMPORTING
*           RETURN        =
          .
        WAIT UP TO 3 SECONDS.


        "Get Schedule Line
        SELECT VBELN,POSNR,ETENR,EDATU,BMENG,WMENG INTO TABLE @DATA(LT_VBEP)
          FROM VBEP
         WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO.
        IF SY-SUBRC = 0.
          "Update schedule line number
          LOOP AT CT_SALESORDERITEM ASSIGNING <LFS_ITEM>.
            LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_ITEM>-SAPITEMNUMBER.
              IF <LFS_SCHEDULELINE>-FLAG = 'I'.
                READ TABLE LT_VBEP INTO DATA(LS_VBEP) WITH KEY POSNR = <LFS_ITEM>-SAPITEMNUMBER
                                                               EDATU = <LFS_SCHEDULELINE>-REQUESTDATE
                                                               WMENG = <LFS_SCHEDULELINE>-REQUESTQUANTITY.
                IF SY-SUBRC = 0.
                  <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER = LS_VBEP-ETENR.
                ENDIF.
              ENDIF.
            ENDLOOP.
          ENDLOOP.


          SORT LT_VBEP BY EDATU DESCENDING.
          LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE>.

            READ TABLE LT_VBEP ASSIGNING FIELD-SYMBOL(<LFS_VBEP>) WITH KEY POSNR = <LFS_SCHEDULELINE>-SAPITEMNUMBER.
*            "ETENR = <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER.
            IF SY-SUBRC = 0.
*              <LFS_SCHEDULELINE>-CONFIRMQUANTITY = <LFS_VBEP>-BMENG.
              IF <LFS_SCHEDULELINE>-FLAG = 'U' OR <LFS_SCHEDULELINE>-FLAG = 'D'.
                READ TABLE CT_SALESORDERITEM ASSIGNING <LFS_ITEM> WITH KEY SAPITEMNUMBER = <LFS_SCHEDULELINE>-SAPITEMNUMBER.
                IF SY-SUBRC = 0.
                  IF <LFS_ITEM>-ITEMCATEGORY+0(3) = 'ZSB'.
                    <LFS_SCHEDULELINE>-CONFIRMQUANTITY = <LFS_SCHEDULELINE>-REQUESTQUANTITY.
                  ELSE.

                    LV_PLANT    = <LFS_ITEM>-PLANT.
                    LV_MATERIAL = <LFS_ITEM>-MATERIALNUMBER.

                    AVAILABILITY_CHECK_S4_UPD(
                      EXPORTING
                        MATNR    = LV_MATERIAL
                        WERKS    = LV_PLANT
                        BMENG    = <LFS_VBEP>-BMENG
                      IMPORTING
                        AVAL_STOCK = LV_AV_QTY_PLT
                        ).
                    IF <LFS_SCHEDULELINE>-REQUESTQUANTITY > LV_AV_QTY_PLT.
                      <LFS_SCHEDULELINE>-CONFIRMQUANTITY = 0.
                    ELSE.
                      <LFS_SCHEDULELINE>-CONFIRMQUANTITY =  <LFS_SCHEDULELINE>-REQUESTQUANTITY.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.
*Message for schedule line

        READ TABLE LT_RETURN ASSIGNING <LFS_RETURN> WITH KEY TYPE   = 'E'
                                                             ID     = 'ZSDSSD01'
                                                             NUMBER = '025'.
        IF SY-SUBRC = 0.
*       Import all return message from quota check to
*       Class ZCL_SDSSD_CREATE_CHANGE_SO_SRV , Method SALES_ORDER_CREATE, SALES_ORDER_CHANGE
          IMPORT LT_RETURN_MSG = LT_RETURN_MSG FROM MEMORY ID 'CHECK_QUOTA_VBEP'.

          LOOP AT LT_RETURN_MSG ASSIGNING <LFS_RETURN_MSG> WHERE MSGTY = 'E'
                                                             AND MSGID = 'ZSDSSD01'
                                                             AND MSGNO = '025'.

            LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_RETURN_MSG>-POSNR
                                                                   AND SAPSCHEDULELINENUMBER = <LFS_RETURN_MSG>-ETENR.

              CALL FUNCTION 'MESSAGE_TEXT_BUILD'
                EXPORTING
                  MSGID               = <LFS_RETURN_MSG>-MSGID
                  MSGNR               = <LFS_RETURN_MSG>-MSGNO
                  MSGV1               = <LFS_RETURN_MSG>-MSGV1
                  MSGV2               = <LFS_RETURN_MSG>-MSGV2
                  MSGV3               = <LFS_RETURN_MSG>-MSGV3
                  MSGV4               = <LFS_RETURN_MSG>-MSGV4
                IMPORTING
                  MESSAGE_TEXT_OUTPUT = <LFS_SCHEDULELINE>-MESSAGE.

            ENDLOOP.
          ENDLOOP.
        ENDIF.

*DEL- 19.03.2025 INC:420000498 >>>
*Add+ 04.03.2025 INC:420000464 >>>
*        SELECT SINGLE VBELN,CMGST INTO @DATA(LS_VBAK)
*          FROM VBAK
*         WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO.
*        IF SY-SUBRC = 0.
*          IF LS_VBAK-CMGST = 'B'. "Credit check was executed, document not OK
*            LS_RESPONSE-RESP_STATUS  = 'W'.
*            LS_RESPONSE-RESP_MESSAGE = TEXT-E63."====== Over Credit or Overdue ======
*            APPEND LS_RESPONSE TO CT_RESPONSE.
*          ENDIF.
*        ENDIF.
*<<< Add+ 04.03.2025 INC:420000464
*<<< DEL- 19.03.2025 INC:420000498
        DATA: LV_FVAL    TYPE CHAR30,
              CTU_PARAMS TYPE CTU_PARAMS,
              MESSTAB    TYPE TABLE OF BDCMSGCOLL.


*Insert billing plan Header
        IF LV_BILLPLAN_HD_FLAG = 'X'.
          SELECT FPLNR INTO TABLE @DATA(LT_FPLA_TMP)
            FROM FPLA
           WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
             AND RFPLN = @SPACE.
          IF SY-SUBRC = 0.
            DATA: LI_FPLA_OLD TYPE TABLE OF FPLAVB,
                  LI_FPLT_OLD TYPE TABLE OF FPLTVB.

            SELECT FPLNR INTO TABLE @LT_FPLA_TMP
              FROM FPLA
             WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
               AND RFPLN <> @SPACE.
            IF SY-SUBRC = 0.
              SELECT FPLNR,FPLTR INTO TABLE @DATA(LT_FPLT)
                FROM FPLT
                 FOR ALL ENTRIES IN @LT_FPLA_TMP
               WHERE FPLNR = @LT_FPLA_TMP-FPLNR.
              IF SY-SUBRC = 0.
                SORT LT_FPLT BY FPLTR.
                DELETE ADJACENT DUPLICATES FROM LT_FPLT COMPARING FPLTR.
              ENDIF.
*Check status, if status = C  (completed) -> no need to update
              READ TABLE LT_FPLA_TMP INTO DATA(LS_FPLA_TMP) INDEX 1.
              IF SY-SUBRC = 0.
                CLEAR: LI_FPLA_OLD,LI_FPLT_OLD.
                CALL FUNCTION 'BILLING_SCHEDULE_READ'
                  EXPORTING
                    FPLNR = LS_FPLA_TMP-FPLNR
*                   I_VFKDAT       =
*                   I_BFKDAT       =
                  TABLES
                    ZFPLA = LI_FPLA_OLD
                    ZFPLT = LI_FPLT_OLD.
              ENDIF.
*              READ TABLE LI_FPLT_OLD INTO DATA(LS_FPLT_OLD) WITH KEY FKSAF = 'C'.
*              IF SY-SUBRC = 0.
*                "Update billing plan
*                CALL METHOD ZCL_SDSSD_CREATE_CHANGE_SO_SRV=>BILLING_SCHEDULE_SAVE
*                  EXPORTING
*                    CS_SALESORDER = CS_SALESORDER.
*
*                WAIT UP TO 1 SECONDS.
*                SELECT SINGLE FPLNR INTO @DATA(LV_FPLNR) "#EC CI_NOORDER
*                  FROM FPLA                              ##WARN_OK
*                 WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
*                   AND RFPLN = @SPACE.
*                IF SY-SUBRC = 0.
*                  CS_SALESORDER-SAPBILLINGID = LV_FPLNR.
*                ENDIF.
*              ENDIF.
            ENDIF.
          ENDIF.

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '0102' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'   FVAL = 'VBAK-VBELN' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=ENT2' ).

          LV_FVAL = CS_SALESORDER-SAPSALESORDERNO.
          BDC_FIELD( EXPORTING FNAM = 'VBAK-VBELN' FVAL = LV_FVAL ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=KFPL' ).

          SELECT SINGLE FPLNR,VBELN INTO @DATA(LS_FPLA) ##NEEDED    ##WARN_OK
            FROM FPLA
           WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO.
          IF SY-SUBRC = 0.
            "If Billing plan exist -> No this popup message

          ELSE.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '/EESC' ).
          ENDIF.

*Delete all billing plan  : Mark all items and delete all
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=MARK' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO =  '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '=KOLO' ).


*Add new
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '/00' ).


          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE.
          READ TABLE LI_FPLT_OLD INTO DATA(LS_FPLT_OLD) WITH KEY FKSAF = 'C'.
          IF SY-SUBRC <> 0.
            BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAT' FVAL =  LV_FVAL ).
            BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAR' FVAL = '01' ).
          ENDIF.
*Page1

*Date
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE1.
          IF LV_FVAL IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 1.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE2.
          IF LV_FVAL IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 2.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE3.
          IF LV_FVAL IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 3.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE4.
          IF LV_FVAL IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 4.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE5.
          IF LV_FVAL IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 5.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
*Value
          IF CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 1.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT1.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
            ENDIF.
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 2.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT2.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 3.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT3.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 4.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT4.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
            ENDIF.
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 5.
            IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
            ELSE.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT5.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.
*page2
          IF CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL.
            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD WITH KEY FKSAF = 'C'.
            IF SY-SUBRC <> 0.
              BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
              BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).
            ENDIF.

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).

*Date
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE6.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 6.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE7.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 7.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE8.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 8.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE9.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 9.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
*Value
            IF CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 6.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT6.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 7.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT7.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL =  LV_FVAL ).
              ENDIF.
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 8.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT8.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 9.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT9.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
*            READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD WITH KEY FKSAF = 'C'.
*            IF SY-SUBRC <> 0.
*              BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
*              BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).
*            ENDIF.
          ENDIF.

*page3
          IF CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE10.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 10.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL =  LV_FVAL ).
              ENDIF.
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE11.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 11.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE12.
            IF LV_FVAL IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 12.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.

*Value
            IF CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 10.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT10.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL =  LV_FVAL ).
              ENDIF.
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 11.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT11.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.
              READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD  INDEX 12.
              IF SY-SUBRC = 0 AND LS_FPLT_OLD-FKSAF = 'C'.
              ELSE.
                LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT12.
                CONDENSE LV_FVAL.
                BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
              ENDIF.
            ENDIF.
          ENDIF.

          READ TABLE LI_FPLT_OLD INTO LS_FPLT_OLD WITH KEY FKSAF = 'C'.
          IF SY-SUBRC <> 0.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).
          ENDIF.

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=S\BACK' ).

*Click back and save

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=SICH' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLSLVC_FULLSCREEN'  DYNPRO = '0700' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=&ONT' ).

          IF GT_BDCDATA IS NOT INITIAL.
            CTU_PARAMS = VALUE CTU_PARAMS( DISMODE = 'N'
                                           DEFSIZE = 'X'
                                           UPDMODE = 'S' ).
            CALL TRANSACTION 'VA02' WITH AUTHORITY-CHECK USING GT_BDCDATA     ##AUTH_ERR_HANDLER_MISSING
                             OPTIONS FROM CTU_PARAMS
                             MESSAGES INTO MESSTAB.

            WAIT UP TO 1 SECONDS.
            SELECT SINGLE FPLNR INTO @DATA(LV_FPLNR)    "#EC CI_NOORDER
              FROM FPLA                              ##WARN_OK
             WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
               AND RFPLN = @SPACE.
            IF SY-SUBRC = 0.
              CS_SALESORDER-SAPBILLINGID = LV_FPLNR.
            ENDIF.
          ENDIF.

        ENDIF.

      ENDIF.
    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC = 0.
      CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
      CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.

      IF ZCL_SDSFICM_UKM_SD_FSCM=>CHECK_ACTIVE_WBS_ORDER_TYPE( CS_SALESORDER-DOCUMENTTYPE ) = ABAP_TRUE.
        IMPORT CREDIT_MESSAGE = LT_FSCM_CREDIT_MESSAGES  FROM MEMORY ID 'ZSDS_FSCM'.
        LOOP AT LT_FSCM_CREDIT_MESSAGES INTO DATA(LS_MESSAGE) ##INTO_OK.
          IF SY-TABIX = 1.
            LV_CREDIT_MESSAGE = LS_MESSAGE-MSG_TEXT.
          ELSE.
            CONCATENATE LV_CREDIT_MESSAGE LS_MESSAGE-MSG_TEXT INTO LV_CREDIT_MESSAGE SEPARATED BY '/'.
          ENDIF.
        ENDLOOP.
        CS_SALESORDER-RESPONSEMESSAGE = |{ CS_SALESORDER-RESPONSEMESSAGE }/{ LV_CREDIT_MESSAGE }|.
      ENDIF.
    ELSE.
      READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'S'
                                                   ID = 'V1'
                                                   NUMBER = '311'.
      IF SY-SUBRC = 0.
        READ TABLE LT_RETURN INTO DATA(LS_RETURN_W) WITH KEY TYPE = 'W'
                                                     ID = 'V1'
                                                     NUMBER = '555'."The sales document is not yet complete: Edit data
        IF SY-SUBRC = 0.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN_W-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN_W-MESSAGE.
          CS_SALESORDER-RESPONSEMESSAGE = |{ CS_SALESORDER-RESPONSEMESSAGE }/{ LS_RETURN-MESSAGE }|.
        ELSE.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
        ENDIF.

        IF CS_SALESORDER-PAYMENTTERMS <> 'C000'.
          CALL METHOD ZCL_SDSSD_CREATE_CHANGE_SO_SRV=>GET_CREDIT_MESSAGE
            EXPORTING
              AUART                = CS_SALESORDER-DOCUMENTTYPE
            IMPORTING
              MESSAGE_STATUS       = LV_CREDIT_MESSAGE_STATUS
              MESSAGE              = LV_CREDIT_MESSAGE
              FSCM_CREDIT_MESSAGES = LT_FSCM_CREDIT_MESSAGES.
          IF LV_CREDIT_MESSAGE IS NOT INITIAL.
            CS_SALESORDER-RESPONSEMESSAGE = |{ LV_CREDIT_MESSAGE }/{ CS_SALESORDER-RESPONSEMESSAGE } |.
          ENDIF.
        ENDIF.

      ELSE.
        READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
        IF SY-SUBRC = 0.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
        ENDIF.
      ENDIF.
    ENDIF.

    LOOP AT LT_RETURN ASSIGNING <LFS_RETURN>.
      LS_RESPONSE-RESP_STATUS  = <LFS_RETURN>-TYPE.
      LS_RESPONSE-RESP_MESSAGE = <LFS_RETURN>-MESSAGE.
      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.

    LOOP AT LT_FSCM_CREDIT_MESSAGES ASSIGNING FIELD-SYMBOL(<LFS_CREDIT_MESSAGES>).
      LS_RESPONSE-RESP_STATUS  = 'W'.
      LS_RESPONSE-RESP_MESSAGE = <LFS_CREDIT_MESSAGES>-MSG_TEXT.
      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.

    SORT MESSTAB BY MSGID MSGNR.
    DELETE ADJACENT DUPLICATES FROM MESSTAB COMPARING MSGID MSGNR.
    LOOP AT MESSTAB ASSIGNING FIELD-SYMBOL(<LFS_MESSTAB>).
      LS_RESPONSE-RESP_STATUS  = <LFS_MESSTAB>-MSGTYP.

      CALL FUNCTION 'FORMAT_MESSAGE'
        EXPORTING
          ID        = <LFS_MESSTAB>-MSGID
*         LANG      = '-D'
          NO        = <LFS_MESSTAB>-MSGNR
          V1        = <LFS_MESSTAB>-MSGV1
          V2        = <LFS_MESSTAB>-MSGV2
          V3        = <LFS_MESSTAB>-MSGV3
          V4        = <LFS_MESSTAB>-MSGV4
        IMPORTING
          MSG       = LS_RESPONSE-RESP_MESSAGE
        EXCEPTIONS
          NOT_FOUND = 1
          OTHERS    = 2.
      IF SY-SUBRC <> 0.
        LS_RESPONSE-RESP_STATUS  = SY-MSGTY.
      ENDIF.

      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.

  ENDMETHOD.


  METHOD SALES_ORDER_CREATE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV
*  Creation Date      : 16.05.2024
*  Author             : Zulkiff B.(Eviden)
*  Add-on ID          : N/A
*  Description        : CREATE SALES ORDER
*  Purpose            :
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------
*  19.03.2025  420000498   Zulkiff B.  Adjust header message
*                                      Add credit status to header message
*-----------------------------------------------------------------------
    DATA:
      LT_ITEM                  TYPE STANDARD TABLE OF BAPISDITM,
      LT_RETURN                TYPE STANDARD TABLE OF BAPIRET2,
      LT_PARTNERS              TYPE STANDARD TABLE OF BAPIPARNR,
      LT_PARTNERADDRESSES      TYPE STANDARD TABLE OF BAPIADDR1,
      LT_SCHEDULE_LINES        TYPE STANDARD TABLE OF BAPISCHDL,
      LT_TEXTS                 TYPE STANDARD TABLE OF BAPISDTEXT,
      LS_BAPE_VBAP             TYPE BAPE_VBAP,
      LS_BAPE_VBAPX            TYPE BAPE_VBAPX,
      LS_BAPE_VBAK             TYPE BAPE_VBAK,
      LS_BAPE_VBAKX            TYPE BAPE_VBAKX,
      LS_VBPA3KOM              TYPE VBPA3KOM,
      LT_VBPA3KOM              TYPE STANDARD TABLE OF VBPA3KOM,
      LS_EXTENSIONIN           TYPE BAPIPAREX,
      LT_EXTENSIONIN           TYPE BAPIPAREX_T,
      LS_HEADER                TYPE BAPISDHD1,
      LV_SALES_UNIT_CONV       TYPE VRKME,
      LS_RESPONSE              TYPE ZSDSCAS006,
      LV_SALESORG              TYPE VKORG,
      LV_DIVISION              TYPE SPART,
      LT_CONDITION_ITEM        TYPE ZSDSSDS006_TT,
      LV_BILLPLAN_HD_FLAG      TYPE CHAR1,
      LS_RETURN_MSG            TYPE ZSDSSDS110 ##NEEDED,
      LT_RETURN_MSG            TYPE STANDARD TABLE OF ZSDSSDS110,
      LV_REQ_DLV_BL            TYPE LIFSP_EP,
      LV_SCHED_TYPE            TYPE ETTYP,
      LV_CREDIT_MESSAGE        TYPE TEXT1024,
      LV_CREDIT_MESSAGE_STATUS TYPE MSGTY,
      LT_FSCM_CREDIT_MESSAGES  TYPE UKM_T_PI_CREDIT_MESSAGE.

    DATA: LV_REF_DOC_IT       TYPE POSNR,
          LV_ITEM_NO          TYPE POSNR_VA ##NEEDED,
          LV_SCHEDULE_LINE_NO TYPE ETENR ##NEEDED,
          LT_WMDVSX           TYPE TABLE OF BAPIWMDVS,
          LT_WMDVEX           TYPE TABLE OF BAPIWMDVE,
          LV_AV_QTY_PLT       TYPE SUMIS, "BAPICM61V-WKBST,
          LV_PLANT            TYPE BAPIMATVP-WERKS,
          LV_MATERIAL         TYPE MATNR40, "BAPI_MRP_MAT_PARAM-MATERIAL_LONG, "MATNR18,
          LV_UNIT             TYPE BAPIADMM-UNIT,
          LS_MRP_STOCK_DETAIL TYPE BAPI_MRP_STOCK_DETAIL.

*Constants
    READ TABLE GRT_SALESORG INTO DATA(LR_SALESORG) INDEX 1.
    IF SY-SUBRC = 0.
      LV_SALESORG = LR_SALESORG-LOW.
    ENDIF.

    READ TABLE GRT_DIVISION INTO DATA(LR_DIVISION) INDEX 1.
    IF SY-SUBRC = 0.
      LV_DIVISION = LR_DIVISION-LOW.
    ENDIF.


* Header
    LS_HEADER = VALUE #( NAME       = CS_SALESORDER-SFSALESORDERNO
                         DOC_DATE   = CS_SALESORDER-CREATEDATE
                         REF_DOC_L  = CS_SALESORDER-REFERENCESDDOCUMENT
                         REF_DOC    = CS_SALESORDER-REFERENCESDDOCUMENT
                         REFDOC_CAT = 'B'
                         DOC_TYPE   = CS_SALESORDER-DOCUMENTTYPE
                         SALES_ORG  = LV_SALESORG "Default ‘1000’ SDS Siam Daikin Sale
                         DISTR_CHAN = CS_SALESORDER-DISTRIBUTIONCHANNEL
                         DIVISION   = LV_DIVISION "Default '00' Common
                         SALES_OFF  = CS_SALESORDER-SALESOFFICE
                         SALES_GRP  = CS_SALESORDER-SALESGROUP
                         PURCH_NO_C = CS_SALESORDER-PONUMBER
                         PMNTTRMS   = CS_SALESORDER-PAYMENTTERMS
                         DLVSCHDUSE = CS_SALESORDER-USAGE
                       ).


* Partner
    "Currency
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = CS_SALESORDER-BPSOLDTONUMBER
      IMPORTING
        OUTPUT = CS_SALESORDER-BPSOLDTONUMBER.

    SELECT SINGLE KUNNR,VKORG,VTWEG,SPART,WAERS
      FROM KNVV
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER
       AND VKORG = @LV_SALESORG
       AND VTWEG = '00'  "Common
       AND SPART = '00'  "Common
      INTO @DATA(LS_KNVV).

    SELECT SINGLE KUNNR,ADRNR,KTOKD INTO @DATA(LS_KNA1)
      FROM KNA1
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER.
    IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
      IF CS_SALESORDER-BPSOLDTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'AG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPSOLDTONUMBER ALPHA = IN }|
                        ADDR_LINK  = LS_KNA1-ADRNR ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPBILLTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RE'
                        PARTN_NUMB = |{ CS_SALESORDER-BPBILLTONUMBER ALPHA = IN }|
                        ADDR_LINK  = LS_KNA1-ADRNR ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPPAYERNUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPPAYERNUMBER ALPHA = IN }|
                        ADDR_LINK  = LS_KNA1-ADRNR ) TO LT_PARTNERS.
      ENDIF.

    ELSE.
      IF CS_SALESORDER-BPSOLDTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'AG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPSOLDTONUMBER ALPHA = IN }| ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPBILLTONUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RE'
                        PARTN_NUMB = |{ CS_SALESORDER-BPBILLTONUMBER ALPHA = IN }| ) TO LT_PARTNERS.
      ENDIF.

      IF CS_SALESORDER-BPPAYERNUMBER IS NOT INITIAL.
        APPEND VALUE #( PARTN_ROLE = 'RG'
                        PARTN_NUMB = |{ CS_SALESORDER-BPPAYERNUMBER ALPHA = IN }| ) TO LT_PARTNERS.
      ENDIF.


    ENDIF.

    IF CS_SALESORDER-BPSHIPTONUMBER IS NOT INITIAL.
      APPEND VALUE #( PARTN_ROLE = 'WE'
                      PARTN_NUMB = |{ CS_SALESORDER-BPSHIPTONUMBER ALPHA = IN }| ) TO LT_PARTNERS.
    ENDIF.


    IF CS_SALESORDER-BPSALESEMPLOYEE IS NOT INITIAL.
      APPEND VALUE #( PARTN_ROLE = 'VE'
                      PARTN_NUMB = |{ CS_SALESORDER-BPSALESEMPLOYEE ALPHA = IN }| ) TO LT_PARTNERS.
    ENDIF.

    "Partner Address
    CLEAR: LT_PARTNERADDRESSES.

    SELECT SINGLE KUNNR,ADRNR,KTOKD INTO @LS_KNA1
      FROM KNA1
     WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER.
    IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
      APPEND VALUE #( ADDR_NO      = LS_KNA1-ADRNR
                      NAME         = CS_SALESORDER-ONETIMENAME1
                      NAME_2       = CS_SALESORDER-ONETIMENAME2
                      NAME_3       = CS_SALESORDER-ONETIMENAME3
                      NAME_4       = CS_SALESORDER-ONETIMENAME4
                      STREET       = CS_SALESORDER-STREET
                      STR_SUPPL3   = CS_SALESORDER-STREET4
                      LOCATION     = CS_SALESORDER-STREET5
                      STR_SUPPL1   = CS_SALESORDER-STREET2
                      STR_SUPPL2   = CS_SALESORDER-STREET3
                      DISTRICT     = CS_SALESORDER-DISTRICT
                      CITY         = CS_SALESORDER-CITY
                      POSTL_COD1   = CS_SALESORDER-POSTALCODE
                   ) TO LT_PARTNERADDRESSES.
    ENDIF.

* HD Texts
    CLEAR: LT_TEXTS.

    IF CS_SALESORDER-HDTEXTREASON IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH01'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTREASON ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTLOCATION IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH03'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTLOCATION ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTPROJECTTEXT IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH06'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTPROJECTTEXT ) TO LT_TEXTS.
    ENDIF.

*    APPEND VALUE #( TEXT_ID   = 'ZH10'
*                    LANGU     = 'EN'
*                    TEXT_LINE = CS_SALESORDER-HDTEXTREQUESTREMARK ) TO LT_TEXTS.

    "ZH10 -> 800 Characters
    IF CS_SALESORDER-HDTEXTREQUESTREMARK IS NOT INITIAL.
      DATA: LV_HDTEXTREQUESTREMARK TYPE MS_RFC0800.
      LV_HDTEXTREQUESTREMARK = CS_SALESORDER-HDTEXTREQUESTREMARK.
      APPEND_TEXT(
        EXPORTING
          TEXT_ID    = 'ZH10'
          LANGU      = 'E'
          TEXT_LINE  = LV_HDTEXTREQUESTREMARK
        IMPORTING
          TEXTS      = LT_TEXTS ).
    ENDIF.

    IF CS_SALESORDER-HDTEXTCOMMENT IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH13'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTCOMMENT ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTPERSONINCHARGENAME IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH15'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTPERSONINCHARGENAME ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-HDTEXTCONTACTPERSON IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH19'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-HDTEXTCONTACTPERSON ) TO LT_TEXTS.
    ENDIF.

    IF CS_SALESORDER-LANDNUMBER IS NOT INITIAL.
      APPEND VALUE #( TEXT_ID   = 'ZH11'
                      LANGU     = 'EN'
                      TEXT_LINE = CS_SALESORDER-LANDNUMBER ) TO LT_TEXTS.
    ENDIF.

*Tax3 one-time customer
*(PARTN_ROLE) = ‘SP’ Sold-to  AG
*(PARTN_ROLE) = ‘BP’ Bill-to  RE
*(PARTN_ROLE) = ‘PY’ Payer    RG
    IF CS_SALESORDER-TAXNO IS NOT INITIAL.
      DO 3 TIMES.
        CLEAR LS_VBPA3KOM.

        LS_VBPA3KOM-POSNR = '000000'.

        CASE SY-INDEX.
          WHEN 1.
            LS_VBPA3KOM-PARVW = 'AG'.
          WHEN 2.
            LS_VBPA3KOM-PARVW = 'RE'.
          WHEN 3.
            LS_VBPA3KOM-PARVW = 'RG'.
        ENDCASE.

        LS_VBPA3KOM-STCD3 = CS_SALESORDER-TAXNO.

        APPEND LS_VBPA3KOM TO LT_VBPA3KOM.

      ENDDO.
    ENDIF.

    IF LT_VBPA3KOM IS NOT INITIAL.
      "Export to MV45AFZZ  FORM USEREXIT_SAVE_DOCUMENT_PREPARE.
      EXPORT LT_VBPA3KOM FROM LT_VBPA3KOM TO MEMORY ID 'ONETIMECUST_TAX3'.
    ENDIF.

*Billing Plan Header
    CLEAR: LV_BILLPLAN_HD_FLAG.
    IF  CS_SALESORDER-BILLINGPLANSTARTDATE IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANSTARTDATE12 IS NOT INITIAL OR
        CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.

      LV_BILLPLAN_HD_FLAG = 'X'.
    ENDIF.


    CLEAR LS_EXTENSIONIN.
    LS_BAPE_VBAK-ZZPOB          = CS_SALESORDER-POB.
    LS_BAPE_VBAK-ZZWARRANTY_L   = CS_SALESORDER-WARRANTYLETTER.
    LS_BAPE_VBAK-ZZRUNNING      = CS_SALESORDER-RUNNING.

    LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAK'.
    APPEND_EXTENSION(
      EXPORTING
        BAPE_STRUCTURE = LS_BAPE_VBAK
      CHANGING
        EXTENSIONIN   = LS_EXTENSIONIN
        EXTENSIONIN_T = LT_EXTENSIONIN
   ).
    CLEAR LS_EXTENSIONIN.
    LS_BAPE_VBAKX-ZZPOB         = 'X'.
    LS_BAPE_VBAKX-ZZWARRANTY_L  = 'X'.
    LS_BAPE_VBAKX-ZZRUNNING       = 'X'.

    LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAKX'.
    APPEND_EXTENSION(
      EXPORTING
        BAPE_STRUCTURE = LS_BAPE_VBAKX
      CHANGING
        EXTENSIONIN   = LS_EXTENSIONIN
        EXTENSIONIN_T = LT_EXTENSIONIN
   ).


*----------------Items----------------
    CLEAR: LT_ITEM,LT_CONDITION_ITEM.
    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_ITEM>).

      "Convert Sales Unit to Internal Value
      IF <LFS_ITEM>-SALESUNIT IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            INPUT          = <LFS_ITEM>-SALESUNIT
          IMPORTING
            OUTPUT         = LV_SALES_UNIT_CONV
          EXCEPTIONS
            UNIT_NOT_FOUND = 1
            OTHERS         = 2.
        IF SY-SUBRC <> 0.
          CLEAR: LV_SALES_UNIT_CONV.
        ENDIF.
      ENDIF.

*Check service material
      LV_REF_DOC_IT = <LFS_ITEM>-SAPITEMNUMBER.

      APPEND VALUE #( ITM_NUMBER  = <LFS_ITEM>-SAPITEMNUMBER
                      REF_DOC     = CS_SALESORDER-REFERENCESDDOCUMENT
                      REF_DOC_IT  = LV_REF_DOC_IT
                      REF_DOC_CA  = 'B'
*                      MATERIAL    = <LFS_ITEM>-MATERIALNUMBER
                      MATERIAL_LONG = <LFS_ITEM>-MATERIALNUMBER
                      HG_LV_ITEM  = <LFS_ITEM>-HIGHERLEVEL
                      TARGET_QTY  = <LFS_ITEM>-QUANTITY
                      SALES_UNIT  = LV_SALES_UNIT_CONV
                      PLANT       = <LFS_ITEM>-PLANT
                      STORE_LOC   = <LFS_ITEM>-STORAGELOCATION
                      ITEM_CATEG  = <LFS_ITEM>-ITEMCATEGORY
                      WBS_ELEM    = <LFS_ITEM>-WBS
                      REASON_REJ  = <LFS_ITEM>-REASONFORREJECT
                      )
                      TO LT_ITEM.

*  Conditions

*ZDH6
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZDH6'
                      KBETR = <LFS_ITEM>-ONTOPDISCOUNTAMOUNT
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.
*ZPR1
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZPR1'
                      KBETR = <LFS_ITEM>-LISTPRICE
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI1' ITEM DISCOUNT (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZDI1'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTPER * 10
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZDI2' ITEM DISCOUNT (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZDI2'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTVAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD01' ITEM DISCOUNT LEVEL 1 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD01'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1PER * 10
                       ) TO LT_CONDITION_ITEM.

*'ZD02' ITEM DISCOUNT LEVEL 1 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD02'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV1VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD03' ITEM DISCOUNT LEVEL 2 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD03'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2PER * 10
                       ) TO LT_CONDITION_ITEM.

*'ZD04' ITEM DISCOUNT LEVEL 2 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD04'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV2VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD05' ITEM DISCOUNT LEVEL 3 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD05'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3PER * 10
                      ) TO LT_CONDITION_ITEM.

*'ZD06' ITEM DISCOUNT LEVEL 3 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD06'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV3VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD07' ITEM DISCOUNT LEVEL 4 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD07'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4PER * 10
                       ) TO LT_CONDITION_ITEM.

*'ZD08' ITEM DISCOUNT LEVEL 4 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD08'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV4VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZD09' ITEM DISCOUNT LEVEL 5 (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD09'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5PER * 10
                       ) TO LT_CONDITION_ITEM.

*'ZD10' ITEM DISCOUNT LEVEL 5 (VAL.)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZD10'
                      KBETR = <LFS_ITEM>-ITEMDISCOUNTLV5VAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZSI1' SVItemDiscountPer (%)
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZSI1'
                      KBETR = <LFS_ITEM>-SVITEMDISCOUNTPER * 10
                      ) TO LT_CONDITION_ITEM.

*'ZSI2' SVItemDiscountVal
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZSI2'
                      KBETR = <LFS_ITEM>-SVITEMDISCOUNTVAL
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS1' Installation
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZPS1'
                      KBETR = <LFS_ITEM>-INSTALLATION
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS2' Maintenance
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZPS2'
                      KBETR = <LFS_ITEM>-MAINTENANCE
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS3' SLA
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZPS3'
                      KBETR = <LFS_ITEM>-SLA
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.
*'ZWR1' STDWarranty
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZWR1'
                      KBETR = <LFS_ITEM>-STDWARRANTY
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZWR3' ExtendWarranty
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZWR3'
                      KBETR = <LFS_ITEM>-EXTENDWARRANTY
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.

*'ZPS4' ModifyService
      APPEND VALUE #( KPOSN = <LFS_ITEM>-SAPITEMNUMBER
                      KSCHL = 'ZPS4'
                      KBETR = <LFS_ITEM>-MODIFYSERVICE
                      WAERK = LS_KNVV-WAERS ) TO LT_CONDITION_ITEM.


*Schedule line
      LOOP AT CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WHERE SAPITEMNUMBER = <LFS_ITEM>-SAPITEMNUMBER.
        CLEAR: LV_REQ_DLV_BL,
               LV_SCHED_TYPE.

        SELECT SINGLE TVEP~ETTYP,
                      TVEP~LIFSP
          FROM TVEP INNER JOIN TVEPZ ON TVEP~ETTYP = TVEPZ~ETTYP
         WHERE PSTYV = @<LFS_ITEM>-ITEMCATEGORY
           AND DISMM = ( SELECT DISMM
                           FROM MARC
                          WHERE MATNR = @<LFS_ITEM>-MATERIALNUMBER
                            AND WERKS = @<LFS_ITEM>-PLANT )
          INTO ( @LV_SCHED_TYPE,@LV_REQ_DLV_BL  ).

        APPEND VALUE #( ITM_NUMBER = <LFS_SCHEDULELINE>-SAPITEMNUMBER
                        SCHED_LINE = <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER
                        REQ_QTY    = <LFS_SCHEDULELINE>-REQUESTQUANTITY
                        REQ_DATE   = <LFS_SCHEDULELINE>-REQUESTDATE
                        REQ_DLV_BL = LV_REQ_DLV_BL
                        SCHED_TYPE = LV_SCHED_TYPE )
                        TO LT_SCHEDULE_LINES.


        IF <LFS_ITEM>-ITEMCATEGORY+0(3) = 'ZSB'.
          <LFS_SCHEDULELINE>-CONFIRMQUANTITY = <LFS_SCHEDULELINE>-REQUESTQUANTITY.
        ELSE.
          CLEAR: LV_AV_QTY_PLT.

          LV_PLANT    = <LFS_ITEM>-PLANT.
          LV_MATERIAL = <LFS_ITEM>-MATERIALNUMBER.

          AVAILABILITY_CHECK_S4(
            EXPORTING
              MATNR    = LV_MATERIAL
              WERKS    = LV_PLANT
            IMPORTING
              AVAL_STOCK = LV_AV_QTY_PLT
              ).

          IF <LFS_SCHEDULELINE>-REQUESTQUANTITY > LV_AV_QTY_PLT.
            <LFS_SCHEDULELINE>-CONFIRMQUANTITY = 0.
          ELSE.
            <LFS_SCHEDULELINE>-CONFIRMQUANTITY =  <LFS_SCHEDULELINE>-REQUESTQUANTITY.
          ENDIF.
        ENDIF.
      ENDLOOP.

*  Extensions
      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAP-POSNR          = <LFS_ITEM>-SAPITEMNUMBER.
      LS_BAPE_VBAP-ZZ1_LOB_SO_SDI = <LFS_ITEM>-LOB.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAP'.

      APPEND_EXTENSION(
        EXPORTING
          BAPE_STRUCTURE = LS_BAPE_VBAP
        CHANGING
          EXTENSIONIN   = LS_EXTENSIONIN
          EXTENSIONIN_T = LT_EXTENSIONIN
     ).

      CLEAR LS_EXTENSIONIN.
      LS_BAPE_VBAPX-POSNR          = <LFS_ITEM>-SAPITEMNUMBER.
      LS_BAPE_VBAPX-ZZ1_LOB_SO_SDI = 'X'.

      LS_EXTENSIONIN-STRUCTURE = 'BAPE_VBAPX'.
      APPEND_EXTENSION(
        EXPORTING
          BAPE_STRUCTURE = LS_BAPE_VBAPX
        CHANGING
          EXTENSIONIN   = LS_EXTENSIONIN
          EXTENSIONIN_T = LT_EXTENSIONIN
     ).

      CLEAR:
        LV_SALES_UNIT_CONV.

    ENDLOOP.

    "Export to routine 902 IN VOFM  -> FRM_KONDI_WERT_902
    EXPORT LT_CONDITION_ITEM FROM LT_CONDITION_ITEM TO MEMORY ID 'CONDTYP_SO_FROM_SF'.
    EXPORT GRT_CONDITION_TYPE FROM GRT_CONDITION_TYPE TO MEMORY ID 'CONDTYP_SO_MASTER'.
*-------------------------------------
* Sales Order Create
*-------------------------------------
    DATA: LOGIC_SWITCH  TYPE BAPISDLS.
    LOGIC_SWITCH-NOSTRUCTURE = 'X'.
    CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
      EXPORTING
        ORDER_HEADER_IN    = LS_HEADER
        TESTRUN            = IF_TESTRUN
        LOGIC_SWITCH       = LOGIC_SWITCH
      IMPORTING
        SALESDOCUMENT      = EF_SALES_DOC
      TABLES
        RETURN             = LT_RETURN
        ORDER_ITEMS_IN     = LT_ITEM
        ORDER_SCHEDULES_IN = LT_SCHEDULE_LINES
        ORDER_PARTNERS     = LT_PARTNERS
*       ORDER_CONDITIONS_IN = LT_ITEMS_COND
        ORDER_TEXT         = LT_TEXTS
        PARTNERADDRESSES   = LT_PARTNERADDRESSES
        EXTENSIONIN        = LT_EXTENSIONIN.

    IF LINE_EXISTS( LT_RETURN[ TYPE = 'A' ] ) OR
       LINE_EXISTS( LT_RETURN[ TYPE = 'E' ] ).

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

*Message for schedule line
      READ TABLE LT_RETURN ASSIGNING FIELD-SYMBOL(<LFS_RETURN>) WITH KEY TYPE   = 'E'
                                                                         ID     = 'ZSDSSD01'
                                                                         NUMBER = '026'.
      IF SY-SUBRC = 0.
*       Import all return message from quota check to
*       Class ZCL_SDSSD_CREATE_CHANGE_SO_SRV , Method SALES_ORDER_CREATE, SALES_ORDER_CHANGE
        IMPORT LT_RETURN_MSG = LT_RETURN_MSG FROM MEMORY ID 'CHECK_QUOTA_VBEP'.

        LOOP AT LT_RETURN_MSG ASSIGNING FIELD-SYMBOL(<LFS_RETURN_MSG>) WHERE MSGTY = 'E'
                                                                         AND MSGID = 'ZSDSSD01'
                                                                         AND MSGNO = '026'.

          LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_RETURN_MSG>-POSNR
                                                                 AND SAPSCHEDULELINENUMBER = <LFS_RETURN_MSG>-ETENR.

            <LFS_SCHEDULELINE>-STATUS          = 'B'.
            CALL FUNCTION 'MESSAGE_TEXT_BUILD'
              EXPORTING
                MSGID               = <LFS_RETURN_MSG>-MSGID
                MSGNR               = <LFS_RETURN_MSG>-MSGNO
                MSGV1               = <LFS_RETURN_MSG>-MSGV1
                MSGV2               = <LFS_RETURN_MSG>-MSGV2
                MSGV3               = <LFS_RETURN_MSG>-MSGV3
                MSGV4               = <LFS_RETURN_MSG>-MSGV4
              IMPORTING
                MESSAGE_TEXT_OUTPUT = <LFS_SCHEDULELINE>-MESSAGE.

          ENDLOOP.
        ENDLOOP.
      ENDIF.

    ELSE.

      READ TABLE LT_RETURN INTO DATA(LS_RETURN) WITH KEY TYPE   = 'S'
                                                         ID     = 'V1'
                                                         NUMBER = '311'.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'
*         IMPORTING
*           RETURN        =
          .
        WAIT UP TO 3 SECONDS.

*Message for schedule line

        READ TABLE LT_RETURN ASSIGNING <LFS_RETURN> WITH KEY TYPE   = 'E'
                                                             ID     = 'ZSDSSD01'
                                                             NUMBER = '025'.
        IF SY-SUBRC = 0.
*       Import all return message from quota check to
*       Class ZCL_SDSSD_CREATE_CHANGE_SO_SRV , Method SALES_ORDER_CREATE, SALES_ORDER_CHANGE
          IMPORT LT_RETURN_MSG = LT_RETURN_MSG FROM MEMORY ID 'CHECK_QUOTA_VBEP'.

          LOOP AT LT_RETURN_MSG ASSIGNING <LFS_RETURN_MSG> WHERE MSGTY = 'E'
                                                             AND MSGID = 'ZSDSSD01'
                                                             AND MSGNO = '025'.

            LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_RETURN_MSG>-POSNR
                                                                   AND SAPSCHEDULELINENUMBER = <LFS_RETURN_MSG>-ETENR.

              CALL FUNCTION 'MESSAGE_TEXT_BUILD'
                EXPORTING
                  MSGID               = <LFS_RETURN_MSG>-MSGID
                  MSGNR               = <LFS_RETURN_MSG>-MSGNO
                  MSGV1               = <LFS_RETURN_MSG>-MSGV1
                  MSGV2               = <LFS_RETURN_MSG>-MSGV2
                  MSGV3               = <LFS_RETURN_MSG>-MSGV3
                  MSGV4               = <LFS_RETURN_MSG>-MSGV4
                IMPORTING
                  MESSAGE_TEXT_OUTPUT = <LFS_SCHEDULELINE>-MESSAGE.

            ENDLOOP.
          ENDLOOP.
        ENDIF.


        DATA: LV_FVAL    TYPE CHAR30,
              CTU_PARAMS TYPE CTU_PARAMS,
              MESSTAB    TYPE TABLE OF BDCMSGCOLL.

*Insert billing plan Header
        IF LV_BILLPLAN_HD_FLAG = 'X'.
          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'   DYNPRO = '0102' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_CURSOR'   FVAL = 'VBAK-VBELN' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=ENT2' ).

          LV_FVAL = EF_SALES_DOC.
          BDC_FIELD( EXPORTING FNAM = 'VBAK-VBELN' FVAL = LV_FVAL ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).

          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '=KFPL' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'  DYNPRO = '1300' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL = '/EESC' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '/00' ).

          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE.
          BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAT' FVAL =  LV_FVAL ).
          BDC_FIELD( EXPORTING FNAM = 'FPLA-BEDAR' FVAL = '01' ).
*Page1

*Date
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE1.
          IF LV_FVAL IS NOT INITIAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(01)' FVAL = LV_FVAL ).
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE2.
          IF LV_FVAL IS NOT INITIAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE3.
          IF LV_FVAL IS NOT INITIAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE4.
          IF LV_FVAL IS NOT INITIAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
          ENDIF.
          LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE5.
          IF LV_FVAL IS NOT INITIAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
          ENDIF.
*Value
          IF CS_SALESORDER-BILLINGPLANAMOUNT1 IS NOT INITIAL.
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT1.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(01)' FVAL =  LV_FVAL ).
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT2 IS NOT INITIAL.
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT2.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT3 IS NOT INITIAL.
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT3.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT4 IS NOT INITIAL.
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT4.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL =  LV_FVAL ).
          ENDIF.
          IF CS_SALESORDER-BILLINGPLANAMOUNT5 IS NOT INITIAL.
            LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT5.
            CONDENSE LV_FVAL.
            BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).
          ENDIF.


*page2
          IF CS_SALESORDER-BILLINGPLANSTARTDATE6 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL.

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).


*Date
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE6.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL = LV_FVAL ).
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE7.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE8.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE9.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(05)' FVAL = LV_FVAL ).
            ENDIF.
*Value
            IF CS_SALESORDER-BILLINGPLANAMOUNT6 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT6.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL = LV_FVAL ).
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT7 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT7.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL =  LV_FVAL ).
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT8 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT8.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT9 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT9.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(05)' FVAL = LV_FVAL ).
            ENDIF.
          ELSE.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLCNMS'   DYNPRO = '1300' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL = '/EESC' ).
          ENDIF.

*page3
          IF CS_SALESORDER-BILLINGPLANSTARTDATE10 IS NOT INITIAL AND CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL.
            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '=ANLE' ).

            BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'   DYNPRO = '4001' ).
            BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE'  FVAL =  '/00' ).
*Date
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE10.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(02)' FVAL =  LV_FVAL ).
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE11.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(03)' FVAL = LV_FVAL ).
            ENDIF.
            LV_FVAL = CS_SALESORDER-BILLINGPLANSTARTDATE12.
            IF LV_FVAL IS NOT INITIAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-AFDAT(04)' FVAL = LV_FVAL ).
            ENDIF.

*Value
            IF CS_SALESORDER-BILLINGPLANAMOUNT10 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT10.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(02)' FVAL =  LV_FVAL ).
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT11 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT11.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(03)' FVAL = LV_FVAL ).
            ENDIF.
            IF CS_SALESORDER-BILLINGPLANAMOUNT12 IS NOT INITIAL.
              LV_FVAL = CS_SALESORDER-BILLINGPLANAMOUNT12.
              CONDENSE LV_FVAL.
              BDC_FIELD( EXPORTING FNAM = 'FPLT-FAKWR(04)' FVAL = LV_FVAL ).
            ENDIF.
          ENDIF.


          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLV60F'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=S\BACK' ).

*Click back and save

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPMV45A'  DYNPRO = '4001' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=SICH' ).

          BDC_DYNPRO( EXPORTING PROGRAM = 'SAPLSLVC_FULLSCREEN'  DYNPRO = '0700' ).
          BDC_FIELD( EXPORTING FNAM = 'BDC_OKCODE' FVAL =  '=&ONT' ).

        ENDIF.
        IF GT_BDCDATA IS NOT INITIAL.
          CTU_PARAMS = VALUE CTU_PARAMS( DISMODE = 'N'
                                         DEFSIZE = 'X'
                                         UPDMODE = 'S' ).
          CALL TRANSACTION 'VA02' WITH AUTHORITY-CHECK USING GT_BDCDATA     ##AUTH_ERR_HANDLER_MISSING
                           OPTIONS FROM CTU_PARAMS
                           MESSAGES INTO MESSTAB.

          WAIT UP TO 1 SECONDS.

          SELECT SINGLE FPLNR INTO @DATA(LV_FPLNR)      "#EC CI_NOORDER
            FROM FPLA                              ##WARN_OK
           WHERE VBELN = @EF_SALES_DOC
             AND RFPLN = @SPACE.
          IF SY-SUBRC = 0.
            CS_SALESORDER-SAPBILLINGID = LV_FPLNR.
          ENDIF.
        ENDIF.
      ENDIF.

    ENDIF.

    READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC = 0.
      CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
      CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.

      CALL METHOD ZCL_SDSSD_CREATE_CHANGE_SO_SRV=>GET_CREDIT_MESSAGE
        EXPORTING
          AUART                = CS_SALESORDER-DOCUMENTTYPE
        IMPORTING
          MESSAGE_STATUS       = LV_CREDIT_MESSAGE_STATUS
          MESSAGE              = LV_CREDIT_MESSAGE
          FSCM_CREDIT_MESSAGES = LT_FSCM_CREDIT_MESSAGES.
      IF LV_CREDIT_MESSAGE IS NOT INITIAL.
        CS_SALESORDER-RESPONSEMESSAGE = |{ CS_SALESORDER-RESPONSEMESSAGE }/{ LV_CREDIT_MESSAGE }|.
      ENDIF.

    ELSE.
      READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'S'
                                                   ID = 'V1'
                                                   NUMBER = '311'.
      IF SY-SUBRC = 0.

        READ TABLE LT_RETURN INTO DATA(LS_RETURN_W) WITH KEY TYPE = 'W'
                                                     ID = 'V1'
                                                     NUMBER = '555'."The sales document is not yet complete: Edit data
        IF SY-SUBRC = 0.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN_W-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN_W-MESSAGE.
          CS_SALESORDER-RESPONSEMESSAGE = |{ CS_SALESORDER-RESPONSEMESSAGE }/{ LS_RETURN-MESSAGE }|.
        ELSE.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
        ENDIF.

        IF CS_SALESORDER-PAYMENTTERMS <> 'C000'.
          CALL METHOD ZCL_SDSSD_CREATE_CHANGE_SO_SRV=>GET_CREDIT_MESSAGE
            EXPORTING
*             VBELN                = EF_SALES_DOC
              AUART                = CS_SALESORDER-DOCUMENTTYPE
            IMPORTING
              MESSAGE_STATUS       = LV_CREDIT_MESSAGE_STATUS
              MESSAGE              = LV_CREDIT_MESSAGE
              FSCM_CREDIT_MESSAGES = LT_FSCM_CREDIT_MESSAGES.
          IF LV_CREDIT_MESSAGE IS NOT INITIAL.
            CS_SALESORDER-RESPONSEMESSAGE = |{ LV_CREDIT_MESSAGE }/{ CS_SALESORDER-RESPONSEMESSAGE } |.
          ENDIF.
        ENDIF.

      ELSE.
        READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
        IF SY-SUBRC = 0.
          CS_SALESORDER-RESPONSESTATUS  = LS_RETURN-TYPE.
          CS_SALESORDER-RESPONSEMESSAGE = LS_RETURN-MESSAGE.
        ENDIF.
      ENDIF.
    ENDIF.

    LOOP AT LT_RETURN ASSIGNING FIELD-SYMBOL(<LS_RETURN>).
      LS_RESPONSE-RESP_STATUS  = <LS_RETURN>-TYPE.
      LS_RESPONSE-RESP_MESSAGE = <LS_RETURN>-MESSAGE.
      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.

    LOOP AT LT_FSCM_CREDIT_MESSAGES ASSIGNING FIELD-SYMBOL(<LFS_CREDIT_MESSAGES>).
      LS_RESPONSE-RESP_STATUS  = 'W'.
      LS_RESPONSE-RESP_MESSAGE = <LFS_CREDIT_MESSAGES>-MSG_TEXT.
      APPEND LS_RESPONSE TO CT_RESPONSE.
    ENDLOOP.

    SORT MESSTAB BY MSGID MSGNR.
    DELETE ADJACENT DUPLICATES FROM MESSTAB COMPARING MSGID MSGNR.
    LOOP AT MESSTAB ASSIGNING FIELD-SYMBOL(<LFS_MESSTAB>).
      LS_RESPONSE-RESP_STATUS  = <LFS_MESSTAB>-MSGTYP.

      CALL FUNCTION 'FORMAT_MESSAGE'
        EXPORTING
          ID        = <LFS_MESSTAB>-MSGID
*         LANG      = '-D'
          NO        = <LFS_MESSTAB>-MSGNR
          V1        = <LFS_MESSTAB>-MSGV1
          V2        = <LFS_MESSTAB>-MSGV2
          V3        = <LFS_MESSTAB>-MSGV3
          V4        = <LFS_MESSTAB>-MSGV4
        IMPORTING
          MSG       = LS_RESPONSE-RESP_MESSAGE
        EXCEPTIONS
          NOT_FOUND = 1
          OTHERS    = 2.
      IF SY-SUBRC <> 0.
        LS_RESPONSE-RESP_STATUS  = SY-MSGTY.
      ENDIF.

      APPEND LS_RESPONSE TO CT_RESPONSE.

      IF CS_SALESORDER-RESPONSESTATUS EQ 'S'.
        IF <LFS_MESSTAB>-MSGTYP = 'S'        AND
           <LFS_MESSTAB>-MSGID  = 'ZSDSSD01' AND
           <LFS_MESSTAB>-MSGNR  = '032'.
          CONCATENATE CS_SALESORDER-RESPONSEMESSAGE 'Product Control' INTO CS_SALESORDER-RESPONSEMESSAGE SEPARATED BY SPACE.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD SALES_ORDER_PROCESS.

*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV
*  Creation Date      : 15.05.2024
*  Author             : Zulkiff B.(Eviden)
*  Add-on ID          : N/A
*  Description        : Sales Order Create/Change via BAPI
*  Purpose            :
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*  04.03.2025  420000464   Zulkiff B. Credit check warning when changing SO
*-----------------------------------------------------------------------

    DATA: LV_INVALID TYPE FLAG,
          LV_SALESORDER_DOC TYPE VBELN.

    LV_SALESORDER_DOC = CS_SALESORDER-SAPSALESORDERNO.

* Get constant from table ZSDSCAC001
    GET_CONSTANTS( CHANGING CT_RESPONSE = CT_RESPONSE ).

    READ TABLE CT_RESPONSE WITH KEY RESP_STATUS = GC_ERROR TRANSPORTING NO FIELDS.
    IF SY-SUBRC = 0.
      RETURN.
    ENDIF.

    IF NOT ( CS_SALESORDER-FLAG = SPACE OR CS_SALESORDER-FLAG = 'I' OR CS_SALESORDER-FLAG = 'U' ).
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E07
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
      RETURN.
    ENDIF.

* Process input validation
    VALIDATE_INPUT(
      EXPORTING
        IF_RECORD_MODE    = CS_SALESORDER-FLAG
      IMPORTING
        EF_INVALID        = LV_INVALID
      CHANGING
        CS_SALESORDER     = CS_SALESORDER
        CT_SALESORDERITEM = CT_SALESORDERITEM
        CT_SCHEDULELINE   = CT_SCHEDULELINE
        CT_RESPONSE       = CT_RESPONSE
        ).


    IF LV_INVALID = SPACE. "No Error
      CASE CS_SALESORDER-FLAG.
        WHEN  SPACE OR 'I'.
          SALES_ORDER_CREATE(
            EXPORTING
              IF_TESTRUN        = IF_TESTRUN
            IMPORTING
              EF_SALES_DOC      = EF_SALES_DOC
            CHANGING
              CS_SALESORDER     = CS_SALESORDER
              CT_SALESORDERITEM = CT_SALESORDERITEM
              CT_SCHEDULELINE   = CT_SCHEDULELINE
              CT_RESPONSE       = CT_RESPONSE ).


        WHEN 'U'.
          EF_SALES_DOC = LV_SALESORDER_DOC.
          SALES_ORDER_CHANGE(
            EXPORTING
              IF_TESTRUN        = IF_TESTRUN
            CHANGING
              CS_SALESORDER     = CS_SALESORDER
              CT_SALESORDERITEM = CT_SALESORDERITEM
              CT_SCHEDULELINE   = CT_SCHEDULELINE
              CT_RESPONSE       = CT_RESPONSE ).
      ENDCASE.

    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_AMOUNT.

    CLEAR: CS_RESPONSE.

* Only when value exist
    IF AMOUNT_IN IS NOT INITIAL.

      CALL FUNCTION 'CATS_NUMERIC_INPUT_CHECK'
        EXPORTING
          INPUT      = AMOUNT_IN
*         INTERNAL   = 'X'
*   IMPORTING
*         OUTPUT     =
        EXCEPTIONS
          NO_NUMERIC = 1
          OTHERS     = 2.
      IF SY-SUBRC <> 0.
        "Please input valid amount
        CS_RESPONSE-RESP_STATUS  = GC_ERROR.
        CS_RESPONSE-RESP_MESSAGE = TEXT-E34.
        RETURN.
      ELSE.
        AMOUNT_OUT = AMOUNT_IN.
      ENDIF.

    ENDIF.
  ENDMETHOD.


  METHOD VALIDATE_BILLINGPLAN.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_INPUT
*  Creation Date      : 24.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate billing plan for both header and item
*  Purpose            : Validate Billing plan Header/Item
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE TYPE ZSDSCAS006,
          LV_AMOUNT   TYPE CHAR20.

*Billing Plan -> process via BDC VA02 -> must check date format and number
*date format -> yyyy-mm-dd
*number -> no comma(,) and no alphabet

    "Check date
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate1":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 IS  NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE1
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE1
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE1 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE1+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate2":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE2
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE2
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE2 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE2+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate3":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE3
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE3
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE3 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE3+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate4":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE4
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE4
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE4 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE4+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate5":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE5
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE5
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE5 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE5+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate6":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE6
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE6
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE6 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE6+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate7":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE7
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE7
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE7 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE7+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate8":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE8
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE8
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE8 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE8+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate9":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE9
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE9
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE9 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE9+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate10":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE10
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE10
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE10 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE10+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate11":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE11
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE11
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE11 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE11+0(4) }|.
      ENDIF.
    ENDIF.

    "BillingPlanStartDate12":
    IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 IS NOT INITIAL.
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_BILLINGPLAN-BILLINGPLANSTARTDATE12
                     IMPORTING DATE_OUT    = CS_BILLINGPLAN-BILLINGPLANSTARTDATE12
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANSTARTDATE12 = |{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+6(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+4(2) }.{ CS_BILLINGPLAN-BILLINGPLANSTARTDATE12+0(4) }|.
      ENDIF.
    ENDIF.

*AMOUNT
    "BillingPlanAmount1":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT1 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT1.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT1 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount2":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT2 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT2.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT2 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount3":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT3 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT3.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT3 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount4":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT4 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT4.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT4 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount5":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT5 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT5.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT5 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount6":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT6 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT6.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT6 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount7":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT7 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT7.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT7 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount8":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT8 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT8.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT8 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount9":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT9 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT9.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT9 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount10":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT10 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT10.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT10 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount11":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT11 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT11.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT11 = LV_AMOUNT.
      ENDIF.
    ENDIF.

    "BillingPlanAmount12":
    IF CS_BILLINGPLAN-BILLINGPLANAMOUNT12 IS NOT INITIAL.
      CLEAR: LV_AMOUNT .
      LV_AMOUNT = CS_BILLINGPLAN-BILLINGPLANAMOUNT12.
      CONDENSE LV_AMOUNT.
      VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                       IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                 CS_RESPONSE = LS_RESPONSE
                      ).
      IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                    ).
      ELSE.
        CS_BILLINGPLAN-BILLINGPLANAMOUNT12 = LV_AMOUNT.
      ENDIF.
    ENDIF.


    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESP_STATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_DATE.
    DATA:
      LV_LENGTH  TYPE  I,
      LV_DATE    TYPE  CHAR8.

    CLEAR: CS_RESPONSE.

    LV_DATE = |{ DATE_IN+0(4) }{ DATE_IN+5(2) }{ DATE_IN+8(2) }|.

* Length?
    LV_LENGTH = STRLEN( LV_DATE ).
    IF LV_LENGTH NE 8.
*   Wrong Date format. Please use format YYYY-MM-DD
      CS_RESPONSE-RESP_STATUS  = GC_ERROR.
      CS_RESPONSE-RESP_MESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

    IF NOT LV_DATE+6(2) BETWEEN 01 AND 31 ##NUMBER_OK.
*   Wrong Date format. Please use format YYYY-MM-DD
      CS_RESPONSE-RESP_STATUS  = GC_ERROR.
      CS_RESPONSE-RESP_MESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

* Check month
    IF NOT LV_DATE+4(2) BETWEEN 01 AND 12 ##NUMBER_OK.
*   Wrong Date format. Please use format YYYY-MM-DD
      CS_RESPONSE-RESP_STATUS  = GC_ERROR.
      CS_RESPONSE-RESP_MESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

* 1-4th digit is year
    IF NOT LV_DATE+0(4) BETWEEN 1900 AND 2200 AND
       DATE_IN+0(4) NE '9999' ##NUMBER_OK.
*   Wrong Date format. Please use format YYYY-MM-DD
      CS_RESPONSE-RESP_STATUS  = GC_ERROR.
      CS_RESPONSE-RESP_MESSAGE = TEXT-E05.
      RETURN.
    ENDIF.

* Assign Output
    DATE_OUT = LV_DATE.
  ENDMETHOD.


  METHOD VALIDATE_HEADER.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_HEADER
*  Creation Date      : 24.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE    TYPE	ZSDSCAS006,
          LV_VBELN_REF   TYPE VBAK-VBELN,
          LS_BILLINGPLAN TYPE TS_BILLINGPLAN.

    "Create Sales Order Ref. Quotation No.
    IF CS_SALESORDER-REFERENCESDDOCUMENT IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-REFERENCESDDOCUMENT
        IMPORTING
          OUTPUT = LV_VBELN_REF.

      SELECT SINGLE VBELN
        FROM VBAK
       WHERE VBELN = @LV_VBELN_REF
        INTO @LV_VBELN_REF.
      IF SY-SUBRC <> 0.
        CLEAR: LS_RESPONSE.
        "Quotation No. & does not exist
        LS_RESPONSE-RESP_MESSAGE = TEXT-E08.
        LS_RESPONSE-RESP_MESSAGE  = REPLACE( VAL = LS_RESPONSE-RESP_MESSAGE
                                                SUB = '&'
                                                WITH = CS_SALESORDER-REFERENCESDDOCUMENT
                                                OCC = 0 ).
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Sales Order Type
    IF CS_SALESORDER-DOCUMENTTYPE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E09
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE AUART                           ##NEEDED
        FROM TVAK
       WHERE AUART = @CS_SALESORDER-DOCUMENTTYPE
        INTO @DATA(LV_AUART).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E10
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "DistributionChannel
    IF CS_SALESORDER-DISTRIBUTIONCHANNEL IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E11
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VTWEG                               ##NEEDED
        FROM TVTW
       WHERE VTWEG = @CS_SALESORDER-DISTRIBUTIONCHANNEL
        INTO @DATA(LV_VTWEG).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E12
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Sales Office
    IF CS_SALESORDER-SALESOFFICE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E13
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VKBUR                         ##NEEDED
        FROM TVBUR
       WHERE VKBUR = @CS_SALESORDER-SALESOFFICE
        INTO @DATA(LV_VKBUR).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E14
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Sales Group
    IF CS_SALESORDER-SALESGROUP IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E15
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VKGRP                 ##NEEDED
        FROM TVKGR
       WHERE VKGRP = @CS_SALESORDER-SALESGROUP
        INTO @DATA(LV_VKGRP).
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E16
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Customer PO Number
    IF CS_SALESORDER-PONUMBER = SPACE.
      CS_SALESORDER-PONUMBER = CS_SALESORDER-SFSALESORDERNO.
    ENDIF.


    "Terms of Payment
    IF CS_SALESORDER-PAYMENTTERMS IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E17
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE ZTERM,ZTAGG,ZTAG1   ##WARN_OK       "#EC CI_NOORDER
        FROM T052
       WHERE ZTERM = @CS_SALESORDER-PAYMENTTERMS
        INTO @DATA(LS_SF_ZTERM) ##NEEDED.
      IF SY-SUBRC <> 0.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E18
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    "Customer Sold-to
    IF CS_SALESORDER-BPSOLDTONUMBER IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E23
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      "Check One-time customer in (KNA1) If customer account (KNA1-KTOKD) = ‘Z060’ One Time
      "Define require field : OnetimeName1, Street
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPSOLDTONUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPSOLDTONUMBER.

      SELECT SINGLE KUNNR,KTOKD,ADRNR
        FROM KNA1
       WHERE KUNNR = @CS_SALESORDER-BPSOLDTONUMBER
        INTO @DATA(LS_KNA1).
      IF SY-SUBRC <> 0.
        "Customer Sold-to does not exist
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E25
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        IF LS_KNA1-KTOKD IN GRT_ONETIMECUST.
          IF CS_SALESORDER-ONETIMENAME1 IS INITIAL.
            "Please Input customer name (one-time)
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E26
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.

          IF CS_SALESORDER-STREET IS INITIAL.
            "Please Input customer address (one-time)
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E27
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-BPSHIPTONUMBER IS INITIAL.
      "Missing Customer Ship-to
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E28
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPSHIPTONUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPSHIPTONUMBER.
    ENDIF.

    IF CS_SALESORDER-BPBILLTONUMBER IS INITIAL.
      "Missing Customer Bill-to
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E29
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPBILLTONUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPBILLTONUMBER.
    ENDIF.

    IF CS_SALESORDER-BPPAYERNUMBER IS INITIAL.
      "Missing Customer Payer
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E30
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPPAYERNUMBER
        IMPORTING
          OUTPUT = CS_SALESORDER-BPPAYERNUMBER.
    ENDIF.

    IF CS_SALESORDER-BPSALESEMPLOYEE IS INITIAL.
      "Missing Customer Sales Employee
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E31
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = CS_SALESORDER-BPSALESEMPLOYEE
        IMPORTING
          OUTPUT = CS_SALESORDER-BPSALESEMPLOYEE.
    ENDIF.


*Billing Plan -> process via BDC VA02 -> must check date format and number
*date format -> yyyy-mm-dd
*number -> no comma(,) and no alphabet
    MOVE-CORRESPONDING CS_SALESORDER TO LS_BILLINGPLAN.
    VALIDATE_BILLINGPLAN(
      EXPORTING
        IF_RECORD_MODE = IF_RECORD_MODE
      IMPORTING
        EF_INVALID     = EF_INVALID
      CHANGING
        CS_BILLINGPLAN = LS_BILLINGPLAN
        CT_RESPONSE    = CT_RESPONSE
        ).
    MOVE-CORRESPONDING  LS_BILLINGPLAN TO CS_SALESORDER.
    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESP_STATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_HEADER_CHANGE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_INPUT
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header(Change)
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE TYPE ZSDSCAS006,
          LV_MSG      TYPE ZSDSDE_REST_MESSAGE.

    IF CS_SALESORDER-CREATEDATE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E04
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      "Check date
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_SALESORDER-CREATEDATE
                     IMPORTING DATE_OUT    = CS_SALESORDER-CREATEDATE
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_SALESORDER-CREATEDATE IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-SAPSALESORDERNO IS INITIAL.
      "Sales Order No. must not be empty for change mode
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E58
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      SELECT SINGLE VBELN         ##NEEDED
        FROM VBAK
       WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
        INTO @DATA(LV_VBELN).
      IF SY-SUBRC <> 0.
        "// Error : Sales Order XXXXXXXXXX does not exist
        LV_MSG = TEXT-E59.
        REPLACE '&' IN LV_MSG WITH CS_SALESORDER-SAPSALESORDERNO .
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LV_MSG
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    READ TABLE CT_RESPONSE WITH KEY RESP_STATUS = GC_ERROR TRANSPORTING NO FIELDS.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.
  ENDMETHOD.


  METHOD VALIDATE_HEADER_CREATE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_HEADER_CREATE
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

    DATA: LS_RESPONSE  TYPE	ZSDSCAS006.

    "Salesforce Order ID
    IF CS_SALESORDER-SFSALESORDERNO IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E02
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ENDIF.

    "Check if duplicate
    IF CS_SALESORDER-SFSALESORDERNO IS NOT INITIAL.
      SELECT SINGLE BNAME                         ##NEEDED  ##WARN_OK
        FROM VBAK
       WHERE BNAME = @CS_SALESORDER-SFSALESORDERNO
        INTO @DATA(LV_BNAME).
      IF SY-SUBRC = 0.
        "// Error duplicate
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E03
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-CREATEDATE IS INITIAL.
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E04
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ELSE.
      "Check date
      VALIDATE_DATE( EXPORTING DATE_IN     = CS_SALESORDER-CREATEDATE
                     IMPORTING DATE_OUT    = CS_SALESORDER-CREATEDATE
                               CS_RESPONSE = LS_RESPONSE
      ).
      IF CS_SALESORDER-CREATEDATE IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.
    ENDIF.

    IF CS_SALESORDER-SAPSALESORDERNO IS NOT INITIAL.
      "Sales Order No. must be empty for create mode
      APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                 IF_MESSAGE = TEXT-E06
                        CHANGING CT_RESPONSE = CT_RESPONSE
                                 CS_SALESORDER = CS_SALESORDER ).
    ENDIF.

*Check Ref quotation
    SELECT SINGLE AUART,BEZOB INTO @DATA(LS_TVAK)
      FROM TVAK
     WHERE AUART = @CS_SALESORDER-DOCUMENTTYPE.
    IF SY-SUBRC = 0.
      IF LS_TVAK-BEZOB = 'B'. "With reference to a quotation
        IF CS_SALESORDER-REFERENCESDDOCUMENT = SPACE.
          "Sales order type requires a reference to a quotation
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E62
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.
    ENDIF.


    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESP_STATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_INPUT.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_INPUT
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data input from Salesforce
*  Purpose            : Validate Header / Item
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------

* Initialize Output
    CLEAR: EF_INVALID.

    CASE CS_SALESORDER-FLAG.
      WHEN  SPACE OR 'I'.
        VALIDATE_HEADER_CREATE(
           EXPORTING
             IF_RECORD_MODE    = CS_SALESORDER-FLAG
           IMPORTING
             EF_INVALID        = EF_INVALID
           CHANGING
             CS_SALESORDER     = CS_SALESORDER
             CT_RESPONSE       = CT_RESPONSE
       ).

        IF EF_INVALID = SPACE." No Error
          VALIDATE_ITEM_CREATE(
             EXPORTING
               IF_RECORD_MODE    = CS_SALESORDER-FLAG
             IMPORTING
               EF_INVALID        = EF_INVALID
             CHANGING
               CS_SALESORDER     = CS_SALESORDER
               CT_SALESORDERITEM = CT_SALESORDERITEM
               CT_SCHEDULELINE   = CT_SCHEDULELINE
               CT_RESPONSE       = CT_RESPONSE
         ).
        ENDIF.

      WHEN 'U'.
        VALIDATE_HEADER_CHANGE(
           EXPORTING
             IF_RECORD_MODE    = CS_SALESORDER-FLAG
           IMPORTING
             EF_INVALID        = EF_INVALID
           CHANGING
             CS_SALESORDER     = CS_SALESORDER
             CT_RESPONSE       = CT_RESPONSE
       ).

        IF EF_INVALID = SPACE." No Error
          VALIDATE_ITEM_CHANGE(
             EXPORTING
               IF_RECORD_MODE    = CS_SALESORDER-FLAG
             IMPORTING
               EF_INVALID        = EF_INVALID
             CHANGING
               CS_SALESORDER     = CS_SALESORDER
               CT_SALESORDERITEM = CT_SALESORDERITEM
               CT_SCHEDULELINE   = CT_SCHEDULELINE
               CT_RESPONSE       = CT_RESPONSE
         ).
        ENDIF.

    ENDCASE.

    "Validate both Create and Change
    VALIDATE_HEADER(
           EXPORTING
             IF_RECORD_MODE    = CS_SALESORDER-FLAG
           IMPORTING
             EF_INVALID        = EF_INVALID
           CHANGING
             CS_SALESORDER     = CS_SALESORDER
             CT_RESPONSE       = CT_RESPONSE
       ).

    VALIDATE_ITEM(
       EXPORTING
         IF_RECORD_MODE    = CS_SALESORDER-FLAG
       IMPORTING
         EF_INVALID        = EF_INVALID
       CHANGING
         CS_SALESORDER     = CS_SALESORDER
         CT_SALESORDERITEM = CT_SALESORDERITEM
         CT_SCHEDULELINE   = CT_SCHEDULELINE
         CT_RESPONSE       = CT_RESPONSE
   ).

    READ TABLE CT_RESPONSE WITH KEY RESP_STATUS = GC_ERROR TRANSPORTING NO FIELDS.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_ITEM.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_ITEM
*  Creation Date      : 24.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------
    DATA: LS_RESPONSE    TYPE ZSDSCAS006,
          LV_MATNR       TYPE MATNR,
          LV_AMOUNT      TYPE CHAR20,
          LV_MEINS       TYPE MEINS,
          LV_MSG         TYPE ZSDSDE_REST_MESSAGE,
          LV_ITEMNUMBER  TYPE POSNR,
          LV_SCHEDNUMBER TYPE ETENR.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_SALESORDERITEM>).

      IF <LFS_SALESORDERITEM>-SAPITEMNUMBER IS INITIAL.
        "Missing Item Number
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E35
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-SAPITEMNUMBER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E51
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-SAPITEMNUMBER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      IF <LFS_SALESORDERITEM>-HIGHERLEVEL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-HIGHERLEVEL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E50
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-HIGHERLEVEL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      IF <LFS_SALESORDERITEM>-MATERIALNUMBER IS INITIAL.
        "Missing material number
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E36
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
          EXPORTING
            INPUT        = <LFS_SALESORDERITEM>-MATERIALNUMBER
          IMPORTING
            OUTPUT       = LV_MATNR
          EXCEPTIONS
            LENGTH_ERROR = 1
            OTHERS       = 2.
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E37
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.

        SELECT SINGLE MATNR     ##NEEDED  ##WARN_OK
          FROM MVKE
         WHERE MATNR = @LV_MATNR
           AND VKORG IN @GRT_SALESORG
         INTO @DATA(LS_MVKE).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E37
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "Quantity
      IF <LFS_SALESORDERITEM>-QUANTITY IS INITIAL.
        "Missing target quantity
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E38
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-QUANTITY.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE   = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-QUANTITY = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "SalesUnit
      IF <LFS_SALESORDERITEM>-SALESUNIT IS INITIAL.
        "Missing Sales Unit
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E39
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_MEINS.
        LV_MEINS = <LFS_SALESORDERITEM>-SALESUNIT.

* Validate in table
        SELECT SINGLE MSEHI
          INTO LV_MEINS
          FROM T006
         WHERE MSEHI EQ LV_MEINS.
        IF SY-SUBRC NE 0.

          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
            EXPORTING
              INPUT          = <LFS_SALESORDERITEM>-SALESUNIT
            IMPORTING
              OUTPUT         = LV_MEINS
            EXCEPTIONS
              UNIT_NOT_FOUND = 1
              OTHERS         = 2.
          IF SY-SUBRC <> 0.
            LV_MSG = |{ TEXT-E40 } { <LFS_SALESORDERITEM>-SALESUNIT }|.
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = LV_MSG
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
          SELECT SINGLE MSEHI
            INTO LV_MEINS
            FROM T006
           WHERE MSEHI EQ LV_MEINS.
          IF SY-SUBRC NE 0.
            CLEAR: LV_MSG.
*         Invalid unit:
            LV_MSG = |{ TEXT-E40 } { <LFS_SALESORDERITEM>-SALESUNIT }|.
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = LV_MSG
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
        ENDIF.
      ENDIF.

      "Plant
      IF <LFS_SALESORDERITEM>-PLANT IS INITIAL.
        "Missing Plant
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E41
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        SELECT SINGLE WERKS           ##NEEDED
          FROM T001W
         WHERE WERKS = @<LFS_SALESORDERITEM>-PLANT
          INTO @DATA(LV_WERKS).
        IF SY-SUBRC <> 0.
          "Plant does not exist
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E42
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.


      "StorageLocation
      IF <LFS_SALESORDERITEM>-STORAGELOCATION IS NOT INITIAL.
        SELECT SINGLE WERKS,LGORT         ##NEEDED
          FROM T001L
         WHERE WERKS = @<LFS_SALESORDERITEM>-PLANT
           AND LGORT = @<LFS_SALESORDERITEM>-STORAGELOCATION
          INTO @DATA(LS_T001L).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E43
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "ItemCategory
      IF <LFS_SALESORDERITEM>-ITEMCATEGORY IS INITIAL.
        "Missing Item Category
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E44
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        SELECT SINGLE PSTYV             ##NEEDED
          FROM TVAP
         WHERE PSTYV = @<LFS_SALESORDERITEM>-ITEMCATEGORY
          INTO @DATA(LV_PSTYV).
        IF SY-SUBRC <> 0.
          "Item Category does not exist
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E45
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "WBS
      IF CS_SALESORDER-DOCUMENTTYPE IN GRT_SALESTYPEPRJ. "SDS Project Order
        IF <LFS_SALESORDERITEM>-ITEMCATEGORY NOT IN GRT_SALESTYPEPRJ_ITEMCAT.
          IF <LFS_SALESORDERITEM>-WBS IS INITIAL.
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E46
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ENDIF.
        ENDIF.
      ENDIF.

      "LOB
      IF <LFS_SALESORDERITEM>-LOB IS NOT INITIAL.
        SELECT SINGLE LOB           ##NEEDED  ##WARN_OK
          FROM ZDSMMC033
         WHERE LOB = @<LFS_SALESORDERITEM>-LOB
          INTO @DATA(LS_LOB).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E47
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.

      "ReasonForReject
      IF <LFS_SALESORDERITEM>-REASONFORREJECT IS NOT INITIAL.
        SELECT SINGLE ABGRU         ##NEEDED
          FROM TVAG
         WHERE ABGRU = @<LFS_SALESORDERITEM>-REASONFORREJECT
          INTO @DATA(LS_ABGRU).
        IF SY-SUBRC <> 0.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E48
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ENDIF.
      ENDIF.


      "ListPrice":
      IF <LFS_SALESORDERITEM>-LISTPRICE IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-LISTPRICE.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-LISTPRICE = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountPer":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTPER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTPER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTPER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountVal":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTVAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTVAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTVAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV1Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV1Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV1VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV2Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV2Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV2VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV3Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV3Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV3VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV4Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV4Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV4VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV5Per":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5PER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5PER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5PER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ItemDiscountLV5Val":
      IF <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5VAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5VAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-ITEMDISCOUNTLV5VAL = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "Freight":
      IF <LFS_SALESORDERITEM>-FREIGHT IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-FREIGHT.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-FREIGHT = LV_AMOUNT.
        ENDIF.
      ENDIF.


      "SVItemDiscountPer":
      IF <LFS_SALESORDERITEM>-SVITEMDISCOUNTPER IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-SVITEMDISCOUNTPER.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-SVITEMDISCOUNTPER = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "SVItemDiscountVal":
      IF <LFS_SALESORDERITEM>-SVITEMDISCOUNTVAL IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-SVITEMDISCOUNTVAL.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-SVITEMDISCOUNTVAL = LV_AMOUNT.
        ENDIF.
      ENDIF.



      "Installation":
      IF <LFS_SALESORDERITEM>-INSTALLATION IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-INSTALLATION.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-INSTALLATION = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "Maintenance":
      IF <LFS_SALESORDERITEM>-MAINTENANCE IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-MAINTENANCE.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-MAINTENANCE = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "SLA":
      IF <LFS_SALESORDERITEM>-SLA IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-SLA.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-SLA = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "STDWarranty":
      IF <LFS_SALESORDERITEM>-STDWARRANTY IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-STDWARRANTY.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-STDWARRANTY = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ExtendWarranty":
      IF <LFS_SALESORDERITEM>-EXTENDWARRANTY IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-EXTENDWARRANTY.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-EXTENDWARRANTY = LV_AMOUNT.
        ENDIF.
      ENDIF.

      "ModifyService":
      IF <LFS_SALESORDERITEM>-MODIFYSERVICE IS NOT INITIAL.
        CLEAR: LV_AMOUNT .
        LV_AMOUNT = <LFS_SALESORDERITEM>-MODIFYSERVICE.
        CONDENSE LV_AMOUNT.
        VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                         IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                   CS_RESPONSE = LS_RESPONSE
                        ).
        IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          <LFS_SALESORDERITEM>-MODIFYSERVICE = LV_AMOUNT.
        ENDIF.
      ENDIF.


*Schedule line
      LV_ITEMNUMBER = <LFS_SALESORDERITEM>-SAPITEMNUMBER.
      READ TABLE CT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>) WITH KEY SAPITEMNUMBER = LV_ITEMNUMBER.
      IF SY-SUBRC <> 0.
        "Missing Item Number in Schedule Line
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E32
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ELSE.
        CLEAR: LV_SCHEDNUMBER.
        LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = LV_ITEMNUMBER.
          IF CS_SALESORDER-FLAG <> 'U'.
            LV_SCHEDNUMBER += 1.
            <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER = LV_SCHEDNUMBER.
"Add+ 05.06.2025  INC420000645 >>>
          ELSEIF CS_SALESORDER-FLAG = 'U' AND <LFS_SCHEDULELINE>-FLAG = 'I'.
            IF LV_SCHEDNUMBER IS INITIAL.
              SELECT SINGLE MAX( ETENR )
                FROM VBEP
                INTO @LV_SCHEDNUMBER
               WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
                 AND POSNR = @LV_ITEMNUMBER.
            ENDIF.

            LV_SCHEDNUMBER += 1.
            <LFS_SCHEDULELINE>-SAPSCHEDULELINENUMBER = LV_SCHEDNUMBER.
          ENDIF.
"<<< Add+ 05.06.2025  INC420000645
*          "ScheduleLineNumber": "0001",
*          IF <LFS_SCHEDULELINE>-SFSCHEDULELINENUMBER IS INITIAL.
*            "Missing Schedule Line Number
*            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
*                                       IF_MESSAGE = TEXT-E53
*                              CHANGING CT_RESPONSE = CT_RESPONSE
*                                       CS_SALESORDER = CS_SALESORDER ).
*          ELSE.
*            CLEAR: LV_AMOUNT .
*            LV_AMOUNT = <LFS_SCHEDULELINE>-SFSCHEDULELINENUMBER.
*            CONDENSE LV_AMOUNT.
*            VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
*                             IMPORTING AMOUNT_OUT    = LV_AMOUNT
*                                       CS_RESPONSE = LS_RESPONSE
*                            ).
*            IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
*              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
*                                         IF_MESSAGE = TEXT-E52
*                                CHANGING CT_RESPONSE = CT_RESPONSE
*                                         CS_SALESORDER = CS_SALESORDER ).
*            ELSE.
*              <LFS_SCHEDULELINE>-SFSCHEDULELINENUMBER = LV_AMOUNT.
*            ENDIF.
*          ENDIF.

          "RequestDate":
          IF <LFS_SCHEDULELINE>-REQUESTDATE IS INITIAL.
            "Schedule Line: Missing Request Date
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E54
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ELSE.
            VALIDATE_DATE( EXPORTING DATE_IN     = <LFS_SCHEDULELINE>-REQUESTDATE
                           IMPORTING DATE_OUT    = <LFS_SCHEDULELINE>-REQUESTDATE
                                     CS_RESPONSE = LS_RESPONSE
            ).
            IF <LFS_SCHEDULELINE>-REQUESTDATE IS INITIAL OR LS_RESPONSE-RESP_STATUS = GC_ERROR.
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = LS_RESPONSE-RESP_MESSAGE
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ENDIF.
          ENDIF.

          "RequestQuantity":
          IF <LFS_SCHEDULELINE>-REQUESTQUANTITY IS INITIAL.
            "Schedule Line: Missing Request Quantity
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = TEXT-E55
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ELSE.
            CLEAR: LV_AMOUNT .
            LV_AMOUNT = <LFS_SCHEDULELINE>-REQUESTQUANTITY.
            CONDENSE LV_AMOUNT.
            VALIDATE_AMOUNT( EXPORTING AMOUNT_IN     = LV_AMOUNT
                             IMPORTING AMOUNT_OUT    = LV_AMOUNT
                                       CS_RESPONSE = LS_RESPONSE
                            ).
            IF LS_RESPONSE-RESP_STATUS = GC_ERROR.
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = TEXT-E56
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ELSE.
              <LFS_SCHEDULELINE>-REQUESTQUANTITY = LV_AMOUNT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.


    READ TABLE CT_RESPONSE INTO LS_RESPONSE WITH KEY RESP_STATUS = GC_ERROR.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_ITEM_CHANGE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_ITEM_CHANGE
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data header data from Salesforce
*  Purpose            : Validate Header(Change)
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------
*  26.03.2025  420000522  Zulkiff B.  Fixing:The WBS is blank after an error deletion.
*-----------------------------------------------------------------------
    DATA: LS_SCHEDULELINE TYPE ZSDSSDS016,
          LT_SCHEDULELINE TYPE ZSDSSDS016_TT,
          LV_MSG          TYPE ZSDSDE_REST_MESSAGE.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_SALESORDERITEM>).
      CLEAR: LS_SCHEDULELINE,LT_SCHEDULELINE.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = <LFS_SALESORDERITEM>-SFITEMNUMBER
        IMPORTING
          OUTPUT = <LFS_SALESORDERITEM>-SAPITEMNUMBER.

      IF NOT ( <LFS_SALESORDERITEM>-FLAGITEM = 'I' OR <LFS_SALESORDERITEM>-FLAGITEM = 'U' OR <LFS_SALESORDERITEM>-FLAGITEM = 'D' ).
        "Item: Missing indicator flag : Missing indicator flag : 'U' for Change or 'D' for Delete
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E61
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.

*Add+ 420000522 >>>
      IF <LFS_SALESORDERITEM>-FLAGITEM = 'D'.
        SELECT SINGLE VBELN,FKSAA,LFSTA         ##NEEDED
          FROM VBAP
         WHERE VBELN = @CS_SALESORDER-SAPSALESORDERNO
           AND POSNR = @<LFS_SALESORDERITEM>-SAPITEMNUMBER
          INTO @DATA(LS_VBAP).
        IF SY-SUBRC = 0.
          IF LS_VBAP-FKSAA = 'B' OR LS_VBAP-FKSAA = 'C' . "Billing
            "// Error : The billing has already completed.  You cannot change the sales order &.
            LV_MSG = TEXT-E64.
            REPLACE '&' IN LV_MSG WITH CS_SALESORDER-SAPSALESORDERNO .
            APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                       IF_MESSAGE = LV_MSG
                              CHANGING CT_RESPONSE = CT_RESPONSE
                                       CS_SALESORDER = CS_SALESORDER ).
          ELSE.
            IF LS_VBAP-LFSTA = 'B' OR LS_VBAP-LFSTA = 'C' . "Delivery
              "// Error : The billing has already completed.  You cannot change the sales order &.
              LV_MSG = TEXT-E64.
              REPLACE '&' IN LV_MSG WITH CS_SALESORDER-SAPSALESORDERNO .
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = LV_MSG
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
*<<<Add+ 420000522

*Schedule line
      LT_SCHEDULELINE = <LFS_SALESORDERITEM>-SCHEDULELINE.

      LOOP AT LT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>).
        CLEAR: LS_SCHEDULELINE.
        MOVE-CORRESPONDING <LFS_SCHEDULELINE> TO LS_SCHEDULELINE.

        LS_SCHEDULELINE-SAPITEMNUMBER	= <LFS_SALESORDERITEM>-SAPITEMNUMBER.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = LS_SCHEDULELINE-SAPSCHEDULELINENUMBER
          IMPORTING
            OUTPUT = LS_SCHEDULELINE-SAPSCHEDULELINENUMBER.

        APPEND LS_SCHEDULELINE TO CT_SCHEDULELINE.
      ENDLOOP.

      IF CT_SCHEDULELINE IS NOT INITIAL.
        READ TABLE CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WITH KEY SAPITEMNUMBER = <LFS_SALESORDERITEM>-SAPITEMNUMBER ##WARN_OK.
        IF SY-SUBRC <> 0.
          "Missing Item Number in Schedule Line
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E32
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_SALESORDERITEM>-SAPITEMNUMBER.

            "Flag":
            IF  NOT ( <LFS_SCHEDULELINE>-FLAG = 'I' OR <LFS_SCHEDULELINE>-FLAG = 'U' OR <LFS_SCHEDULELINE>-FLAG = 'D' ).
              "Schedule Line: Missing indicator flag : 'U' for Change or 'D' for Delete
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = TEXT-E60
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDLOOP.

    READ TABLE CT_RESPONSE WITH KEY RESP_STATUS = GC_ERROR TRANSPORTING NO FIELDS.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.


  METHOD VALIDATE_ITEM_CREATE.
*-----------------------------------------------------------------------
*  Program ID         : ZCL_SDSSD_CREATE_CHANGE_SO_SRV / VALIDATE_ITEM_CREATE
*  Creation Date      : 21.05.2024
*  Author             : Zulkiff B. (Eviden)
*  Add-on ID          : ZSDI023
*  Description        : Validate data item data from Salesforce
*  Purpose            : Validate Item
*  Copied from        : N/A
*  Restriction        : N/A
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------
    DATA: LS_SCHEDULELINE TYPE ZSDSSDS016,
          LT_SCHEDULELINE TYPE ZSDSSDS016_TT.

    LOOP AT CT_SALESORDERITEM ASSIGNING FIELD-SYMBOL(<LFS_SALESORDERITEM>).
      CLEAR: LS_SCHEDULELINE,LT_SCHEDULELINE.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = <LFS_SALESORDERITEM>-SFITEMNUMBER
        IMPORTING
          OUTPUT = <LFS_SALESORDERITEM>-SAPITEMNUMBER.

      IF <LFS_SALESORDERITEM>-FLAGITEM IS INITIAL OR NOT ( <LFS_SALESORDERITEM>-FLAGITEM = 'X' OR <LFS_SALESORDERITEM>-FLAGITEM = 'I' ).
        APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                   IF_MESSAGE = TEXT-E33
                          CHANGING CT_RESPONSE = CT_RESPONSE
                                   CS_SALESORDER = CS_SALESORDER ).
      ENDIF.


*Schedule line
      LT_SCHEDULELINE = <LFS_SALESORDERITEM>-SCHEDULELINE.

      LOOP AT LT_SCHEDULELINE ASSIGNING FIELD-SYMBOL(<LFS_SCHEDULELINE>).
        CLEAR: LS_SCHEDULELINE.
        MOVE-CORRESPONDING <LFS_SCHEDULELINE> TO LS_SCHEDULELINE.

        LS_SCHEDULELINE-SAPITEMNUMBER	= <LFS_SALESORDERITEM>-SAPITEMNUMBER.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = LS_SCHEDULELINE-SFSCHEDULELINENUMBER
          IMPORTING
            OUTPUT = LS_SCHEDULELINE-SAPSCHEDULELINENUMBER.

        APPEND LS_SCHEDULELINE TO CT_SCHEDULELINE.
      ENDLOOP.

      IF CT_SCHEDULELINE IS NOT INITIAL.
        READ TABLE CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE>  WITH KEY SAPITEMNUMBER = <LFS_SALESORDERITEM>-SAPITEMNUMBER ##WARN_OK.
        IF SY-SUBRC <> 0.
          "Missing Item Number in Schedule Line
          APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                     IF_MESSAGE = TEXT-E32
                            CHANGING CT_RESPONSE = CT_RESPONSE
                                     CS_SALESORDER = CS_SALESORDER ).
        ELSE.
          LOOP AT CT_SCHEDULELINE ASSIGNING <LFS_SCHEDULELINE> WHERE SAPITEMNUMBER = <LFS_SALESORDERITEM>-SAPITEMNUMBER.


            "Flag":
            IF <LFS_SCHEDULELINE>-FLAG IS INITIAL OR NOT ( <LFS_SCHEDULELINE>-FLAG = 'X' OR <LFS_SCHEDULELINE>-FLAG = 'I' ).
              "Schedule Line: Missing indicator flag : 'X' for Create or 'U' for Change
              APPEND_RESPONSE( EXPORTING IF_STATUS = GC_ERROR
                                         IF_MESSAGE = TEXT-E49
                                CHANGING CT_RESPONSE = CT_RESPONSE
                                         CS_SALESORDER = CS_SALESORDER ).
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDLOOP.

    READ TABLE CT_RESPONSE WITH KEY RESP_STATUS = GC_ERROR TRANSPORTING NO FIELDS.
    IF SY-SUBRC = 0.
      EF_INVALID = 'X'.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
