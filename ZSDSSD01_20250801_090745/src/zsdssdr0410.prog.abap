*&---------------------------------------------------------------------*
*& Report ZSDSSDR0410
*&---------------------------------------------------------------------*
*  Creation Date      : 08.12.2024
*  Author             : Wantanee Pr.
*  Add-on ID          :
*  Description        : Report open sales order
*  Purpose            :
*  Copied from        : ZR_SFDC_OUTSTANDING_ORDER_TUNE
*  Restriction        :
*-----------------------------------------------------------------------
*  CHANGE HISTORY
*-----------------------------------------------------------------------
*  Date        Task #      Programmer  Description
*-----------------------------------------------------------------------
*  DD.MM.YYYY  TR no.      ABAP Name   Detail
*-----------------------------------------------------------------------
REPORT ZSDSSDR0410.
*----------------------------------------------------------------------*
*INCLUDE                                                               *
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
*TYPE-POOL                                                             *
*----------------------------------------------------------------------*
TYPE-POOLS: SLIS,ABAP,TRUXS.

*----------------------------------------------------------------------*
*TABLES                                                                *
*----------------------------------------------------------------------*
TABLES: VBAK, VBAP, VBUK, VBUP, VBKD, VBEP, T179, PA0001, PA0002.

TABLES: AUFK.

*----------------------------------------------------------------------*
*CONSTANTS
*----------------------------------------------------------------------*

CONSTANTS: GC_TOP_OF_PAGE  TYPE SLIS_FORMNAME VALUE 'TOP_OF_PAGE',
           GC_USER_COMMAND TYPE SLIS_FORMNAME VALUE 'USER_COMMAND',
           GC_END_OF_LIST  TYPE SLIS_FORMNAME VALUE 'END_OF_LIST',
           GC_PF_STATUS    TYPE SLIS_FORMNAME VALUE 'PF_STATUS',
           GC_END_OF_PAGE  TYPE SLIS_FORMNAME VALUE 'END_OF_PAGE',
           GC_REPID        TYPE SY-REPID      VALUE 'ZSDSSDR0410', "ADD FOR C1-28042010
           GC_MASK_TIME    TYPE CHAR8  VALUE '__:__',
           GC_MASK_DATE    TYPE CHAR10 VALUE '__/__/____'.
*CONSTANTS: GC_PATHNAME     TYPE RLGRAP-FILENAME VALUE '/HOME/SF/SALESFORCE/'.
CONSTANTS: GC_X(1)         TYPE C VALUE 'X'.

*----------------------------------------------------------------------*
*TYPES                                                                 *
*----------------------------------------------------------------------*

TYPES: BEGIN OF GY_VBAK ,
         VBELN TYPE VBAK-VBELN,
         ANGDT TYPE VBAK-ANGDT,  "QT VALID FROM
         BNDDT TYPE VBAK-BNDDT,  "QT VALID TO
         AUDAT TYPE VBAK-AUDAT,
         AUART TYPE VBAK-AUART,
         WAERK TYPE VBAK-WAERK,
         VKORG TYPE VBAK-VKORG,
         VTWEG TYPE VBAK-VTWEG,
         VKGRP TYPE VBAK-VKGRP,
         VKBUR TYPE VBAK-VKBUR,
         KNUMV TYPE VBAK-KNUMV,
         VDATU TYPE VBAK-VDATU,
         BSTNK TYPE VBAK-BSTNK,
         IHREZ TYPE VBAK-IHREZ,  "YOUR REFERENCE
         BNAME TYPE VBAK-BNAME,  "NAME OF ORDERER
         KUNNR TYPE VBAK-KUNNR,
         AUGRU TYPE VBAK-AUGRU, "ORDER RESON
         ERNAM TYPE VBAK-ERNAM,  "CREATE BY
       END OF GY_VBAK.
*>>>EOI                                                    "ISS20140304+
TYPES: BEGIN OF GY_VBAP,
         VBELN  TYPE VBAP-VBELN,
         POSNR  TYPE VBAP-POSNR,
         MATNR  TYPE VBAP-MATNR,
         VGBEL  TYPE VBAP-VGBEL,
         VGPOS  TYPE VBAP-VGPOS,
         PRODH  TYPE VBAP-PRODH,
         UEPOS  TYPE VBAP-UEPOS,
         KWMENG TYPE VBAP-KWMENG,
         VRKME  TYPE VBAP-VRKME,
         NETWR  TYPE VBAP-NETWR,
         ABGRU  TYPE VBAP-ABGRU,
         AUFNR  TYPE VBAP-AUFNR,
         POSEX  TYPE VBAP-POSEX,  "POITEM  "ADD BY WANTANEE 20111107
         KOWRR  TYPE VBAP-KOWRR,
         WMENG  TYPE VBEP-WMENG,  "QTY
         ETENR  TYPE VBEP-ETENR,  "LINE DELIVERY
         EDATU  TYPE VBEP-EDATU,  "DELIVERY DATE
         UPMAT  TYPE VBAP-UPMAT,  "UP MATERIAL
         ZTERM  TYPE VBKD-ZTERM,  "TERM OF PAYMENT

         STUFE  TYPE T179-STUFE,
         DELI   TYPE LIKP-VBELN,

         Z_FLAG TYPE C,  "ADD BY WANTANEE 20160513
       END OF GY_VBAP.

TYPES: BEGIN OF GY_VBEP,
         VBELN TYPE VBEP-VBELN,
         POSNR TYPE VBEP-POSNR,
         ETENR TYPE VBEP-ETENR,
         EDATU TYPE VBEP-EDATU,
         BMENG TYPE VBEP-BMENG,
       END OF GY_VBEP.
*>>>BOI                                                    "ISS20140304+
TYPES: BEGIN OF GY_VBFA,
         VBELV TYPE VBFA-VBELV,
         POSNV TYPE VBFA-POSNV,
         RFMNG TYPE VBFA-RFMNG,
       END OF GY_VBFA.

TYPES: BEGIN OF GY_VBKD,
         VBELN TYPE VBKD-VBELN,
         POSNR TYPE VBKD-POSNR,
         ZTERM TYPE VBKD-ZTERM,
         IHREZ_E TYPE VBKD-IHREZ_E,
       END OF GY_VBKD.

TYPES: BEGIN OF GY_LIKP,
         VBELV TYPE VBFA-VBELV,
         POSNV TYPE VBFA-POSNV,
         VBELN TYPE LIKP-VBELN,
         LFDAT TYPE LIKP-LFDAT,
       END OF GY_LIKP.

TYPES: BEGIN OF GY_PRCD_ELEMENTS,
         KNUMV TYPE PRCD_ELEMENTS-KNUMV,
         KPOSN TYPE PRCD_ELEMENTS-KPOSN,
         KSCHL TYPE PRCD_ELEMENTS-KSCHL,
         KBETR TYPE PRCD_ELEMENTS-KBETR,
      END OF GY_PRCD_ELEMENTS.
*>>>EOI                                                    "ISS20140304+

TYPES: BEGIN OF GY_VBPA,
         VBELN TYPE VBPA-VBELN,
*        PARVW TYPE VBPA-PARVW,                            "ISS20140304-
         PERNR TYPE VBPA-PERNR,
         ENAME TYPE PA0001-ENAME,
         VORNA TYPE PA0002-VORNA,                          "ISS20140304+
         NACHN TYPE PA0002-NACHN,                          "ISS20140304+
       END OF GY_VBPA.

TYPES: BEGIN OF GY_MBEW,
         MATNR TYPE MBEW-MATNR,
         BWKEY TYPE MBEW-BWKEY,
         LBKUM TYPE MBEW-LBKUM,
         SALK3 TYPE MBEW-SALK3,
         VPRSV TYPE MBEW-VPRSV,
         VERPR TYPE MBEW-VERPR,
       END OF GY_MBEW.

TYPES: BEGIN OF GY_LIPS,
         VBELV TYPE LIPS-VBELV,
         VGPOS TYPE LIPS-VGPOS,
         MATNR TYPE LIPS-MATNR,
         LFIMG TYPE LIPS-LFIMG,
       END OF GY_LIPS.

TYPES: BEGIN OF GY_OUTSO,
         YEAR(4)  TYPE C,
         MONTH(2) TYPE C,
         WEEK(2)  TYPE C,
         R_YEAR(4)  TYPE C,          "REQ. DELIV.DATE
         R_MONTH(2) TYPE C,          "REQ. DELIV.DATE
         EDATU    TYPE VBEP-EDATU,   "DATE
         VTWEG    TYPE VBAK-VTWEG,   "DIST.CHANNEL
         VTEXT    TYPE TVTWT-VTEXT,  "DIST.CHANNEL NAME
         VKBUR    TYPE VBAK-VKBUR,   "SALES OFFICE
         SALESOFF TYPE TVKBT-BEZEI,  "SALES OFFICE NAME
         VKGRP    TYPE VBAK-VKGRP,   "SALES GROUP
         SALESGRP TYPE TVGRT-BEZEI,  "SALES GROUP NAME
         PERNR    TYPE PA0001-PERNR, "SALES NAME
         SNAME    TYPE PA0001-SNAME, "SALES NAME
         KTEXT    TYPE COAS-KTEXT,   "PROJECT NAME
         PROJT(100) TYPE C,          "PROJECT TEXT
         AUFNR    TYPE VBAP-AUFNR,   "IO NUMBER
         VBELN    TYPE VBAK-VBELN,   "SO NUMBER
         VGBEL    TYPE VBAP-VGBEL,   "REF.QT NUMBER
         VGPOS  TYPE VBAP-VGPOS,     "REF QT ITEM
         AUDAT    TYPE VBAK-AUDAT,   "DOCUMENT DATE
         BSTKD    TYPE VBKD-BSTKD,   "PO NUMBER
         KUNNR    TYPE VBAK-KUNNR,   "CUSTOMER CODE
         CUSTNAME TYPE KNA1-NAME1,   "CUSTOMER NAME
         ENGNAME  TYPE KNA1-NAME1,  "CUSTOMER NAME
         PRODH1   TYPE VBAP-PRODH,    "CATEGORY (PH1)
         PRODH2   TYPE VBAP-PRODH,    "CLASS (PH2)
         PRODH3   TYPE VBAP-PRODH,    "SUB-CATEGORY (PH3)
         PRODH    TYPE VBAP-PRODH,   "ALL LEVEL
         POSNR    TYPE VBAP-POSNR,    "ITEM NUMBER
         MATNR    TYPE VBAP-MATNR,    "MATERIAL
         UEPOS    TYPE VBAP-UEPOS,    "HIGHER LEVEL ITEM
         SOQTY    TYPE I, "LIKE VBAP-KWMENG,   "SO QTY
         CONFQTY  TYPE I, "LIKE VBAP-KWMENG,   "CONFIRM QTY
         DOQTY    TYPE I, "LIKE VBAP-KWMENG,   "DO QTANTITY
         BILLQTY  TYPE I, "LIKE VBAP-KWMENG,   "BILL QTY
         OPQTY    TYPE I, "LIKE VBAP-KWMENG,   "OPEN QTY
         C_QTY    TYPE I, "LIKE VBAP-KWMENG,    "COUNT QTY   "C1-280042010
         VRKME    TYPE VBAP-VRKME,    "UNIT
         MOCOS    TYPE MBEW-SALK3,    "MODEL COST
         TOCOS    TYPE MBEW-SALK3,  "TOTAL COST  MODEL COST * SO QTANTITY
         NETWR    TYPE VBAP-NETWR,    "NET VALUE
         WAERK    TYPE VBAK-WAERK,    "CURR
         VDATU    TYPE VBAK-VDATU,    "REQ.DELIVERY DATE
         RESREJ   TYPE TVAGT-BEZEI,   "REASON FOR REJECTION
         HEAD_BOM TYPE C,           "CHECK HEADER BOM ->ADD FOR C1-28042010
         ZTERM    TYPE VBKD-ZTERM,  "TERM OF PAYMENT "ADD BY WANTANEE 20111006
         POSEX    TYPE VBAP-POSEX,  "POITEM  "ADD BY WANTANEE 20111107
         KBETR_30 TYPE PRCD_ELEMENTS-KBETR,  "HEADER DISCOUNT %
         KBETR_03 TYPE PRCD_ELEMENTS-KBETR,  "HEADER DISCOUNT %
         BOM_AMT  TYPE VBAP-NETWR,  " BOM AMOUNT
         BOM_CASH_DISCOUNT  TYPE PRCD_ELEMENTS-KBETR,  "CASH DISCOUNT %
         BOM_H_DISCOUNT  TYPE PRCD_ELEMENTS-KBETR,  "HEADER DISCOUNT %
         DELI     TYPE LIKP-VBELN,
         ABGRU    TYPE VBAP-ABGRU,
         LAND_NO(20) TYPE C,  "LAND NO "ADD BY  WANTANEE 20150728
         "ADD BY WANTANEE 20160513
         ZPR0     TYPE PRCD_ELEMENTS-KBETR,  "ZPR0 AMOUNT
         Z_TOTAL  TYPE VBAP-NETWR, "TOTAL ZPR0 * QTY
         Z_DISCOUNT TYPE VBAP-NETWR, " DISCOUNT Z_TOTAL - NET AMOUNT
         Z_DISCOUNT_PER TYPE  VBAP-NETWR, " DISCOUNT Z_DISCOUNT / TOTAL
         Z_FISCAL_YEAR(4)  TYPE C, "FISCAL YEAR
         IHREZ_E    TYPE VBKD-IHREZ_E,  "INQUIRY
         IO_AUART  TYPE AUFK-AUART,     "IO TYPE
         IO_TYPE_TEXT TYPE T003P-TXT,    "IO TYPE TEXT

         "END "ADD BY WANTANEE 20160513
         UPMAT  TYPE VBAP-UPMAT,  "UP MATERIAL
         CHK_BOM TYPE C,
         AUGRU_TEXT(100) TYPE C,      "ORDER REASON TEXT
         ERNAM TYPE VBAK-ERNAM,  "CREATE BY
*         DELI_STATUS_T(20)  TYPE C,              "DILIVERY STATUS TEXT
         SPA_AGING(50)  TYPE C,   "CH23 ADD BY WANTANEE


       END OF GY_OUTSO.



TYPES: BEGIN OF GY_SFDC,
         VBELN   TYPE VBAK-VBELN,
         IHREZ   TYPE VBKD-IHREZ,
         IHREZ_E TYPE VBKD-IHREZ_E,
       END OF GY_SFDC.

"ADD BY WANANEE 20160513
TYPES: BEGIN OF QTY_VBFA_REF_QT,
         VBELN   TYPE VBFA-VBELN,
         VBELV   TYPE VBFA-VBELV,
END OF QTY_VBFA_REF_QT.
TYPES: BEGIN OF QTY_VBKD_TEMP,
       VBELN     TYPE VBAK-VBELN,
       IHREZ_E TYPE VBKD-IHREZ_E,
END OF QTY_VBKD_TEMP.

TYPES: BEGIN OF QTY_VBFA_REF_QT_POS,
         VBELN   TYPE VBFA-VBELN,
         VBELV   TYPE VBFA-VBELV,
         POSNV   TYPE VBFA-POSNV,
         POSNN   TYPE VBFA-POSNN,

END OF QTY_VBFA_REF_QT_POS.

"END ADD BY WANTANEE 20160513

"ADD BY WANTANEE 20161011
TYPES: BEGIN OF TYP_T003P,
       AUART   TYPE T003P-AUART,
       TXT     TYPE T003P-TXT,
END OF TYP_T003P.

TYPES: BEGIN OF TYP_SALE_EMP,
         PERNR    TYPE PA0001-PERNR, "SALES NAME
         SNAME    TYPE PA0001-SNAME, "SALES NAME
END OF TYP_SALE_EMP.
TYPES : BEGIN OF TYP_SEND_MAIL,
       VBELN          TYPE VBAK-VBELN,   "SO NUMBER
       FIRST_DATE(10) TYPE C,            "FIRST DELIVERY DATE
       CUSTNAME(150)  TYPE C,            "CUSTOMER NAME
       PRJ_NAME(200)  TYPE C,            "PROJECT
       MATNR          TYPE VBAP-MATNR,   "MATERIAL
       OPQTY(4)       TYPE C, "          "OPEN QTY
       UPMAT          TYPE VBAP-UPMAT,   "UPMAT
       POSNR          TYPE VBAP-POSNR,   "ITEM
       SALESOFF(50)   TYPE C,  "SALES OFFICE
       SNAME(100)     TYPE C, "SALES NAME
       REJ_DATE(10)   TYPE C, "REJECT DATE
       PRODH1(5)      TYPE C, "PH1
       PRODH2(5)      TYPE C, "PH2
       SPA_AGING(50)  TYPE C,  "SPA CHECK AGING

END OF TYP_SEND_MAIL.

"END ADD BY WANTANEE 20180903

"ADD BY WANTANEE 20190103

TYPES: BEGIN OF TYP_TVAUT,
       AUGRU    TYPE TVAUT-AUGRU,
       BEZEI    TYPE TVAUT-BEZEI,
END OF TYP_TVAUT.

"END ADD BY WANTANEE 20190103
"ADD BY WANTANEE ITR20191206-1905
TYPES: BEGIN OF TYP_VBUP,
   VBELN          TYPE VBUP-VBELN,
   POSNR          TYPE VBUP-POSNR,
   LFSTA          TYPE VBUP-LFSTA,
   LFSTA_T        TYPE TVBST-BEZEI,
END OF TYP_VBUP.
TYPES: BEGIN OF TYP_SALE_EMP_VRV,
         PERNR    TYPE PA0001-PERNR, "SALES NAME
         SNAME    TYPE PA0001-SNAME, "SALES NAME
END OF TYP_SALE_EMP_VRV.
*----------------------------------------------------------------------*
*INTERNAL TABLE                                                        *
*----------------------------------------------------------------------*

* GLOBAL INTERNAL TABLE

DATA: GT_VBAK   TYPE STANDARD TABLE OF GY_VBAK WITH HEADER LINE,
      GT_VBAP   TYPE STANDARD TABLE OF GY_VBAP WITH HEADER LINE,
*      GT_VBAP_1 TYPE TABLE OF GY_VBAP WITH HEADER LINE,  "ISS20140304-
      GT_VBEP   TYPE STANDARD TABLE OF GY_VBEP WITH HEADER LINE,
      IT_VBEP    TYPE STANDARD TABLE OF GY_VBEP WITH HEADER LINE,
      WA_VBEP    TYPE STANDARD TABLE OF GY_VBEP WITH HEADER LINE,
      GT_VBPA   TYPE STANDARD TABLE OF GY_VBPA WITH HEADER LINE,
      GT_KNA1   TYPE STANDARD TABLE OF KNA1 WITH HEADER LINE,
      GT_MBEW   TYPE STANDARD TABLE OF GY_MBEW WITH HEADER LINE,
      GT_VBFA   TYPE STANDARD TABLE OF VBFA WITH HEADER LINE.
*      GT_LIPS   TYPE TABLE OF GY_LIPS WITH HEADER LINE,  "ISS20140304-
*      GT_ZSDS_GEN_C TYPE STANDARD TABLE OF ZSDS_GEN_C WITH HEADER LINE .
*>>>BOI                                                    "ISS20140304+
DATA: GT_VBKD    TYPE STANDARD TABLE OF GY_VBKD WITH HEADER LINE,
      GT_LIKP    TYPE STANDARD TABLE OF GY_LIKP WITH HEADER LINE,
      GT_PRCD_ELEMENTS    TYPE STANDARD TABLE OF GY_PRCD_ELEMENTS WITH HEADER LINE,
      GT_TVTWT   TYPE STANDARD TABLE OF TVTWT WITH HEADER LINE,
      GT_TVKBT   TYPE STANDARD TABLE OF TVKBT WITH HEADER LINE,
      GT_TVGRT   TYPE STANDARD TABLE OF TVGRT WITH HEADER LINE,
      GT_AUFK    TYPE STANDARD TABLE OF AUFK WITH HEADER LINE,
      GT_TVAGT   TYPE STANDARD TABLE OF TVAGT WITH HEADER LINE,
      GT_VBPA_AG TYPE STANDARD TABLE OF VBPA WITH HEADER LINE,
      GT_ADRC    TYPE STANDARD TABLE OF ADRC WITH HEADER LINE,
      GT_ADRC_AG TYPE STANDARD TABLE OF ADRC WITH HEADER LINE,
      GT_OUTSO   TYPE STANDARD TABLE OF GY_OUTSO WITH HEADER LINE,
      IT_OUTSO   TYPE STANDARD TABLE OF GY_OUTSO WITH HEADER LINE,
      WA_OUTSO   TYPE STANDARD TABLE OF GY_OUTSO WITH HEADER LINE.

"ADD BY WANTANEE 20160513
DATA: GT_VBFA_REF_QT TYPE STANDARD TABLE OF QTY_VBFA_REF_QT,
      GW_VBFA_REF_QT TYPE  QTY_VBFA_REF_QT,
      WA_VBFA_REF_QT TYPE  QTY_VBFA_REF_QT,
      GT_VBKD_TEMP TYPE STANDARD TABLE OF QTY_VBKD_TEMP,
      GW_VBKD_TEMP TYPE QTY_VBKD_TEMP,
      WA_VBKD_TEMP TYPE QTY_VBKD_TEMP,
      GT_VBFA_REF_QT_POS TYPE STANDARD TABLE OF QTY_VBFA_REF_QT_POS,
      WA_VBFA_REF_QT_POS TYPE QTY_VBFA_REF_QT_POS.


"END ADD BY WANTANEE 20160513

"ADD BY WANTANEE 20190103
DATA: GT_TVAUT TYPE STANDARD TABLE OF TYP_TVAUT,
      GW_TVAUT TYPE TYP_TVAUT,
      WA_TVAUT TYPE TYP_TVAUT.


DATA: GV_DATE_SEND_MAIL TYPE VBAK-ERDAT.


DATA: LV_CHECK_SEND_MAIL_VRV TYPE C.

DATA: GV_MONTH1(2)  TYPE C,
      GV_MONTH2(2)  TYPE C,
      GV_MONTH3(2)  TYPE C,
      GV_MONTH4(2)  TYPE C,
      GV_MONTH5(2)  TYPE C.

DATA: GV_MONTH_END_VRV TYPE SY-DATUM.
DATA: GV_MONTH_FIRST_VRV TYPE SY-DATUM.

"CH21 END ADD BY WANTANEE 20210409

DATA: LV_WOTNR  TYPE P.
DATA: LV_CHECK_DAY_SEND_MAIL TYPE C.
"ADD BY WANTANEE 20161011
DATA: GT_T003P TYPE STANDARD TABLE OF TYP_T003P,
      GW_T003P TYPE TYP_T003P,
      WA_T003P TYPE TYP_T003P.
"END ADD BY WANTANEE 20161011

"ADD BY WANTANEE 20200115
DATA: GT_VBUP   TYPE STANDARD TABLE OF TYP_VBUP,  "ADD BY WANTANEE 20110703
      GW_VBUP   TYPE TYP_VBUP,
      WA_VBUP   TYPE TYP_VBUP.
DATA: GWA_VBAP   TYPE  GY_VBAP,
      GWB_VBAP   TYPE GY_VBAP.
DATA: GT_LV1 TYPE STANDARD TABLE OF T179.
*      GWA_LV1 LIKE LINE OF GT_LV1.                        "ISS20140304-

DATA: GT_LV2 TYPE STANDARD TABLE OF T179.
*      GWA_LV2 LIKE LINE OF GT_LV2.                        "ISS20140304-

DATA: GT_LV3 TYPE STANDARD TABLE OF T179.
*      GWA_LV3 LIKE LINE OF GT_LV3.                        "ISS20140304-

DATA: GT_FIELDCAT  TYPE SLIS_FIELDCAT_ALV OCCURS 0 WITH HEADER LINE,
      GT_SORT      TYPE SLIS_SORTINFO_ALV OCCURS 0 WITH HEADER LINE,
      GT_EVENTS    TYPE SLIS_T_EVENT,
      GT_LIST_TOP  TYPE SLIS_LISTHEADER OCCURS 0 WITH HEADER LINE.

*DATA: GWA_ITEM TYPE BAPI3007_2.                           "ISS20140304-

DATA: GWA_LAYOUT      TYPE SLIS_LAYOUT_ALV,
      GWA_VARIANT     TYPE DISVARIANT,
      GWA_S_VARIANT   TYPE DISVARIANT,  "DISPLAY VARIANT (EXT. USE)
      GWA_S_VAR_USR   TYPE DISVARIANT,
      GV_REPID        TYPE SY-REPID,
      GV_SUBRC        TYPE SY-SUBRC.
                                                   "ISS20140304-
RANGES : R_PRODH  FOR VBRP-PRODH .                                                  "ISS20140304-
DATA: DOCCAT   TYPE STRING.
                                                  "ISS20140304-
DATA: GV_MESSAGE(50).

RANGES: GR_GBSTK FOR VBUK-GBSTK.

RANGES: GR_GBSTA FOR VBUP-GBSTA.

*----------------------------------------------------------------------*
* SELECTION-SCREEN                                                     *
*----------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B01 WITH FRAME TITLE TEXT-B01.
SELECT-OPTIONS : S_VBELN   FOR VBAK-VBELN,   "DOCUMENT NUMBER
                 S_AUART   FOR VBAK-AUART,   "ORDER TYPE
                 S_KUNNR   FOR VBAK-KUNNR,   "SOLD-TO-PARTY
                 S_MATNR   FOR VBAP-MATNR,   "MATERIAL
                 S_PRODH1  FOR T179-PRODH NO INTERVALS MATCHCODE OBJECT ZPROHD_LV1,
                 S_PRODH2  FOR T179-PRODH NO INTERVALS MATCHCODE OBJECT ZPROHD_LV2,
                 S_PRODH3  FOR T179-PRODH NO INTERVALS MATCHCODE OBJECT ZPROHD_LV3,
                 S_PRODH   FOR T179-PRODH,
                 S_BSTNK   FOR VBAK-BSTNK,   "PO NUMBER
                 S_AUFNR   FOR VBAP-AUFNR,   "IO NUMBER
                 S_PERNR   FOR PA0001-PERNR. "EMPNAME
SELECTION-SCREEN END OF BLOCK B01.

SELECTION-SCREEN BEGIN OF BLOCK B02 WITH FRAME TITLE TEXT-B02.
SELECT-OPTIONS: S_AUDAT FOR VBAK-AUDAT,  "DOCUMENT DATE
                S_EDATU FOR VBEP-EDATU.  "FIRST DELIVERY DATE
SELECTION-SCREEN END OF BLOCK B02.

SELECTION-SCREEN BEGIN OF BLOCK B03 WITH FRAME TITLE TEXT-B03.
SELECT-OPTIONS: S_VKORG FOR VBAK-VKORG,  "SALES ORGANIZATION
                S_VTWEG FOR VBAK-VTWEG,  "DISTRIBUTION CHANNEL
                S_VKBUR FOR VBAK-VKBUR,  "SALES OFFICE
                S_VKGRP FOR VBAK-VKGRP.  "SALES GROUP
SELECTION-SCREEN END OF BLOCK B03.

SELECTION-SCREEN BEGIN OF BLOCK B04 WITH FRAME TITLE TEXT-B04.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: P_OPEN RADIOBUTTON GROUP G01.
SELECTION-SCREEN COMMENT (15) TEXT-SP3.
PARAMETERS: P_ALL RADIOBUTTON GROUP G01.
SELECTION-SCREEN COMMENT (15) TEXT-SP4.
SELECTION-SCREEN END OF LINE.
PARAMETERS: P_IDOC AS CHECKBOX.
PARAMETERS: P_WOTNR TYPE P.  "SEND MAIL ON DAY IN WEEK
PARAMETERS: P_ITMAIL TYPE SO_RECNAME.
PARAMETERS: P_VRVD(2) TYPE C.
SELECTION-SCREEN END OF BLOCK B04.

PARAMETERS: PA_VARI TYPE SLIS_VARI.

*----------------------------------------------------------------------*
* AT SELECTION-SCREEN                                                  *
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR PA_VARI.
  PERFORM BUILD_VARIANT CHANGING PA_VARI
                                 GWA_S_VARIANT
                                 GWA_S_VAR_USR.

*----------------------------------------------------------------------*
* START-OF-SELECTION                                                   *
*----------------------------------------------------------------------*
START-OF-SELECTION.
  PERFORM CHECK_SELECTION_SCREEN CHANGING GV_SUBRC.
  IF GV_SUBRC <> 0.
    MESSAGE S000(38) WITH GV_MESSAGE.
    EXIT.
  ENDIF.
  PERFORM SET_GLOBAL.
*-ADD FOR C1-28042010
*  PERFORM READ_GEN_C.
*-
  PERFORM GET_DATA CHANGING GV_SUBRC.
  IF GV_SUBRC <> 0.
    MESSAGE I000(38) WITH 'NO DATA SELECTED'.
    EXIT.
  ENDIF.

*----------------------------------------------------------------------*
* END-OF-SELECTION                                                     *
*----------------------------------------------------------------------*
END-OF-SELECTION.
  PERFORM PROCESS_DATA CHANGING GV_SUBRC.
  IF GV_SUBRC <> 0.
    MESSAGE I000(38) WITH 'NO DATA SELECTED'.
    EXIT.
  ENDIF.

  PERFORM DISPLAY_ALV.

*&---------------------------------------------------------------------*
*&      FORM  CHECK_SELECTION_SCREEN
*&---------------------------------------------------------------------*
FORM CHECK_SELECTION_SCREEN CHANGING LP_SUBRC.

  CLEAR: LP_SUBRC.

* CHECK FIELD PRODUCT HIERACHY 1
  LOOP AT S_PRODH1 WHERE SIGN NE 'I'.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY1 - ALLOWED INCLUDE ONLY !!!'.
    EXIT.
  ENDIF.

  LOOP AT S_PRODH1 WHERE HIGH NE SPACE.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY1 - INTERVAL NOT ALLOWED !!!'.
    EXIT.
  ENDIF.

  LOOP AT S_PRODH1 WHERE OPTION NE 'EQ'.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY1 - ALLOWED EQUAL ONLY !!!'.
    EXIT.
  ENDIF.

* CHECK FIELD PRODUCT HIERACHY 2
  LOOP AT S_PRODH2 WHERE SIGN NE 'I'.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY2 - ALLOWED INCLUDE ONLY !!!'.
    EXIT.
  ENDIF.

  LOOP AT S_PRODH2 WHERE HIGH NE SPACE.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY2 - INTERVAL NOT ALLOWED !!!'.
    EXIT.
  ENDIF.

  LOOP AT S_PRODH2 WHERE OPTION NE 'EQ'.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY2 - ALLOWED EQUAL ONLY !!!'.
    EXIT.
  ENDIF.

* CHECK FIELD PRODUCT HIERACHY 3
  LOOP AT S_PRODH3 WHERE SIGN NE 'I'.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY3 - ALLOWED INCLUDE ONLY !!!'.
    EXIT.
  ENDIF.

  LOOP AT S_PRODH3 WHERE HIGH NE SPACE.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY3 - INTERVAL NOT ALLOWED !!!'.
    EXIT.
  ENDIF.

  LOOP AT S_PRODH3 WHERE OPTION NE 'EQ'.
    LP_SUBRC = 4.
    EXIT.
  ENDLOOP.

  IF LP_SUBRC <> 0.
    GV_MESSAGE = 'PRODUCT HIERACHY3 - ALLOWED EQUAL ONLY !!!'.
    EXIT.
  ENDIF.

ENDFORM.                    " CHECK_SELECTION_SCREEN
*&--------------------------------------------------------------------*
*&      FORM  INITIALIZATION
*&--------------------------------------------------------------------*
FORM INITIALIZATION.

  GV_REPID = SY-REPID.

ENDFORM.                    "INITIALIZATION
*&--------------------------------------------------------------------*
*&      FORM  SET_GLOBAL
*&--------------------------------------------------------------------*
FORM SET_GLOBAL.



 GV_REPID = SY-REPID.
 DOCCAT = 'C'.
* HEADER STATUS
  REFRESH: GR_GBSTK. CLEAR: GR_GBSTK.
  GR_GBSTK-SIGN = 'I'.
  IF P_OPEN = 'X'.
    GR_GBSTK-OPTION = 'NE'.
    GR_GBSTK-LOW    = 'C'.
    GR_GBSTK-HIGH   = ' '.
    APPEND GR_GBSTK. CLEAR: GR_GBSTK.
  ENDIF.

* ITEM STATUS
  REFRESH: GR_GBSTA. CLEAR: GR_GBSTA.
  GR_GBSTA-SIGN = 'I'.
  IF P_OPEN = 'X'.
    GR_GBSTA-OPTION = 'NE'.
    GR_GBSTA-LOW    = 'C'.
    GR_GBSTA-HIGH   = ' '.
    APPEND GR_GBSTA. CLEAR: GR_GBSTA.
  ENDIF.

* PRODUCT HIERACHY LEVEL 2
  LOOP AT S_PRODH2.
    S_PRODH2-OPTION = 'CP'.
    SHIFT S_PRODH2-LOW LEFT DELETING LEADING SPACE.
    CONCATENATE '+++++' S_PRODH2-LOW INTO S_PRODH2-LOW.
    MODIFY S_PRODH2. CLEAR S_PRODH2.
  ENDLOOP.

* PRODUCT HIERACHY LEVEL 3
  LOOP AT S_PRODH3.
    S_PRODH3-OPTION = 'CP'.
    SHIFT S_PRODH3-LOW LEFT DELETING LEADING SPACE.
    CONCATENATE '++++++++++' S_PRODH3-LOW INTO S_PRODH3-LOW.
    MODIFY S_PRODH3. CLEAR S_PRODH3.
  ENDLOOP.
  CLEAR: LV_CHECK_DAY_SEND_MAIL.
  IF NOT P_WOTNR IS INITIAL.

       GV_DATE_SEND_MAIL = SY-DATUM.

       CALL FUNCTION 'DAY_IN_WEEK'
         EXPORTING
           DATUM         = GV_DATE_SEND_MAIL
        IMPORTING
          WOTNR         = LV_WOTNR
                 .
       IF LV_WOTNR = P_WOTNR.
          LV_CHECK_DAY_SEND_MAIL = 'X'.
       ENDIF.
  ENDIF.



  "CH21 ADD BY WANTANEE 20210409
   DATA: LV_DAY(2) TYPE C.
   CLEAR: LV_CHECK_SEND_MAIL_VRV,LV_DAY.
   CALL FUNCTION 'HR_IN_GET_DATE_COMPONENTS'
     EXPORTING
       IDATE                               = SY-DATUM
     IMPORTING
       DAY                                 = LV_DAY
       MONTH                               = GV_MONTH1
*       YEAR                                = YEAR
*       STEXT                               = STEXT
*       LTEXT                               = LTEXT
*       USERDATE                            = USERDATE
     EXCEPTIONS
       INPUT_DATE_IS_INITIAL               = 1
       TEXT_FOR_MONTH_NOT_MAINTAINED       = 2
              .

      CLEAR: GV_MONTH_END_VRV,GV_MONTH_FIRST_VRV.

        CALL FUNCTION 'HR_PSD_DATES_ADD_MONTHS'
          EXPORTING
            V_DATE             = SY-DATUM
           V_MONTHS           = 4
         IMPORTING
           E_DATE             = GV_MONTH_END_VRV
         EXCEPTIONS
           NOT_POSITIVE       = 1
                  .


       CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
         EXPORTING
           IV_DATE                   = SY-DATUM
        IMPORTING
          EV_MONTH_BEGIN_DATE       = GV_MONTH_FIRST_VRV
*          EV_MONTH_END_DATE         = EV_MONTH_END_DATE
                 .



     IF LV_DAY EQ P_VRVD.
        LV_CHECK_SEND_MAIL_VRV = 'X'.
        GV_MONTH2 = GV_MONTH1 + 1.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT         = GV_MONTH2
         IMPORTING
           OUTPUT        = GV_MONTH2
                  .

        GV_MONTH3 = GV_MONTH1 + 2.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT         = GV_MONTH3
         IMPORTING
           OUTPUT        = GV_MONTH3
                  .
        GV_MONTH4 = GV_MONTH1 + 3.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT         = GV_MONTH4
         IMPORTING
           OUTPUT        = GV_MONTH4
                  .

        GV_MONTH5 = GV_MONTH1 + 4.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT         = GV_MONTH5
         IMPORTING
           OUTPUT        = GV_MONTH5
                  .

     ENDIF.


ENDFORM.                    "SET_GLOBAL
*&--------------------------------------------------------------------*
*&      FORM  GET_DATA
*&--------------------------------------------------------------------*
FORM GET_DATA CHANGING LP_SUBRC.

  DATA: LT_VBAK  TYPE STANDARD TABLE OF GY_VBAK WITH HEADER LINE,
        LT_VBFA  TYPE STANDARD TABLE OF GY_VBFA WITH HEADER LINE,
        LT_VBFA1 TYPE STANDARD TABLE OF GY_VBFA WITH HEADER LINE,
        LT_T179  TYPE STANDARD TABLE OF T179 WITH HEADER LINE.
  DATA: LV_INDEX TYPE SY-TABIX.


  SELECT VBELN ANGDT BNDDT AUDAT AUART
         WAERK VKORG VTWEG VKGRP VKBUR
         KNUMV VDATU BSTNK IHREZ BNAME
         KUNNR
         AUGRU ERNAM "ADD BY WANTANEE 20190103

    FROM VBAK
*    INTO CORRESPONDING FIELDS OF TABLE GT_VBAK
     INTO TABLE GT_VBAK
   WHERE VBELN IN S_VBELN  "DOCUMENT NUMBER
     AND AUDAT IN S_AUDAT  "DOCUMENT DATE
     AND VBTYP EQ DOCCAT   "DOCUMENT CAT.
     AND AUART IN S_AUART  "ORDER TYPE
     AND VKORG IN S_VKORG  "SALES ORGANIZATION
     AND VTWEG IN S_VTWEG  "DISTRIBUTION CHANNEL
     AND VKGRP IN S_VKGRP  "SALES GROUP
     AND VKBUR IN S_VKBUR  "SALES OFFICE
     AND BSTNK IN S_BSTNK  "P/O NUMBER
     AND KUNNR IN S_KUNNR. "SOLD-TO-PARTY
  SORT GT_VBAK BY VBELN ASCENDING.

  IF GT_VBAK[] IS INITIAL.
    LP_SUBRC = 4.
    EXIT.
  ELSE.

    SELECT A~VBELN A~POSNR A~MATNR A~VGBEL A~VGPOS A~PRODH
           A~UEPOS A~KWMENG A~VRKME A~NETWR A~ABGRU A~AUFNR
           A~POSEX A~KOWRR B~WMENG B~ETENR B~EDATU
           A~UPMAT
*      INTO CORRESPONDING FIELDS OF TABLE GT_VBAP
      INTO TABLE GT_VBAP
      FROM VBAP AS A
     INNER JOIN VBEP AS B
        ON ( A~VBELN = B~VBELN
       AND A~POSNR = B~POSNR
       AND B~ETENR EQ '000001' ) "FIRST LINE OF SCHEDULT LINE
       FOR ALL ENTRIES IN GT_VBAK
     WHERE A~VBELN EQ GT_VBAK-VBELN
       AND B~VBELN EQ GT_VBAK-VBELN  "ADD BY WANTANEE 20150921
       AND A~MATNR IN S_MATNR       "MATERIAL
       AND A~AUFNR IN S_AUFNR       "ORDER
       AND A~PRODH IN S_PRODH
       AND B~EDATU IN S_EDATU.      "DELIVERY DATE
    DELETE GT_VBAP WHERE PRODH EQ SPACE.  "PRODUCT HIERACHY NOT EQUAL SPACE
    SORT GT_VBAP BY VBELN POSNR ASCENDING.

    IF GT_VBAP[] IS INITIAL.
      LP_SUBRC = 4.
      EXIT.
    ELSE.

      LOOP AT GT_VBAP.
        SELECT VBELV POSNV SUM( RFMNG )
          INTO (LT_VBFA-VBELV,LT_VBFA-POSNV,LT_VBFA-RFMNG)
          FROM VBFA
          WHERE VBELV   EQ GT_VBAP-VBELN
            AND POSNV   EQ GT_VBAP-POSNR
            AND VBTYP_N EQ 'M'
          GROUP BY VBELV POSNV.
          IF SY-SUBRC EQ 0.
            APPEND LT_VBFA.
            CLEAR: LT_VBFA.
          ENDIF.
        ENDSELECT.



        "ADD BY WANTANEE 20150902
        SELECT VBELV POSNV SUM( RFMNG )
         INTO (LT_VBFA1-VBELV,LT_VBFA1-POSNV,LT_VBFA1-RFMNG)
         FROM VBFA
         WHERE VBELV   EQ GT_VBAP-VBELN
           AND POSNV   EQ GT_VBAP-POSNR
           AND VBTYP_N EQ 'N'
         GROUP BY VBELV POSNV.
          IF SY-SUBRC EQ 0.
            APPEND LT_VBFA1.
            CLEAR: LT_VBFA1.
          ENDIF.
        ENDSELECT.
        "END ADD BY WANTANEE 20150902

      ENDLOOP.

      LOOP AT LT_VBFA.
        READ TABLE LT_VBFA1 WITH KEY VBELV = LT_VBFA-VBELV
                                     POSNV = LT_VBFA-POSNV.
        IF SY-SUBRC EQ 0.
          LT_VBFA-RFMNG = LT_VBFA-RFMNG - LT_VBFA1-RFMNG.
          MODIFY: LT_VBFA.
          CLEAR: LT_VBFA.
        ENDIF.
      ENDLOOP.


      SORT LT_VBFA BY VBELV POSNV ASCENDING.

      "ADD BY WANTANEE 20160513
      SELECT VBELN VBELV
       INTO TABLE GT_VBFA_REF_QT
       FROM VBFA
       FOR ALL ENTRIES IN GT_VBAK
       WHERE VBELN = GT_VBAK-VBELN
        AND  POSNV = '000000'
        AND   POSNN = '000000'
        AND VBTYP_N = 'C'
        AND VBTYP_V = 'B'.
      SORT GT_VBFA_REF_QT.
      DELETE ADJACENT DUPLICATES FROM GT_VBFA_REF_QT.
      "END ADD BY WANTANEE 20160513
      "ADD BY WANTANEE 20240904

      SELECT VBELN VBELV POSNV POSNN
       INTO TABLE GT_VBFA_REF_QT_POS
       FROM VBFA
       FOR ALL ENTRIES IN GT_VBAK
       WHERE VBELN = GT_VBAK-VBELN
        AND VBTYP_N = 'C'
        AND VBTYP_V = 'B'.
      SORT GT_VBFA_REF_QT_POS.
      DELETE ADJACENT DUPLICATES FROM GT_VBFA_REF_QT_POS.
      "END ADD BY WANTANEE 20240904



      SELECT VBELN POSNR ZTERM
             IHREZ_E  "ADD BY WANTANEE
        INTO TABLE GT_VBKD
        FROM VBKD
         FOR ALL ENTRIES IN GT_VBAP
       WHERE VBELN = GT_VBAP-VBELN
         AND POSNR = GT_VBAP-POSNR.
      SORT GT_VBKD BY VBELN POSNR ASCENDING.


      SELECT A~VBELV A~POSNV B~VBELN B~LFDAT
        INTO TABLE GT_LIKP
        FROM VBFA AS A
       INNER JOIN LIKP AS B
          ON A~VBELN = B~VBELN
         FOR ALL ENTRIES IN GT_VBAP
       WHERE A~VBELV EQ GT_VBAP-VBELN
         AND A~POSNV EQ GT_VBAP-POSNR.
      SORT GT_LIKP BY VBELV POSNV ASCENDING.

      SELECT VBPA~VBELN VBPA~PERNR
             PA0001~ENAME PA0002~VORNA PA0002~NACHN
        INTO TABLE GT_VBPA
        FROM VBPA INNER JOIN PA0001
          ON  VBPA~PERNR = PA0001~PERNR

        LEFT OUTER JOIN PA0002
          ON  VBPA~PERNR = PA0002~PERNR

         FOR ALL ENTRIES IN GT_VBAK
       WHERE VBPA~VBELN EQ GT_VBAK-VBELN
         AND VBPA~POSNR EQ ''
         AND VBPA~PARVW EQ 'VE'
         AND VBPA~PERNR IN S_PERNR.
      SORT GT_VBPA BY VBELN ASCENDING.



*     FILTER BY PRODUCT HIERACHY
      IF S_PRODH1[] IS NOT INITIAL OR
         S_PRODH2[] IS NOT INITIAL OR
         S_PRODH3[] IS NOT INITIAL.
        SELECT * INTO TABLE LT_T179
          FROM T179
           FOR ALL ENTRIES IN GT_VBAP
         WHERE PRODH EQ GT_VBAP-PRODH.
        SORT LT_T179 BY PRODH ASCENDING.

        PERFORM CHECK_PRODH.
      ENDIF.

      DELETE LT_VBFA WHERE RFMNG  = 0.
      LOOP AT GT_VBAP.
        LV_INDEX = SY-TABIX.
        READ TABLE LT_VBFA WITH KEY VBELV = GT_VBAP-VBELN
                                    POSNV = GT_VBAP-POSNR BINARY SEARCH.
        IF SY-SUBRC = 0.
          IF GT_VBAP-KWMENG EQ LT_VBFA-RFMNG.
*            DELETE GT_VBAP WHERE VBELN = LT_VBFA-VBELV
*                             AND POSNR = LT_VBFA-POSNV.
*            CLEAR: GT_VBAP, LT_VBFA, LV_INDEX.
            GT_VBAP-Z_FLAG = 'X'.
            MODIFY GT_VBAP INDEX LV_INDEX TRANSPORTING Z_FLAG.
          ELSEIF GT_VBAP-KWMENG LT LT_VBFA-RFMNG. "ADD BY WANTANEE 20161014
            GT_VBAP-Z_FLAG = 'X'. "ADD BY WANTANEE 20161014
            MODIFY GT_VBAP INDEX LV_INDEX TRANSPORTING Z_FLAG. ""ADD BY WANTANEE 20161014
          ELSE.
              READ TABLE GT_VBAK WITH KEY VBELN = GT_VBAP-VBELN BINARY SEARCH.
                  IF SY-SUBRC = 0.
                    IF S_PERNR[] IS NOT INITIAL.
                      READ TABLE GT_VBPA WITH KEY VBELN = GT_VBAK-VBELN BINARY SEARCH.
                      IF SY-SUBRC = 0.
                        APPEND GT_VBAK TO LT_VBAK.
                      ELSE.
*                         DELETE GT_VBAK WHERE VBELN = GT_VBAK-VBELN.
                        DELETE GT_VBAP WHERE VBELN = GT_VBAK-VBELN.
                        CLEAR: GT_VBAP, GT_VBAK, GT_VBPA, LV_INDEX.
                        CONTINUE.
                      ENDIF.
                    ELSE.
                      APPEND GT_VBAK TO LT_VBAK.
                    ENDIF.
                  ENDIF.
          ENDIF.
*          CONTINUE.
        ELSE.
          READ TABLE GT_VBAK WITH KEY VBELN = GT_VBAP-VBELN BINARY SEARCH.
          IF SY-SUBRC = 0.
            IF S_PERNR[] IS NOT INITIAL.
              READ TABLE GT_VBPA WITH KEY VBELN = GT_VBAK-VBELN BINARY SEARCH.
              IF SY-SUBRC = 0.
                APPEND GT_VBAK TO LT_VBAK.
              ELSE.
*                 DELETE GT_VBAK WHERE VBELN = GT_VBAK-VBELN.
                DELETE GT_VBAP WHERE VBELN = GT_VBAK-VBELN.
                CLEAR: GT_VBAP, GT_VBAK, GT_VBPA, LV_INDEX.
                CONTINUE.
              ENDIF.
            ELSE.
              APPEND GT_VBAK TO LT_VBAK.
            ENDIF.
          ENDIF.
          READ TABLE GT_VBKD WITH KEY VBELN = GT_VBAP-VBELN
                                      POSNR = GT_VBAP-POSNR BINARY SEARCH.
          IF SY-SUBRC = 0.
            GT_VBAP-ZTERM = GT_VBKD-ZTERM.
          ELSE.
            "ADD BY WANTANEE 20200115
            READ TABLE GT_VBKD WITH KEY VBELN = GT_VBAP-VBELN
                                      POSNR = '000000'.
                IF SY-SUBRC = 0.
                  GT_VBAP-ZTERM = GT_VBKD-ZTERM.
                ENDIF.

             "END ADD BY WANTANEE 20200115
          ENDIF.
          READ TABLE GT_LIKP WITH KEY VBELV = GT_VBAP-VBELN
                                      POSNV = GT_VBAP-POSNR BINARY SEARCH.
          IF SY-SUBRC = 0.
            GT_VBAP-DELI  = GT_LIKP-VBELN.
            GT_VBAP-EDATU = GT_LIKP-LFDAT.
          ENDIF.
          READ TABLE LT_T179 WITH KEY PRODH = GT_VBAP-PRODH BINARY SEARCH.
          IF SY-SUBRC = 0.
            GT_VBAP-STUFE = LT_T179-STUFE.
            CASE GT_VBAP-STUFE.
              WHEN 1.
                PERFORM CHECK_LV1.
              WHEN 2.
                PERFORM CHECK_LV2.
              WHEN 3.
                PERFORM CHECK_LV3.
            ENDCASE.
          ENDIF.
          MODIFY GT_VBAP INDEX LV_INDEX TRANSPORTING ZTERM DELI EDATU STUFE.
        ENDIF.

        CLEAR: GT_VBAP, LT_VBFA, GT_VBKD, GT_LIKP,
               GT_VBPA, GT_VBAK, LT_VBAK, LV_INDEX.
      ENDLOOP.

      SORT GT_VBAP BY Z_FLAG ASCENDING.
      DELETE GT_VBAP[] WHERE Z_FLAG = 'X'.

      SORT LT_VBAK BY VBELN ASCENDING.
      DELETE ADJACENT DUPLICATES FROM LT_VBAK.
      REFRESH GT_VBAK.
      GT_VBAK[] = LT_VBAK[].

      IF GT_VBAK[] IS INITIAL OR GT_VBAP[] IS INITIAL.
        LP_SUBRC = 4.
        EXIT.
      ELSE.
        SORT GT_VBAK BY VBELN ASCENDING.
        SORT GT_VBAP BY VBELN POSNR ASCENDING.

        SELECT KNUMV KPOSN KSCHL KBETR
          INTO TABLE GT_PRCD_ELEMENTS FROM PRCD_ELEMENTS
           FOR ALL ENTRIES IN GT_VBAK
         WHERE KNUMV EQ GT_VBAK-KNUMV AND
             ( KSCHL EQ 'ZPR0' OR
               KSCHL EQ 'ZD03' OR
               KSCHL EQ 'ZD30' ).
        SORT GT_PRCD_ELEMENTS BY KNUMV KPOSN KSCHL ASCENDING.

*       GET SCHEDULE LINE DATA
        SELECT VBELN POSNR ETENR EDATU BMENG
          INTO TABLE GT_VBEP
          FROM VBEP
           FOR ALL ENTRIES IN GT_VBAP
         WHERE VBELN EQ GT_VBAP-VBELN
           AND POSNR EQ GT_VBAP-POSNR.
        SORT GT_VBEP BY VBELN POSNR ASCENDING.

*       GET MODEL COST
        SELECT MATNR BWKEY LBKUM SALK3 VPRSV VERPR
          INTO TABLE GT_MBEW
          FROM MBEW
*"REMOVE BY WANTANEE 20150902
*           FOR ALL ENTRIES IN GT_VBAP
*         WHERE MATNR EQ GT_VBAP-MATNR
*           AND BWKEY EQ '1000'.
*"END REMOVE BY WANTANEE 20150902
          WHERE BWKEY EQ '1000'.
        SORT GT_MBEW BY MATNR ASCENDING.

*       SD DOCUMENT FLOW
        SORT GT_VBAK BY VBELN ASCENDING.
        PERFORM READ_SD_DOC_FLOW.
        SORT GT_VBFA BY VBELV POSNV ASCENDING.


*       GET DISTRIBUTION CHANNEL DESCRIPTION
        SELECT * INTO TABLE GT_TVTWT
          FROM TVTWT
*           FOR ALL ENTRIES IN GT_VBAK  "REMOVE BY WANTANEE 20150902
         WHERE SPRAS EQ 'E'.
*           AND VTWEG EQ GT_VBAK-VTWEG.  "REMOVE BY WANTANEE 20150902
        SORT GT_TVTWT BY VTWEG ASCENDING.

*       GET SALES OFFICE DESCRIPTION
        SELECT * INTO TABLE GT_TVKBT
          FROM TVKBT
*           FOR ALL ENTRIES IN GT_VBAK  "REMOVE BY WANTANEE 20150902
         WHERE SPRAS EQ 'E'.
*           AND VKBUR EQ GT_VBAK-VKBUR.  "REMOVE BY WANTANEE 20150902
        SORT GT_TVKBT BY VKBUR ASCENDING.

*       GET SALES GROUP
        SELECT * INTO TABLE GT_TVGRT
          FROM TVGRT
*           FOR ALL ENTRIES IN GT_VBAK   "REMOVE BY WANTANEE 20150902
         WHERE SPRAS EQ 'E'.
*           AND VKGRP EQ GT_VBAK-VKGRP.  "REMOVE BY WANTANEE 20150902
        SORT GT_TVGRT BY VKGRP ASCENDING.

*       GET PROJECT NAME
        SELECT * INTO TABLE GT_AUFK
          FROM AUFK
           FOR ALL ENTRIES IN GT_VBAP
         WHERE AUFNR EQ GT_VBAP-AUFNR.
        SORT GT_AUFK BY AUFNR ASCENDING.

        SELECT AUART TXT
        INTO TABLE GT_T003P
        FROM T003P
        WHERE SPRAS EQ 'E'.

*       GET REASON REJECT
        SELECT * INTO TABLE GT_TVAGT
          FROM TVAGT
           FOR ALL ENTRIES IN GT_VBAP
         WHERE ABGRU EQ GT_VBAP-ABGRU
          AND SPRAS EQ 'E'.

        SORT GT_TVAGT BY ABGRU ASCENDING.



*       GET CUSTOMER NAME
        SELECT * INTO TABLE GT_KNA1
          FROM KNA1
           FOR ALL ENTRIES IN GT_VBAK
         WHERE KUNNR EQ GT_VBAK-KUNNR.
        SORT GT_KNA1 BY KUNNR ASCENDING.
        IF GT_KNA1[] IS NOT INITIAL.
          SELECT * FROM ADRC
            INTO TABLE GT_ADRC
             FOR ALL ENTRIES IN GT_KNA1
           WHERE ADDRNUMBER EQ GT_KNA1-ADRNR
             AND ( NATION EQ '' OR
                   NATION EQ 'I' ).
          SORT GT_ADRC BY ADDRNUMBER NATION ASCENDING.
        ENDIF.

        SELECT * INTO TABLE GT_VBPA_AG
          FROM VBPA
           FOR ALL ENTRIES IN GT_VBAK
         WHERE VBELN EQ GT_VBAK-VBELN
           AND POSNR EQ ''
           AND PARVW EQ 'AG'.
        SORT GT_VBPA_AG BY VBELN ASCENDING.
        IF GT_VBPA_AG[] IS NOT INITIAL.
          SELECT * FROM ADRC
            INTO TABLE GT_ADRC_AG
             FOR ALL ENTRIES IN GT_VBPA_AG
           WHERE ADDRNUMBER EQ GT_VBPA_AG-ADRNR
             AND ( NATION EQ '' OR
                   NATION EQ 'I' ).
          SORT GT_ADRC_AG BY ADDRNUMBER ASCENDING NATION.
        ENDIF.

        IF NOT GT_VBFA_REF_QT IS INITIAL.
          SELECT VBELN  IHREZ_E
            INTO TABLE GT_VBKD_TEMP
            FROM VBKD
             FOR ALL ENTRIES IN GT_VBFA_REF_QT
           WHERE VBELN = GT_VBFA_REF_QT-VBELV.
          SORT GT_VBKD BY VBELN POSNR ASCENDING.
        ENDIF..


      ENDIF.
    ENDIF.
  ENDIF.

     SELECT AUGRU BEZEI
       INTO TABLE GT_TVAUT
       FROM TVAUT
       WHERE SPRAS EQ 'E'.

ENDFORM.                    "GET_DATA
*&---------------------------------------------------------------------*
*&      FORM  CHECK_PRODH
*&---------------------------------------------------------------------*
FORM CHECK_PRODH .

  DATA: LT_LV2 TYPE STANDARD TABLE OF T179.

  DATA: LT_LV3 TYPE STANDARD TABLE OF T179.

  DATA: LV_PRODH TYPE T179-PRODH.
*>>>BOI                                                    "ISS20140304+
  DATA: GWA_LV1 TYPE T179,
        GWA_LV2 TYPE T179,
        GWA_LV3 TYPE T179.


* ### FIND ALL POSSIBLE HIERACHY DATA

  IF S_PRODH1[] IS NOT INITIAL.
    SELECT * INTO TABLE GT_LV1
      FROM T179
     WHERE PRODH IN S_PRODH1
       AND STUFE EQ 1.
  ENDIF.

  IF S_PRODH2[] IS NOT INITIAL.

    SELECT * INTO TABLE GT_LV2
      FROM T179
     WHERE PRODH IN S_PRODH2
       AND STUFE EQ 2.
*>>>EOI                                                    "ISS20140304+

*   FILTER LEVEL 2 BY LEVEL 1 (RELATED HIERACHY)
    IF S_PRODH1[] IS NOT INITIAL.
      LOOP AT GT_LV1 INTO GWA_LV1.
        CONDENSE GWA_LV1-PRODH NO-GAPS.
        CONCATENATE GWA_LV1-PRODH '*' INTO LV_PRODH.
        DELETE GT_LV2 WHERE PRODH NP LV_PRODH.
        CLEAR: GWA_LV1,LV_PRODH.
      ENDLOOP.
    ELSE.
*     IF USER NOT ENTRY SELECTION LEVEL 1, READ ALL POSSIBLE RELATED FROM LEVEL 2
      LOOP AT GT_LV2 INTO GWA_LV2.
        SELECT * APPENDING TABLE GT_LV1
          FROM T179
         WHERE PRODH EQ GWA_LV2-PRODH+0(5)
           AND STUFE EQ 1.
        CLEAR: GWA_LV2.
      ENDLOOP.
    ENDIF.

  ELSE.

*  IF USER NOT ENTRY SELECTION LEVEL 2, READ ALL POSSIBLE RELATED FROM LEVEL 1
    LOOP AT GT_LV1 INTO GWA_LV1.
      CONCATENATE GWA_LV1-PRODH+0(5) '%' INTO LV_PRODH.
      SELECT * APPENDING TABLE GT_LV2
        FROM T179
       WHERE PRODH LIKE LV_PRODH
         AND STUFE EQ 2.
      CLEAR: GWA_LV1,LV_PRODH.
    ENDLOOP.

  ENDIF.

  IF S_PRODH3[] IS NOT INITIAL.

    SELECT * INTO TABLE GT_LV3
      FROM T179
     WHERE PRODH IN S_PRODH3
       AND STUFE EQ 3.
*>>>EOI                                                    "ISS20140304+

*   FILTER BY LEVEL 2 (RELATED HIERACHY)
    IF S_PRODH2[] IS NOT INITIAL.
      LOOP AT GT_LV2 INTO GWA_LV2.
        CONCATENATE GWA_LV2-PRODH '*' INTO LV_PRODH.
        DELETE GT_LV3 WHERE PRODH NP LV_PRODH.
        CLEAR: GWA_LV2,LV_PRODH.
      ENDLOOP.
    ELSE.
*     IF USER NOT ENTRY SELECTION LEVEL 2, READ ALL POSSIBLE RELATED FROM LEVEL 3
      LOOP AT GT_LV3 INTO GWA_LV3.
        SELECT * APPENDING TABLE GT_LV2
          FROM T179
         WHERE PRODH EQ GWA_LV3-PRODH+0(10)
           AND STUFE EQ 2.
        CLEAR: GWA_LV3.
      ENDLOOP.
    ENDIF.

  ELSE.

*  IF USER NOT ENTRY SELECTION LEVEL 3, READ ALL POSSIBLE RELATED FROM LEVEL 2
    LOOP AT GT_LV2 INTO GWA_LV2.
      CONCATENATE GWA_LV2-PRODH+0(10) '%' INTO LV_PRODH.
      SELECT * APPENDING TABLE GT_LV3
        FROM T179
       WHERE PRODH LIKE LV_PRODH
         AND STUFE EQ 3.
      CLEAR: GWA_LV2,LV_PRODH.
    ENDLOOP.

  ENDIF.

*  SORT GT_VBAP BY STUFE.                                  "ISS20140304-
  SORT GT_VBAP BY STUFE ASCENDING.                         "ISS20140304+

ENDFORM.                    " CHECK_PRODH
*&---------------------------------------------------------------------*
*&      FORM  CHECK_LV1
*&---------------------------------------------------------------------*
FORM CHECK_LV1 .

  DATA: GWA_LV1 TYPE T179.                                 "ISS20140304+
*  CLEAR: GWA_LV1.                                         "ISS20140304-
  READ TABLE GT_LV1 INTO GWA_LV1 WITH KEY PRODH = GT_VBAP-PRODH.
  IF SY-SUBRC <> 0.
    DELETE GT_VBAP. CLEAR GT_VBAP.
  ENDIF.

ENDFORM.                                                    " CHECK_LV1
*&---------------------------------------------------------------------*
*&      FORM  CHECK_LV2
*&---------------------------------------------------------------------*
FORM CHECK_LV2 .

  DATA: GWA_LV2 TYPE T179.                                 "ISS20140304+
*  CLEAR: GWA_LV2.                                         "ISS20140304-
  READ TABLE GT_LV2 INTO GWA_LV2 WITH KEY PRODH = GT_VBAP-PRODH.
  IF SY-SUBRC <> 0.
    DELETE GT_VBAP. CLEAR GT_VBAP.
  ENDIF.

ENDFORM.                                                    " CHECK_LV2
*&---------------------------------------------------------------------*
*&      FORM  CHECK_LV3
*&---------------------------------------------------------------------*
FORM CHECK_LV3 .

  DATA: GWA_LV3 TYPE T179.                                 "ISS20140304+
*  CLEAR: GWA_LV3.                                         "ISS20140304-
  READ TABLE GT_LV3 INTO GWA_LV3 WITH KEY PRODH = GT_VBAP-PRODH.
  IF SY-SUBRC <> 0.
    DELETE GT_VBAP. CLEAR GT_VBAP.
  ENDIF.

ENDFORM.                                                    " CHECK_LV3
*&---------------------------------------------------------------------*
*&      FORM  READ_SD_DOC_FLOW
*&---------------------------------------------------------------------*
FORM READ_SD_DOC_FLOW .

  DATA: LV_VBELV TYPE VBUK-VBELN.

  DATA: LT_VBFAVB TYPE VBFAVB OCCURS 0 WITH HEADER LINE,
        LT_VBFA   TYPE VBFAVB OCCURS 0 WITH HEADER LINE.

  LOOP AT GT_VBAK.
    CLEAR: LV_VBELV.
    REFRESH: LT_VBFAVB, LT_VBFA.

    LV_VBELV = GT_VBAK-VBELN.

    PERFORM CALL_WB2_VBFA_READ_WITH_VBELV
     TABLES LT_VBFAVB
            LT_VBFA
      USING LV_VBELV.

    IF LT_VBFA[] IS NOT INITIAL.
*      IF P_QUO = 'X'.
*        DELETE LT_VBFA WHERE VBTYP_N NE 'C'.
*      ELSE.
      DELETE LT_VBFA WHERE VBTYP_N NE 'J'
                       AND VBTYP_N NE 'M'.
*      ENDIF.
      APPEND LINES OF LT_VBFA TO GT_VBFA.
    ENDIF.

    CLEAR: GT_VBAK.
  ENDLOOP.

ENDFORM.                    " READ_SD_DOC_FLOW
*&---------------------------------------------------------------------*
*&      FORM  CALL_WB2_VBFA_READ_WITH_VBELV
*&---------------------------------------------------------------------*
FORM CALL_WB2_VBFA_READ_WITH_VBELV TABLES LT_VBFAVB
                                          LT_VBFA
                                    USING LP_VBELV.

  CALL FUNCTION 'WB2_VBFA_READ_WITH_VBELV'
    EXPORTING
      I_VBELV            = LP_VBELV
      I_BYPASSING_BUFFER = ' '
      I_REFRESH_BUFFER   = ' '
    TABLES
      ET_VBFAVB          = LT_VBFAVB
      ET_VBFA            = LT_VBFA
    EXCEPTIONS
      RECORD_NOT_FOUND   = 1
      OTHERS             = 2.
  IF SY-SUBRC <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.

  ENDIF.

ENDFORM.                    " CALL_WB2_VBFA_READ_WITH_VBELV
*&--------------------------------------------------------------------*
*&      FORM  PROCESS_DATA
*&--------------------------------------------------------------------*
FORM PROCESS_DATA CHANGING LP_SUBRC.

  LP_SUBRC = 0.
*  SORT GT_VBAK BY VBELN.                                  "ISS20140304-
  SORT GT_VBAK BY VBELN ASCENDING.                         "ISS20140304+
*  SORT GT_VBAP BY VBELN POSNR.                            "ISS20140304-
  SORT GT_VBAP BY VBELN POSNR ASCENDING.                   "ISS20140304+
  SORT GT_VBEP BY VBELN POSNR ASCENDING.                   "ISS20140304+

*  IF P_QUO = 'X'.
*    PERFORM PROCESS_QT.
*    IF GT_OUTQT[] IS INITIAL.
*      LP_SUBRC = 4.
*    ELSE.
*
*    ENDIF.
*  ELSE.
  PERFORM PROCESS_SO.
  IF GT_OUTSO[] IS INITIAL.
    LP_SUBRC = 4.
  ENDIF.
*  ENDIF.
*>>>BOI                                                    "ISS20140304+
* CLEAR GLOBAL VARIABLES TO IMPROVE PERFORMANCE
  REFRESH: GT_VBAK[], GT_VBAP[], GT_VBEP[], GT_VBPA[],
           GT_KNA1[], GT_MBEW[], GT_VBFA[],
*           GT_ZSDS_GEN_C[],
           GT_VBKD[], GT_LIKP[], GT_PRCD_ELEMENTS[],
           GT_TVTWT[], GT_TVKBT[], GT_TVGRT[], GT_AUFK[],
           GT_TVAGT[], GT_VBPA_AG[], GT_ADRC[], GT_ADRC_AG[].
  CLEAR: GT_VBAK, GT_VBAP, GT_VBEP, GT_VBPA,
         GT_KNA1, GT_MBEW, GT_VBFA,
*         GT_ZSDS_GEN_C,
         GT_VBKD, GT_LIKP, GT_PRCD_ELEMENTS,
         GT_TVTWT, GT_TVKBT, GT_TVGRT, GT_AUFK,
         GT_TVAGT, GT_VBPA_AG, GT_ADRC, GT_ADRC_AG.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    "PROCESS_DATA
*&---------------------------------------------------------------------*
*&      FORM  READDATE
*&---------------------------------------------------------------------*
FORM READDATE  USING    P_VBELN
                        P_POSNR
               CHANGING P_YEAR
                        P_MONTH
                        P_WEEK
                        P_EDATU.

  DATA: WEEK TYPE SCAL-WEEK.

  READ TABLE GT_VBEP WITH KEY VBELN = P_VBELN
                              POSNR = P_POSNR
                              ETENR = '0001'.
  IF SY-SUBRC = 0.
    P_YEAR  = GT_VBEP-EDATU+0(4).
    P_MONTH = GT_VBEP-EDATU+4(2).
    P_EDATU = GT_VBEP-EDATU.

    IF NOT GT_VBEP-EDATU IS INITIAL.
      CALL FUNCTION 'DATE_GET_WEEK'
        EXPORTING
          DATE = GT_VBEP-EDATU
        IMPORTING
          WEEK = WEEK.

      IF NOT WEEK IS INITIAL.
        P_WEEK = WEEK+4(2).
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " READDATE
*&---------------------------------------------------------------------*
*&      FORM  READCH
*&---------------------------------------------------------------------*
FORM READCH  USING    P_VTWEG
             CHANGING P_VTEXT.

* GET DISTRIBUTION CHANNEL DESCRIPTION
  READ TABLE GT_TVTWT WITH KEY VTWEG = P_VTWEG BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_VTEXT = GT_TVTWT-VTEXT.
  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READCH
*&---------------------------------------------------------------------*
*&      FORM  READSALEOFF
*&---------------------------------------------------------------------*
FORM READSALEOFF  USING    P_VKBUR
                  CHANGING P_SALESOFFICE.


* GET SALES OFFICE DESCRIPTION
  READ TABLE GT_TVKBT WITH KEY VKBUR = P_VKBUR BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_SALESOFFICE = GT_TVKBT-BEZEI.
  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READSALEOFF
*&---------------------------------------------------------------------*
*&      FORM  READSALEGRP
*&---------------------------------------------------------------------*
FORM READSALEGRP  USING    P_VKGRP
                  CHANGING P_SALESGRP.

* GET SALES GROUP
  READ TABLE GT_TVGRT WITH KEY VKGRP = P_VKGRP BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_SALESGRP = GT_TVGRT-BEZEI.
  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READSALEGRP
*&---------------------------------------------------------------------*
*&      FORM  READSALENAME
*&---------------------------------------------------------------------*
FORM READSALENAME  USING    P_VBELN
                   CHANGING P_PERNR
                            P_SNAME.


  READ TABLE GT_VBPA WITH KEY VBELN = P_VBELN BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_PERNR = GT_VBPA-PERNR.
    CONCATENATE GT_VBPA-VORNA GT_VBPA-NACHN
           INTO P_SNAME SEPARATED BY SPACE.
    IF P_SNAME IS INITIAL.
      P_SNAME = GT_VBPA-ENAME.
    ENDIF.
  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READSALENAME
*&---------------------------------------------------------------------*
*&      FORM  READPROJNAME
*&---------------------------------------------------------------------*
FORM READPROJNAME  USING    P_AUFNR
                   CHANGING P_KTEXT
                            P_AUART  "ADD BY WANTANEE 20161011
                            P_TYPE_TXT. "ADD BY WANTANEE 20161011


  READ TABLE GT_AUFK WITH KEY AUFNR = P_AUFNR BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_KTEXT = GT_AUFK-KTEXT.
    P_AUART = GT_AUFK-AUART."ADD BY WANTANEE 20161011
    "ADD BY WANTANEE 20161011
    READ TABLE GT_T003P INTO WA_T003P WITH KEY AUART = GT_AUFK-AUART.
    IF SY-SUBRC EQ 0.
      P_TYPE_TXT = WA_T003P-TXT.
    ENDIF.
    "END ADD BY WANTANEE 20161011

  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READPROJNAME
*&---------------------------------------------------------------------*
*&      FORM  READPROJTXT
*&---------------------------------------------------------------------*
FORM READTEXT  USING ZID     TYPE THEAD-TDID
                     ZNAME   TYPE THEAD-TDNAME
                     ZOBJECT TYPE THEAD-TDOBJECT
            CHANGING P_TEXT.

  DATA: ZTLINE TYPE STANDARD TABLE OF TLINE WITH HEADER LINE.

  CALL FUNCTION 'READ_TEXT'
     EXPORTING
*      CLIENT                        = SY-MANDT
       ID                            = ZID
       LANGUAGE                      = SY-LANGU
       NAME                          = ZNAME
       OBJECT                        = ZOBJECT
     TABLES
       LINES                         = ZTLINE
     EXCEPTIONS
       ID                            = 1
       LANGUAGE                      = 2
       NAME                          = 3
       NOT_FOUND                     = 4
       OBJECT                        = 5
       REFERENCE_CHECK               = 6
       WRONG_ACCESS_TO_ARCHIVE       = 7
       OTHERS                        = 8.
  IF SY-SUBRC <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    DELETE ZTLINE WHERE TDLINE = SPACE.
    READ TABLE ZTLINE INDEX 1.
    CONCATENATE P_TEXT ZTLINE-TDLINE INTO P_TEXT SEPARATED BY SPACE.
  ENDIF.

ENDFORM.                    " READPROJTXT
*&---------------------------------------------------------------------*
*&      FORM  READCUSTNAME
*&---------------------------------------------------------------------*
FORM READCUSTNAME  USING P_VBELN
                         P_KUNNR
                         P_CUSTNAME
                         P_ENGNAME.

  READ TABLE GT_KNA1 WITH KEY KUNNR = P_KUNNR BINARY SEARCH.
  IF SY-SUBRC = 0.
    IF GT_KNA1-XCPDK = 'X'.
      READ TABLE GT_VBPA_AG WITH KEY VBELN = P_VBELN BINARY SEARCH.
      IF SY-SUBRC = 0.

* GET CUSTOMER THAI
        READ TABLE GT_ADRC_AG WITH KEY ADDRNUMBER = GT_VBPA_AG-ADRNR
                                           NATION = '' BINARY SEARCH.
        IF SY-SUBRC = 0.
          CONCATENATE GT_ADRC_AG-NAME1 GT_ADRC_AG-NAME2 INTO P_CUSTNAME SEPARATED BY SPACE.
        ENDIF.

* GET CUSTOMER INTER
        CLEAR: GT_ADRC_AG.
        READ TABLE GT_ADRC_AG WITH KEY ADDRNUMBER = GT_VBPA_AG-ADRNR
                                           NATION = 'I' BINARY SEARCH.
        IF SY-SUBRC = 0.
          CONCATENATE GT_ADRC_AG-NAME1 GT_ADRC_AG-NAME2 INTO P_ENGNAME SEPARATED BY SPACE.
        ELSE.
          P_ENGNAME = P_CUSTNAME.
        ENDIF.

      ELSE.
        WRITE P_KUNNR TO P_CUSTNAME NO-ZERO.
        CONCATENATE P_CUSTNAME ' - CAN NOT FIND ONE TIME CUSTOMER NAME' INTO P_CUSTNAME.
      ENDIF.
    ELSE.

* GET CUSTOMER THAI
      CLEAR: GT_ADRC.
      READ TABLE GT_ADRC WITH KEY ADDRNUMBER = GT_KNA1-ADRNR
                                      NATION = '' BINARY SEARCH.
      IF SY-SUBRC = 0.
        CONCATENATE GT_ADRC-NAME1 GT_ADRC-NAME2 INTO P_CUSTNAME SEPARATED BY SPACE.
      ENDIF.

* GET CUSTOMER INTER
      CLEAR: GT_ADRC.
      READ TABLE GT_ADRC WITH KEY ADDRNUMBER = GT_KNA1-ADRNR
                                      NATION = 'I' BINARY SEARCH.
      IF SY-SUBRC = 0.
        CONCATENATE GT_ADRC-NAME1 GT_ADRC-NAME2 INTO P_ENGNAME SEPARATED BY SPACE.
      ELSE.
        P_ENGNAME = P_CUSTNAME.
      ENDIF.

    ENDIF.
  ELSE.
    WRITE P_KUNNR TO P_CUSTNAME NO-ZERO.
    CONCATENATE P_CUSTNAME ' - CAN NOT FIND CUSTOMER NAME' INTO P_CUSTNAME.
  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READCUSTNAME
*&---------------------------------------------------------------------*
*&      FORM  READSOQTY
*&---------------------------------------------------------------------*
FORM READSOQTY  USING    P_VBELN
                         P_POSNR
                         P_MATNR
                CHANGING P_SOQTY.


  CLEAR : P_SOQTY.  "EDIT BY WANTANEE 20110318
  LOOP AT GT_VBFA WHERE VBELV = P_VBELN
                    AND POSNV = P_POSNR.
    P_SOQTY = P_SOQTY + GT_VBFA-RFMNG.
    CLEAR: GT_VBFA.
  ENDLOOP.

ENDFORM.                    " READSOQTY
*&---------------------------------------------------------------------*
*&      FORM  READMODELCOST
*&---------------------------------------------------------------------*
FORM READMODELCOST  USING    P_MATNR
                    CHANGING P_MOCOS.

  CLEAR : P_MOCOS. "EDIT BY WANTANEE
  READ TABLE GT_MBEW WITH KEY MATNR = P_MATNR BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_MOCOS = GT_MBEW-VERPR.
  ENDIF.

ENDFORM.                    " READMODELCOST
*&---------------------------------------------------------------------*
*&      FORM  READPERPROG
*&---------------------------------------------------------------------*
FORM READPERPROG  USING    P_VBLNR
                           P_POSNR
                  CHANGING P_PERPROG.

  DATA: ZNAME TYPE THEAD-TDNAME.

  READ TABLE GT_VBFA WITH KEY VBELV = P_VBLNR
                              POSNV = P_POSNR BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_PERPROG = '100'.
  ELSE.
*   % IN PROGESS
    ZNAME = P_VBLNR.
    PERFORM READTEXT USING 'ZN36' ZNAME 'VBBK'
                  CHANGING P_PERPROG.
    PERFORM CUT_CHAR_GET_NUM CHANGING P_PERPROG.
  ENDIF.

ENDFORM.                    " READPERPROG
*&---------------------------------------------------------------------*
*&      FORM  READPERTEXT
*&---------------------------------------------------------------------*
FORM READPERTEXT  USING    P_VBLNR
                           P_PERPROG
                  CHANGING P_PERTEXT.

  DATA: ZPER(100) TYPE C,
        ZNAME TYPE THEAD-TDNAME.
*        LV_CONST TYPE ZSDS_GEN_C-CONST.


ENDFORM.                    " READPERTEXT
*&---------------------------------------------------------------------*
*&      FORM  CUT_CHAR_GET_NUM
*&---------------------------------------------------------------------*
FORM CUT_CHAR_GET_NUM  CHANGING P_FIELD.

  DATA: LV_LENGTH TYPE I.

  DATA: LV_POS TYPE I.

  DATA: LV_CHAR.

  CLEAR: LV_LENGTH, LV_POS.

  LV_LENGTH = STRLEN( P_FIELD ).

  WHILE LV_LENGTH > 0.

    LV_CHAR = P_FIELD+LV_POS(1).

    IF LV_CHAR CA '0123456789'.
      "DO NOTHING
    ELSE.
      IF LV_CHAR = SPACE.
        "DO NOHTING
      ELSE.
        REPLACE ALL OCCURRENCES OF LV_CHAR IN P_FIELD WITH SPACE.
        SHIFT P_FIELD LEFT DELETING LEADING SPACE.
        CONDENSE P_FIELD NO-GAPS.
        LV_LENGTH = STRLEN( P_FIELD ).
        LV_POS    = 0.
      ENDIF.
    ENDIF.

    LV_POS = LV_POS + 1.

    LV_LENGTH = LV_LENGTH - 1.

    CLEAR: LV_CHAR.
  ENDWHILE.

  SHIFT P_FIELD LEFT DELETING LEADING SPACE.
  CONDENSE P_FIELD NO-GAPS.

ENDFORM.                    " CUT_CHAR_GET_NUM
*&---------------------------------------------------------------------*
*&      FORM  READRESONREJECT
*&---------------------------------------------------------------------*
FORM READRESONREJECT  USING    P_ABGRU
                      CHANGING P_RESREJ.

*>>>BOD                                                    "ISS20140304-
*  SELECT SINGLE BEZEI INTO P_RESREJ
*    FROM TVAGT
*   WHERE ABGRU = P_ABGRU.
*>>>EOD                                                    "ISS20140304-
*>>>BOI                                                    "ISS20140304+
  READ TABLE GT_TVAGT WITH KEY ABGRU = P_ABGRU BINARY SEARCH.
  IF SY-SUBRC = 0.
    P_RESREJ = GT_TVAGT-BEZEI.
  ENDIF.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READRESONREJECT
*&---------------------------------------------------------------------*
*&      FORM  PROCESS_SO
*&---------------------------------------------------------------------*
FORM PROCESS_SO.

  DATA: ZNAME TYPE THEAD-TDNAME,
        HEAD_BOM(1) TYPE C,    "ADD FOR C1-28042010
        LV_VBELN TYPE VBAP-VBELN,
        LV_POSNR TYPE VBAP-POSNR.
*>>>BOI                                                    "ISS20140304+
  DATA: LV_WEEK   TYPE SCAL-WEEK.
  DATA: GW_VBAP   TYPE GY_VBAP,
        GW_PRCD_ELEMENTS   TYPE GY_PRCD_ELEMENTS.

  DATA: LV_PERIOD TYPE T009B-POPER,
        LV_FISCAL TYPE T009B-BDATJ.

  DATA: LV_FIRST_MONTH(2) TYPE C.
  IT_VBEP[] = GT_VBEP[].
  LOOP AT GT_VBEP.
*    READ TABLE GT_OUTSO WITH KEY VBELN = GT_VBEP-VBELN
*                                 POSNR = GT_VBEP-POSNR.
*    IF SY-SUBRC = 0.    "FOUND IN OUTPUT
*      CLEAR GT_OUTSO-C_QTY.
*    ELSE.               "NOT FOUND IN OUTPUT
    READ TABLE GT_OUTSO WITH KEY VBELN = GT_VBEP-VBELN
                                 POSNR = GT_VBEP-POSNR.
    IF SY-SUBRC NE 0.    "FOUND IN OUTPUT
      CLEAR GT_OUTSO.

      READ TABLE GT_VBAK WITH KEY VBELN = GT_VBEP-VBELN BINARY SEARCH.

      READ TABLE GT_VBAP WITH KEY VBELN = GT_VBEP-VBELN
                                  POSNR = GT_VBEP-POSNR BINARY SEARCH.

*  -  CHECK HEADER BOM
      CLEAR: HEAD_BOM, LV_VBELN, LV_POSNR,GW_VBAP.
      "REMOVE BY WANTANEE 20140804
      IF GT_VBAP-UEPOS EQ ''.
        LV_VBELN = GT_VBAP-VBELN.
        LV_POSNR = GT_VBAP-POSNR.
*        READ TABLE GT_VBAP INTO GW_VBAP WITH KEY VBELN = LV_VBELN
*                                                 UEPOS = LV_POSNR.
*        IF SY-SUBRC EQ 0.
*          HEAD_BOM = 'X'.
*        ENDIF.
      ENDIF.
      "END REMOVE BY WANTANEE 20140804
      "ADD BY WANTANEE 20140804
      IF GT_VBAP-KOWRR EQ 'X'.
        HEAD_BOM = 'X'.
        GT_OUTSO-CHK_BOM = 'X'.

      ENDIF.
      "END ADD BY WANTANEE 20140804

*     ### HEADER DATA
      PERFORM READ_R_DATE CHANGING GT_OUTSO-R_YEAR
                                   GT_OUTSO-R_MONTH.

      GT_OUTSO-VTWEG = GT_VBAK-VTWEG.
      PERFORM READCH USING GT_OUTSO-VTWEG
                  CHANGING GT_OUTSO-VTEXT.

      GT_OUTSO-VKBUR = GT_VBAK-VKBUR.
      PERFORM READSALEOFF USING GT_OUTSO-VKBUR
                      CHANGING  GT_OUTSO-SALESOFF.

      GT_OUTSO-VKGRP = GT_VBAK-VKGRP.
      PERFORM READSALEGRP USING GT_OUTSO-VKGRP
                       CHANGING GT_OUTSO-SALESGRP.

      PERFORM READSALENAME USING GT_VBAP-VBELN
                        CHANGING GT_OUTSO-PERNR
                                 GT_OUTSO-SNAME.

*     PROJECT TEXT
      ZNAME = GT_VBAP-VBELN.
      PERFORM READTEXT USING 'Z002' ZNAME 'VBBK'
                    CHANGING GT_OUTSO-PROJT.
      "ADD BY WANTANEE 20150728
      PERFORM READTEXT USING 'Z040' ZNAME 'VBBK'
                    CHANGING GT_OUTSO-LAND_NO.
      "END ADD BY WANTANEE 20150728
      IF GT_OUTSO-PROJT IS INITIAL.
        PERFORM READPROJNAME USING GT_VBAP-AUFNR
                          CHANGING GT_OUTSO-PROJT
                                   GT_OUTSO-IO_AUART   "ADD BY WANTANEE 20161011
                                   GT_OUTSO-IO_TYPE_TEXT  . "ADD BY WANTANEE 20161011
        GT_OUTSO-KTEXT = GT_OUTSO-PROJT.
      ELSE.
        PERFORM READPROJNAME USING GT_VBAP-AUFNR
                          CHANGING GT_OUTSO-KTEXT
                                   GT_OUTSO-IO_AUART   "ADD BY WANTANEE 20161011
                                   GT_OUTSO-IO_TYPE_TEXT  . "ADD BY WANTANEE 20161011

      ENDIF.

      READ TABLE GT_PRCD_ELEMENTS INTO GW_PRCD_ELEMENTS WITH KEY KNUMV = GT_VBAK-KNUMV
                                               KPOSN = GT_VBAP-POSNR
                                               KSCHL = 'ZD03' BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        GT_OUTSO-KBETR_03 = ABS( GW_PRCD_ELEMENTS-KBETR / 10 ).
      ENDIF.

      READ TABLE GT_PRCD_ELEMENTS INTO GW_PRCD_ELEMENTS WITH KEY KNUMV = GT_VBAK-KNUMV
                                               KPOSN = GT_VBAP-POSNR
                                               KSCHL = 'ZD30' BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        GT_OUTSO-KBETR_30 = ABS( GW_PRCD_ELEMENTS-KBETR / 10 ).
      ENDIF.

      IF  HEAD_BOM = 'X'.
        READ TABLE GT_PRCD_ELEMENTS INTO GW_PRCD_ELEMENTS WITH KEY KNUMV = GT_VBAK-KNUMV
                                                 KPOSN = GW_VBAP-POSNR
                                                 KSCHL = 'ZD03' BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          GT_OUTSO-BOM_CASH_DISCOUNT = ABS( GW_PRCD_ELEMENTS-KBETR / 10 ).
        ENDIF.

        READ TABLE GT_PRCD_ELEMENTS INTO GW_PRCD_ELEMENTS WITH KEY KNUMV = GT_VBAK-KNUMV
                                                 KPOSN = GW_VBAP-POSNR
                                                 KSCHL = 'ZD30' BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          GT_OUTSO-BOM_H_DISCOUNT = ABS( GW_PRCD_ELEMENTS-KBETR / 10 ).
        ENDIF.

      ENDIF.

      GT_OUTSO-AUFNR = GT_VBAP-AUFNR. "IO NUMBER

      GT_OUTSO-VGBEL = GT_VBAP-VGBEL. "REF QT NUMBER
      GT_OUTSO-VGPOS = GT_VBAP-VGPOS. "REF QT ITEM

      GT_OUTSO-VBELN = GT_VBAP-VBELN. "SO NUMBER
      GT_OUTSO-BSTKD = GT_VBAK-BSTNK. "PO NUMBER
      GT_OUTSO-AUDAT = GT_VBAK-AUDAT. "DOCUMENT DATE
      GT_OUTSO-KUNNR = GT_VBAK-KUNNR. "CUSTOMER CODE
      GT_OUTSO-DELI  = GT_VBAP-DELI.  "DELIVERY ORDER

*     CUSTOMER NAME
      PERFORM READCUSTNAME USING GT_VBAK-VBELN
                                 GT_VBAK-KUNNR
                        CHANGING GT_OUTSO-CUSTNAME
                                 GT_OUTSO-ENGNAME.
*     ### ITEM DATA

      GT_OUTSO-PRODH1 = GT_VBAP-PRODH+0(5). "CATEGORY (PH1)
      GT_OUTSO-PRODH2 = GT_VBAP-PRODH+5(3). "CLASS (PH2)
      GT_OUTSO-PRODH3 = GT_VBAP-PRODH+10(8)."SUB-CATEGORY (PH3)
      GT_OUTSO-PRODH  = GT_VBAP-PRODH.

      GT_OUTSO-POSNR = GT_VBAP-POSNR. "ITEM NUMBER
      GT_OUTSO-MATNR = GT_VBAP-MATNR. "MATERIAL
      GT_OUTSO-UEPOS = GT_VBAP-UEPOS. "HIGHER LEVEL ITEM

      IF GT_OUTSO-DELI IS INITIAL.
        GT_OUTSO-YEAR  = GT_VBEP-EDATU+0(4).
        GT_OUTSO-MONTH = GT_VBEP-EDATU+4(2).
        GT_OUTSO-EDATU = GT_VBEP-EDATU.
      ELSE.
        GT_OUTSO-YEAR  = GT_VBAP-EDATU+0(4).
        GT_OUTSO-MONTH = GT_VBAP-EDATU+4(2).
        GT_OUTSO-EDATU = GT_VBAP-EDATU.
      ENDIF.

      IF NOT GT_VBEP-EDATU IS INITIAL.
        CLEAR: LV_WEEK.
        CALL FUNCTION 'DATE_GET_WEEK'
          EXPORTING
            DATE = GT_VBEP-EDATU
          IMPORTING
            WEEK = LV_WEEK.

        IF NOT LV_WEEK IS INITIAL.
          GT_OUTSO-WEEK = LV_WEEK+4(2).
        ENDIF.
      ENDIF.

**     SO QTY
      GT_OUTSO-SOQTY = GT_VBAP-KWMENG.

*     CONFIRM QTY
      PERFORM READCONFQTY USING GT_VBAP-VBELN
                                GT_VBAP-POSNR
                       CHANGING GT_OUTSO-CONFQTY.
*     DO QTY
      PERFORM READDOQTY USING GT_VBAP-VBELN
                              GT_VBAP-POSNR
                              GT_VBAP-MATNR
                     CHANGING GT_OUTSO-DOQTY.
*     BILL QTY
      PERFORM READBILLQTY USING GT_VBAP-VBELN
                                GT_VBAP-POSNR
                                GT_VBAP-MATNR
                       CHANGING GT_OUTSO-BILLQTY.

*     OPEN QTY
      GT_OUTSO-OPQTY =  GT_OUTSO-SOQTY - GT_OUTSO-BILLQTY.  "SFDC NEED SALES QTY INCLUDE DELIVARY

*     COUNT QTY
      IF GT_VBAP-PRODH(8) IN R_PRODH AND HEAD_BOM NE 'X' .
        GT_OUTSO-C_QTY = GT_VBAP-KWMENG - GT_OUTSO-BILLQTY.
      ELSE.
        GT_OUTSO-C_QTY = ''.
      ENDIF.

*     REJECT
      GT_OUTSO-ABGRU = GT_VBAP-ABGRU.
*     UNIT
      GT_OUTSO-VRKME =  GT_VBAP-VRKME.
*     MODEL COST
      PERFORM READMODELCOST USING GT_VBAP-MATNR
                         CHANGING GT_OUTSO-MOCOS.
*     TOTAL COST = MODEL COST * SO QTANTITY
      GT_OUTSO-TOCOS =  GT_OUTSO-MOCOS * GT_OUTSO-SOQTY.
*     NET VALUE
      GT_OUTSO-NETWR = GT_VBAP-NETWR.

*     CURRENCY
      GT_OUTSO-WAERK = GT_VBAK-WAERK.
*     REQ.DELIVERY DATE
      GT_OUTSO-VDATU = GT_VBAK-VDATU.
*     REASON FOR REJECTION
      PERFORM READRESONREJECT USING GT_VBAP-ABGRU
                           CHANGING GT_OUTSO-RESREJ.

      GT_OUTSO-POSEX = GT_VBAP-POSEX. "POITEM ADD BY WANTANEE 20111107

      IF  HEAD_BOM = 'X'.
        PERFORM GET_AMT_MOTHER USING  GT_VBAP-VBELN GT_VBAP-POSNR CHANGING GT_OUTSO-BOM_AMT.
      ENDIF.

      IF GT_VBAP-VGBEL IS INITIAL.
        READ TABLE GT_VBFA_REF_QT INTO WA_VBFA_REF_QT WITH KEY VBELN = GT_VBAP-VBELN.
        IF SY-SUBRC = 0.
          GT_OUTSO-VGBEL = WA_VBFA_REF_QT-VBELV.
        ENDIF.
        READ TABLE GT_VBFA_REF_QT_POS INTO WA_VBFA_REF_QT_POS WITH KEY VBELN = GT_VBAP-VBELN
                                                                       POSNN = GT_VBAP-POSNR.
        IF SY-SUBRC = 0.
          GT_OUTSO-VGPOS = WA_VBFA_REF_QT_POS-POSNV.
        ENDIF.

      ENDIF.

      READ TABLE GT_PRCD_ELEMENTS INTO GW_PRCD_ELEMENTS WITH KEY KNUMV = GT_VBAK-KNUMV
                                                 KPOSN = GT_VBAP-POSNR
                                                 KSCHL = 'ZPR0' BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        GT_OUTSO-ZPR0 = GW_PRCD_ELEMENTS-KBETR.
      ENDIF.
      "END ADD BY WANTANEE 20160513



      GT_OUTSO-Z_TOTAL = GT_OUTSO-SOQTY * GT_OUTSO-ZPR0.
      GT_OUTSO-Z_DISCOUNT = GT_OUTSO-Z_TOTAL - GT_OUTSO-NETWR.
      IF GT_OUTSO-Z_TOTAL GT 0.
        GT_OUTSO-Z_DISCOUNT_PER = ( GT_OUTSO-Z_DISCOUNT / GT_OUTSO-Z_TOTAL ) * 100.
      ENDIF.


      READ TABLE GT_VBKD_TEMP INTO WA_VBKD_TEMP WITH KEY VBELN = GT_OUTSO-VGBEL.
      IF SY-SUBRC EQ 0.
        GT_OUTSO-IHREZ_E = WA_VBKD_TEMP-IHREZ_E.
      ENDIF.

      CLEAR: LV_FISCAL.

      CALL FUNCTION 'DATE_TO_PERIOD_CONVERT'
        EXPORTING
          I_DATE         = GT_OUTSO-EDATU
          I_MONMIT       = 00
          I_PERIV        = 'V3'
        IMPORTING
          E_BUPER        = LV_PERIOD
          E_GJAHR        = LV_FISCAL
        EXCEPTIONS
          INPUT_FALSE    = 1
          T009_NOTFOUND  = 2
          T009B_NOTFOUND = 3.

      GT_OUTSO-Z_FISCAL_YEAR = LV_FISCAL.

     GT_OUTSO-UPMAT = GT_VBAP-UPMAT.
     "ADD BY WANTANEE 20190103
     READ TABLE GT_TVAUT INTO GW_TVAUT WITH KEY AUGRU = GT_VBAK-AUGRU.
          IF SY-SUBRC EQ 0.
             CONCATENATE GW_TVAUT-AUGRU GW_TVAUT-BEZEI INTO GT_OUTSO-AUGRU_TEXT SEPARATED BY '-'.
          ENDIF.
     GT_OUTSO-ERNAM = GT_VBAK-ERNAM.
     "ADD BY WANTANEE 20190103
     "ADD BY WANTANEE 20200115
          IF GT_VBAP-ZTERM IS NOT INITIAL.
             GT_OUTSO-ZTERM = GT_VBAP-ZTERM.
          ELSE.
             READ TABLE GT_VBAP[] INTO GWB_VBAP WITH KEY VBELN = GT_VBAP-VBELN.
                          IF SY-SUBRC NE 0.
                               GT_OUTSO-ZTERM = GWB_VBAP-ZTERM.
                          ENDIF.

*
          ENDIF.
           "END REMOVE BY WANTANEE 20200117
                   IF GT_VBAP-KOWRR EQ 'X'.
                       "ADD BY WANTANEE 20200115
                         READ TABLE GT_VBAP[] INTO GWA_VBAP WITH KEY VBELN = GT_VBAP-VBELN
                                                                     UEPOS = GT_VBAP-POSNR
                                                                     UPMAT = GT_VBAP-MATNR.
                          IF SY-SUBRC NE 0.
                               GT_OUTSO-OPQTY = 0.
                          ENDIF.
                       "ADD BY WANTANEE 20200115


                     ENDIF.

      IF GT_OUTSO-OPQTY GT 0.


         APPEND: GT_OUTSO. ", IT_OUTSO.


            IF LV_CHECK_SEND_MAIL_VRV EQ 'X'.
                  IF GT_OUTSO-PRODH1+0(3) EQ 'VRV' AND
                      ( GT_OUTSO-EDATU GE GV_MONTH_FIRST_VRV AND GT_OUTSO-EDATU LE GV_MONTH_END_VRV )
                       AND ( GT_OUTSO-RESREJ IS INITIAL ) .



                       CLEAR: "GW_SEND_MAIL_VRV_CAL,
                              LV_FIRST_MONTH.

                                IF GT_OUTSO-CHK_BOM NE 'X'.

                                  ENDIF.
                    ENDIF.

           ENDIF.




         "CH21 END ADD BY WANTANEE 20210421
      ENDIF.
    ENDIF.
  ENDLOOP.
  CLEAR GT_OUTSO.


ENDFORM.                    " PROCESS_SO
*&---------------------------------------------------------------------*
*&      FORM  READCONFQTY
*&---------------------------------------------------------------------*
FORM READCONFQTY  USING    P_VBELN
                           P_POSNR
                  CHANGING P_CONFQTY.


  DATA: LWA_VBEP TYPE GY_VBEP.

  LOOP AT GT_VBEP INTO LWA_VBEP WHERE VBELN = P_VBELN
                                  AND POSNR = P_POSNR.
    P_CONFQTY = P_CONFQTY + LWA_VBEP-BMENG.
    CLEAR: LWA_VBEP.
  ENDLOOP.
*>>>EOI                                                    "ISS20140304+

ENDFORM.                    " READCONFQTY
*&---------------------------------------------------------------------*
*&      FORM  READDOQTY
*&---------------------------------------------------------------------*
FORM READDOQTY  USING    P_VBELN
                         P_POSNR
                         P_MATNR
                CHANGING P_DOQTY.



  LOOP AT GT_VBFA WHERE VBELV = P_VBELN
                    AND POSNV = P_POSNR
                    AND VBTYP_N = 'J'.
    P_DOQTY = P_DOQTY + GT_VBFA-RFMNG.
    CLEAR: GT_VBFA.
  ENDLOOP.

ENDFORM.                    " READDOQTY
*&---------------------------------------------------------------------*
*&      FORM  READBILLQTY
*&---------------------------------------------------------------------*
FORM READBILLQTY  USING  P_VBELN
                         P_POSNR
                         P_MATNR
                CHANGING P_BILLQTY.

  LOOP AT GT_VBFA WHERE VBELV = P_VBELN
                    AND POSNV = P_POSNR
                    AND VBTYP_N = 'M'.
    P_BILLQTY = P_BILLQTY + GT_VBFA-RFMNG.
    CLEAR: GT_VBFA.
  ENDLOOP.

ENDFORM.                    " READBILLQTY
*&--------------------------------------------------------------------*
*&      FORM  BUILD_VARIANT
*&--------------------------------------------------------------------*
FORM BUILD_VARIANT CHANGING LP_VARIA      TYPE SLIS_VARI
                            LWA_S_VARIANT TYPE DISVARIANT
                            LWA_S_VAR_USR TYPE DISVARIANT.

  DATA: LTP_EXIT(1)   TYPE C,
        CO_MSGY_INF  TYPE SYMSGTY    VALUE 'I'.

  PERFORM INIT_VARIANT USING SY-REPID
                    CHANGING LWA_S_VARIANT.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      IS_VARIANT    = LWA_S_VARIANT
      I_SAVE        = 'A'
    IMPORTING
      E_EXIT        = LTP_EXIT
      ES_VARIANT    = LWA_S_VAR_USR
    EXCEPTIONS
      NOT_FOUND     = 1
      PROGRAM_ERROR = 2
      OTHERS        = 3.

  CASE SY-SUBRC.
    WHEN 0.
      IF LTP_EXIT = ABAP_FALSE.
        LP_VARIA = LWA_S_VAR_USR-VARIANT.
        GWA_VARIANT = LWA_S_VAR_USR.
      ENDIF.
    WHEN 1.
      MESSAGE ID SY-MSGID TYPE CO_MSGY_INF  NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    WHEN 2.
      MESSAGE ID SY-MSGID TYPE CO_MSGY_INF  NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    WHEN 3.
      MESSAGE ID SY-MSGID TYPE CO_MSGY_INF  NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDCASE.
ENDFORM.                    "BUILD_VARIANT
*&--------------------------------------------------------------------*
*&      FORM  INIT_VARIANT
*&--------------------------------------------------------------------*
FORM INIT_VARIANT USING    LP_REPID_THIS TYPE SYREPID
                  CHANGING LWA_S_VARIANT  TYPE DISVARIANT.

  CLEAR LWA_S_VARIANT.
  LWA_S_VARIANT-REPORT = LP_REPID_THIS.

ENDFORM.                               " INIT_VARIANT
*&--------------------------------------------------------------------*
*&      FORM  DISPLAY_ALV
*&--------------------------------------------------------------------*
FORM DISPLAY_ALV.

  PERFORM BUILD_FIELD_CAT USING GT_FIELDCAT[].
  PERFORM BUILD_EVENTTAB  USING GT_EVENTS[].
  PERFORM BUILD_SORTINFO  USING GT_SORT[].
  PERFORM BUILD_LAYOUT    USING GWA_LAYOUT.



  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_BUFFER_ACTIVE    = ' '
      I_CALLBACK_PROGRAM = GV_REPID
      IS_LAYOUT          = GWA_LAYOUT
      IT_FIELDCAT        = GT_FIELDCAT[]
      IT_SORT            = GT_SORT[]
      IT_EVENTS          = GT_EVENTS
      IS_VARIANT         = GWA_VARIANT
      I_SAVE             = 'A'
    TABLES
      T_OUTTAB           = GT_OUTSO
    EXCEPTIONS
      PROGRAM_ERROR      = 1
      OTHERS             = 2.
*  ENDIF.

ENDFORM.                    "DISPLAY_ALV
*&---------------------------------------------------------------------*
*&      FORM  BUILD_FIELD_CAT
*&---------------------------------------------------------------------*
FORM BUILD_FIELD_CAT USING LT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.

  DATA: LV_TEXTL TYPE DD03P-SCRTEXT_L,
        LV_TEXTM TYPE DD03P-SCRTEXT_M,
        LV_TEXTS TYPE DD03P-SCRTEXT_S.

* 1 YEAR
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'YEAR'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'YEAR' 'YEAR' ' ' 'X' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 2 MONTH
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'MONTH'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'MONTH' 'MONTH' ' ' 'X ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 3 WEEK
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'WEEK'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'WEEK' 'WEEK' ' ' 'X ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 1 R.YEAR
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'R.YEAR'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'R_YEAR' 'YEAR' ' ' 'X' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 2 R.MONTH
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'R.MONTH'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'R_MONTH' 'MONTH' ' ' 'X ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 4 DATE
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'FIRST.DELV.DATE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'EDATU' 'EDATU' 'VBEP' ' ' '' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 5
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DIST.CHANNEL'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VTWEG' 'VTWEG' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 6
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DIST.CHANNEL NAME'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VTEXT' 'VTEXT' 'TVTWT' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 7
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SALES OFFICE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VKBUR' 'VKBUR' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 8
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SALES OFFICE NAME'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'SALESOFF' 'BEZEI' 'TVKBT' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 9
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SALES GROUP'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VKGRP' 'VKGRP' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 10
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SALES GROUP NAME'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'SALESGRP' 'BEZEI' 'TVGRT' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

*
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SALES CODE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'PERNR' 'PERNR' 'PA0001' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 11
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SALES NAME'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'SNAME' ' ' ' ' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 13
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PROJECT NAME'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'PROJT' ' ' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 14
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'IO NUMBER'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'AUFNR' 'AUFNR' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 15
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'REF. QT NO.'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
      USING  'VGBEL' 'VGBEL' 'VBAP' ' ' ' ' ' ' ' '
             'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 16
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SO NUMBER'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VBELN' 'VBELN' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 17
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DOC. DATE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'AUDAT' 'AUDAT' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 18
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PO NO.'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'BSTKD' 'BSTKD' 'VBKD' '  ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 19
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CUST. CODE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'KUNNR' 'KUNNR' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 20
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CUSTOMER NAME(TH)'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'CUSTNAME' ' ' ' ' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
*
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CUSTOMER NAME(EN)'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'ENGNAME' ' ' ' ' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 21
***    LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CATEGORY (PH1)'. "CHANG C1-28042010
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PH1'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'PRODH1' 'PRODH' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 22
***    LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CLASS (PH2)'. "CHANG C1-28042010
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PH2'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'PRODH2' 'PRODH' 'VBAP' '  ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 23
***    LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SUB-CATEGORY (PH3)'. "CHANG C1-28042010
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PH3'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'PRODH3' 'PRODH' 'VBAP' '  ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

*
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PRODUCT HIERARCHY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'PRODH' 'PRODH' 'VBAP' '  ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 24
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'ITEM NO.'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'POSNR' 'POSNR' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 25
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'MATERIAL'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'MATNR' 'MATNR' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 26
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'HIGHER LEVEL ITEM'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'UEPOS' 'UEPOS' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 27
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'SO QTY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'SOQTY' 'KWMENG' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 28
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CONFIRM QTY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'CONFQTY' 'KWMENG' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 29
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DO QTY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'DOQTY' 'KWMENG' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 30
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'BILL QTY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'BILLQTY' 'KWMENG' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 31
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'OPEN QTY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'OPQTY' 'KWMENG' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* ADD COUNT QTY. FOR C1-28042010
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'COUNT QTY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'C_QTY' 'KWMENG' 'VBAP' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 32
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'UNIT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
      USING  'VRKME' 'VRKME' 'VBAP' ' ' ' ' ' ' ' '
             'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 35
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'NET VALUE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
      USING  'NETWR' 'NETWR' 'VBAP' ' ' ' ' ' ' ' '
             'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 36
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CURR'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'WAERK' 'WAERK' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 37
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'REQ.DELI. DATE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VDATU' 'VDATU' 'VBAK' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

* 38
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'REASON FOR REJECTION'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
      USING  'RESREJ' ' ' ' ' ' ' ' ' ' ' ' '
             'M' LV_TEXTL LV_TEXTM LV_TEXTS.
*ADD BY WANTANEE 20111006
* 41
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'PAYMENT TERM'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
      USING  'ZTERM' 'ZTERM' 'VBAP' ' ' ' ' ' ' ' '
             'M' LV_TEXTL LV_TEXTM LV_TEXTS.
*END ADD BY WANTANEE 20111006
*ADD BY WANTANEE 20111107
* 42
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'NOT CHANGE'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
      USING  'POSEX' 'POSEX' 'VBAP' ' ' ' ' ' ' ' '
             'M' LV_TEXTL LV_TEXTM LV_TEXTS.
*END ADD BY WANTANEE 20111107
*<<< WERATHEP T41K913424
* 43
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CASH DISCOUNT %'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'KBETR_03' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 44
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'HEADER DISCOUNT %'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'KBETR_30' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
*>>> WERATHEP T41K913424

*ADD BY WANTANEE 20120614

* 45
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'BOM AMOUNT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'BOM_AMT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 46
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'BOM CASH DISCOUNT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'BOM_CASH_DISCOUNT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 47
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'BOM HEADER DISCOUNT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'BOM_H_DISCOUNT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
*END  ADD BY WANTANEE 20120614
  "ADD BY WANTANEE 20150728
* 47
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'LAND NO'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'LAND_NO' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.
* 47
  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DO NUMBER'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'DELI' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'ZPR0 AMOUNT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'ZPR0' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'TOTAL AMT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'Z_TOTAL' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DISCOUNT'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'Z_DISCOUNT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'DISCOUNT%'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'Z_DISCOUNT_PER' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'FISCAL YEAR'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'Z_FISCAL_YEAR' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'INQUIRY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'IHREZ_E' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'IO TYPE '.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'IO_AUART' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'APPLICATION'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'IO_TYPE_TEXT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.


  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'IO DESCRIPTION'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'KTEXT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

   LV_TEXTS = LV_TEXTM = LV_TEXTL = 'ORDER REASON'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'AUGRU_TEXT' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

  LV_TEXTS = LV_TEXTM = LV_TEXTL = 'CREATE BY'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'ERNAM' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

   LV_TEXTS = LV_TEXTM = LV_TEXTL = 'REMARK SPA'.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'SPA_AGING' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.

   LV_TEXTS = LV_TEXTM = LV_TEXTL = 'QT ITEM REF. '.
  PERFORM APPEND_FIELD_CAT TABLES LT_FIELDCAT[]
    USING  'VGPOS' '' '' ' ' ' ' ' ' ' '
           'M' LV_TEXTL LV_TEXTM LV_TEXTS.


ENDFORM.                    " BUILD_FIELD_CAT
*---------------------------------------------------------------------*
*       FORM BUILD_EVENTTAB                                           *
*---------------------------------------------------------------------*
FORM BUILD_EVENTTAB USING LT_EVENTS TYPE SLIS_T_EVENT.

  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.

  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.

* EVENT - TOP_OF_PAGE
  READ TABLE LT_EVENTS WITH KEY NAME =  SLIS_EV_TOP_OF_PAGE
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_TOP_OF_PAGE TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.

* EVENT - USER_COMMAND
  READ TABLE LT_EVENTS WITH KEY NAME =  SLIS_EV_USER_COMMAND
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_USER_COMMAND TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
*

ENDFORM.                    "BUILD_EVENTTAB
*&---------------------------------------------------------------------*
*&      FORM  APPEND_FIELD_CAT
*&---------------------------------------------------------------------*
FORM APPEND_FIELD_CAT TABLES LT_FIELDCAT      TYPE SLIS_T_FIELDCAT_ALV
                      USING  LP_FIELDNAME     TYPE SLIS_FIELDNAME
                             LP_REF_FIELDNAME TYPE DD03P-FIELDNAME
                             LP_REF_TABNAME   TYPE DD03P-TABNAME
                             LP_KEY
                             LP_DO_SUM
                             LP_NO_SIGN
                             LP_NO_ZERO
*                            LP_OUTPUTLEN LIKE DD03P-OUTPUTLEN
                             LP_DDICTXT
                             LP_SELTEXT_L TYPE DD03P-SCRTEXT_L
                             LP_SELTEXT_M TYPE DD03P-SCRTEXT_M
                             LP_SELTEXT_S TYPE DD03P-SCRTEXT_S.

  DATA LWA_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

  CLEAR LWA_FIELDCAT.
  LWA_FIELDCAT-FIELDNAME      = LP_FIELDNAME.
  LWA_FIELDCAT-KEY            = LP_KEY.
  LWA_FIELDCAT-NO_SIGN        = LP_NO_SIGN.
  LWA_FIELDCAT-NO_ZERO        = LP_NO_ZERO.   " WRITE NO-ZERO
  LWA_FIELDCAT-DO_SUM         = LP_DO_SUM.    " SUM UP
* LWA_FIELDCAT-OUTPUTLEN      = LP_OUTPUTLEN.
  LWA_FIELDCAT-SELTEXT_L      = LP_SELTEXT_L. " LONG KEY WORD
  LWA_FIELDCAT-SELTEXT_M      = LP_SELTEXT_M. " MIDDLE KEY WORD
  LWA_FIELDCAT-SELTEXT_S      = LP_SELTEXT_S. " SHORT KEY WORD
  LWA_FIELDCAT-DDICTXT        = LP_DDICTXT.   " (S)HORT (M)IDDLE (L)ONG
  LWA_FIELDCAT-REF_FIELDNAME  = LP_REF_FIELDNAME.
  LWA_FIELDCAT-REF_TABNAME    = LP_REF_TABNAME.
  APPEND LWA_FIELDCAT TO LT_FIELDCAT.


ENDFORM.                    " APPEND_FIELD_CAT
*---------------------------------------------------------------------*
*       FORM BUILD_LAYOUT                                             *
*---------------------------------------------------------------------*
FORM BUILD_LAYOUT USING GS_LAYOUT TYPE SLIS_LAYOUT_ALV.

  GS_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.


ENDFORM.                    "BUILD_LAYOUT
*&---------------------------------------------------------------------*
*&      FORM  SORTINFO_INIT
*&---------------------------------------------------------------------*
FORM BUILD_SORTINFO USING LT_SORT TYPE SLIS_T_SORTINFO_ALV.

*  DATA: LWA_SORTINFO TYPE SLIS_SORTINFO_ALV.

*  PERFORM ADD_GROUP TABLES LT_SORT[]
*                    USING '1' 'YEAR' 'GT_OUTQT' ' ' ' '
*                          '1' 'X' ' ' ' ' ' '.

ENDFORM.                    " SORTINFO_INIT
*&---------------------------------------------------------------------*
*&      FORM  ADD_GROUP
*&---------------------------------------------------------------------*
FORM ADD_GROUP  TABLES  LT_SORTINFO TYPE SLIS_T_SORTINFO_ALV
                USING   LP_SPOS TYPE ALVDYNP-SORTPOS
                        LP_FIELDNAME TYPE SLIS_FIELDNAME
                        LP_TABNAME TYPE SLIS_FIELDNAME
                        LP_UP TYPE ALVDYNP-SORTUP
                        LP_DOWN TYPE ALVDYNP-SORTDOWN
                        LP_GROUP TYPE ALVDYNP-GROUPLEVEL
                        LP_SUBTOT TYPE ALVDYNP-SUBTOTALS
                        LP_COMP
                        LP_EXPA
                        LP_OBLIGATORY.

  DATA: LWA_SORTINFO  TYPE SLIS_SORTINFO_ALV .

  LWA_SORTINFO-SPOS       = LP_SPOS.
  LWA_SORTINFO-FIELDNAME  = LP_FIELDNAME.
  LWA_SORTINFO-TABNAME    = LP_TABNAME.
  LWA_SORTINFO-UP         = LP_UP.
  LWA_SORTINFO-DOWN       = LP_DOWN.
  LWA_SORTINFO-GROUP      = LP_GROUP.
  LWA_SORTINFO-SUBTOT     = LP_SUBTOT.
  LWA_SORTINFO-COMP       = LP_COMP.
  LWA_SORTINFO-EXPA       = LP_EXPA.
  LWA_SORTINFO-OBLIGATORY = LP_OBLIGATORY.

  APPEND LWA_SORTINFO TO LT_SORTINFO . CLEAR LWA_SORTINFO.

ENDFORM.                    " ADD_GROUP
*&---------------------------------------------------------------------*
*&      FORM  TOP_OF_PAGE
*&---------------------------------------------------------------------*
FORM TOP_OF_PAGE .

  DATA: LV_DATETIME(20) TYPE C,
        LV_TIME(8) TYPE C,
        LV_COMTEXT TYPE T001-BUTXT ,
        LV_COM(30) TYPE C .

  REFRESH GT_LIST_TOP.
  CLEAR GT_LIST_TOP.

* TITLE **
  GT_LIST_TOP-TYP  = 'H'.

  IF P_OPEN = 'X'.
    GT_LIST_TOP-INFO = 'SFDC : OUTSTANDING ORDER'.
  ELSEIF P_ALL = 'X'.
    GT_LIST_TOP-INFO = 'SALES ORDER REPORT (ALL)'.
  ENDIF.

  APPEND GT_LIST_TOP.
  CLEAR GT_LIST_TOP.

* REPORT DATE/TIME **
  GT_LIST_TOP-TYP  = 'S'.
  GT_LIST_TOP-KEY  = 'REPORT DATE/TIME'.
  WRITE SY-DATUM DD/MM/YYYY TO LV_DATETIME.
  WRITE SY-UZEIT TO LV_TIME.
  CONCATENATE LV_DATETIME '/' LV_TIME INTO LV_DATETIME.
  GT_LIST_TOP-INFO = LV_DATETIME.
  APPEND GT_LIST_TOP.
  CLEAR GT_LIST_TOP.

* USER NAME **
  GT_LIST_TOP-TYP  = 'S'.
  GT_LIST_TOP-KEY  = 'USER NAME'.
  GT_LIST_TOP-INFO = SY-UNAME.
  APPEND GT_LIST_TOP.
  CLEAR GT_LIST_TOP.

* FUNCTION **
  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = GT_LIST_TOP[].

ENDFORM.                    " TOP_OF_PAGE
*&--------------------------------------------------------------------*
*&      FORM  USER_COMMAND
*&--------------------------------------------------------------------*
FORM USER_COMMAND USING LP_UCOMM      TYPE SY-UCOMM
                        LWA_SELFIELD  TYPE SLIS_SELFIELD.


  DATA: LWA_SO TYPE GY_OUTSO.                             "ISS20140304+

  CASE LP_UCOMM.
    WHEN 'DISP' OR '&IC1'.
      READ TABLE GT_OUTSO INTO LWA_SO INDEX LWA_SELFIELD-TABINDEX.
      IF LWA_SO-VBELN NE ''.
        SET PARAMETER ID 'AUN' FIELD LWA_SO-VBELN.
        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
      ENDIF.

  ENDCASE.
ENDFORM.                    "USER_COMMAND
*
*&---------------------------------------------------------------------*
*&      FORM  SUMMARY AMT FOR MOTHER
*&---------------------------------------------------------------------*
FORM GET_AMT_MOTHER USING  P_VBELN TYPE VBAK-VBELN
                           P_POSNR TYPE VBAP-POSNR
                  CHANGING VALUE(P_AMT_MOTHER) TYPE VBAP-NETWR.


  DATA: LV_CHECK TYPE C,
        LV_SUM_AMT TYPE VBAP-NETWR,
        LV_VAT_AMT TYPE VBAP-MWSBP.  "ADD BY WANTANEE 20111005
  CLEAR: LV_CHECK,P_AMT_MOTHER.
  DATA: WA_SALE TYPE GY_VBAP.

  LOOP AT GT_VBAP INTO WA_SALE WHERE VBELN EQ P_VBELN  AND UEPOS EQ P_POSNR.
    LV_CHECK = 'X'.
    LV_SUM_AMT = LV_SUM_AMT + WA_SALE-NETWR.
  ENDLOOP.

  IF LV_CHECK = 'X'.
    P_AMT_MOTHER = LV_SUM_AMT.
  ELSE.
    READ TABLE GT_VBAP INTO WA_SALE WITH KEY VBELN = P_VBELN
                                             POSNR = P_POSNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      P_AMT_MOTHER = WA_SALE-NETWR.
    ENDIF.
  ENDIF.


ENDFORM. "
*&---------------------------------------------------------------------*
*&      FORM  READ_R_DATE
*&---------------------------------------------------------------------*
*       TEXT
*----------------------------------------------------------------------*
*      <--P_GT_OUTQT_R_YEAR  TEXT
*      <--P_GT_OUTQT_R_MONTH  TEXT
*----------------------------------------------------------------------*
FORM READ_R_DATE  CHANGING P_R_YEAR
                           P_R_MONTH.
  P_R_MONTH = GT_VBAK-VDATU+4(2).
  P_R_YEAR  = GT_VBAK-VDATU+0(4).

ENDFORM.                    " READ_R_DATE
