*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS LCL_DATA DEFINITION.
  PUBLIC SECTION.
    METHODS :
      CONSTRUCTOR.
    CLASS-METHODS :
      CHECK_SDS        IMPORTING LV_MANDT TYPE SY-MANDT
                       RETURNING VALUE(R) LIKE ABAP_TRUE,
      CHECK_UNRELEASE_PO IMPORTING I_DATA   TYPE REF TO IF_PURCHASE_ORDER_MM
                         RETURNING VALUE(R) TYPE CHAR1,
      UNRELESE_PO IMPORTING I_PO     TYPE EKKO-EBELN
                  RETURNING VALUE(R) TYPE CHAR1,
      CHECK_APPROVE_PO IMPORTING I_PO     TYPE EKKO-EBELN
                       RETURNING VALUE(R) TYPE CHAR1.

    CONSTANTS : BEGIN OF LC_CON,
                  E TYPE C LENGTH 1 VALUE 'E',
                  S TYPE C LENGTH 1 VALUE 'S',
                END OF LC_CON.
ENDCLASS.
CLASS LCL_DATA IMPLEMENTATION.
  METHOD CONSTRUCTOR.

  ENDMETHOD.
  METHOD CHECK_SDS.
    DATA: BEGIN OF LS_GEN_C,
            REPID        TYPE  ZSDSCAC001-REPID,
            PARAM        TYPE  ZSDSCAC001-PARAM,
            PARAM_EXT    TYPE  ZSDSCAC001-PARAM_EXT,
            SEQUENCE     TYPE  ZSDSCAC001-SEQUENCE,
            PARAM_SIGN   TYPE  ZSDSCAC001-PARAM_SIGN,
            PARAM_OPTION TYPE  ZSDSCAC001-PARAM_OPTION,
            VALUE_LOW    TYPE  ZSDSCAC001-VALUE_LOW,
            VALUE_HIGH   TYPE  ZSDSCAC001-VALUE_HIGH,
            VDESC        TYPE  ZSDSCAC001-VDESC,
          END OF LS_GEN_C .
    DATA: LT_GEN_C  LIKE STANDARD TABLE OF LS_GEN_C .

    DATA : IV_REPID TYPE PROGRAMM,
           LT_PARAM TYPE RANGE OF ZSDSCAC001-PARAM,
           LT_EXT   TYPE RANGE OF ZSDSCAC001-PARAM_EXT.

    DATA : LS_PARAM LIKE LINE OF LT_PARAM,
           LS_EXT   LIKE LINE OF LT_EXT.

    CONSTANTS : BEGIN OF LC_CON,
                  SIGN    TYPE C LENGTH 1  VALUE 'I',
                  OPTION  TYPE C LENGTH 2  VALUE 'EQ',
                  VALUE   TYPE C LENGTH 10 VALUE 'SDS_CLIENT',
                  PROGRAM TYPE C LENGTH 14 VALUE 'SDS_PROGRAM',
                END OF LC_CON.

    CLEAR : LT_GEN_C,LT_PARAM,LS_PARAM.

    IV_REPID = LC_CON-PROGRAM.

    LS_PARAM-SIGN   = LC_CON-SIGN.
    LS_PARAM-OPTION = LC_CON-OPTION.
    LS_PARAM-LOW    = LC_CON-VALUE.
    APPEND LS_PARAM TO LT_PARAM.

    ZCL_SDSCA_UTILITIES=>GET_GEN_C( EXPORTING IF_REPID  = IV_REPID
                                              IRT_PARAM = LT_PARAM
                                              IRT_EXT   = LT_EXT
                                    IMPORTING ET_GEN_C  = LT_GEN_C ).

    IF LT_GEN_C IS NOT INITIAL.
      LOOP AT LT_GEN_C INTO LS_GEN_C WHERE VALUE_LOW EQ SY-MANDT.
        R = ABAP_TRUE.
      ENDLOOP.
      IF SY-SUBRC NE 0.
        R = ABAP_FALSE.
      ENDIF.
    ELSE.
      R = ABAP_FALSE.
    ENDIF.

  ENDMETHOD.
  METHOD CHECK_UNRELEASE_PO.
    DATA: LS_POHEADER TYPE MEPOHEADER.

    CONSTANTS : BEGIN OF LC_CON,
                  R TYPE C LENGTH 1 VALUE 'R',
                  G TYPE C LENGTH 1 VALUE 'G',
                END OF LC_CON.

    CALL METHOD I_DATA->GET_DATA
      RECEIVING
        RE_DATA = LS_POHEADER.

    IF LS_POHEADER-FRGKE EQ LC_CON-G OR
       LS_POHEADER-FRGKE EQ LC_CON-R.
      SELECT COUNT( * )
        FROM EKKO
        WHERE EBELN EQ LS_POHEADER-EBELN
          AND BUKRS EQ LS_POHEADER-BUKRS
          AND ZTERM EQ LS_POHEADER-ZTERM.
      IF SY-SUBRC NE 0.
        R = ABAP_TRUE.
      ELSE.
        CLEAR : R.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD UNRELESE_PO.
    CONSTANTS : LC_SAVE TYPE C LENGTH 3 VALUE 'SUB'.

    SELECT *
      FROM ZSDSMMT002
      INTO TABLE @DATA(LT_DATA)
      WHERE EBELN EQ @I_PO.

    SORT LT_DATA BY RUNNG DESCENDING.

    LOOP AT LT_DATA ASSIGNING FIELD-SYMBOL(<LS_DATA>).
      <LS_DATA>-FLAGD = SPACE.
      IF <LS_DATA>-STATU EQ LC_SAVE.
        EXIT.
      ENDIF.
    ENDLOOP.

    MODIFY ZSDSMMT002 FROM TABLE LT_DATA.

*    DATA : LV_PURCHASEORDER TYPE  BAPIMMPARA-PO_NUMBER,
*           LV_PO_REL_CODE   TYPE  BAPIMMPARA-PO_REL_COD.
*
*    DATA : BEGIN OF LS_EKKO,
*             EBELN TYPE EKKO-EBELN,
*           END OF LS_EKKO.
*
*    DATA : BEGIN OF LS_T16FS,
*             FRGC1 TYPE T16FS-FRGC1,
*           END OF LS_T16FS.
*
*    SELECT SINGLE FRGC1
*      FROM EKKO
*      INNER JOIN T16FS ON EKKO~FRGGR EQ T16FS~FRGGR AND
*                          EKKO~FRGSX EQ T16FS~FRGSX
*      INTO  LS_T16FS-FRGC1
*      WHERE EBELN EQ I_PO.
*
*    LV_PURCHASEORDER  = I_PO.
*    LV_PO_REL_CODE    = LS_T16FS-FRGC1.
*
*    CALL FUNCTION 'BAPI_PO_RESET_RELEASE'
*      EXPORTING
*        PURCHASEORDER            = LV_PURCHASEORDER
*        PO_REL_CODE              = LV_PO_REL_CODE
*      EXCEPTIONS
*        AUTHORITY_CHECK_FAIL     = 1
*        DOCUMENT_NOT_FOUND       = 2
*        ENQUEUE_FAIL             = 3
*        PREREQUISITE_FAIL        = 4
*        RELEASE_ALREADY_POSTED   = 5
*        RESPONSIBILITY_FAIL      = 6
*        NO_RELEASE_ALREADY       = 7
*        NO_NEW_RELEASE_INDICATOR = 8
*        OTHERS                   = 9.
*    IF SY-SUBRC <> 0.
*      R = LC_CON-E.
*    ELSE.
*      R = LC_CON-S.
*    ENDIF.
  ENDMETHOD.
  METHOD CHECK_APPROVE_PO.
    CONSTANTS : LC_SUB TYPE C LENGTH 3 VALUE 'SUB'.
    SELECT COUNT( * )
      FROM ZSDSMMT002
      WHERE EBELN EQ I_PO
        AND STATU EQ LC_SUB
        AND FLAGD EQ SPACE.
    IF SY-SUBRC EQ 0.
      R = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
